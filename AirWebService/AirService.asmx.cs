using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Reflection;
using System.Text.RegularExpressions;
using System.Web;
using System.Web.Script.Services;
using System.Web.Services;
using System.Xml;
using AirWebService.com.modetour.webservice.Air.Mode;
using Newtonsoft.Json.Linq;

namespace AirWebService
{
	/// <summary>
	/// 실시간 항공(해외) 예약 관리를 위한 웹서비스(통합용)
	/// </summary>
	[WebService(Namespace = "http://airservice2.modetour.com/")]
	[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
	[ToolboxItem(false)]
	[ScriptService]
	public class AirService : System.Web.Services.WebService
	{
		Common cm;
		ModeConfig mc;
		AmadeusAirService amd;
		AbacusAirService aas;
        SabreAirService sas;
        GalileoAirService gas;
        TopasAirService tas;
        Mode mod;
        AES256Cipher aes;
        LogSave log;
		HttpContext hcc;
		XmlNode RunTime;
		XmlNode RunTimeService;
        
		public AirService()
		{
			cm = new Common();
			mc = new ModeConfig();
			amd = new AmadeusAirService();
			aas = new AbacusAirService();
            sas = new SabreAirService();
            gas = new GalileoAirService();
            tas = new TopasAirService();
            mod = new Mode();
            aes = new AES256Cipher();
            log = new LogSave();
			hcc = HttpContext.Current;

			//실행시간 체크용
			XmlDocument XmlCheck = new XmlDocument();
			XmlCheck.Load(mc.XmlFullPath("CheckRunTime"));
			RunTime = XmlCheck.SelectSingleNode("ResponseDetails/runTime");
			RunTimeService = RunTime.SelectSingleNode("service");
		}

        #region "임시 세이버 개발용"

        /// <summary>
        /// 세이버 발권 개발용
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <returns></returns>
        //[WebMethod(Description = "세이버 발권 개발용")]
        public XmlElement AAAAAAAASabreTicketing()
        {
            int OID = 39472529;
            int PID = 5820761;
            string GUID = cm.GetGUID;
            
            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");
                XmlDocument FareXml = null;
                string ValidatingCarrier = string.Empty;

                if (XmlDBBooking.SelectNodes("item3/요금XML").Count > 0)
                {
                    FareXml = new XmlDocument();
                    FareXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                    ValidatingCarrier = (FareXml.SelectNodes("priceIndex/summary").Count > 0) ? FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("pvc").InnerText : XmlDBBooking.SelectSingleNode("item3/마케팅항공사").InnerText;
                }

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;

                    if (String.Compare(GDS, "Abacus", true).Equals(0))
                    {
                        string CID = String.Empty;
                        string STK = String.Empty;

                        try
                        {
                            //결과
                            XmlElement ResXml;

                            //네임스페이스
                            XmlNamespaceManager xnMgr;

                            //### 01.세션생성 #####
                            XmlElement Session = aas.SessionCreate();
                            CID = Session.ChildNodes[0].InnerText;
                            STK = Session.ChildNodes[1].InnerText;

                            //### 02.PNR조회(AbacusReadXml) #####
                            ResXml = aas.GetReservationXml(CID, STK, aas.GetReservationRQ(XmlDBBooking.SelectSingleNode("item3/GDS주문번호").InnerText));
                            cm.XmlFileSave(ResXml, mc.Name, "GetReservationXml", "N", String.Concat(GUID, "-02"));

                            xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            xnMgr.AddNamespace("stl19", AbacusConfig.NamespaceURL("GetReservation_stl19"));
                            xnMgr.AddNamespace("or114", AbacusConfig.NamespaceURL("GetReservation_or114"));

                            //오류 결과일 경우 예외 처리
                            if (ResXml.SelectNodes("stl19:Errors", xnMgr).Count > 0)
                            {
                                if (ResXml.SelectSingleNode("stl19:Errors/stl19:Error/stl19:Message", xnMgr).InnerText.Trim().Equals("NAK3 - UPDATED PNR CURRENTLY IN AAA - FINISH OR IGNORE"))
                                {
                                    aas.AbacusCommand(CID, STK, "E", String.Concat(GUID, "-03"));
                                    ResXml = aas.GetReservationXml(CID, STK, aas.TravelItineraryReadRQ(XmlDBBooking.SelectSingleNode("item3/GDS주문번호").InnerText));
                                    cm.XmlFileSave(ResXml, mc.Name, "GetReservationXml", "N", String.Concat(GUID, "-03"));
                                }
                            }

                            ////### 03.운임Pricing(AbacusAirPriceRS) #####
                            //ResXml = aas.AbacusAirPriceRS(CID, STK, String.Concat(GUID, "-04"));

                            //xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            //xnMgr.AddNamespace("m", AbacusConfig.NamespaceURL("OTA_AirPriceLLS"));
                            //xnMgr.AddNamespace("stl", "http://services.sabre.com/STL/v01");

                            ////오류 결과일 경우 예외 처리
                            //if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
                            //{
                            //    throw new Exception(ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText);
                            //}

                            //### 04.세션종료 #####
                            aas.SessionClose(CID, STK);
                            CID = "";
                            STK = "";

                            //return ToModeSearchBookingPriceAbacus(ResXml, xnMgr, ((FareXml != null && FareXml.SelectNodes("priceIndex/promotionInfo").Count > 0) ? FareXml.SelectSingleNode("priceIndex/promotionInfo/item") : null), XmlDBBooking.SelectNodes("item4"));
                            return ResXml;
                        }
                        catch (Exception ex)
                        {
                            //### 세션종료 #####
                            if (!String.IsNullOrWhiteSpace(CID))
                                aas.SessionClose(CID, STK);

                            throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, 0);
                        }
                    }
                    else
                        throw new Exception("PNR 운임 재계산이 지원되지 않는 GDS입니다.");
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);

                XmlDocument XmlErr = new XmlDocument();
                XmlErr.LoadXml(String.Format("<result><statusInfo><status>FAILE</status><returnMessage><![CDATA[{0}]]></returnMessage><datetime>{1}</datetime></statusInfo></result>", ex.ToString(), DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")));

                return XmlErr.DocumentElement;
            }
        }

        //[WebMethod(Description = "세이버 발권 개발용")]
        public XmlElement AAAAAAAASabreTicketingToMode()
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("_RetrieveRS"));

            XmlNamespaceManager xnMgr = new XmlNamespaceManager(XmlDoc.NameTable);
            xnMgr.AddNamespace("stl19", AbacusConfig.NamespaceURL("GetReservation_stl19"));
            xnMgr.AddNamespace("or114", AbacusConfig.NamespaceURL("GetReservation_or114"));

            return ToModeSearchBookingAbacus(XmlDoc.DocumentElement, xnMgr);
        }

        //[WebMethod(Description = "예약조회(GDS)")]
        public XmlElement AAAAAAAASearchBookingPNRAbacusGetReservation()
        {
            return AAAAAAAASearchBookingPNRAbacusGetReservation(5020, "Abacus", "RWDUPO");
        }

        //[WebMethod(Description = "예약조회(GDS)")]
        public XmlElement AAAAAAAASearchBookingPNRAbacusGetReservation(int SNM, string GDS, string PNR)
        {
            string CID = String.Empty;
            string STK = String.Empty;

            try
            {
                //결과
                XmlElement ResXml;

                //### 01.세션생성 #####
                XmlElement Session = aas.SessionCreate();
                CID = Session.ChildNodes[0].InnerText;
                STK = Session.ChildNodes[1].InnerText;

                //### 02.PNR조회(AbacusReadXml) #####
                ResXml = aas.GetReservationXml(CID, STK, aas.GetReservationRQ(PNR));

                //### 04.세션종료 #####
                aas.SessionClose(CID, STK);
                CID = "";
                STK = "";

                return ResXml;
            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (!String.IsNullOrWhiteSpace(CID))
                    aas.SessionClose(CID, STK);

                return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0).ToErrors;
            }
        }

        //[WebMethod(Description = "예약조회(통합)")]
        public XmlElement AAAAAAAASearchBookingAbacusGetReservationRS(int OID, int PID, string RIP)
        {
            string LogGUID = cm.GetGUID;
            
            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, RIP);

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                    return SearchBookingAbacusGetReservation(cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), OID, PID, LogGUID, XmlDBBooking);
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("RIP", RIP);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 22, OID, 0).ToErrors;
            }
        }

        public XmlElement SearchBookingAbacusGetReservation(int SNM, int OID, int PID, string GUID, XmlElement XmlDBBooking)
        {
            try
            {
                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
                    string GDSType = XmlDBBooking.SelectSingleNode("item3/GDS구분").InnerText;
                    bool BookCancel = XmlDBBooking.SelectSingleNode("item/취소").InnerText.Equals("Y") ? true : false;
                    string DBLogData = "N";

                    //### 04.통합모드 생성 #####
                    XmlElement ModeXml = null;

                    string PNR = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;
                    string ROT = XmlDBBooking.SelectSingleNode("item3/여정구분").InnerText;
                        
                    //### 01.세션생성 #####
                    XmlElement Session = aas.SessionCreate();
                    string CID = Session.ChildNodes[0].InnerText;
                    string STK = Session.ChildNodes[1].InnerText;

                    //### 02.PNR조회(PNR_Retrieve) #####
                    XmlElement ResXml = aas.GetReservationRS(CID, STK, PNR, String.Concat(GUID, "-02"));

                    XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                    xnMgr.AddNamespace("stl19", AbacusConfig.NamespaceURL("GetReservation_stl19"));
                    xnMgr.AddNamespace("or114", AbacusConfig.NamespaceURL("GetReservation_or114"));

                    //오류시
                    if (ResXml.SelectNodes("stl19:Errors", xnMgr).Count > 0)
                    {
                        if (ResXml.SelectSingleNode("stl19:Errors/stl19:Error/stl19:Message", xnMgr).InnerText.Trim().Equals("NAK3 - UPDATED PNR CURRENTLY IN AAA - FINISH OR IGNORE"))
                        {
                            aas.AbacusCommand(CID, STK, "E", String.Concat(GUID, "-03"));
                            ResXml = aas.GetReservationRS(CID, STK, PNR, String.Concat(GUID, "-03"));

                            //오류시
                            if (ResXml.SelectNodes("stl19:Errors", xnMgr).Count > 0)
                                throw new Exception(ResXml.SelectSingleNode("stl19:Errors/stl19:Error/stl19:Message", xnMgr).InnerText);
                        }
                        else
                            throw new Exception(ResXml.SelectSingleNode("stl19:Errors/stl19:Error/stl19:Message", xnMgr).InnerText);
                    }

                    //### 03.세션종료 #####
                    aas.SessionClose(CID, STK);
                    CID = "";
                    STK = "";

                    xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                    xnMgr.AddNamespace("stl19", AbacusConfig.NamespaceURL("GetReservation_stl19"));
                    xnMgr.AddNamespace("or114", AbacusConfig.NamespaceURL("GetReservation_or114"));

                    ModeXml = ToModeSearchBookingAbacus(ResXml, xnMgr);

                    XmlNode BookingInfo = ModeXml.SelectSingleNode("bookingInfo");
                    XmlNode FlightInfo = ModeXml.SelectSingleNode("flightInfo");
                    XmlNode TravellerInfo = ModeXml.SelectSingleNode("travellerInfo");
                    XmlNode SupplementaryService = ModeXml.SelectSingleNode("supplementaryService");
                    XmlNode FareInfo = ModeXml.SelectSingleNode("fareInfo");
                    XmlNode Attn = ModeXml.SelectSingleNode("attn");
                    XmlNode Agent = ModeXml.SelectSingleNode("agent");
                    XmlNode PaymentInfo = ModeXml.SelectSingleNode("paymentInfo");
                    XmlNode PaymentReqInfo = ModeXml.SelectSingleNode("paymentReqInfo");

                    //상태
                    string Status = (BookCancel) ? "XX" : BookingStatus(ModeXml.SelectSingleNode("flightInfo"));

                    //상태변경(DB)
                    BookingStatusDB(OID, Status);

                    XmlDocument FareXml = new XmlDocument();
                    FareXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                    BookingInfo.SelectSingleNode("gds").InnerText = GDS;
                    BookingInfo.SelectSingleNode("bookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;
                    BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = XmlDBBooking.SelectSingleNode("item3/GDS주문번호").InnerText;
                    BookingInfo.SelectSingleNode("modeBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item/예약번호").InnerText;
                    BookingInfo.SelectSingleNode("agentBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/주문아이템코드").InnerText;
                    BookingInfo.SelectSingleNode("allianceBookingNo").Attributes.GetNamedItem("pip").InnerText = XmlDBBooking.SelectSingleNode("item3/개인정보제공여부").InnerText;
                    BookingInfo.SelectSingleNode("allianceBookingNo").Attributes.GetNamedItem("piip").InnerText = XmlDBBooking.SelectSingleNode("item3/고유식별정보제공여부").InnerText;
                    BookingInfo.SelectSingleNode("allianceBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/제휴사주문번호").InnerText;
                    BookingInfo.SelectSingleNode("bookingCreationDate").InnerText = XmlDBBooking.SelectSingleNode("item/예약일").InnerText;
                    BookingInfo.SelectSingleNode("bookingCancelDate").InnerText = XmlDBBooking.SelectSingleNode("item/취소일").InnerText;
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("code").InnerText = Status;
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("passport").InnerText = XmlDBBooking.SelectNodes("item4[여권번호='' and 취소여부='N']").Count.Equals(0) ? "Y" : "N";
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("apis").InnerText = XmlDBBooking.SelectSingleNode("item3/아피스입력여부").InnerText;
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("issue").InnerText = XmlDBBooking.SelectSingleNode("item3/발권완료여부").InnerText;
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("esta").InnerText = (XmlDBBooking.SelectNodes("item14/ESTA").Count > 0) ? XmlDBBooking.SelectSingleNode("item14/ESTA").InnerText : "N";
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("eta").InnerText = (XmlDBBooking.SelectNodes("item14/ETA").Count > 0) ? XmlDBBooking.SelectSingleNode("item14/ETA").InnerText : "N";
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("usa").InnerText = (XmlDBBooking.SelectNodes("item14/USA").Count > 0) ? XmlDBBooking.SelectSingleNode("item14/USA").InnerText : "N";
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("refund").InnerText = (XmlDBBooking.SelectNodes("item16/환불상태").Count > 0) ? (XmlDBBooking.SelectSingleNode("item16/환불상태").InnerText.Equals("전체환불") ? "W" : (XmlDBBooking.SelectSingleNode("item16/환불상태").InnerText.Equals("부분환불") ? "P" : "")) : "";
                    BookingInfo.SelectSingleNode("bookingStatus").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(Common.BookingStatusText(Status)));
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("db").InnerText = DBLogData;
                    BookingInfo.SelectSingleNode("bookingAirline").Attributes.GetNamedItem("code").InnerText = XmlDBBooking.SelectSingleNode("item3/마케팅항공사").InnerText;
                    BookingInfo.SelectSingleNode("bookingAirline").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(XmlDBBooking.SelectSingleNode("item3/마케팅항공사명").InnerText));
                    BookingInfo.SelectSingleNode("bookingRtg").Attributes.GetNamedItem("type").InnerText = XmlDBBooking.SelectSingleNode("item3/여정구분").InnerText;
                    BookingInfo.SelectSingleNode("bookingRuleId").Attributes.GetNamedItem("proof").InnerText = XmlDBBooking.SelectSingleNode("item3/증빙필요여부").InnerText;
                    //BookingInfo.SelectSingleNode("bookingRuleId").InnerText = XmlDBBooking.SelectSingleNode("item3/룰번호").InnerText;
                    BookingInfo.SelectSingleNode("bookingTL").Attributes.GetNamedItem("ttl").InnerText = XmlDBBooking.SelectSingleNode("item3/항공사TL").InnerText;
                    BookingInfo.SelectSingleNode("bookingTL").InnerText = cm.RequestDateTime(XmlDBBooking.SelectSingleNode("item3/TL").InnerText, "yyyy-MM-dd HH:mm");
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("price").InnerText = XmlDBBooking.SelectSingleNode("item/총판매가").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("subPrice").InnerText = XmlDBBooking.SelectSingleNode("item/총판매가2").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("fare").InnerText = XmlDBBooking.SelectSingleNode("item/총항공료").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("tax").InnerText = XmlDBBooking.SelectSingleNode("item/총텍스").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("fsc").InnerText = XmlDBBooking.SelectSingleNode("item/총유류할증료").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("disPartner").InnerText = XmlDBBooking.SelectSingleNode("item/총제휴할인금액").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("supplementaryService").InnerText = "0";
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("tasf").InnerText = XmlDBBooking.SelectSingleNode("item/총발권수수료").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("tau").InnerText = XmlDBBooking.SelectSingleNode("item3/TaxAutoUpdate").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("taud").InnerText = XmlDBBooking.SelectSingleNode("item3/TaxAutoUpdateDate").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("pcs").InnerText = XmlDBBooking.SelectSingleNode("item/유료상담서비스").InnerText;

                    if (FareXml.SelectNodes("priceIndex").Count > 0 && FareXml.SelectNodes("priceIndex/paxFareGroup/paxFare/segFareGroup").Count > 0)
                    {
                        BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText = Common.ServiceClass(FareXml.SelectSingleNode("priceIndex/paxFareGroup/paxFare/segFareGroup/segFare/fare/cabin").Attributes.GetNamedItem("cabin").InnerText);
                        BookingInfo.SelectSingleNode("bookingClass").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(Common.ServiceClassText(GDSType, BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText = FareXml.SelectSingleNode("priceIndex").Attributes.GetNamedItem("ptc").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("card").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드사").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("sign").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드표기").InnerText;
                        BookingInfo.SelectSingleNode("paxType").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(Common.PaxTypeText(BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText = FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("mas").InnerText;
                        if (!String.IsNullOrWhiteSpace(BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText))
                            BookingInfo.SelectSingleNode("expiryDate").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(cm.ExpiryDateText(BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ucf").InnerText = FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("ucf").InnerText;
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ntf").InnerText = FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("ntf").InnerText;
                    }
                    else if (FareXml.SelectNodes("Table").Count > 0)
                    {
                        BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText = Common.ServiceClass(FareXml.SelectSingleNode("Table/SVC_CLASS").InnerText);
                        BookingInfo.SelectSingleNode("bookingClass").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(Common.ServiceClassText(GDSType, BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText = FareXml.SelectSingleNode("Table/PAX_TYPE").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("card").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드사").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("sign").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드표기").InnerText;
                        BookingInfo.SelectSingleNode("paxType").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(Common.PaxTypeText(BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText = FareXml.SelectSingleNode("Table/MAX_STAY").InnerText;
                        if (!String.IsNullOrWhiteSpace(BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText))
                            BookingInfo.SelectSingleNode("expiryDate").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(cm.ExpiryDateText(BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ucf").InnerText = "N";
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ntf").InnerText = "Y";
                    }

                    //성인,소아 중 한 명이라도 텍스가 0이하라면 미확정 요금 처리(2018-10-16,김경미매니저)
                    if (XmlDBBooking.SelectNodes("item4[구분!='INF' and TAX <= 0]").Count > 0)
                    {
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ucf").InnerText = "Y";
                    }

                    //캐나다 ETA 비자 신청 여부 추가 체크(경유지가 캐나다인 경우 ETA 비자 신청 가능)
                    //경유지 체크시 PC/모바일 페이지에서 문제가 있어 도착지만 체크하는 것으로 변경(2018-01-08,조수지)
                    //if (XmlDBBooking.SelectNodes("item14/ETA").Count > 0 && XmlDBBooking.SelectSingleNode("item14/ETA").InnerText.Equals("N") && Convert.ToInt32(XmlDBBooking.SelectSingleNode("item14/STERM").InnerText) >= 30)
                    //{
                    //    foreach (XmlNode SEG in ModeXml.SelectNodes("flightInfo/segGroup/seg"))
                    //    {
                    //        if (Common.CanadaOfAirport(SEG.Attributes.GetNamedItem("alc").InnerText))
                    //        {
                    //            BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("eta").InnerText = "Y";
                    //            break;
                    //        }
                    //    }
                    //}

                    string AirportList = string.Empty; //공항(도시) 한글명 조회용
                    string AirlineList = string.Empty; //항공사 한글명 조회용

                    //상세스케쥴 정보(비행시간, 대기시간+기착지대기시간)
                    foreach (XmlNode SegGroup in FlightInfo.SelectNodes("segGroup"))
                    {
                        int TotalEFT = 0;
                        int TotalEWT = 0;
                        int SegmentRef = 1;
                        string PrevARDT = string.Empty;

                        foreach (XmlNode Seg in SegGroup.SelectNodes("seg"))
                        {
                            TotalEFT += cm.ChangeMinutes(Seg.Attributes.GetNamedItem("eft").InnerText);
                            TotalEWT += cm.ChangeMinutes(Seg.Attributes.GetNamedItem("ewt").InnerText);
                            AirportList += String.Concat(Seg.Attributes.GetNamedItem("dlc").InnerText, ",");
                            AirportList += String.Concat(Seg.Attributes.GetNamedItem("alc").InnerText, ",");
                            AirlineList += String.Concat(Seg.Attributes.GetNamedItem("mcc").InnerText, ",");
                            AirlineList += String.Concat(Seg.Attributes.GetNamedItem("occ").InnerText, ",");

                            if (Seg.SelectNodes("seg").Count > 0)
                            {
                                if (!String.IsNullOrWhiteSpace(Seg.SelectSingleNode("seg[2]").Attributes.GetNamedItem("gwt").InnerText))
                                {
                                    TotalEWT += cm.ChangeMinutes(Seg.SelectSingleNode("seg[2]").Attributes.GetNamedItem("gwt").InnerText);
                                    Seg.Attributes.GetNamedItem("gwt").InnerText = Seg.SelectSingleNode("seg[2]").Attributes.GetNamedItem("gwt").InnerText;
                                }
                                else
                                {
                                    TotalEWT += cm.ChangeMinutes(Seg.SelectSingleNode("seg[1]").Attributes.GetNamedItem("gwt").InnerText);
                                    Seg.Attributes.GetNamedItem("gwt").InnerText = Seg.SelectSingleNode("seg[1]").Attributes.GetNamedItem("gwt").InnerText;
                                }

                                AirportList += String.Concat(Seg.SelectSingleNode("seg[1]").Attributes.GetNamedItem("alc").InnerText, ",");
                            }

                            //경유지 대기시간
                            if (SegmentRef > 1)
                                Seg.Attributes.GetNamedItem("ett").InnerText = cm.CalWaitingTime(PrevARDT, Seg.Attributes.GetNamedItem("ddt").InnerText);

                            PrevARDT = Seg.Attributes.GetNamedItem("ardt").InnerText;
                            SegmentRef++;
                        }

                        SegGroup.Attributes.GetNamedItem("jrt").InnerText = cm.ChangeTime(TotalEFT + TotalEWT);
                        SegGroup.Attributes.GetNamedItem("eft").InnerText = cm.ChangeTime(TotalEFT);
                        SegGroup.Attributes.GetNamedItem("ewt").InnerText = TotalEWT.Equals(0) ? SegGroup.Attributes.GetNamedItem("ewt").InnerText : cm.ChangeTime(TotalEWT);
                    }

                    //공항(도시) 한글명
                    DataView dvAirport = Common.GetCityAirportName("A", AirportList).Tables[0].DefaultView;
                    DataView dvAirline = Common.GetAirlineName(AirlineList).Tables[0].DefaultView;

                    foreach (XmlNode Seg in FlightInfo.SelectNodes("segGroup/seg"))
                    {
                        dvAirport.RowFilter = String.Format("코드='{0}'", Seg.Attributes.GetNamedItem("dlc").InnerText);
                        Seg.Attributes.GetNamedItem("dlcn").InnerText = dvAirport[0]["한글명"].ToString();
                        Seg.Attributes.GetNamedItem("duc").InnerText = dvAirport[0]["국가코드"].ToString();

                        dvAirport.RowFilter = String.Format("코드='{0}'", Seg.Attributes.GetNamedItem("alc").InnerText);
                        Seg.Attributes.GetNamedItem("alcn").InnerText = dvAirport[0]["한글명"].ToString();
                        Seg.Attributes.GetNamedItem("auc").InnerText = dvAirport[0]["국가코드"].ToString();

                        dvAirline.RowFilter = String.Format("항공사='{0}'", Seg.Attributes.GetNamedItem("mcc").InnerText);
                        Seg.Attributes.GetNamedItem("mccn").InnerText = dvAirline[0]["한글명"].ToString();

                        dvAirline.RowFilter = String.Format("항공사='{0}'", Seg.Attributes.GetNamedItem("occ").InnerText);
                        Seg.Attributes.GetNamedItem("occn").InnerText = dvAirline[0]["한글명"].ToString();

                        foreach (XmlNode Seg2 in Seg.SelectNodes("seg"))
                        {
                            dvAirport.RowFilter = String.Format("코드='{0}'", Seg2.Attributes.GetNamedItem("dlc").InnerText);
                            Seg2.Attributes.GetNamedItem("dlcn").InnerText = dvAirport[0]["한글명"].ToString();
                            //Seg2.Attributes.GetNamedItem("duc").InnerText = dvAirport[0]["국가코드"].ToString();

                            dvAirport.RowFilter = String.Format("코드='{0}'", Seg2.Attributes.GetNamedItem("alc").InnerText);
                            Seg2.Attributes.GetNamedItem("alcn").InnerText = dvAirport[0]["한글명"].ToString();
                            //Seg2.Attributes.GetNamedItem("auc").InnerText = dvAirport[0]["국가코드"].ToString();
                        }
                    }

                    //무료수하물 정보(운임규정에 저장되어 있는 무료수하물 정보로 출력)
                    XmlDocument RuleXml = new XmlDocument();
                    RuleXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/규정XML").InnerText);

                    if (RuleXml.SelectNodes("ResponseDetails/baggageInfo").Count > 0)
                    {
                        //갈릴레오처럼 PNR운임 자체가 없는 경우
                        if (!FareInfo.HasChildNodes)
                        {
                            XmlDocument XmlDoc = new XmlDocument();
                            XmlDoc.Load(mc.XmlFullPath("SearchBookingRS"));

                            XmlNode TmpFare = XmlDoc.SelectSingleNode("ResponseDetails/fareInfo/fare");
                            XmlNode TmpFareSeg;
                            XmlNode NewFare;
                            XmlNode NewFareSeg;
                            int SegRef = 1;

                            foreach (XmlNode TmpPtc in RuleXml.SelectNodes("ResponseDetails/baggageInfo/flightInfo/segGroup[1]/seg[1]/baggage"))
                            {
                                NewFare = FareInfo.AppendChild(ModeXml.OwnerDocument.ImportNode(TmpFare.CloneNode(true), true));
                                NewFare.Attributes.GetNamedItem("ptc").InnerText = TmpPtc.Attributes.GetNamedItem("ptc").InnerText;

                                TmpFareSeg = NewFare.SelectSingleNode("seg");
                                SegRef = 1;

                                //foreach (XmlNode TmpBaggage in RuleXml.SelectNodes(String.Format("ResponseDetails/baggageInfo/flightInfo/segGroup/seg/baggage[@ptc='{0}']", TmpPtc.Attributes.GetNamedItem("ptc").InnerText)))
                                //{
                                //    NewFareSeg = NewFare.AppendChild(TmpFareSeg.CloneNode(false));
                                //    NewFareSeg.Attributes.GetNamedItem("ref").InnerText = (SegRef++).ToString();
                                //    NewFareSeg.Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty(TmpBaggage.InnerText);
                                //}

                                foreach (XmlNode TmpSeg in RuleXml.SelectNodes("ResponseDetails/baggageInfo/flightInfo/segGroup/seg"))
                                {
                                    NewFareSeg = NewFare.AppendChild(TmpFareSeg.CloneNode(false));
                                    NewFareSeg.Attributes.GetNamedItem("ref").InnerText = (SegRef++).ToString();

                                    if (TmpSeg.SelectNodes(String.Format("baggage[@ptc='{0}']", TmpPtc.Attributes.GetNamedItem("ptc").InnerText)).Count > 0)
                                        NewFareSeg.Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty(TmpSeg.SelectSingleNode(String.Format("baggage[@ptc='{0}']", TmpPtc.Attributes.GetNamedItem("ptc").InnerText)).InnerText);
                                    else
                                        NewFareSeg.Attributes.GetNamedItem("baggage").InnerText = "";
                                }
                            }
                        }
                        //애바카스처럼 PNR운임만 존재하고 무료수하물 정보가 없는 경우
                        else if (!FareInfo.SelectSingleNode("fare").HasChildNodes)
                        {
                            XmlNode NewSeg;
                            XmlAttribute NewSegRef;
                            XmlAttribute NewSegBaggage;
                            int SegRef = 1;

                            foreach (XmlNode TmpFare in FareInfo.SelectNodes("fare"))
                            {
                                SegRef = 1;
                                //foreach (XmlNode TmpBaggage in RuleXml.SelectNodes(String.Format("ResponseDetails/baggageInfo/flightInfo/segGroup/seg/baggage[@ptc='{0}']", TmpFare.Attributes.GetNamedItem("ptc").InnerText)))
                                //{
                                //    NewSeg = TmpFare.AppendChild(ModeXml.OwnerDocument.CreateElement("seg"));
                                //    NewSegRef = ModeXml.OwnerDocument.CreateAttribute("ref");
                                //    NewSegBaggage = ModeXml.OwnerDocument.CreateAttribute("baggage");

                                //    NewSegRef.InnerText = (SegRef++).ToString();
                                //    NewSegBaggage.InnerText = Common.BaggageEmpty(TmpBaggage.InnerText);

                                //    NewSeg.Attributes.Append(NewSegRef);
                                //    NewSeg.Attributes.Append(NewSegBaggage);
                                //}

                                foreach (XmlNode TmpSeg in RuleXml.SelectNodes("ResponseDetails/baggageInfo/flightInfo/segGroup/seg"))
                                {
                                    NewSeg = TmpFare.AppendChild(ModeXml.OwnerDocument.CreateElement("seg"));
                                    NewSegRef = ModeXml.OwnerDocument.CreateAttribute("ref");
                                    NewSegBaggage = ModeXml.OwnerDocument.CreateAttribute("baggage");

                                    NewSegRef.InnerText = (SegRef++).ToString();

                                    if (TmpSeg.SelectNodes(String.Format("baggage[@ptc='{0}']", TmpFare.Attributes.GetNamedItem("ptc").InnerText)).Count > 0)
                                        NewSegBaggage.InnerText = Common.BaggageEmpty(TmpSeg.SelectSingleNode(String.Format("baggage[@ptc='{0}']", TmpFare.Attributes.GetNamedItem("ptc").InnerText)).InnerText);
                                    else
                                        NewSegBaggage.InnerText = "";

                                    NewSeg.Attributes.Append(NewSegRef);
                                    NewSeg.Attributes.Append(NewSegBaggage);
                                }
                            }
                        }
                    }

                    //프로모션 정보
                    if (!String.IsNullOrEmpty(XmlDBBooking.SelectSingleNode("item3/요금조건").InnerText))
                    {
                        //BookingInfo.SelectSingleNode("paxType").RemoveChild(BookingInfo.SelectSingleNode("paxType").FirstChild);
                        BookingInfo.SelectSingleNode("paxType").InnerText = "";
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText = XmlDBBooking.SelectSingleNode("item3/요금조건").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("card").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드사").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("sign").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드표기").InnerText;
                        BookingInfo.SelectSingleNode("paxType").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(Common.PaxTypeText(XmlDBBooking.SelectSingleNode("item3/요금조건명").InnerText)));
                    }

                    //탑승객 정보 재정의(DB Data로 출력)
                    XmlNode PaxData = TravellerInfo.SelectSingleNode("paxData");
                    XmlNode SelNode;
                    XmlNode NewPaxData;
                    int index = 1;

                    //모두닷컴(2,3915)은 취소자도 출력(2019-09-09)
                    foreach (XmlNode PaxInfo in XmlDBBooking.SelectNodes(("/2/3915/".IndexOf(SNM.ToString()) != -1) ? "item4" : String.Format("item4[취소여부='{0}']", BookCancel ? "Y" : "N")))
                    {
                        if (TravellerInfo.SelectNodes(String.Format("paxData[pax/@psn='{0}' and pax/@pfn='{1}']", Common.ChangeSurname(PaxInfo.SelectSingleNode("영문성").InnerText), PaxInfo.SelectSingleNode("영문이름").InnerText)).Count > 0)
                            NewPaxData = TravellerInfo.SelectSingleNode(String.Format("paxData[pax/@psn='{0}' and pax/@pfn='{1}']", Common.ChangeSurname(PaxInfo.SelectSingleNode("영문성").InnerText), PaxInfo.SelectSingleNode("영문이름").InnerText));
                        else
                        {
                            NewPaxData = TravellerInfo.AppendChild(PaxData.CloneNode(true));

                            //DB에서 불러오지 않는 데이타는 공백 처리
                            SelNode = NewPaxData.SelectSingleNode("ticket");
                            SelNode.Attributes.GetNamedItem("number").InnerText = "";

                            SelNode = NewPaxData.SelectSingleNode("membership");
                            SelNode.Attributes.GetNamedItem("carrier").InnerText = "";
                            SelNode.Attributes.GetNamedItem("number").InnerText = "";
                        }

                        SelNode = NewPaxData.SelectSingleNode("pax");
                        SelNode.Attributes.GetNamedItem("ref").InnerText = (index++).ToString();
                        SelNode.Attributes.GetNamedItem("nsi").InnerText = PaxInfo.SelectSingleNode("판매명세번호").InnerText;
                        SelNode.Attributes.GetNamedItem("pid").InnerText = PaxInfo.SelectSingleNode("회원번호").InnerText;
                        SelNode.Attributes.GetNamedItem("phn").InnerText = PaxInfo.SelectSingleNode("한글이름").InnerText;
                        SelNode.Attributes.GetNamedItem("psn").InnerText = PaxInfo.SelectSingleNode("영문성").InnerText;
                        SelNode.Attributes.GetNamedItem("pfn").InnerText = PaxInfo.SelectSingleNode("영문이름").InnerText;
                        SelNode.Attributes.GetNamedItem("ptc").InnerText = PaxInfo.SelectSingleNode("구분").InnerText;
                        SelNode.Attributes.GetNamedItem("ptl").InnerText = Common.GetPaxTitle(PaxInfo.SelectSingleNode("구분").InnerText, PaxInfo.SelectSingleNode("성별").InnerText);
                        SelNode.Attributes.GetNamedItem("pbd").InnerText = PaxInfo.SelectSingleNode("생년월일").InnerText;
                        SelNode.Attributes.GetNamedItem("pea").InnerText = PaxInfo.SelectSingleNode("이메일주소").InnerText;
                        SelNode.Attributes.GetNamedItem("ptn").InnerText = PaxInfo.SelectSingleNode("전화번호").InnerText;
                        SelNode.Attributes.GetNamedItem("pmn").InnerText = PaxInfo.SelectSingleNode("휴대폰번호").InnerText;
                        SelNode.Attributes.GetNamedItem("cancel").InnerText = PaxInfo.SelectSingleNode("취소여부").InnerText;

                        SelNode = NewPaxData.SelectSingleNode("fare");
                        SelNode.Attributes.GetNamedItem("price").InnerText = PaxInfo.SelectSingleNode("총요금").InnerText;
                        SelNode.Attributes.GetNamedItem("subPrice").InnerText = PaxInfo.SelectSingleNode("총요금2").InnerText;
                        SelNode.Attributes.GetNamedItem("fare").InnerText = PaxInfo.SelectSingleNode("항공료").InnerText;
                        SelNode.Attributes.GetNamedItem("tax").InnerText = PaxInfo.SelectSingleNode("TAX").InnerText;
                        SelNode.Attributes.GetNamedItem("fsc").InnerText = PaxInfo.SelectSingleNode("유류할증료").InnerText;
                        SelNode.Attributes.GetNamedItem("disPartner").InnerText = (Convert.ToInt32(PaxInfo.SelectSingleNode("파트너할인요금").InnerText) + Convert.ToInt32(PaxInfo.SelectSingleNode("제휴아이템할인요금").InnerText)).ToString();
                        SelNode.Attributes.GetNamedItem("tasf").InnerText = PaxInfo.SelectSingleNode("발권수수료").InnerText;
                        SelNode.Attributes.GetNamedItem("tourMileage").InnerText = PaxInfo.SelectSingleNode("투어마일리지").InnerText;

                        //임시(Q마켓 QA를 위해서)
                        if (OID.Equals(34881374))
                        {
                            BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("disPartner").InnerText = "3000"; //①취소되지 않은 아이템할인금액(총)

                            if ("/신동우/".IndexOf(PaxInfo.SelectSingleNode("한글이름").InnerText) != -1) //②취소된 탑승객명
                            {
                                SelNode.Attributes.GetNamedItem("disPartner").InnerText = "0";
                            }
                        }

                        SelNode = NewPaxData.SelectSingleNode("payment");
                        SelNode.Attributes.GetNamedItem("gross").InnerText = PaxInfo.SelectSingleNode("총결제금액").InnerText;
                        SelNode.Attributes.GetNamedItem("card").InnerText = PaxInfo.SelectSingleNode("카드결제금액").InnerText;
                        SelNode.Attributes.GetNamedItem("bank").InnerText = PaxInfo.SelectSingleNode("계좌이체금액").InnerText;
                        SelNode.Attributes.GetNamedItem("balance").InnerText = PaxInfo.SelectSingleNode("미결제금액").InnerText;
                        SelNode.Attributes.GetNamedItem("date").InnerText = PaxInfo.SelectSingleNode("결제일").InnerText;

                        SelNode = NewPaxData.SelectSingleNode("passport");
                        SelNode.Attributes.GetNamedItem("id").InnerText = PaxInfo.SelectSingleNode("여권번호").InnerText;
                        SelNode.Attributes.GetNamedItem("expireDate").InnerText = PaxInfo.SelectSingleNode("여권만료일").InnerText;
                        SelNode.Attributes.GetNamedItem("issueCountry").InnerText = PaxInfo.SelectSingleNode("여권발행국코드").InnerText;
                        SelNode.Attributes.GetNamedItem("holderNationality").InnerText = PaxInfo.SelectSingleNode("여권국적코드").InnerText;
                        SelNode.Attributes.GetNamedItem("writeDate").InnerText = PaxInfo.SelectSingleNode("여권정보등록일").InnerText;

                        SelNode = NewPaxData.SelectSingleNode("tourMileage");
                        SelNode.Attributes.GetNamedItem("memberClass").InnerText = PaxInfo.SelectSingleNode("회원구분").InnerText;
                        SelNode.Attributes.GetNamedItem("cardNumber").InnerText = PaxInfo.SelectSingleNode("마일리지카드번호").InnerText;
                        SelNode.Attributes.GetNamedItem("request").InnerText = PaxInfo.SelectSingleNode("마일리지적립여부").InnerText;
                        SelNode.Attributes.GetNamedItem("mileage").InnerText = PaxInfo.SelectSingleNode("투어마일리지").InnerText;

                        SelNode = NewPaxData.SelectSingleNode("refund");
                        SelNode.Attributes.GetNamedItem("cancelCode").InnerText = PaxInfo.SelectSingleNode("취소사유코드").InnerText;
                        SelNode.Attributes.GetNamedItem("cancelDesc").InnerText = PaxInfo.SelectSingleNode("취소사유").InnerText;
                        SelNode.Attributes.GetNamedItem("stateCode").InnerText = PaxInfo.SelectSingleNode("취소진행상태코드").InnerText;
                        SelNode.Attributes.GetNamedItem("stateDesc").InnerText = PaxInfo.SelectSingleNode("취소진행상태").InnerText;
                    }

                    //부가서비스
                    if (XmlDBBooking.SelectNodes("item11").Count > 0)
                    {
                        XmlAttribute NewServiceAttr = null;
                        int SupplementaryServiceSum = 0;

                        foreach (XmlNode TmpItem11 in XmlDBBooking.SelectNodes("item11"))
                        {
                            XmlDocument ServiceXml = new XmlDocument();
                            ServiceXml.LoadXml(TmpItem11.SelectSingleNode("상품XML").InnerText.Replace("&lt;", "<").Replace("&gt;", ">").Replace("<eventMessage>", "<eventMessage><![CDATA[").Replace("</eventMessage>", "]]></eventMessage>").Replace("<summary>", "<summary><![CDATA[").Replace("</summary>", "]]></summary>").Replace("<description>", "<description><![CDATA[").Replace("</description>", "]]></description>"));

                            NewServiceAttr = ServiceXml.CreateAttribute("ibn");
                            NewServiceAttr.InnerText = TmpItem11.SelectSingleNode("주문아이템번호").InnerText;
                            ServiceXml.FirstChild.Attributes.Append(NewServiceAttr);

                            NewServiceAttr = ServiceXml.CreateAttribute("status");
                            NewServiceAttr.InnerText = TmpItem11.SelectSingleNode("예약상황").InnerText;
                            ServiceXml.FirstChild.Attributes.Append(NewServiceAttr);

                            NewServiceAttr = ServiceXml.CreateAttribute("quantity");
                            NewServiceAttr.InnerText = TmpItem11.SelectSingleNode("수량").InnerText;
                            ServiceXml.SelectSingleNode("service/price").Attributes.Append(NewServiceAttr);

                            NewServiceAttr = ServiceXml.CreateAttribute("sellingPrice");
                            NewServiceAttr.InnerText = TmpItem11.SelectSingleNode("요금").InnerText;
                            ServiceXml.SelectSingleNode("service/price").Attributes.Append(NewServiceAttr);

                            SupplementaryService.AppendChild(ModeXml.OwnerDocument.ImportNode(ServiceXml.FirstChild, true));

                            SupplementaryServiceSum += Convert.ToInt32(TmpItem11.SelectSingleNode("요금").InnerText);
                        }

                        //부가서비스 핫라인 설정
                        if (SupplementaryService.HasChildNodes)
                        {
                            if ("1334421,1608843,2048015,".IndexOf(XmlDBBooking.SelectSingleNode("item/발권부서번호").InnerText) != -1)
                            {
                                XmlNode HotLine = ModeXml.OwnerDocument.CreateElement("hotLine");
                                XmlNode Department = ModeXml.OwnerDocument.CreateElement("department");
                                XmlNode Incharge = ModeXml.OwnerDocument.CreateElement("incharge");
                                XmlNode Hp = ModeXml.OwnerDocument.CreateElement("hp");
                                XmlNode Email = ModeXml.OwnerDocument.CreateElement("email");

                                switch (XmlDBBooking.SelectSingleNode("item/발권부서번호").InnerText)
                                {
                                    case "1334421":
                                        Department.InnerText = "항공판매사업1부";
                                        Incharge.InnerText = "박지혜";
                                        Hp.InnerText = "010-3895-2699";
                                        Email.InnerText = "iamninja@modetour.com";
                                        break;
                                    case "1608843":
                                        Department.InnerText = "항공판매사업2부";
                                        Incharge.InnerText = "정성하";
                                        Hp.InnerText = "010-8618-4046";
                                        Email.InnerText = "petra722@modetour.com";
                                        break;
                                    case "2048015":
                                        Department.InnerText = "항공판매사업3부";
                                        Incharge.InnerText = "송인혁";
                                        Hp.InnerText = "010-3300-3355";
                                        Email.InnerText = "inhyuk@modetour.com";
                                        break;
                                }

                                HotLine.AppendChild(Department);
                                HotLine.AppendChild(Incharge);
                                HotLine.AppendChild(Hp);
                                HotLine.AppendChild(Email);
                                SupplementaryService.InsertAfter(HotLine, SupplementaryService.LastChild);
                            }
                        }

                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("supplementaryService").InnerText = SupplementaryServiceSum.ToString();
                    }

                    //예약자정보
                    Attn.Attributes.GetNamedItem("rid").InnerText = XmlDBBooking.SelectSingleNode("item1/예약자번호").InnerText;
                    Attn.Attributes.GetNamedItem("rtl").InnerText = XmlDBBooking.SelectSingleNode("item1/타이틀").InnerText;
                    Attn.Attributes.GetNamedItem("rhn").InnerText = XmlDBBooking.SelectSingleNode("item1/예약자명").InnerText;
                    Attn.Attributes.GetNamedItem("rdb").InnerText = XmlDBBooking.SelectSingleNode("item1/생년월일").InnerText;
                    Attn.Attributes.GetNamedItem("rea").InnerText = XmlDBBooking.SelectSingleNode("item1/이메일").InnerText;
                    Attn.Attributes.GetNamedItem("rtn").InnerText = (String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item1/회사전화").InnerText)) ? XmlDBBooking.SelectSingleNode("item1/집전화").InnerText : XmlDBBooking.SelectSingleNode("item1/회사전화").InnerText;
                    Attn.Attributes.GetNamedItem("rmn").InnerText = XmlDBBooking.SelectSingleNode("item1/휴대폰").InnerText;
                    Attn.SelectSingleNode("terminal").InnerText = (XmlDBBooking.SelectNodes("item3/요청단말기").Count > 0) ? XmlDBBooking.SelectSingleNode("item3/요청단말기").InnerText : "";
                    Attn.SelectSingleNode("localTel").InnerText = XmlDBBooking.SelectSingleNode("item3/현지연락처").InnerText;
                    Attn.SelectSingleNode("localZipcode").InnerText = XmlDBBooking.SelectSingleNode("item3/현지우편번호").InnerText;
                    Attn.SelectSingleNode("partnerMemberID").InnerText = XmlDBBooking.SelectSingleNode("item1/제휴예약자ID").InnerText;

                    if (!String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item3/현지주소").InnerText))
                        Attn.SelectSingleNode("localAddress").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(XmlDBBooking.SelectSingleNode("item3/현지주소").InnerText));

                    if (!String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item3/예약자요청사항").InnerText))
                        Attn.SelectSingleNode("remark").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(XmlDBBooking.SelectSingleNode("item3/예약자요청사항").InnerText));

                    //담당여행사정보
                    Agent.Attributes.GetNamedItem("snm").InnerText = XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText;
                    Agent.Attributes.GetNamedItem("anm").InnerText = XmlDBBooking.SelectSingleNode("item2/거래처번호").InnerText;
                    Agent.Attributes.GetNamedItem("aen").InnerText = XmlDBBooking.SelectSingleNode("item2/거래처직원번호").InnerText;
                    Agent.SelectSingleNode("company").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(XmlDBBooking.SelectSingleNode("item2/거래처명").InnerText));
                    Agent.SelectSingleNode("name").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(XmlDBBooking.SelectSingleNode("item2/거래처직원명").InnerText));
                    Agent.SelectSingleNode("email").InnerText = XmlDBBooking.SelectSingleNode("item2/이메일").InnerText;
                    Agent.SelectSingleNode("tel").InnerText = (String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item2/회사전화").InnerText)) ? XmlDBBooking.SelectSingleNode("item2/휴대폰").InnerText : XmlDBBooking.SelectSingleNode("item2/회사전화").InnerText;
                    Agent.SelectSingleNode("fax").InnerText = XmlDBBooking.SelectSingleNode("item2/팩스").InnerText;
                    Agent.SelectSingleNode("share").Attributes.GetNamedItem("anm").InnerText = XmlDBBooking.SelectSingleNode("item2/제휴거래처번호").InnerText;

                    if (!String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item2/제휴거래처명").InnerText))
                        Agent.SelectSingleNode("share").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(XmlDBBooking.SelectSingleNode("item2/제휴거래처명").InnerText));

                    //결제요청정보
                    XmlNode ReqCards = PaymentReqInfo.SelectSingleNode("cards");
                    XmlNode ReqCard = ReqCards.SelectSingleNode("card");
                    XmlNode NewReqCard;

                    XmlNode ReqBanks = PaymentReqInfo.SelectSingleNode("banks");
                    XmlNode ReqBank = ReqBanks.SelectSingleNode("bank");
                    XmlNode NewReqBank;

                    foreach (XmlNode PayReqData in XmlDBBooking.SelectNodes("item13"))
                    {
                        if (PayReqData.SelectSingleNode("카드결제여부").InnerText.Equals("Y"))
                        {
                            NewReqCard = ReqCards.AppendChild(ReqCard.CloneNode(true));
                            NewReqCard.Attributes.GetNamedItem("nsi").InnerText = PayReqData.SelectSingleNode("판매명세번호").InnerText;
                            NewReqCard.Attributes.GetNamedItem("gross").InnerText = PayReqData.SelectSingleNode("카드결제금액").InnerText;
                            NewReqCard.Attributes.GetNamedItem("cardName").InnerText = PayReqData.SelectSingleNode("카드종류").InnerText;
                            NewReqCard.Attributes.GetNamedItem("cardNumber").InnerText = PayReqData.SelectSingleNode("카드번호").InnerText;
                            NewReqCard.Attributes.GetNamedItem("holder").InnerText = PayReqData.SelectSingleNode("소유자명").InnerText;
                            NewReqCard.Attributes.GetNamedItem("validThru").InnerText = PayReqData.SelectSingleNode("유효기간").InnerText;
                            NewReqCard.Attributes.GetNamedItem("installment").InnerText = PayReqData.SelectSingleNode("할부기간").InnerText;
                            NewReqCard.Attributes.GetNamedItem("date").InnerText = PayReqData.SelectSingleNode("카드결제요청일").InnerText;
                        }

                        if (PayReqData.SelectSingleNode("계좌이체여부").InnerText.Equals("Y"))
                        {
                            NewReqBank = ReqBanks.AppendChild(ReqBank.CloneNode(true));
                            NewReqBank.Attributes.GetNamedItem("nsi").InnerText = PayReqData.SelectSingleNode("판매명세번호").InnerText;
                            NewReqBank.Attributes.GetNamedItem("gross").InnerText = PayReqData.SelectSingleNode("계좌이체금액").InnerText;
                            NewReqBank.Attributes.GetNamedItem("bankName").InnerText = PayReqData.SelectSingleNode("은행").InnerText;
                            NewReqBank.Attributes.GetNamedItem("accountNumber").InnerText = PayReqData.SelectSingleNode("계좌번호").InnerText;
                            NewReqBank.Attributes.GetNamedItem("holder").InnerText = PayReqData.SelectSingleNode("예금주").InnerText;
                            NewReqBank.Attributes.GetNamedItem("date").InnerText = PayReqData.SelectSingleNode("계좌이체요청일").InnerText;
                        }
                    }

                    ReqCards.RemoveChild(ReqCard);
                    ReqBanks.RemoveChild(ReqBank);

                    //결제정보
                    PaymentInfo.SelectSingleNode("gross").InnerText = XmlDBBooking.SelectSingleNode("item5/수납액").InnerText;
                    PaymentInfo.SelectSingleNode("gross").Attributes.GetNamedItem("date").InnerText = XmlDBBooking.SelectSingleNode("item3/고객발권요청일").InnerText;

                    //신용카드
                    XmlNode Cards = PaymentInfo.SelectSingleNode("cards");
                    XmlNode Card = Cards.SelectSingleNode("card");
                    XmlNode NewCard;

                    foreach (XmlNode CardData in XmlDBBooking.SelectNodes("item6"))
                    {
                        NewCard = Cards.AppendChild(Card.CloneNode(true));
                        NewCard.Attributes.GetNamedItem("nsi").InnerText = CardData.SelectSingleNode("판매명세번호").InnerText;
                        NewCard.Attributes.GetNamedItem("gross").InnerText = CardData.SelectSingleNode("수납액").InnerText;
                        NewCard.Attributes.GetNamedItem("date").InnerText = CardData.SelectSingleNode("수납일").InnerText;
                        NewCard.Attributes.GetNamedItem("installment").InnerText = CardData.SelectSingleNode("할부").InnerText;
                        NewCard.Attributes.GetNamedItem("cardName").InnerText = CardData.SelectSingleNode("카드사명").InnerText;
                        NewCard.Attributes.GetNamedItem("approvalNumber").InnerText = CardData.SelectSingleNode("승인번호").InnerText;
                        NewCard.Attributes.GetNamedItem("transactionNumber").InnerText = CardData.SelectSingleNode("거래번호").InnerText;
                    }

                    Cards.RemoveChild(Card);

                    //계좌이체
                    XmlNode Banks = PaymentInfo.SelectSingleNode("banks");
                    XmlNode Bank = Banks.SelectSingleNode("bank");
                    XmlNode NewBank;

                    foreach (XmlNode BankData in XmlDBBooking.SelectNodes("item7"))
                    {
                        NewBank = Banks.AppendChild(Bank.CloneNode(true));
                        NewBank.Attributes.GetNamedItem("nsi").InnerText = BankData.SelectSingleNode("판매명세번호").InnerText;
                        NewBank.Attributes.GetNamedItem("gross").InnerText = BankData.SelectSingleNode("수납액").InnerText;
                        NewBank.Attributes.GetNamedItem("date").InnerText = BankData.SelectSingleNode("수납일").InnerText;
                        NewBank.Attributes.GetNamedItem("remitter").InnerText = BankData.SelectSingleNode("송금자").InnerText;
                        NewBank.Attributes.GetNamedItem("bankName").InnerText = BankData.SelectSingleNode("은행명").InnerText;
                    }

                    Banks.RemoveChild(Bank);

                    //상품권
                    XmlNode GiftCertificates = PaymentInfo.SelectSingleNode("giftCertificates");
                    XmlNode GiftCertificate = GiftCertificates.SelectSingleNode("giftCertificate");
                    XmlNode NewGiftCertificate;

                    foreach (XmlNode GiftCertificateData in XmlDBBooking.SelectNodes("item8"))
                    {
                        NewGiftCertificate = GiftCertificates.AppendChild(GiftCertificate.CloneNode(true));
                        NewGiftCertificate.Attributes.GetNamedItem("nsi").InnerText = GiftCertificateData.SelectSingleNode("판매명세번호").InnerText;
                        NewGiftCertificate.Attributes.GetNamedItem("gross").InnerText = GiftCertificateData.SelectSingleNode("수납액").InnerText;
                        NewGiftCertificate.Attributes.GetNamedItem("date").InnerText = GiftCertificateData.SelectSingleNode("수납일").InnerText;
                    }

                    GiftCertificates.RemoveChild(GiftCertificate);

                    //투어마일리지
                    XmlNode TourMileages = PaymentInfo.SelectSingleNode("tourMileages");
                    XmlNode TourMileage = TourMileages.SelectSingleNode("tourMileage");
                    XmlNode NewTourMileages;

                    foreach (XmlNode TourMileagesData in XmlDBBooking.SelectNodes("item15"))
                    {
                        NewTourMileages = TourMileages.AppendChild(TourMileage.CloneNode(true));
                        NewTourMileages.Attributes.GetNamedItem("nsi").InnerText = TourMileagesData.SelectSingleNode("판매명세번호").InnerText;
                        NewTourMileages.Attributes.GetNamedItem("gross").InnerText = TourMileagesData.SelectSingleNode("수납액").InnerText;
                        NewTourMileages.Attributes.GetNamedItem("date").InnerText = TourMileagesData.SelectSingleNode("수납일").InnerText;
                    }

                    TourMileages.RemoveChild(TourMileage);

                    //할인쿠폰
                    XmlNode Coupons = PaymentInfo.SelectSingleNode("coupons");
                    XmlNode Coupon = Coupons.SelectSingleNode("coupon");
                    XmlNode NewCoupon;

                    foreach (XmlNode CouponData in XmlDBBooking.SelectNodes("item12[결제수단='CP']"))
                    {
                        NewCoupon = Coupons.AppendChild(Coupon.CloneNode(true));
                        NewCoupon.Attributes.GetNamedItem("nsi").InnerText = CouponData.SelectSingleNode("판매명세번호").InnerText;
                        NewCoupon.Attributes.GetNamedItem("number").InnerText = CouponData.SelectSingleNode("쿠폰번호").InnerText;
                        NewCoupon.Attributes.GetNamedItem("gross").InnerText = CouponData.SelectSingleNode("수납액").InnerText;
                        NewCoupon.Attributes.GetNamedItem("date").InnerText = CouponData.SelectSingleNode("수납일").InnerText;
                    }

                    Coupons.RemoveChild(Coupon);

                    //기타결제수단
                    XmlNode Etcs = PaymentInfo.SelectSingleNode("etcs");
                    XmlNode Etc = Etcs.SelectSingleNode("etc");
                    XmlNode NewEtc;

                    foreach (XmlNode EtcData in XmlDBBooking.SelectNodes("item12[결제수단!='CP']"))
                    {
                        NewEtc = Etcs.AppendChild(Etc.CloneNode(true));
                        NewEtc.Attributes.GetNamedItem("nsi").InnerText = EtcData.SelectSingleNode("판매명세번호").InnerText;
                        NewEtc.Attributes.GetNamedItem("item").InnerText = EtcData.SelectSingleNode("쿠폰번호").InnerText;
                        NewEtc.Attributes.GetNamedItem("gross").InnerText = EtcData.SelectSingleNode("수납액").InnerText;
                        NewEtc.Attributes.GetNamedItem("date").InnerText = EtcData.SelectSingleNode("수납일").InnerText;
                    }

                    Etcs.RemoveChild(Etc);

                    //가상계좌번호
                    if (XmlDBBooking.SelectNodes("item9").Count > 0)
                    {
                        PaymentInfo.SelectSingleNode("virtualAccountNumber/bank").InnerText = XmlDBBooking.SelectSingleNode("item9/은행명").InnerText;
                        PaymentInfo.SelectSingleNode("virtualAccountNumber/accountNumber").InnerText = XmlDBBooking.SelectSingleNode("item9/계좌번호").InnerText;
                        PaymentInfo.SelectSingleNode("virtualAccountNumber/holder").InnerText = XmlDBBooking.SelectSingleNode("item9/예금주").InnerText;
                    }

                    //현금영수증정보
                    PaymentInfo.SelectSingleNode("cashReceipt").InnerText = XmlDBBooking.SelectSingleNode("item3/현금영수증요청정보").InnerText;

                    return ModeXml;
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }
        }

        #endregion "임시 세이버 개발용"



        #region "기본정보"

        /// <summary>
		/// 항공 웹서비스 기본 환경설정 값
		/// </summary>
		/// <param name="SNM">사이트번호</param>
		/// <returns></returns>
		[WebMethod(Description = "환경설정")]
		public XmlElement Config(int SNM)
		{
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50)
                    };

                sqlParam[0].Value = 12;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
			{
				XmlDocument XmlDoc = new XmlDocument();
				XmlDoc.Load(mc.XmlFullPath("Config"));

				XmlDoc.SelectSingleNode("Config").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;
				XmlDoc.SelectSingleNode("Config/dateInfo/systemDate/date").InnerText = DateTime.Now.ToString("d");
				XmlDoc.SelectSingleNode("Config/dateInfo/systemDate/time").InnerText = DateTime.Now.ToString("HH:mm");
				XmlDoc.SelectSingleNode("Config/dateInfo/userDate/startDate").InnerText = StartDate(SNM);

				if (!SNM.Equals(2) && !SNM.Equals(3915))
				{
					using (SqlCommand cmd = new SqlCommand())
					{
						SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString);
						SqlDataReader dr = null;

						cmd.Connection = conn;
						cmd.CommandTimeout = 60;
						cmd.CommandType = CommandType.StoredProcedure;
						cmd.CommandText = "DBO.WSV_S_아이템_거래처정보";

						cmd.Parameters.Add("@품목코드", SqlDbType.Char, 2);
						cmd.Parameters.Add("@거래처번호", SqlDbType.Int, 0);
						cmd.Parameters.Add("@거래처직원번호", SqlDbType.Int, 0);
						cmd.Parameters.Add("@사이트번호", SqlDbType.Int, 0);

						cmd.Parameters["@품목코드"].Value = "IA";
						cmd.Parameters["@거래처번호"].Value = 0;
						cmd.Parameters["@거래처직원번호"].Value = 0;
						cmd.Parameters["@사이트번호"].Value = SNM;

						try
						{
							conn.Open();
							dr = cmd.ExecuteReader();

							if (dr.Read())
							{
								XmlDoc.SelectSingleNode("Config/customerCenter/company").RemoveAll();
								XmlDoc.SelectSingleNode("Config/customerCenter/company").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(dr["거래처명"].ToString()));
								XmlDoc.SelectSingleNode("Config/customerCenter/tel").InnerText = dr["거래처연락처"].ToString();
								XmlDoc.SelectSingleNode("Config/customerCenter/info").InnerText = "평일 09:00 ~ 18:00";
							}
						}
						catch (Exception)
						{
							throw;
						}
						finally
						{
							dr.Dispose();
							dr.Close();
							conn.Close();
						}
					}
				}

				return XmlDoc.DocumentElement;
			}
			catch (Exception ex)
			{
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 12, 0, 0).ToErrors;
			}
		}

		#endregion "기본정보"

		#region "도시검색"

		/// <summary>
		/// 도시검색
		/// </summary>
		/// <param name="SHT">검색어</param>
		/// <returns></returns>
		[WebMethod(Description = "도시검색")]
		public XmlElement SearchCityRS(string SHT)
		{
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 24;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = SHT;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
			{
				if (SHT.Trim().Length.Equals(0))
					throw new Exception("SearchText has not been entered.");
				
				XmlDocument XmlDoc = new XmlDocument();
				XmlDoc.LoadXml(SearchCityDB(SHT).GetXml());

				XmlAttribute TimeStamp = XmlDoc.CreateAttribute("timeStamp");
				TimeStamp.Value = cm.TimeStamp;
				
				XmlDoc.SelectSingleNode("ResponseDetails").Attributes.Append(TimeStamp);

				return XmlDoc.DocumentElement;
			}
			catch (Exception ex)
			{
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 24, 0, 0).ToErrors;
			}
		}

		/// <summary>
		/// 도시검색(Json형으로 리턴)
		/// </summary>
		/// <param name="SHT">검색어</param>
		/// <param name="CTU">Y:Json형태의 Object, N:Json형태의 String</param>
		/// <param name="TNV">테이블의 이름 출력 여부(Y/N)</param>
		/// <returns></returns>
		[WebMethod(Description = "도시검색(Json형으로 리턴)")]
		[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
		public void SearchCityToJson(string SHT, string CTU, string TNV)
		{
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 25;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = SHT;
                sqlParam[8].Value = CTU;
                sqlParam[9].Value = TNV;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            HttpContext.Current.Response.Clear();
			HttpContext.Current.Response.Charset = "UTF-8";
			//HttpContext.Current.Response.ContentEncoding = System.Text.Encoding.UTF8;

            try
			{
				if (SHT.Trim().Length.Equals(0))
					throw new Exception("SearchText has not been entered.");

				if (cm.RequestString(CTU, "N").Equals("Y"))
					HttpContext.Current.Response.ContentType = "application/json;charset=utf-8";
				
				HttpContext.Current.Response.Write(JsonConverter.ConvertToJson(SearchCityDB(SHT), (cm.RequestString(TNV, "Y").Equals("Y") ? true : false)));
			}
			catch (Exception ex)
			{
                HttpContext.Current.Response.Write(new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 25, 0, 0).Message);
			}

			HttpContext.Current.Response.End();
		}

		protected DataSet SearchCityDB(string SHT)
		{
			using (DataSet ds = new DataSet("ResponseDetails"))
			{
				using (SqlCommand cmd = new SqlCommand())
				{
					using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["NEWEAGLE"].ConnectionString))
					{
						SqlDataAdapter adp = new SqlDataAdapter(cmd);

						cmd.Connection = conn;
						cmd.CommandTimeout = 60;
						cmd.CommandType = CommandType.StoredProcedure;
						cmd.CommandText = "DBO.WSV_S_항공도시검색2";

						cmd.Parameters.Add("@검색어", SqlDbType.VarChar, 20);
						cmd.Parameters["@검색어"].Value = SHT;

						adp.Fill(ds, "CityInfo");
						adp.Dispose();
					}
				}

				return ds;
			}
		}

		#endregion "도시검색"

		#region "주요도시"

		/// <summary>
		/// 주요도시
		/// </summary>
		/// <returns></returns>
		[WebMethod(Description = "주요도시")]
		public XmlElement MajorCities()
		{
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50)
                    };

                sqlParam[0].Value = 17;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
			{
				XmlDocument XmlDoc = new XmlDocument();
				XmlDoc.Load(mc.XmlFullPath("MajorCities"));

				XmlAttribute TimeStamp = XmlDoc.CreateAttribute("timeStamp");
				TimeStamp.Value = cm.TimeStamp;

				XmlDoc.SelectSingleNode("MajorCities").Attributes.Append(TimeStamp);

				return XmlDoc.DocumentElement;
			}
			catch (Exception ex)
			{
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 17, 0, 0).ToErrors;
			}
		}

		#endregion "주요도시"

        #region "운임+스케쥴 동시조회 SoapHeader4.0 (테스트)"

        //[WebMethod(Description = "Fare + Availability 동시조회")]
        public XmlElement AAASearchFareAvail4RS(string Gubun)
        {
            try
            {
                string MessageID = Guid.NewGuid().ToString();
                string Timestamp = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss:fffZ");
                string Nonce = Common.Base64Encode(System.IO.Path.GetRandomFileName());

                //string PasswordDigest = String.Join(",", Convert.FromBase64String(Nonce));
                //string PasswordDigest = String.Join(",", Common.ConvertToASCII(Timestamp));
                //string PasswordDigest = String.Join(",", Common.ConvertHexaToBytes(Common.SHA1Hash(Common.Base64Decode("NGR1M1lTSSE="))));
                //string PasswordDigest = Convert.ToBase64String(Common.ConvertHexaToBytes(Common.SHA1Hash(String.Concat(String.Join(",", Convert.FromBase64String(Nonce)), String.Join(",", Common.ConvertToASCII(Timestamp)), String.Join(",", Common.ConvertHexaToBytes(Common.SHA1Hash(Common.Base64Decode("NGR1M1lTSSE="))))))));


                System.Security.Cryptography.SHA1Managed shaPwd1 = new System.Security.Cryptography.SHA1Managed();
                byte[] pwd = shaPwd1.ComputeHash(System.Text.Encoding.UTF8.GetBytes(Common.Base64Decode("NGR1M1lTSSE=")));

                byte[] nonceBytes = Convert.FromBase64String(Nonce);
                byte[] createdBytes = System.Text.Encoding.UTF8.GetBytes(Timestamp);
                byte[] operand = new byte[nonceBytes.Length + createdBytes.Length + pwd.Length];
                Array.Copy(nonceBytes, operand, nonceBytes.Length);
                Array.Copy(createdBytes, 0, operand, nonceBytes.Length, createdBytes.Length);
                Array.Copy(pwd, 0, operand, nonceBytes.Length + createdBytes.Length, pwd.Length);
                System.Security.Cryptography.SHA1Managed sha1 = new System.Security.Cryptography.SHA1Managed();
                string trueDigest = Convert.ToBase64String(sha1.ComputeHash(operand));
                string PasswordDigest = trueDigest;

                string StrXML = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:sec=\"http://xml.amadeus.com/2010/06/Security_v1\" xmlns:typ=\"http://xml.amadeus.com/2010/06/Types_v1\" xmlns:iat=\"http://www.iata.org/IATA/2007/00/IATA2010.1\" xmlns:app=\"http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3\" xmlns:link=\"http://wsdl.amadeus.com/2010/06/ws/Link_v1\" xmlns:ses=\"http://xml.amadeus.com/2010/06/Session_v3\" xmlns:sat=\"http://xml.amadeus.com/SATRQT_07_1_1A\">   <soapenv:Header>      <add:MessageID xmlns:add=\"http://www.w3.org/2005/08/addressing\">" + MessageID + "</add:MessageID>      <add:Action xmlns:add=\"http://www.w3.org/2005/08/addressing\">http://webservices.amadeus.com/FMPTBQ_13_3_1A</add:Action>      <add:To xmlns:add=\"http://www.w3.org/2005/08/addressing\">https://noded1.test.webservices.amadeus.com/1ASIWIBEMOT</add:To>      <link:TransactionFlowLink/>      <oas:Security xmlns:oas=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">         <oas:UsernameToken oas1:Id=\"UsernameToken-1\" xmlns:oas1=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">            <oas:Username>WSMOTIBE</oas:Username>            <oas:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">" + Nonce + "</oas:Nonce>            <oas:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest\">" + PasswordDigest + "</oas:Password>            <oas1:Created>" + Timestamp + "</oas1:Created>         </oas:UsernameToken>      </oas:Security>      <AMA_SecurityHostedUser xmlns=\"http://xml.amadeus.com/2010/06/Security_v1\">         <UserID AgentDutyCode=\"SU\" POS_Type=\"1\" PseudoCityCode=\"SELK138AB\" RequestorType=\"U\"/>      </AMA_SecurityHostedUser>   </soapenv:Header>   <soapenv:Body>      <Fare_MasterPricerTravelBoardSearch>  <numberOfUnit>    <unitNumberDetail>      <numberOfUnits>200</numberOfUnits>      <typeOfUnit>RC</typeOfUnit>    </unitNumberDetail>    <unitNumberDetail>      <numberOfUnits>1</numberOfUnits>      <typeOfUnit>PX</typeOfUnit>    </unitNumberDetail>  </numberOfUnit>  <paxReference>    <ptc>ADT</ptc>    <traveller>      <ref>1</ref>    </traveller>  </paxReference>  <fareOptions>    <pricingTickInfo>      <pricingTicketing>        <priceType>RU</priceType>        <priceType>RW</priceType>        <priceType>MST</priceType>        <priceType>TAC</priceType>      </pricingTicketing>    </pricingTickInfo>    <corporate>      <corporateId>        <corporateQualifier>RW</corporateQualifier>        <identity>419388</identity>        <identity>427298</identity>        <identity>152380</identity>        <identity>665766</identity>        <identity>009629</identity>        <identity>653867</identity>      </corporateId>    </corporate>    <feeIdDescription>      <feeId>        <feeType>FBA</feeType>        <feeIdNumber>1</feeIdNumber>      </feeId>    </feeIdDescription>  </fareOptions>  <travelFlightInfo>    <cabinId>      <cabinQualifier>MD</cabinQualifier>      <cabin>M</cabin>    </cabinId>    <companyIdentity>      <carrierQualifier>T</carrierQualifier>      <carrierId>OZ</carrierId>    </companyIdentity>    <companyIdentity>      <carrierQualifier>W</carrierQualifier>      <carrierId>HO</carrierId>      <carrierId>HR</carrierId>      <carrierId>YO</carrierId>      <carrierId>QV</carrierId>      <carrierId>8U</carrierId>      <carrierId>9B</carrierId>      <carrierId>7G</carrierId>      <carrierId>2L</carrierId>      <carrierId>5J</carrierId>      <carrierId>3U</carrierId>      <carrierId>GE</carrierId>    </companyIdentity>  </travelFlightInfo>  <itinerary>    <requestedSegmentRef>      <segRef>1</segRef>    </requestedSegmentRef>    <departureLocalization>      <departurePoint>        <locationId>SEL</locationId>      </departurePoint>    </departureLocalization>    <arrivalLocalization>      <arrivalPointDetails>        <locationId>DAD</locationId>      </arrivalPointDetails>    </arrivalLocalization>    <timeDetails>      <firstDateTimeDetail>        <date>100718</date>      </firstDateTimeDetail>    </timeDetails>  </itinerary>  <itinerary>    <requestedSegmentRef>      <segRef>2</segRef>    </requestedSegmentRef>    <departureLocalization>      <departurePoint>        <locationId>DAD</locationId>      </departurePoint>    </departureLocalization>    <arrivalLocalization>      <arrivalPointDetails>        <locationId>SEL</locationId>      </arrivalPointDetails>    </arrivalLocalization>    <timeDetails>      <firstDateTimeDetail>        <date>200718</date>      </firstDateTimeDetail>    </timeDetails>  </itinerary></Fare_MasterPricerTravelBoardSearch>   </soapenv:Body></soapenv:Envelope>";
                string StrXML2 = String.Concat("<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:sec=\"http://xml.amadeus.com/2010/06/Security_v1\" xmlns:typ=\"http://xml.amadeus.com/2010/06/Types_v1\" xmlns:iat=\"http://www.iata.org/IATA/2007/00/IATA2010.1\" xmlns:app=\"http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3\" xmlns:link=\"http://wsdl.amadeus.com/2010/06/ws/Link_v1\" xmlns:ses=\"http://xml.amadeus.com/2010/06/Session_v3\" xmlns:sat=\"http://xml.amadeus.com/SATRQT_07_1_1A\">",
                                                "<soapenv:Header>",
                                                    "<add:MessageID xmlns:add=\"http://www.w3.org/2005/08/addressing\">" + MessageID + "</add:MessageID>",
                                                    "<add:Action xmlns:add=\"http://www.w3.org/2005/08/addressing\">http://webservices.amadeus.com/FMPTBQ_13_3_1A</add:Action>",
                                                    "<add:To xmlns:add=\"http://www.w3.org/2005/08/addressing\">https://noded1.test.webservices.amadeus.com/1ASIWIBEMOT</add:To>",
                                                    "<link:TransactionFlowLink/>",
                                                    "<oas:Security xmlns:oas=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">",
                                                        "<oas:UsernameToken oas1:Id=\"UsernameToken-1\" xmlns:oas1=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">",
                                                            "<oas:Username>WSMOTIBE</oas:Username>",
                                                            "<oas:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">" + Nonce + "</oas:Nonce>",
                                                            "<oas:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest\">" + PasswordDigest + "</oas:Password>",
                                                            "<oas1:Created>" + Timestamp + "</oas1:Created>",
                                                        "</oas:UsernameToken>",
                                                    "</oas:Security>",
                                                    "<AMA_SecurityHostedUser xmlns=\"http://xml.amadeus.com/2010/06/Security_v1\">",
                                                        "<UserID AgentDutyCode=\"SU\" POS_Type=\"1\" PseudoCityCode=\"SELK138AB\" RequestorType=\"U\"/>",
                                                    "</AMA_SecurityHostedUser>",
                                                "</soapenv:Header>",
                                                "<soapenv:Body>",
                                                    "<Fare_MasterPricerTravelBoardSearch>",
                                                        "<numberOfUnit><unitNumberDetail><numberOfUnits>50</numberOfUnits><typeOfUnit>RC</typeOfUnit></unitNumberDetail><unitNumberDetail><numberOfUnits>1</numberOfUnits><typeOfUnit>PX</typeOfUnit></unitNumberDetail></numberOfUnit>",
                                                        "<paxReference><ptc>ADT</ptc><traveller><ref>1</ref></traveller></paxReference>",
                                                        "<fareOptions>",
                                                            "<pricingTickInfo><pricingTicketing><priceType>RU</priceType><priceType>RW</priceType><priceType>MST</priceType><priceType>TAC</priceType></pricingTicketing></pricingTickInfo>",
                                                            "<feeIdDescription><feeId><feeType>FBA</feeType><feeIdNumber>1</feeIdNumber></feeId></feeIdDescription>",
                                                        "</fareOptions>",
                                                        "<travelFlightInfo>",
                                                            "<cabinId><cabinQualifier>MD</cabinQualifier><cabin>M</cabin>",
                                                            "</cabinId><companyIdentity><carrierQualifier>T</carrierQualifier><carrierId>OZ</carrierId></companyIdentity>",
                                                        "</travelFlightInfo>",
                                                        "<itinerary>",
                                                            "<requestedSegmentRef><segRef>1</segRef></requestedSegmentRef>",
                                                            "<departureLocalization><departurePoint><locationId>SEL</locationId></departurePoint></departureLocalization>",
                                                            "<arrivalLocalization><arrivalPointDetails><locationId>DAD</locationId></arrivalPointDetails></arrivalLocalization>",
                                                            "<timeDetails><firstDateTimeDetail><date>100718</date></firstDateTimeDetail></timeDetails>",
                                                        "</itinerary>",
                                                        "<itinerary>",
                                                            "<requestedSegmentRef><segRef>2</segRef></requestedSegmentRef>",
                                                            "<departureLocalization><departurePoint><locationId>DAD</locationId></departurePoint></departureLocalization>",
                                                            "<arrivalLocalization><arrivalPointDetails><locationId>SEL</locationId></arrivalPointDetails></arrivalLocalization>",
                                                            "<timeDetails><firstDateTimeDetail><date>200718</date></firstDateTimeDetail></timeDetails>",
                                                        "</itinerary>",
                                                    "</Fare_MasterPricerTravelBoardSearch>",
                                                "</soapenv:Body>",
                                            "</soapenv:Envelope>");

                if (!String.IsNullOrWhiteSpace(Gubun))
                    StrXML = StrXML2;
                
                //XmlDocument XmlDoc = new XmlDocument();
                //XmlDoc.LoadXml(StrXML);

                //return XmlDoc.DocumentElement;


                XmlDocument ResXml = new XmlDocument();

                System.Net.HttpWebRequest req = (System.Net.HttpWebRequest)System.Net.WebRequest.Create("https://nodeD1.test.webservices.amadeus.com/1ASIWIBEMOT");
                req.UserAgent = HttpContext.Current.Request.ServerVariables["HTTP_USER_AGENT"].ToString();
                req.KeepAlive = true;
                req.Headers.Add("SOAPAction", "http://webservices.amadeus.com/FMPTBQ_13_3_1A");
                req.Headers.Add("Accept-Encoding", "gzip, deflate");
                req.AutomaticDecompression = System.Net.DecompressionMethods.Deflate | System.Net.DecompressionMethods.GZip;
                req.ContentType = "text/xml;charset=\"utf-8\"";
                req.Accept = "text/xml";
                req.Method = "POST";
                req.Proxy = System.Net.WebRequest.GetSystemWebProxy();

                using (System.IO.StreamWriter reqStream = new System.IO.StreamWriter(req.GetRequestStream(), System.Text.Encoding.GetEncoding("UTF-8")))
                {
                    reqStream.Write(StrXML);
                }

                using (System.Net.HttpWebResponse res = (System.Net.HttpWebResponse)req.GetResponse())
                {
                    if (res.StatusCode.Equals(System.Net.HttpStatusCode.OK))
                    {
                        using (System.IO.StreamReader resStream = new System.IO.StreamReader(res.GetResponseStream(), System.Text.Encoding.GetEncoding("UTF-8")))
                        {
                            ResXml.LoadXml(resStream.ReadToEnd());
                        }
                    }
                }

                return ResXml.DocumentElement;

                //XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.NameTable);
                //xnMgr.AddNamespace("soap", "http://schemas.xmlsoap.org/soap/envelope/");

                //XmlDocument XmlSoapBody = new XmlDocument();
                //XmlSoapBody.LoadXml(ResXml.SelectSingleNode("soap:Envelope/soap:Body", xnMgr).FirstChild.OuterXml);

                //return XmlSoapBody.DocumentElement;
            }
            catch (System.Net.WebException wex)
            {
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.LoadXml(new System.IO.StreamReader(wex.Response.GetResponseStream()).ReadToEnd());

                return XmlDoc.DocumentElement;
            }
            catch (Exception ex)
            {
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.LoadXml("<error><exception><![CDATA[" + ex.ToString() + "]]></exception></error>");

                return XmlDoc.DocumentElement;
            }
        }

        #endregion "운임+스케쥴 동시조회 SoapHeader4.0"

        #region "MP Instant Search(MPIS) (테스트)"

        //[WebMethod(Description = "MP Instant Search(MPIS)")]
        public XmlElement AAAA_InstantSearchRS_H3()
        {
            try
            {
                string WSAP = "1ASIWFRC1A";
                string WBSUserID = "WS1AISC11";
                string Password = "N2yrtEkG1";
                string SearchOfficeId = "BKK1A0201";

                string MessageID = Guid.NewGuid().ToString();
                string Timestamp = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss:fffZ");
                string Nonce = Common.Base64Encode(System.IO.Path.GetRandomFileName());

                System.Security.Cryptography.SHA1Managed shaPwd1 = new System.Security.Cryptography.SHA1Managed();
                byte[] pwd = shaPwd1.ComputeHash(System.Text.Encoding.UTF8.GetBytes(Password));

                byte[] nonceBytes = Convert.FromBase64String(Nonce);
                byte[] createdBytes = System.Text.Encoding.UTF8.GetBytes(Timestamp);
                byte[] operand = new byte[nonceBytes.Length + createdBytes.Length + pwd.Length];
                Array.Copy(nonceBytes, operand, nonceBytes.Length);
                Array.Copy(createdBytes, 0, operand, nonceBytes.Length, createdBytes.Length);
                Array.Copy(pwd, 0, operand, nonceBytes.Length + createdBytes.Length, pwd.Length);
                System.Security.Cryptography.SHA1Managed sha1 = new System.Security.Cryptography.SHA1Managed();
                string trueDigest = Convert.ToBase64String(sha1.ComputeHash(operand));
                string PasswordDigest = trueDigest;

                AirWebService.InstantTravelBoardSearch.AmadeusWebService aws = new AirWebService.InstantTravelBoardSearch.AmadeusWebService();
                AirWebService.InstantTravelBoardSearch.MessageID messageID = new AirWebService.InstantTravelBoardSearch.MessageID();
                AirWebService.InstantTravelBoardSearch.Action action = new AirWebService.InstantTravelBoardSearch.Action();
                AirWebService.InstantTravelBoardSearch.To to = new AirWebService.InstantTravelBoardSearch.To();
                AirWebService.InstantTravelBoardSearch.Security security = new AirWebService.InstantTravelBoardSearch.Security();
                AirWebService.InstantTravelBoardSearch.UsernameToken unt = new AirWebService.InstantTravelBoardSearch.UsernameToken();
                AirWebService.InstantTravelBoardSearch.Nonce nonce = new AirWebService.InstantTravelBoardSearch.Nonce();
                AirWebService.InstantTravelBoardSearch.Password password = new AirWebService.InstantTravelBoardSearch.Password();
                AirWebService.InstantTravelBoardSearch.AMA_SecurityHostedUser shu = new AirWebService.InstantTravelBoardSearch.AMA_SecurityHostedUser();
                AirWebService.InstantTravelBoardSearch.UserID userId = new AirWebService.InstantTravelBoardSearch.UserID();

                messageID.Value = MessageID;
                action.Value = "http://webservices.amadeus.com/FIFRTQ_16_2_1A";
                to.Value = "https://nodeD1.production.webservices.amadeus.com/1ASIWFRC1A";

                nonce.Value = Nonce;
                password.Value = PasswordDigest;
                
                unt.Username = WBSUserID;
                unt.Nonce = nonce;
                unt.Password = password;
                unt.Created = Timestamp;
                security.UsernameToken = unt;

                userId.AgentDutyCode = "SU";
                userId.POS_Type = "1";
                userId.PseudoCityCode = SearchOfficeId;
                userId.RequestorType = "U";
                shu.UserID = userId;

                aws.MessageIDValue = messageID;
                aws.ActionValue = action;
                aws.ToValue = to;
                aws.SecurityValue = security;
                aws.AMA_SecurityHostedUserValue = shu;

                AmadeusConfig ac = new AmadeusConfig();

                XmlDocument XmlReq = new XmlDocument();
                XmlReq.Load(ac.XmlFullPath("InstantTravelBoardSearchRQ"));

                return aws.ServiceRQ(XmlReq.DocumentElement);
            }
            catch (Exception ex)
            {
                XmlDocument XmlErr = new XmlDocument();
                XmlErr.LoadXml(String.Format("<x><![CDATA[{0}]]></x>", ex.ToString()));

                return XmlErr.DocumentElement;
            }
        }

        //[WebMethod(Description = "MP Instant Search(MPIS)")]
        public XmlElement AAAA_InstantSearchRS_H4()
        {
            try
            {
                string WSAP = "1ASIWFRC1A";
                string WBSUserID = "WS1AISC11";
                string Password = "N2yrtEkG1";
                string SearchOfficeId = "BKK1A0201";
                
                string MessageID = Guid.NewGuid().ToString();
                string Timestamp = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss:fffZ");
                string Nonce = Common.Base64Encode(System.IO.Path.GetRandomFileName());

                System.Security.Cryptography.SHA1Managed shaPwd1 = new System.Security.Cryptography.SHA1Managed();
                byte[] pwd = shaPwd1.ComputeHash(System.Text.Encoding.UTF8.GetBytes(Password));

                byte[] nonceBytes = Convert.FromBase64String(Nonce);
                byte[] createdBytes = System.Text.Encoding.UTF8.GetBytes(Timestamp);
                byte[] operand = new byte[nonceBytes.Length + createdBytes.Length + pwd.Length];
                Array.Copy(nonceBytes, operand, nonceBytes.Length);
                Array.Copy(createdBytes, 0, operand, nonceBytes.Length, createdBytes.Length);
                Array.Copy(pwd, 0, operand, nonceBytes.Length + createdBytes.Length, pwd.Length);
                System.Security.Cryptography.SHA1Managed sha1 = new System.Security.Cryptography.SHA1Managed();
                string trueDigest = Convert.ToBase64String(sha1.ComputeHash(operand));
                string PasswordDigest = trueDigest;

                AmadeusConfig ac = new AmadeusConfig();

                XmlDocument XmlReq = new XmlDocument();
                XmlReq.Load(ac.XmlFullPath("InstantTravelBoardSearchRQ"));

                string StrXML = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:sec=\"http://xml.amadeus.com/2010/06/Security_v1\" xmlns:typ=\"http://xml.amadeus.com/2010/06/Types_v1\" xmlns:iat=\"http://www.iata.org/IATA/2007/00/IATA2010.1\" xmlns:app=\"http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3\" xmlns:link=\"http://wsdl.amadeus.com/2010/06/ws/Link_v1\" xmlns:ses=\"http://xml.amadeus.com/2010/06/Session_v3\"><soapenv:Header><add:MessageID xmlns:add=\"http://www.w3.org/2005/08/addressing\">" + MessageID + "</add:MessageID><add:Action xmlns:add=\"http://www.w3.org/2005/08/addressing\">http://webservices.amadeus.com/FIFRTQ_16_2_1A</add:Action><add:To xmlns:add=\"http://www.w3.org/2005/08/addressing\">https://nodeD1.production.webservices.amadeus.com/1ASIWFRC1A</add:To><link:TransactionFlowLink/><oas:Security xmlns:oas=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"><oas:UsernameToken oas1:Id=\"UsernameToken-1\" xmlns:oas1=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"><oas:Username>WS1AISC11</oas:Username><oas:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">" + Nonce + "</oas:Nonce><oas:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest\">" + PasswordDigest + "</oas:Password><oas1:Created>" + Timestamp + "</oas1:Created></oas:UsernameToken></oas:Security><AMA_SecurityHostedUser xmlns=\"http://xml.amadeus.com/2010/06/Security_v1\"><UserID AgentDutyCode=\"SU\" POS_Type=\"1\" PseudoCityCode=\"BKK1A0201\" RequestorType=\"U\"/></AMA_SecurityHostedUser></soapenv:Header><soapenv:Body><Fare_InstantTravelBoardSearch xmlns=\"http://xml.amadeus.com/FIFRTQ_16_2_1A\"><numberOfUnit><unitNumberDetail><numberOfUnits>1</numberOfUnits><typeOfUnit>PX</typeOfUnit></unitNumberDetail><unitNumberDetail><numberOfUnits>50</numberOfUnits><typeOfUnit>RC</typeOfUnit></unitNumberDetail></numberOfUnit><paxReference><ptc>ADT</ptc><traveller><ref>1</ref></traveller></paxReference><fareOptions><pricingTickInfo><pricingTicketing><priceType>RP</priceType><priceType>RU</priceType><priceType>CUC</priceType></pricingTicketing></pricingTickInfo><conversionRate><conversionRateDetail><currency>XAF</currency></conversionRateDetail></conversionRate></fareOptions><itinerary><requestedSegmentRef><segRef>1</segRef></requestedSegmentRef><departureLocalization><departurePoint><locationId>BZV</locationId><airportCityQualifier>C</airportCityQualifier></departurePoint></departureLocalization><arrivalLocalization><arrivalPointDetails><locationId>SHA</locationId><airportCityQualifier>C</airportCityQualifier></arrivalPointDetails></arrivalLocalization><timeDetails><firstDateTimeDetail><date>101117</date></firstDateTimeDetail></timeDetails></itinerary><officeIdDetails><officeIdInformation><officeIdentification><agentSignin>CG</agentSignin></officeIdentification></officeIdInformation></officeIdDetails></Fare_InstantTravelBoardSearch></soapenv:Body></soapenv:Envelope>";
                //string StrXML = "<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Header><add:MessageID xmlns:add=\"http://www.w3.org/2005/08/addressing\">" + MessageID + "</add:MessageID><add:Action xmlns:add=\"http://www.w3.org/2005/08/addressing\">http://webservices.amadeus.com/FIFRTQ_16_2_1A</add:Action><add:To xmlns:add=\"http://www.w3.org/2005/08/addressing\">https://nodeD1.production.webservices.amadeus.com/1ASIWFRC1A</add:To><oas:Security xmlns:oas=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"><oas:UsernameToken xmlns:oas1=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" oas1:Id=\"UsernameToken-1\"><oas:Username>WS1AISC11</oas:Username><oas:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">" + Nonce + "</oas:Nonce><oas:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest\">" + PasswordDigest + "</oas:Password><oas1:Created>" + Timestamp + "</oas1:Created></oas:UsernameToken></oas:Security><AMA_SecurityHostedUser xmlns=\"http://xml.amadeus.com/2010/06/Security_v1\"><UserID POS_Type=\"1\" PseudoCityCode=\"BKK1A0201\" AgentDutyCode=\"SU\" RequestorType=\"U\"/></AMA_SecurityHostedUser></soap:Header><soap:Body>" + XmlReq.OuterXml + "</soap:Body></soap:Envelope>";

                //System.Text.StringBuilder sb = new System.Text.StringBuilder();
                //sb.Append("<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">");
                //sb.Append("<soap:Header>");
                //sb.Append("<add:MessageID xmlns:add=\"http://www.w3.org/2005/08/addressing\">" + MessageID + "</add:MessageID>");
                //sb.Append("<add:Action xmlns:add=\"http://www.w3.org/2005/08/addressing\">http://webservices.amadeus.com/FIFRTQ_16_2_1A</add:Action>");
                //sb.Append("<add:To xmlns:add=\"http://www.w3.org/2005/08/addressing\">" + String.Format("https://nodeD1.production.webservices.amadeus.com/{0}", WSAP) + "</add:To>");
                //sb.Append("<oas:Security xmlns:oas=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">");
                //sb.Append("<oas:UsernameToken xmlns:oas1=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" oas1:Id=\"UsernameToken-1\">");
                //sb.Append("<oas:Username>" + WBSUserID + "</oas:Username>");
                //sb.Append("<oas:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">" + Nonce + "</oas:Nonce>");
                //sb.Append("<oas:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest\">" + PasswordDigest + "</oas:Password>");
                //sb.Append("<oas1:Created>" + Timestamp + "</oas1:Created>");
                //sb.Append("</oas:UsernameToken>");
                //sb.Append("</oas:Security>");
                //sb.Append("<AMA_SecurityHostedUser xmlns=\"http://xml.amadeus.com/2010/06/Security_v1\">");
                //sb.Append("<UserID POS_Type=\"1\" PseudoCityCode=\"" + SearchOfficeId + "\" AgentDutyCode=\"SU\" RequestorType=\"U\"/>");
                //sb.Append("</AMA_SecurityHostedUser>");
                //sb.Append("</soap:Header>");
                //sb.Append("<soap:Body>");
                //sb.Append(XmlReq.OuterXml);
                //sb.Append("</soap:Body>");
                //sb.Append("</soap:Envelope>");
                //string StrXML = sb.ToString();

                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.LoadXml(StrXML);

                cm.XmlFileSave(XmlDoc, "Amadeus", "InstantSearch", "N", "");

                //return XmlDoc.DocumentElement;

                //return XmlRequest.SoapSend("https://nodeD1.production.webservices.amadeus.com/1ASIWFRC1A", "http://webservices.amadeus.com/FIFRTQ_16_2_1A", StrXML);

                XmlDocument ResXml = new XmlDocument();

                System.Net.HttpWebRequest req = (System.Net.HttpWebRequest)System.Net.WebRequest.Create("https://nodeD1.production.webservices.amadeus.com/1ASIWFRC1A");
                req.UserAgent = HttpContext.Current.Request.ServerVariables["HTTP_USER_AGENT"].ToString();
                req.KeepAlive = true;
                req.Headers.Add("SOAPAction", "http://webservices.amadeus.com/FIFRTQ_16_2_1A");
                req.ContentType = "text/xml;charset=\"utf-8\"";
                //req.ContentType = string.Format("application/soap+xml;charset=UTF-8;action=\"{0}\"", "http://webservices.amadeus.com/FIFRTQ_16_2_1A");
                req.Accept = "text/xml";
                req.Method = "POST";
                req.Proxy = System.Net.WebRequest.GetSystemWebProxy();

                using (System.IO.StreamWriter reqStream = new System.IO.StreamWriter(req.GetRequestStream(), System.Text.Encoding.GetEncoding("UTF-8")))
                {
                    reqStream.Write(StrXML);
                }

                using (System.Net.HttpWebResponse res = (System.Net.HttpWebResponse)req.GetResponse())
                {
                    if (res.StatusCode.Equals(System.Net.HttpStatusCode.OK))
                    {
                        using (System.IO.StreamReader resStream = new System.IO.StreamReader(res.GetResponseStream(), System.Text.Encoding.GetEncoding("UTF-8")))
                        {
                            ResXml.LoadXml(resStream.ReadToEnd());
                        }
                    }
                }

                return ResXml.DocumentElement;
            }
            catch (System.Net.WebException wex)
            {
                //try
                //{
                //    XmlDocument XmlDoc = new XmlDocument();
                //    XmlDoc.LoadXml(new System.IO.StreamReader(wex.Response.GetResponseStream()).ReadToEnd());

                //    return XmlDoc.DocumentElement;
                //}
                //catch (Exception ex)
                //{
                //    XmlDocument XmlDoc = new XmlDocument();
                //    XmlDoc.LoadXml("<error><exception><![CDATA[" + wex.ToString().Replace("&", "&amp;") + "]]></exception><exception><![CDATA[" + ex.ToString().Replace("&", "&amp;") + "]]></exception></error>");

                //    return XmlDoc.DocumentElement;
                //}

                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.LoadXml("<error><exception><![CDATA[" + wex.ToString() + "]]></exception></error>");

                return XmlDoc.DocumentElement;
            }
            catch (Exception ex)
            {
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.LoadXml("<error><exception><![CDATA[" + ex.ToString() + "]]></exception></error>");

                return XmlDoc.DocumentElement;
            }
        }

        //[WebMethod(Description = "MP Instant Search(MPIS)")]
        public XmlElement AAAA_InstantSearchRS_H4_DELETE()
        {
            int SNM = 0;
            string GUID = cm.GetGUID;

            try
            {
                string WSAP = "1ASIWFRC1A";
                string WBSUserID = "WS1AISC11";
                string Password = "N2yrtEkG1";
                string SearchOfficeId = "BKK1A0201";

                string MessageID = Guid.NewGuid().ToString();
                string Timestamp = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss:fffZ");
                string Nonce = Common.Base64Encode(System.IO.Path.GetRandomFileName());

                System.Security.Cryptography.SHA1Managed shaPwd1 = new System.Security.Cryptography.SHA1Managed();
                byte[] pwd = shaPwd1.ComputeHash(System.Text.Encoding.UTF8.GetBytes(Password));

                byte[] nonceBytes = Convert.FromBase64String(Nonce);
                byte[] createdBytes = System.Text.Encoding.UTF8.GetBytes(Timestamp);
                byte[] operand = new byte[nonceBytes.Length + createdBytes.Length + pwd.Length];
                Array.Copy(nonceBytes, operand, nonceBytes.Length);
                Array.Copy(createdBytes, 0, operand, nonceBytes.Length, createdBytes.Length);
                Array.Copy(pwd, 0, operand, nonceBytes.Length + createdBytes.Length, pwd.Length);
                System.Security.Cryptography.SHA1Managed sha1 = new System.Security.Cryptography.SHA1Managed();
                string trueDigest = Convert.ToBase64String(sha1.ComputeHash(operand));
                string PasswordDigest = trueDigest;

                AmadeusConfig ac = new AmadeusConfig();

                XmlDocument XmlReq = new XmlDocument();
                XmlReq.Load(ac.XmlFullPath("InstantTravelBoardSearchRQ"));

                //MessageID = "6ad81fc2-454b-4217-a548-c91228507c56";
                //Nonce = "VTRzbnZUWkhCNEFP";
                //PasswordDigest = "PD+fHI26JzTqtOaDmYlDpNFPki4=";
                //Timestamp = "2017-11-06T01:22:04:827Z";

                //string StrXML = XmlReq.OuterXml.Replace("${Security#messageID}", MessageID).Replace("${Security#nonce}", Nonce).Replace("${Security#digest}", PasswordDigest).Replace("${Security#timestamp}", Timestamp);
                string StrXML = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:sec=\"http://xml.amadeus.com/2010/06/Security_v1\" xmlns:typ=\"http://xml.amadeus.com/2010/06/Types_v1\" xmlns:iat=\"http://www.iata.org/IATA/2007/00/IATA2010.1\" xmlns:app=\"http://xml.amadeus.com/2010/06/AppMdw_CommonTypes_v3\" xmlns:link=\"http://wsdl.amadeus.com/2010/06/ws/Link_v1\" xmlns:ses=\"http://xml.amadeus.com/2010/06/Session_v3\"><soapenv:Header><add:MessageID xmlns:add=\"http://www.w3.org/2005/08/addressing\">" + MessageID + "</add:MessageID><add:Action xmlns:add=\"http://www.w3.org/2005/08/addressing\">http://webservices.amadeus.com/FIFRTQ_16_2_1A</add:Action><add:To xmlns:add=\"http://www.w3.org/2005/08/addressing\">https://nodeD1.production.webservices.amadeus.com/1ASIWFRC1A</add:To><link:TransactionFlowLink/><oas:Security xmlns:oas=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"><oas:UsernameToken oas1:Id=\"UsernameToken-1\" xmlns:oas1=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"><oas:Username>WS1AISC11</oas:Username><oas:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">" + Nonce + "</oas:Nonce><oas:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest\">" + PasswordDigest + "</oas:Password><oas1:Created>" + Timestamp + "</oas1:Created></oas:UsernameToken></oas:Security><AMA_SecurityHostedUser xmlns=\"http://xml.amadeus.com/2010/06/Security_v1\"><UserID AgentDutyCode=\"SU\" POS_Type=\"1\" PseudoCityCode=\"BKK1A0201\" RequestorType=\"U\"/></AMA_SecurityHostedUser></soapenv:Header><soapenv:Body><Fare_InstantTravelBoardSearch xmlns=\"http://xml.amadeus.com/FIFRTQ_16_2_1A\"><numberOfUnit><unitNumberDetail><numberOfUnits>1</numberOfUnits><typeOfUnit>PX</typeOfUnit></unitNumberDetail><unitNumberDetail><numberOfUnits>50</numberOfUnits><typeOfUnit>RC</typeOfUnit></unitNumberDetail></numberOfUnit><paxReference><ptc>ADT</ptc><traveller><ref>1</ref></traveller></paxReference><fareOptions><pricingTickInfo><pricingTicketing><priceType>RP</priceType><priceType>RU</priceType><priceType>CUC</priceType></pricingTicketing></pricingTickInfo><conversionRate><conversionRateDetail><currency>XAF</currency></conversionRateDetail></conversionRate></fareOptions><itinerary><requestedSegmentRef><segRef>1</segRef></requestedSegmentRef><departureLocalization><departurePoint><locationId>BZV</locationId><airportCityQualifier>C</airportCityQualifier></departurePoint></departureLocalization><arrivalLocalization><arrivalPointDetails><locationId>SHA</locationId><airportCityQualifier>C</airportCityQualifier></arrivalPointDetails></arrivalLocalization><timeDetails><firstDateTimeDetail><date>101117</date></firstDateTimeDetail></timeDetails></itinerary><officeIdDetails><officeIdInformation><officeIdentification><agentSignin>CG</agentSignin></officeIdentification></officeIdInformation></officeIdDetails></Fare_InstantTravelBoardSearch></soapenv:Body></soapenv:Envelope>";
                //string StrXML = "<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Header><add:MessageID xmlns:add=\"http://www.w3.org/2005/08/addressing\">" + MessageID + "</add:MessageID><add:Action xmlns:add=\"http://www.w3.org/2005/08/addressing\">http://webservices.amadeus.com/FIFRTQ_16_2_1A</add:Action><add:To xmlns:add=\"http://www.w3.org/2005/08/addressing\">https://nodeD1.production.webservices.amadeus.com/1ASIWFRC1A</add:To><oas:Security xmlns:oas=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\"><oas:UsernameToken xmlns:oas1=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" oas1:Id=\"UsernameToken-1\"><oas:Username>WS1AISC11</oas:Username><oas:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">" + Nonce + "</oas:Nonce><oas:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest\">" + PasswordDigest + "</oas:Password><oas1:Created>" + Timestamp + "</oas1:Created></oas:UsernameToken></oas:Security><AMA_SecurityHostedUser xmlns=\"http://xml.amadeus.com/2010/06/Security_v1\"><UserID POS_Type=\"1\" PseudoCityCode=\"BKK1A0201\" AgentDutyCode=\"SU\" RequestorType=\"U\"/></AMA_SecurityHostedUser></soap:Header><soap:Body>" + XmlReq.OuterXml + "</soap:Body></soap:Envelope>";

                //System.Text.StringBuilder sb = new System.Text.StringBuilder();
                //sb.Append("<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">");
                //sb.Append("<soap:Header>");
                //sb.Append("<add:MessageID xmlns:add=\"http://www.w3.org/2005/08/addressing\">" + MessageID + "</add:MessageID>");
                //sb.Append("<add:Action xmlns:add=\"http://www.w3.org/2005/08/addressing\">http://webservices.amadeus.com/FIFRTQ_16_2_1A</add:Action>");
                //sb.Append("<add:To xmlns:add=\"http://www.w3.org/2005/08/addressing\">" + String.Format("https://nodeD1.production.webservices.amadeus.com/{0}", WSAP) + "</add:To>");
                //sb.Append("<oas:Security xmlns:oas=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\">");
                //sb.Append("<oas:UsernameToken xmlns:oas1=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\" oas1:Id=\"UsernameToken-1\">");
                //sb.Append("<oas:Username>" + WBSUserID + "</oas:Username>");
                //sb.Append("<oas:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">" + Nonce + "</oas:Nonce>");
                //sb.Append("<oas:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest\">" + PasswordDigest + "</oas:Password>");
                //sb.Append("<oas1:Created>" + Timestamp + "</oas1:Created>");
                //sb.Append("</oas:UsernameToken>");
                //sb.Append("</oas:Security>");
                //sb.Append("<AMA_SecurityHostedUser xmlns=\"http://xml.amadeus.com/2010/06/Security_v1\">");
                //sb.Append("<UserID POS_Type=\"1\" PseudoCityCode=\"" + SearchOfficeId + "\" AgentDutyCode=\"SU\" RequestorType=\"U\"/>");
                //sb.Append("</AMA_SecurityHostedUser>");
                //sb.Append("</soap:Header>");
                //sb.Append("<soap:Body>");
                //sb.Append(XmlReq.OuterXml);
                //sb.Append("</soap:Body>");
                //sb.Append("</soap:Envelope>");
                //string StrXML = sb.ToString();

                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.LoadXml(StrXML);

                cm.XmlFileSave(XmlDoc, "Amadeus", "InstantSearch", "N", "");

                //return XmlDoc.DocumentElement;


                //return XmlRequest.SoapSend("https://nodeD1.production.webservices.amadeus.com/1ASIWFRC1A", "http://webservices.amadeus.com/FIFRTQ_16_2_1A", StrXML);

                XmlDocument ResXml = new XmlDocument();

                System.Net.HttpWebRequest req = (System.Net.HttpWebRequest)System.Net.WebRequest.Create("https://nodeD1.production.webservices.amadeus.com/1ASIWFRC1A");
                if (HttpContext.Current != null)
                    req.UserAgent = HttpContext.Current.Request.ServerVariables["HTTP_USER_AGENT"].ToString();
                req.KeepAlive = true;
                req.Headers.Add("SOAPAction", "http://webservices.amadeus.com/FIFRTQ_16_2_1A");
                //req.Headers.Add("Accept-Encoding", "gzip,deflate");
                req.ContentType = "text/xml;charset=\"utf-8\"";
                req.Accept = "text/xml";
                req.Method = "POST";
                //req.Proxy = System.Net.WebRequest.GetSystemWebProxy();

                using (System.IO.StreamWriter reqStream = new System.IO.StreamWriter(req.GetRequestStream(), System.Text.Encoding.GetEncoding("UTF-8")))
                {
                    reqStream.Write(StrXML);
                }

                using (System.Net.HttpWebResponse res = (System.Net.HttpWebResponse)req.GetResponse())
                {
                    if (res.StatusCode.Equals(System.Net.HttpStatusCode.OK))
                    {
                        using (System.IO.StreamReader resStream = new System.IO.StreamReader(res.GetResponseStream(), System.Text.Encoding.GetEncoding("UTF-8")))
                        {
                            ResXml.LoadXml(resStream.ReadToEnd());
                        }
                    }
                }

                return ResXml.DocumentElement;
            }
            catch (System.Net.WebException wex)
            {
                //try
                //{
                //    XmlDocument XmlDoc = new XmlDocument();
                //    XmlDoc.LoadXml(new System.IO.StreamReader(wex.Response.GetResponseStream()).ReadToEnd());

                //    return XmlDoc.DocumentElement;
                //}
                //catch (Exception ex)
                //{
                //    XmlDocument XmlDoc = new XmlDocument();
                //    XmlDoc.LoadXml("<error><exception><![CDATA[" + wex.ToString().Replace("&", "&amp;") + "]]></exception><exception><![CDATA[" + ex.ToString().Replace("&", "&amp;") + "]]></exception></error>");

                //    return XmlDoc.DocumentElement;
                //}

                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.LoadXml("<error><exception><![CDATA[" + wex.ToString() + "]]></exception></error>");

                return XmlDoc.DocumentElement;
            }
            catch (Exception ex)
            {
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.LoadXml("<error><exception><![CDATA[" + ex.ToString() + "]]></exception></error>");

                return XmlDoc.DocumentElement;
            }





            //string DLC = "SEL";
            //string ALC = "BKK";
            //string ROT = "RT";
            //string DTD = "2017-09-27";
            //string PUB = "N";
            //string LTD = "N";
            //string FTR = "Y";

            //XmlDocument XmlDoc = new XmlDocument();
            //XmlDoc.Load(mc.XmlFullPath("_MPIS"));

            //XmlElement ResXml = XmlDoc.DocumentElement;
            //XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
            //xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_InstantTravelBoardSearch"));

            ////MaxStay(유효기간)
            ////XmlAttribute MaxStay;
            ////string DepartureDate = cm.RequestDateTime(DTD.Split(',')[0].Trim());

            ////foreach (XmlNode Value in ResXml.SelectNodes("m:value", xnMgr))
            ////{
            ////    MaxStay = Value.Attributes.Append(ResXml.OwnerDocument.CreateAttribute("maxStay"));
            ////    MaxStay.InnerText = Common.ConvertToMaxStay(DepartureDate, Value.SelectSingleNode("m:criteriaDetails/m:value", xnMgr).InnerText);
            ////}
            ////cm.XmlFileSave(ResXml, mc.Name, "ToModeSearchFareAvailRS_MaxStay", "N", GUID);

            ////프로모션 정보
            //XmlElement PromXml = null;

            ////if (PRM.Equals("Y") && !ROT.Equals("MD"))
            ////{
            ////    PromXml = SearchPromotionList(SNM, DLC, ALC, ROT, DTD, ARD, OPN, (CCD.Equals("C") || CCD.Equals("F")) ? CCD : "Y", PTC[0]);
            ////    cm.XmlFileSave(PromXml, mc.Name, "SearchPromotionList", "Y", GUID);
            ////}

            //XmlElement XmlMode = ToModeSearchFareAvailMPISRS(SNM, ResXml, PromXml, xnMgr, DLC, ALC, ROT, DTD, PUB, LTD, FTR);


            //return XmlMode;
        }

        public XmlElement ToModeSearchFareAvailMPISRSTEST(int SNM, XmlElement ResXml, XmlElement PromXml, XmlNamespaceManager xnMgr, string DLC, string ALC, string ROT, string DTD, string PUB, string LTD, string FTR)
        {
            string PTC = Common.ChangePaxType1(ResXml.SelectSingleNode("m:recommendation[1]/m:paxFareProduct[1]/m:paxReference[1]/m:ptc", xnMgr).InnerText);
            foreach (XmlNode recommendation in ResXml.SelectNodes(String.Format("m:recommendation[m:paxFareProduct/m:fareDetails/m:groupOfFares/m:productInformation/m:fareProductDetail[m:passengerType='{0}'{1}]]", Common.AmadeusPaxTypeCode(PTC), (PTC).Equals("ADT") ? " or m:passengerType='IT'" : ""), xnMgr))
            {
                cm.ConvertToDateTime(recommendation.SelectSingleNode("m:paxFareProduct/m:fare/m:pricingMessage[m:freeTextQualification/m:textSubjectQualifier='LTD']/m:description[2]", xnMgr).InnerText);
            }

            return ResXml;
        }

        /// <summary>
        /// SearchFareAvailRS를 통합용 XML구조로 치환
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="ResXml">SearchFareAvailRS의 Data</param>
        /// <param name="PromXml">SearchPromotionList의 Data</param>
        /// <param name="xnMgr">XmlNamespaceManager</param>
        /// <param name="DLC">출발지 공항 코드</param>
        /// <param name="ALC">도착지 공항 코드</param>
        /// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="PUB">PUB요금 출력여부</param>
        /// <param name="LTD">발권마감일 체크여부</param>
        /// <param name="FTR">필터링 사용여부(발권마감일 체크 포함)</param>
        /// <returns></returns>
        public XmlElement ToModeSearchFareAvailMPISRS(int SNM, XmlElement ResXml, XmlElement PromXml, XmlNamespaceManager xnMgr, string DLC, string ALC, string ROT, string DTD, string PUB, string LTD, string FTR)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchFareAvailRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;
            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("ref").InnerText = ((XmlAttribute)ResXml.Attributes.GetNamedItem("ref") != null) ? ResXml.Attributes.GetNamedItem("ref").InnerText : "";

            XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
            XmlNode FlightIndex = FlightInfo.SelectSingleNode("flightIndex");
            XmlNode SegmentGroup = FlightIndex.SelectSingleNode("segGroup");
            XmlNode Segment = SegmentGroup.SelectSingleNode("seg");
            XmlNode StopSegment = Segment.SelectSingleNode("seg");

            XmlNode NewFlightIndex;
            XmlNode NewSegmentGroup;
            XmlNode NewSegment;
            XmlNode NewStopSegment;

            string PTC = Common.ChangePaxType1(ResXml.SelectSingleNode("m:recommendation[1]/m:paxFareProduct[1]/m:paxReference[1]/m:ptc", xnMgr).InnerText);
            string CCD = ResXml.SelectSingleNode("m:recommendation[1]/m:paxFareProduct[1]/m:fareDetails[1]/m:majCabin/m:bookingClassDetails/m:designator", xnMgr).InnerText;
            string CDS = string.Empty;
            string MCC = string.Empty;
            string OCC = string.Empty;
            bool Train = false;
            int CCDRef = Common.RefOverride("MPIS", CCD);
            int PriceRef = 1;
            int SegmentRef = 1;
            int SegCount = 0;
            int ChinaStopoverCount = 0;

            FlightInfo.Attributes.GetNamedItem("ptc").InnerText = PTC;
            FlightInfo.Attributes.GetNamedItem("rot").InnerText = ROT;

            foreach (XmlNode flightIndex in ResXml.SelectNodes("m:flightIndex", xnMgr))
            {
                NewFlightIndex = FlightInfo.AppendChild(FlightIndex.CloneNode(false));
                NewFlightIndex.Attributes.GetNamedItem("ref").InnerText = flightIndex.SelectSingleNode("m:requestedSegmentRef/m:segRef", xnMgr).InnerText;

                foreach (XmlNode groupOfFlights in flightIndex.SelectNodes("m:groupOfFlights", xnMgr))
                {
                    Train = false;
                    CDS = "N";
                    SegCount = groupOfFlights.SelectNodes("m:flightDetails", xnMgr).Count;
                    ChinaStopoverCount = 0;
                    SegmentRef = 1;

                    NewSegmentGroup = NewFlightIndex.AppendChild(SegmentGroup.CloneNode(false));
                    NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = Common.RefSum(groupOfFlights.SelectSingleNode("m:propFlightGrDetail/m:flightProposal[1]/m:ref", xnMgr).InnerText, CCDRef);
                    NewSegmentGroup.Attributes.GetNamedItem("eft").InnerText = groupOfFlights.SelectSingleNode("m:propFlightGrDetail/m:flightProposal[m:unitQualifier='EFT']/m:ref", xnMgr).InnerText;
                    NewSegmentGroup.Attributes.GetNamedItem("mjc").InnerText = groupOfFlights.SelectSingleNode("m:propFlightGrDetail/m:flightProposal[m:unitQualifier='MCX']/m:ref", xnMgr).InnerText;
                    NewSegmentGroup.Attributes.GetNamedItem("nosp").InnerText = SegCount.ToString();

                    foreach (XmlNode flightDetails in groupOfFlights.SelectNodes("m:flightDetails", xnMgr))
                    {
                        //항공이 아닌 다른 운송수단(철도 등)이 포함된 경우
                        if (flightDetails.SelectNodes("m:flightInformation/m:productDetail/m:equipmentType", xnMgr).Count > 0 && "/BUS/TGV/THL/THS/TRS/MTL/THT/TRN/TSL/ICE/LCH/".IndexOf(flightDetails.SelectSingleNode("m:flightInformation/m:productDetail/m:equipmentType", xnMgr).InnerText) != -1)
                        {
                            Train = true;
                            break;
                        }

                        //특정항공사 제외
                        MCC = flightDetails.SelectSingleNode("m:flightInformation/m:companyId/m:marketingCarrier", xnMgr).InnerText;
                        OCC = (flightDetails.SelectNodes("m:flightInformation/m:companyId/m:operatingCarrier", xnMgr).Count > 0) ? flightDetails.SelectSingleNode("m:flightInformation/m:companyId/m:operatingCarrier", xnMgr).InnerText : "";

                        if (Common.ScheduleExceptionHandling(MCC, OCC))
                        {
                            Train = true;
                            break;
                        }

                        NewSegment = NewSegmentGroup.AppendChild(Segment.CloneNode(false));
                        NewSegment.Attributes.GetNamedItem("dlc").InnerText = flightDetails.SelectSingleNode("m:flightInformation/m:location[1]/m:locationId", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("alc").InnerText = flightDetails.SelectSingleNode("m:flightInformation/m:location[2]/m:locationId", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("ddt").InnerText = (flightDetails.SelectNodes("m:flightInformation/m:productDateTime/m:timeOfDeparture", xnMgr).Count > 0) ? cm.ConvertToDateTime(flightDetails.SelectSingleNode("m:flightInformation/m:productDateTime/m:dateOfDeparture", xnMgr).InnerText, flightDetails.SelectSingleNode("m:flightInformation/m:productDateTime/m:timeOfDeparture", xnMgr).InnerText) : cm.RequestDateTime(flightDetails.SelectSingleNode("m:flightInformation/m:productDateTime/m:dateOfDeparture", xnMgr).InnerText);
                        NewSegment.Attributes.GetNamedItem("ardt").InnerText = (flightDetails.SelectNodes("m:flightInformation/m:productDateTime/m:timeOfArrival", xnMgr).Count > 0) ? cm.ConvertToDateTime(flightDetails.SelectSingleNode("m:flightInformation/m:productDateTime/m:dateOfArrival", xnMgr).InnerText, flightDetails.SelectSingleNode("m:flightInformation/m:productDateTime/m:timeOfArrival", xnMgr).InnerText) : cm.RequestDateTime(flightDetails.SelectSingleNode("m:flightInformation/m:productDateTime/m:dateOfArrival", xnMgr).InnerText);
                        NewSegment.Attributes.GetNamedItem("mcc").InnerText = MCC;
                        NewSegment.Attributes.GetNamedItem("occ").InnerText = OCC;
                        NewSegment.Attributes.GetNamedItem("fln").InnerText = (flightDetails.SelectNodes("m:flightInformation/m:flightOrtrainNumber", xnMgr).Count > 0) ? Common.ZeroPaddingFlight(flightDetails.SelectSingleNode("m:flightInformation/m:flightOrtrainNumber", xnMgr).InnerText) : "";
                        NewSegment.Attributes.GetNamedItem("eqt").InnerText = (flightDetails.SelectNodes("m:flightInformation/m:productDetail/m:equipmentType", xnMgr).Count > 0) ? flightDetails.SelectSingleNode("m:flightInformation/m:productDetail/m:equipmentType", xnMgr).InnerText : "";
                        NewSegment.Attributes.GetNamedItem("stn").InnerText = (flightDetails.SelectNodes("m:flightInformation/m:productDetail/m:techStopNumber", xnMgr).Count > 0) ? cm.RequestInt(flightDetails.SelectSingleNode("m:flightInformation/m:productDetail/m:techStopNumber", xnMgr).InnerText).ToString() : "0";
                        NewSegment.Attributes.GetNamedItem("etc").InnerText = flightDetails.SelectSingleNode("m:flightInformation/m:addProductDetail/m:electronicTicketing", xnMgr).InnerText;

                        if (NewSegment.Attributes.GetNamedItem("stn").InnerText.Equals("1"))
                        {
                            XmlNode StopDetailsAA = flightDetails.SelectSingleNode("m:technicalStop/m:stopDetails[m:dateQualifier='AA']", xnMgr);
                            XmlNode StopDetailsAD = flightDetails.SelectSingleNode("m:technicalStop/m:stopDetails[m:dateQualifier='AD']", xnMgr);

                            NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                            NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = NewSegment.Attributes.GetNamedItem("dlc").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("alc").InnerText = StopDetailsAA.SelectSingleNode("m:locationId", xnMgr).InnerText;
                            NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = NewSegment.Attributes.GetNamedItem("ddt").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = (StopDetailsAA.SelectNodes("m:firstTime", xnMgr).Count > 0) ? cm.ConvertToDateTime(StopDetailsAA.SelectSingleNode("m:date", xnMgr).InnerText, StopDetailsAA.SelectSingleNode("m:firstTime", xnMgr).InnerText) : cm.RequestDateTime(StopDetailsAA.SelectSingleNode("m:date", xnMgr).InnerText);

                            NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                            NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = StopDetailsAA.SelectSingleNode("m:locationId", xnMgr).InnerText;
                            NewStopSegment.Attributes.GetNamedItem("alc").InnerText = NewSegment.Attributes.GetNamedItem("alc").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = (StopDetailsAD.SelectNodes("m:firstTime", xnMgr).Count > 0) ? cm.ConvertToDateTime(StopDetailsAD.SelectSingleNode("m:date", xnMgr).InnerText, StopDetailsAD.SelectSingleNode("m:firstTime", xnMgr).InnerText) : cm.RequestDateTime(StopDetailsAD.SelectSingleNode("m:date", xnMgr).InnerText);
                            NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = NewSegment.Attributes.GetNamedItem("ardt").InnerText;
                        }

                        //공동운항 여부
                        if (CDS.Equals("N") && (MCC != OCC))
                            CDS = "Y";

                        //중국 2회 경유(기착 포함)인 경우 제외
                        if (SegCount > 2 && SegmentRef < SegCount)
                        {
                            if (Common.ChinaOfAirport(NewSegment.Attributes.GetNamedItem("alc").InnerText))
                                ChinaStopoverCount++;

                            //기착지도 체크
                            if (NewSegment.Attributes.GetNamedItem("stn").InnerText.Equals("1"))
                            {
                                if (Common.ChinaOfAirport(NewSegment.SelectSingleNode("seg[1]").Attributes.GetNamedItem("alc").InnerText))
                                    ChinaStopoverCount++;
                            }
                        }

                        SegmentRef++;
                    }

                    NewSegmentGroup.Attributes.GetNamedItem("ewt").InnerText = cm.ElapseWaitingTime(NewSegmentGroup).Replace(":", "");
                    NewSegmentGroup.Attributes.GetNamedItem("cds").InnerText = CDS;

                    //항공편이 아닌 경우 및 중국 2회 이상 경유 삭제
                    if (Train || ChinaStopoverCount >= 2)
                        NewFlightIndex.RemoveChild(NewSegmentGroup);
                }
            }

            FlightInfo.RemoveChild(FlightIndex);


            XmlNode PriceInfo = XmlDoc.SelectSingleNode("ResponseDetails/priceInfo");
            XmlNode PriceIndex = PriceInfo.SelectSingleNode("priceIndex");

            SegmentGroup = PriceIndex.SelectSingleNode("segGroup");
            Segment = SegmentGroup.SelectSingleNode("seg");

            XmlNode SegRef = Segment.SelectSingleNode("ref");
            XmlNode SegmentGroup1;
            XmlNode SegmentGroup2;

            XmlNode NewPriceIndex1 = null;
            XmlNode NewPriceIndex2 = null;
            XmlNode NewSegRef;

            //조건설정
            string NowDate = DateTime.Now.ToString("yyyy-MM-dd");
            DateTime ToDate = Convert.ToDateTime(String.Concat(NowDate, cm.TLBasicTime(SNM, "", NowDate)));
            DateTime ModeTL = cm.ModeTL(SNM, "");
            DateTime DepartureDate = Convert.ToDateTime(FlightInfo.SelectSingleNode("flightIndex[1]/segGroup[1]/seg[1]").Attributes.GetNamedItem("ddt").InnerText.Substring(0, 10));
            bool CheckChinaAir = (cm.DateDiff("d", ToDate, DepartureDate) < 11 && (!cm.WorkdayYN(ToDate.ToString("d")) || !cm.WorkdayYN(ToDate.AddDays(1).ToString("d")))) ? true : false;
            bool CheckTrain = false;

            //프로모션 정보
            XmlNodeList PromItems = (PromXml != null) ? PromXml.SelectNodes(String.Format("item[paxType='{0}' or paxType='']", PTC)) : null;

            //무료수하물
            XmlNode ServiceFeesGrp = (ResXml.SelectNodes("m:serviceFeesGrp", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:serviceFeesGrp", xnMgr) : null;

            //한국출발여부
            bool DepartureFromKorea = Common.KoreaOfAirport(DLC.Split(',')[0].Trim());

            //업무일 여부
            bool WorkingDay = cm.WorkdayYN(NowDate);

            foreach (XmlNode recommendation in ResXml.SelectNodes(String.Format("m:recommendation[m:paxFareProduct/m:fareDetails/m:groupOfFares/m:productInformation/m:fareProductDetail[m:passengerType='{0}'{1}]]", Common.AmadeusPaxTypeCode(PTC), (PTC).Equals("ADT") ? " or m:passengerType='IT'" : ""), xnMgr))
            {
                string ValidatingCarrier = recommendation.SelectSingleNode("m:paxFareProduct/m:paxFareDetail/m:codeShareDetails[m:transportStageQualifier='V']/m:company", xnMgr).InnerText;
                CheckTrain = false;

                //예외사항처리
                if (Common.FareExceptionHandling(ValidatingCarrier, DLC, ALC, ROT, DTD))
                {
                    //특정항공사의 경우 MSP운임만 출력(PUB운임 삭제)
                    if (Common.ExcludePubFare(ValidatingCarrier, recommendation.SelectSingleNode("m:paxFareProduct/m:fareDetails/m:groupOfFares/m:productInformation/m:fareProductDetail", xnMgr), xnMgr, PUB, DepartureFromKorea))
                    {
                        //발권가능 항공사 체크
                        if (Common.AirlineHost("Amadeus", ValidatingCarrier))
                        {
                            //발권마감일
                            string TLDate = cm.ConvertToDateTime(recommendation.SelectSingleNode("m:paxFareProduct/m:fare/m:pricingMessage[m:freeTextQualification/m:textSubjectQualifier='LTD']/m:description[2]", xnMgr).InnerText);

                            //PUB운임 여부
                            bool RP = (recommendation.SelectNodes("//m:groupOfFares[m:productInformation/m:fareProductDetail/m:fareType='RP']", xnMgr).Count > 0) ? true : false;

                            //발권가능일 체크
                            if (cm.ApplyTLCondition(SNM, ModeTL, Convert.ToDateTime(String.Concat(TLDate, cm.TLBasicTime(SNM, ValidatingCarrier, TLDate))), ValidatingCarrier, CheckChinaAir, WorkingDay, LTD, FTR))
                            {
                                SegmentGroup1 = SegmentGroup.CloneNode(false);
                                SegmentGroup2 = SegmentGroup.CloneNode(false);

                                //여정 정보
                                foreach (XmlNode segmentFlightRef in recommendation.SelectNodes("m:segmentFlightRef", xnMgr))
                                {
                                    NewSegment = Segment.CloneNode(false);

                                    int fRef = 1;
                                    string SegCDS = "N";
                                    XmlNode FlightSegGroup;

                                    //무료수하물
                                    XmlNode ServiceCoverageInfoGrp = null;
                                    if (segmentFlightRef.SelectNodes("m:referencingDetail[m:refQualifier='B']", xnMgr).Count > 0)
                                    {
                                        ServiceCoverageInfoGrp = ServiceFeesGrp.SelectSingleNode(String.Format("m:serviceCoverageInfoGrp[m:itemNumberInfo/m:itemNumber/m:number='{0}'][m:serviceCovInfoGrp/m:paxRefInfo/m:travellerDetails/m:referenceNumber='1']", segmentFlightRef.SelectSingleNode("m:referencingDetail[m:refQualifier='B']/m:refNumber", xnMgr).InnerText), xnMgr);
                                    }

                                    foreach (XmlNode refNumber in segmentFlightRef.SelectNodes("m:referencingDetail[m:refQualifier='S']/m:refNumber", xnMgr))
                                    {
                                        NewSegRef = NewSegment.AppendChild(SegRef.CloneNode(false));
                                        NewSegRef.InnerText = Common.RefSum(refNumber.InnerText, CCDRef);

                                        FlightSegGroup = FlightInfo.SelectSingleNode(String.Format("flightIndex[@ref='{0}']/segGroup[@ref='{1}']", fRef, NewSegRef.InnerText));

                                        if (FlightSegGroup != null)
                                        {
                                            NewSegRef.Attributes.GetNamedItem("fiRef").InnerText = (fRef++).ToString();
                                            NewSegRef.Attributes.GetNamedItem("nosp").InnerText = FlightSegGroup.Attributes.GetNamedItem("nosp").InnerText;
                                            NewSegRef.Attributes.GetNamedItem("stn").InnerText = (FlightSegGroup.SelectNodes("seg[@stn != '0']").Count > 0) ? "1" : "0";

                                            if (SegCDS.Equals("N") && FlightSegGroup.Attributes.GetNamedItem("cds").InnerText.Equals("Y"))
                                                SegCDS = "Y";
                                        }
                                        else
                                        {
                                            NewSegRef.Attributes.GetNamedItem("fiRef").InnerText = (fRef++).ToString();
                                            NewSegRef.Attributes.GetNamedItem("nosp").InnerText = "0";
                                            NewSegRef.Attributes.GetNamedItem("stn").InnerText = "0";
                                            CheckTrain = true;
                                            break;
                                        }

                                        //무료수하물
                                        if (ServiceCoverageInfoGrp != null)
                                        {
                                            if (ServiceCoverageInfoGrp.SelectNodes(String.Format("m:serviceCovInfoGrp[m:coveragePerFlightsInfo/m:numberOfItemsDetails[m:referenceQualifier='RS']/m:refNum='{0}']/m:refInfo/m:referencingDetail[m:refQualifier='F']/m:refNumber", NewSegRef.Attributes.GetNamedItem("fiRef").InnerText), xnMgr).Count > 0)
                                            {
                                                XmlNode FreeBagAllownceInfo = ServiceFeesGrp.SelectSingleNode(String.Format("m:freeBagAllowanceGrp[m:itemNumberInfo/m:itemNumberDetails/m:number='{0}']/m:freeBagAllownceInfo", ServiceCoverageInfoGrp.SelectSingleNode(String.Format("m:serviceCovInfoGrp[m:coveragePerFlightsInfo/m:numberOfItemsDetails[m:referenceQualifier='RS']/m:refNum='{0}']/m:refInfo/m:referencingDetail[m:refQualifier='F']/m:refNumber", NewSegRef.Attributes.GetNamedItem("fiRef").InnerText), xnMgr).InnerText), xnMgr);
                                                if (FreeBagAllownceInfo != null)
                                                    NewSegRef.Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty(String.Concat(FreeBagAllownceInfo.SelectSingleNode("m:baggageDetails/m:freeAllowance", xnMgr).InnerText, Common.BaggageUnitCode(FreeBagAllownceInfo.SelectSingleNode("m:baggageDetails/m:quantityCode", xnMgr).InnerText, ((FreeBagAllownceInfo.SelectNodes("m:baggageDetails/m:unitQualifier", xnMgr).Count > 0) ? FreeBagAllownceInfo.SelectSingleNode("m:baggageDetails/m:unitQualifier", xnMgr).InnerText : ""))));
                                            }
                                        }
                                    }

                                    //네이버운임은 공동운항일 경우라도 프로모션 적용(2015-07-08,김현준이사님요청)(임시적 적용)
                                    if (SNM.Equals(4638))
                                        SegCDS = "N";

                                    //대한항공은 공동운항일 경우라도 프로모션 적용(2016-09-20,정성하과장)
                                    if (ValidatingCarrier.Equals("KE"))
                                        SegCDS = "N";

                                    (SegCDS.Equals("N") ? SegmentGroup1 : SegmentGroup2).AppendChild(NewSegment);
                                }

                                if (!CheckTrain)
                                {
                                    //유효기간
                                    XmlAttribute MaxStay;

                                    foreach (XmlNode FareFamiliesRef in recommendation.SelectNodes("//m:fareFamiliesRef[m:referencingDetail/m:refQualifier='M']", xnMgr))
                                    {
                                        MaxStay = FareFamiliesRef.Attributes.Append(ResXml.OwnerDocument.CreateAttribute("maxStay"));
                                        MaxStay.InnerText = ResXml.SelectSingleNode("m:value[m:ref='" + FareFamiliesRef.SelectSingleNode("m:referencingDetail/m:refNumber", xnMgr).InnerText + "']", xnMgr).Attributes.GetNamedItem("maxStay").InnerText;
                                    }

                                    //TASF 적용 사용자 선택 가능 여부
                                    string SelectUserTASF = Common.SelectUserTASF(SNM, ValidatingCarrier);

                                    //프로모션 적용
                                    if (SegmentGroup1.HasChildNodes)
                                    {
                                        if (PromItems != null)
                                        {
                                            foreach (XmlNode PromItem in PromItems)
                                            {
                                                string CabinClassItem = (PromItem.SelectSingleNode("cabinClass").InnerText.Equals("Y")) ? "Y,M,W" : PromItem.SelectSingleNode("cabinClass").InnerText;

                                                //프로모션 적용 여부 판단
                                                if (Common.ApplyPromotion(PromItem.SelectSingleNode("airCode").InnerText, PromItem.SelectSingleNode("fareType").InnerText, PromItem.SelectSingleNode("fareBasis").InnerText, CabinClassItem, PromItem.SelectSingleNode("bookingClass").InnerText, PromItem.SelectSingleNode("bookingClassExc").InnerText, PromItem.SelectSingleNode("specialYN").InnerText, recommendation.SelectSingleNode(String.Format("m:paxFareProduct[m:paxReference/m:ptc='{0}']", PTC), xnMgr), xnMgr))
                                                {
                                                    //여정의 항공사 체크
                                                    bool SameAir = true;
                                                    foreach (XmlNode Seg in SegmentGroup1.SelectNodes("seg"))
                                                    {
                                                        for (int i = 0; i < Seg.SelectNodes("ref").Count; i++)
                                                        {
                                                            if (FlightInfo.SelectNodes(String.Format("flightIndex[@ref='{0}']/segGroup[@ref='{1}']/seg[@mcc!='{2}']", (i + 1), Seg.SelectNodes("ref")[i].InnerText, PromItem.SelectSingleNode("airCode").InnerText)).Count > 0)
                                                            {
                                                                SameAir = false;
                                                                break;
                                                            }
                                                        }

                                                        if (!SameAir)
                                                            break;
                                                    }

                                                    if (SameAir)
                                                    {
                                                        NewPriceIndex1 = PriceInfo.AppendChild(PriceIndex.CloneNode(true));
                                                        NewPriceIndex1.ReplaceChild(SegmentGroup1.Clone(), NewPriceIndex1.SelectSingleNode("segGroup"));

                                                        NewPriceIndex1.Attributes.GetNamedItem("gds").InnerText = "Amadeus";
                                                        NewPriceIndex1.Attributes.GetNamedItem("ptc").InnerText = PTC;
                                                        //NewPriceIndex1.Attributes.GetNamedItem("ref").InnerText = Common.RefSum(recommendation.SelectSingleNode("m:itemNumber/m:itemNumberId/m:number", xnMgr).InnerText, CCDRef);
                                                        NewPriceIndex1.Attributes.GetNamedItem("ref").InnerText = Common.RefSum(PriceRef++, CCDRef).ToString();

                                                        //프로모션이 하나만 존재할 경우 선택한 상태로 변경
                                                        //if (PromItem.SelectNodes("promotions/promotion").Count.Equals(1))
                                                        //{
                                                        //    PromItem.SelectSingleNode("promotionId").InnerText = PromItem.SelectSingleNode("promotions/promotion").Attributes.GetNamedItem("promotionId").InnerText;
                                                        //    PromItem.SelectSingleNode("incentiveCode").InnerText = PromItem.SelectSingleNode("promotions/promotion").Attributes.GetNamedItem("incentiveCode").InnerText;
                                                        //    PromItem.SelectSingleNode("incentiveName").InnerText = PromItem.SelectSingleNode("promotions/promotion").Attributes.GetNamedItem("incentiveName").InnerText;
                                                        //    PromItem.SelectSingleNode("fareTarget").InnerText = PromItem.SelectSingleNode("promotions/promotion").Attributes.GetNamedItem("fareTarget").InnerText;
                                                        //}

                                                        SetPriceIndexMPIS(SNM, NewPriceIndex1, recommendation, xnMgr, PromItem, "N", DepartureFromKorea, SelectUserTASF);

                                                        //항공운임이 일만원 미만일 경우 삭제
                                                        if (cm.RequestDouble(NewPriceIndex1.SelectSingleNode("summary").Attributes.GetNamedItem("fare").InnerText) < 10000)
                                                            PriceInfo.RemoveChild(NewPriceIndex1);
                                                    }
                                                }
                                            }
                                        }

                                        //프로모션 적용전 운임
                                        NewPriceIndex1 = PriceInfo.AppendChild(PriceIndex.CloneNode(true));
                                        NewPriceIndex1.ReplaceChild(SegmentGroup1.Clone(), NewPriceIndex1.SelectSingleNode("segGroup"));

                                        NewPriceIndex1.Attributes.GetNamedItem("gds").InnerText = "Amadeus";
                                        NewPriceIndex1.Attributes.GetNamedItem("ptc").InnerText = PTC;
                                        NewPriceIndex1.Attributes.GetNamedItem("ref").InnerText = Common.RefSum(PriceRef++, CCDRef).ToString();

                                        SetPriceIndexMPIS(SNM, NewPriceIndex1, recommendation, xnMgr, null, "N", DepartureFromKorea, SelectUserTASF);

                                        //항공운임이 일만원 미만일 경우 삭제
                                        if (cm.RequestDouble(NewPriceIndex1.SelectSingleNode("summary").Attributes.GetNamedItem("fare").InnerText) < 10000)
                                            PriceInfo.RemoveChild(NewPriceIndex1);
                                    }

                                    //프로모션 미적용(코드쉐어)
                                    if (SegmentGroup2.HasChildNodes)
                                    {
                                        NewPriceIndex2 = PriceInfo.AppendChild(PriceIndex.CloneNode(true));
                                        NewPriceIndex2.ReplaceChild(SegmentGroup2, NewPriceIndex2.SelectSingleNode("segGroup"));

                                        NewPriceIndex2.Attributes.GetNamedItem("gds").InnerText = "Amadeus";
                                        NewPriceIndex2.Attributes.GetNamedItem("ptc").InnerText = PTC;
                                        //NewPriceIndex2.Attributes.GetNamedItem("ref").InnerText = Common.RefSum(recommendation.SelectSingleNode("m:itemNumber/m:itemNumberId/m:number", xnMgr).InnerText, CCDRef);
                                        NewPriceIndex2.Attributes.GetNamedItem("ref").InnerText = Common.RefSum(PriceRef++, CCDRef).ToString();

                                        SetPriceIndexMPIS(SNM, NewPriceIndex2, recommendation, xnMgr, null, "Y", DepartureFromKorea, SelectUserTASF);

                                        //항공운임이 일만원 미만일 경우 삭제
                                        if (cm.RequestDouble(NewPriceIndex2.SelectSingleNode("summary").Attributes.GetNamedItem("fare").InnerText) < 10000)
                                            PriceInfo.RemoveChild(NewPriceIndex2);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            PriceInfo.RemoveChild(PriceIndex);

            return XmlDoc.DocumentElement;
        }

        /// <summary>
        /// 운임정보리스트 생성
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="NewPriceIndex">신규 운임 노드</param>
        /// <param name="Recommendation">아마데우스 운임 정보</param>
        /// <param name="xnMgr">네임스페이스</param>
        /// <param name="PromItem">프로모션 정보</param>
        /// <param name="CDS">공동운항 운임 여부</param>
        /// <param name="DepartureFromKorea">한국출발여부</param>
        /// <param name="SelectUserTASF">TASF 적용 사용자 선택 가능 여부(Y:사용자 선택 가능, N:사용자 선택 불가)</param>
        public void SetPriceIndexMPIS(int SNM, XmlNode NewPriceIndex, XmlNode Recommendation, XmlNamespaceManager xnMgr, XmlNode PromItem, string CDS, bool DepartureFromKorea, string SelectUserTASF)
        {
            //탑승객별 요금정보
            XmlNode PaxFareGroup = NewPriceIndex.SelectSingleNode("paxFareGroup");
            XmlNode PaxFare = PaxFareGroup.SelectSingleNode("paxFare");
            XmlNode SegmentFareGroup;
            XmlNode SegmentFare;
            XmlNode Traveler;
            XmlNode Fare;
            XmlNode FareType;
            XmlNode Ref;

            XmlNode NewPaxFare;
            XmlNode NewSegmentFare;
            XmlNode NewFare;
            XmlNode NewFareType;
            XmlNode NewRef;

            string PTC = string.Empty;
            string FuelSurCharge = string.Empty;
            string QCharge = string.Empty;
            double FareAmount = 0;
            double PaxDiscountFare = 0;
            double TotalDiscountFare = 0;
            string CabinClassItem = string.Empty;
            string MaxStay = string.Empty;
            string ValidatingCarrier = Recommendation.SelectSingleNode("m:paxFareProduct/m:paxFareDetail/m:codeShareDetails[m:transportStageQualifier='V']/m:company", xnMgr).InnerText;
            int PaxCount = 0;

            //TASF(발권 여행사 수수료)
            bool UseTASF = Common.ApplyTASF(SNM, ValidatingCarrier);
            double TASF = 0;
            double TotalTASF = 0;

            //파트너 할인요금(추가할인금액)
            double PartnerDiscount = 0;
            double TotalPartnerDiscount = 0;

            foreach (XmlNode paxFareProduct in Recommendation.SelectNodes("m:paxFareProduct", xnMgr))
            {
                PTC = Common.ChangePaxType1(paxFareProduct.SelectSingleNode("m:paxReference/m:ptc", xnMgr).InnerText);
                FuelSurCharge = (paxFareProduct.SelectNodes("m:paxFareDetail/m:monetaryDetails[m:amountType='F']/m:amount", xnMgr).Count > 0) ? paxFareProduct.SelectSingleNode("m:paxFareDetail/m:monetaryDetails[m:amountType='F']/m:amount", xnMgr).InnerText : "0";
                QCharge = (paxFareProduct.SelectNodes("m:paxFareDetail/m:monetaryDetails[m:amountType='Q']/m:amount", xnMgr).Count > 0) ? paxFareProduct.SelectSingleNode("m:paxFareDetail/m:monetaryDetails[m:amountType='Q']/m:amount", xnMgr).InnerText : "0";

                FareAmount = cm.GetFare(ValidatingCarrier, paxFareProduct.SelectSingleNode("m:paxFareDetail/m:totalFareAmount", xnMgr).InnerText, paxFareProduct.SelectSingleNode("m:paxFareDetail/m:totalTaxAmount", xnMgr).InnerText, QCharge);
                PaxDiscountFare = cm.PromotionFare(FareAmount, paxFareProduct.SelectSingleNode("m:paxReference/m:ptc", xnMgr).InnerText, PromItem) - PartnerDiscount;
                TASF = UseTASF ? Common.GetTASF(SNM, PTC, ValidatingCarrier, DepartureFromKorea) : 0;

                PaxCount = paxFareProduct.SelectNodes("m:paxReference/m:traveller", xnMgr).Count;
                TotalDiscountFare += (PaxDiscountFare * PaxCount);
                TotalTASF += (TASF * PaxCount);
                TotalPartnerDiscount += PartnerDiscount;

                NewPaxFare = PaxFareGroup.AppendChild(PaxFare.CloneNode(true));
                NewPaxFare.Attributes.GetNamedItem("ptc").InnerText = PTC;
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText = FareAmount.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("disFare").InnerText = PaxDiscountFare.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tax").InnerText = cm.GetTax(paxFareProduct.SelectSingleNode("m:paxFareDetail/m:totalTaxAmount", xnMgr).InnerText, FuelSurCharge).ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fsc").InnerText = cm.GetFuelSurCharge(ValidatingCarrier, FuelSurCharge, QCharge).ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("disPartner").InnerText = PartnerDiscount.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tasf").InnerText = TASF.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("mTasf").InnerText = TASF.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("aTasf").InnerText = "0";

                //여정별 요금정보
                SegmentFareGroup = NewPaxFare.SelectSingleNode("segFareGroup");
                SegmentFare = SegmentFareGroup.SelectSingleNode("segFare");

                foreach (XmlNode fareDetails in paxFareProduct.SelectNodes("m:fareDetails", xnMgr))
                {
                    NewSegmentFare = SegmentFareGroup.AppendChild(SegmentFare.CloneNode(true));
                    NewSegmentFare.Attributes.GetNamedItem("ref").InnerText = fareDetails.SelectSingleNode("m:segmentRef/m:segRef", xnMgr).InnerText;

                    Fare = NewSegmentFare.SelectSingleNode("fare");

                    foreach (XmlNode groupOfFares in fareDetails.SelectNodes("m:groupOfFares", xnMgr))
                    {
                        NewFare = NewSegmentFare.AppendChild(Fare.CloneNode(true));
                        NewFare.Attributes.GetNamedItem("bpt").InnerText = groupOfFares.SelectSingleNode("m:productInformation/m:breakPoint", xnMgr).InnerText;
                        NewFare.Attributes.GetNamedItem("mas").InnerText = (groupOfFares.SelectNodes("m:fareFamiliesRef", xnMgr).Count > 0 && (XmlAttribute)groupOfFares.SelectSingleNode("m:fareFamiliesRef", xnMgr).Attributes.GetNamedItem("maxStay") != null) ? groupOfFares.SelectSingleNode("m:fareFamiliesRef", xnMgr).Attributes.GetNamedItem("maxStay").InnerText : ((groupOfFares.SelectSingleNode("m:productInformation/m:breakPoint", xnMgr).InnerText.Equals("Y")) ? "1Y" : "");
                        NewFare.SelectSingleNode("cabin").Attributes.GetNamedItem("rbd").InnerText = groupOfFares.SelectSingleNode("m:productInformation/m:cabinProduct/m:rbd", xnMgr).InnerText;
                        NewFare.SelectSingleNode("cabin").Attributes.GetNamedItem("cabin").InnerText = (groupOfFares.SelectNodes("m:productInformation/m:cabinProduct/m:cabin", xnMgr).Count > 0) ? groupOfFares.SelectSingleNode("m:productInformation/m:cabinProduct/m:cabin", xnMgr).InnerText : "";
                        NewFare.SelectSingleNode("cabin").Attributes.GetNamedItem("avl").InnerText = (groupOfFares.SelectNodes("m:productInformation/m:cabinProduct/m:avlStatus", xnMgr).Count > 0) ? ((groupOfFares.SelectSingleNode("m:productInformation/m:cabinProduct/m:avlStatus", xnMgr).InnerText.Equals("L")) ? "0" : groupOfFares.SelectSingleNode("m:productInformation/m:cabinProduct/m:avlStatus", xnMgr).InnerText) : "";
                        NewFare.SelectSingleNode("fare").Attributes.GetNamedItem("basis").InnerText = groupOfFares.SelectSingleNode("m:productInformation/m:fareProductDetail/m:fareBasis", xnMgr).InnerText;
                        NewFare.SelectSingleNode("fare").Attributes.GetNamedItem("ptc").InnerText = groupOfFares.SelectSingleNode("m:productInformation/m:fareProductDetail/m:passengerType", xnMgr).InnerText;
                        NewFare.SelectSingleNode("fare").Attributes.GetNamedItem("tkd").InnerText = (groupOfFares.SelectNodes("m:ticketInfos", xnMgr).Count > 0 && groupOfFares.SelectNodes("m:ticketInfos/m:additionalFareDetails/m:ticketDesignator", xnMgr).Count > 0) ? groupOfFares.SelectSingleNode("m:ticketInfos/m:additionalFareDetails/m:ticketDesignator", xnMgr).InnerText : "";

                        FareType = NewFare.SelectSingleNode("fare/fareType");

                        foreach (XmlNode TmpFareType in groupOfFares.SelectNodes("m:productInformation/m:fareProductDetail/m:fareType", xnMgr))
                        {
                            NewFareType = NewFare.SelectSingleNode("fare").AppendChild(FareType.Clone());
                            NewFareType.InnerText = TmpFareType.InnerText;
                        }

                        NewFare.SelectSingleNode("fare").RemoveChild(FareType);

                        if (groupOfFares.SelectNodes("m:productInformation/m:corporateId", xnMgr).Count > 0)
                            NewFare.SelectSingleNode("corporateId").InnerText = groupOfFares.SelectSingleNode("m:productInformation/m:corporateId", xnMgr).InnerText;
                        else
                            NewFare.RemoveChild(NewFare.SelectSingleNode("corporateId"));

                        MaxStay = cm.SetMaxStay(MaxStay, NewFare.Attributes.GetNamedItem("mas").InnerText);
                    }

                    NewSegmentFare.RemoveChild(Fare);
                }

                SegmentFareGroup.RemoveChild(SegmentFare);

                //탑승객 번호
                Traveler = NewPaxFare.SelectSingleNode("traveler");
                Ref = Traveler.SelectSingleNode("ref");

                foreach (XmlNode traveller in paxFareProduct.SelectNodes("m:paxReference/m:traveller", xnMgr))
                {
                    NewRef = Traveler.AppendChild(Ref.CloneNode(false));
                    NewRef.InnerText = traveller.SelectSingleNode("m:ref", xnMgr).InnerText;

                    if (traveller.SelectNodes("m:infantIndicator", xnMgr).Count > 0)
                    {
                        NewRef.Attributes.GetNamedItem("ind").InnerText = traveller.SelectSingleNode("m:infantIndicator", xnMgr).InnerText;
                    }
                    else
                    {
                        NewRef.Attributes.RemoveNamedItem("ind");
                    }
                }

                Traveler.RemoveChild(Ref);
            }

            PaxFareGroup.RemoveChild(PaxFare);

            //요약 정보
            string SummaryFuelSurCharge = (Recommendation.SelectNodes("m:recPriceInfo/m:monetaryDetail[m:amountType='F']/m:amount", xnMgr).Count > 0) ? Recommendation.SelectSingleNode("m:recPriceInfo/m:monetaryDetail[m:amountType='F']/m:amount", xnMgr).InnerText : "0";
            string SummaryQCharge = (Recommendation.SelectNodes("m:recPriceInfo/m:monetaryDetail[m:amountType='Q']/m:amount", xnMgr).Count > 0) ? Recommendation.SelectSingleNode("m:recPriceInfo/m:monetaryDetail[m:amountType='Q']/m:amount", xnMgr).InnerText : "0";

            //NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("price").InnerText = (TotalDiscountFare + cm.RequestDouble(Recommendation.SelectSingleNode("m:recPriceInfo/m:monetaryDetail[2]/m:amount", xnMgr).InnerText) + cm.RequestDouble(SummaryQCharge)).ToString();
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("fare").InnerText = cm.GetFare(ValidatingCarrier, Recommendation.SelectSingleNode("m:recPriceInfo/m:monetaryDetail[1]/m:amount", xnMgr).InnerText, Recommendation.SelectSingleNode("m:recPriceInfo/m:monetaryDetail[2]/m:amount", xnMgr).InnerText, SummaryQCharge).ToString();
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("disFare").InnerText = TotalDiscountFare.ToString();
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("tax").InnerText = cm.GetTax(Recommendation.SelectSingleNode("m:recPriceInfo/m:monetaryDetail[2]/m:amount", xnMgr).InnerText, SummaryFuelSurCharge).ToString();
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("fsc").InnerText = cm.GetFuelSurCharge(ValidatingCarrier, SummaryFuelSurCharge, SummaryQCharge).ToString();
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("disPartner").InnerText = TotalPartnerDiscount.ToString();
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("tasf").InnerText = TotalTASF.ToString();
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("mTasf").InnerText = TotalTASF.ToString();
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("aTasf").InnerText = "0";
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("pvc").InnerText = ValidatingCarrier;
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("mas").InnerText = MaxStay;
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("ttl").InnerText = cm.ConvertToDateTime(Recommendation.SelectSingleNode("m:paxFareProduct/m:fare/m:pricingMessage[m:freeTextQualification/m:textSubjectQualifier='LTD']/m:description[2]", xnMgr).InnerText);
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("cds").InnerText = CDS;
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("ucf").InnerText = (Recommendation.SelectNodes("m:itemNumber/m:priceTicketing[m:priceType='UF']", xnMgr).Count > 0) ? "Y" : "N";
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("ntf").InnerText = (Recommendation.SelectNodes("m:paxFareProduct/m:fareDetails/m:groupOfFares/m:productInformation/m:fareProductDetail/m:fareType[.='NTF']", xnMgr).Count > 0) ? "Y" : "N";
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("sutf").InnerText = SelectUserTASF;
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("price").InnerText = (TotalDiscountFare + cm.RequestDouble(NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("tax").InnerText) + cm.RequestDouble(NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("fsc").InnerText)).ToString();

            //free Text
            foreach (XmlNode fare in Recommendation.SelectNodes("m:paxFareProduct[1]/m:fare", xnMgr))
            {
                XmlDocument TmpXml = new XmlDocument();
                TmpXml.LoadXml(fare.OuterXml.Replace(String.Format(" xmlns=\"{0}\"", AmadeusConfig.NamespaceURL("Fare_InstantTravelBoardSearch")), ""));

                NewPriceIndex.SelectSingleNode("fareMessage").AppendChild(NewPriceIndex.OwnerDocument.ImportNode(TmpXml.SelectSingleNode("fare"), true));
            }

            if (!NewPriceIndex.SelectSingleNode("fareMessage").HasChildNodes)
                NewPriceIndex.RemoveChild(NewPriceIndex.SelectSingleNode("fareMessage"));

            //프로모션 정보
            if (PromItem != null)
                NewPriceIndex.SelectSingleNode("promotionInfo").AppendChild(NewPriceIndex.OwnerDocument.ImportNode(PromItem, true));
            else
                NewPriceIndex.RemoveChild(NewPriceIndex.SelectSingleNode("promotionInfo"));
        }

        #endregion "MP Instant Search(MPIS) (테스트)"

        #region "MP Instant Search(MPIS)"

        //[WebMethod(Description = "MP Instant Search(MPIS)")]
        public XmlElement AAAA_InstantSearchRS_TEST()
        {
            int SNM = 2;
            string SAC = "";
            string DLC = "SEL";
            string ALC = "HKT";
            string ROT = "RT";
            string DTD = "2018-05-09";
            string ARD = "2018-05-14";
            string OPN = "N";
            string CCD = "M";
            int ADC = 1;
            int CHC = 0;
            int IFC = 0;
            int NRR = 50;
            string RQT = "WEBSERVICE";
            string FTX = "N|0|Y|Y|N|C|Y";

            return InstantSearchRS(SNM, SAC, DLC, ALC, ROT, DTD, ARD, OPN, CCD, ADC, CHC, IFC, NRR, RQT, FTX);
        }

        /// <summary>
        /// MP Instant Search(MPIS)
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="SAC">항공사 코드</param>
        /// <param name="DLC">출발지 공항 코드</param>
        /// <param name="ALC">도착지 공항 코드</param>
        /// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="ARD">도착일(YYYYMMDD)</param>
        /// <param name="OPN">오픈여부(YN)</param>
        /// <param name="CCD">캐빈 클래스(Y:일반석, C:비즈니스석, F:일등석)</param>
        /// <param name="ADC">성인 탑승객 수</param>
        /// <param name="CHC">소아 탑승객 수</param>
        /// <param name="IFC">유아 탑승객 수</param>
        /// <param name="NRR">응답 결과 수(Default:200)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="FTX">free text</param>
        /// <returns></returns>
        [WebMethod(Description = "MP Instant Search(MPIS)")]
        public XmlElement InstantSearchRS(int SNM, string SAC, string DLC, string ALC, string ROT, string DTD, string ARD, string OPN, string CCD, int ADC, int CHC, int IFC, int NRR, string RQT, string FTX)
        {
            int ServiceNumber = 560;
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청10", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청11", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청12", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청13", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = ServiceNumber;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = RQT;
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = SAC;
                sqlParam[8].Value = DLC;
                sqlParam[9].Value = ALC;
                sqlParam[10].Value = ROT;
                sqlParam[11].Value = DTD;
                sqlParam[12].Value = ARD;
                sqlParam[13].Value = OPN;
                sqlParam[14].Value = CCD;
                sqlParam[15].Value = ADC;
                sqlParam[16].Value = CHC;
                sqlParam[17].Value = IFC;
                sqlParam[18].Value = NRR;
                sqlParam[19].Value = FTX;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                string[] PTC = new String[3] { "ADT", "CH", "INF" };
                int[] NOP = new Int32[3] { ADC, CHC, IFC };

                int ftxIdx = 0;
                string PUB = "N";   //PUB요금 출력여부(기본값으로 PUB운임 제외,2014-10-29,김지영과장요청)
                int WLR = 0;        //대기예약 포함 비율
                string LTD = "Y";   //발권마감일 체크여부
                string FTR = "Y";   //필터링 사용여부(발권마감일 체크 포함)
                string MTL = "N";   //ModeTL 적용여부
                string ACQ = "C";   //여정의 출발/도착지 코드에 대해 도시 또는 공항코드 여부 지정(A:공항, C:도시, 공백:자동인식)(MPIS는 기본값 C로 지정)
                string PRM = "Y";   //프로모션 적용여부

                //free text : PUB | WLR | LTD | FTR | MTL | ACQ | PRM
                if (!String.IsNullOrWhiteSpace(FTX))
                {
                    foreach (string StrFTX in FTX.Split('|'))
                    {
                        if (ftxIdx.Equals(0))
                            PUB = (StrFTX.Equals("Y")) ? "Y" : "N";
                        else if (ftxIdx.Equals(1))
                            WLR = cm.RequestInt(StrFTX);
                        else if (ftxIdx.Equals(2))
                            LTD = (StrFTX.Equals("N")) ? "N" : "Y";
                        else if (ftxIdx.Equals(3))
                            FTR = (StrFTX.Equals("N")) ? "N" : "Y";
                        else if (ftxIdx.Equals(4))
                            MTL = (StrFTX.Equals("Y")) ? "Y" : "N";
                        else if (ftxIdx.Equals(5))
                            ACQ = StrFTX;
                        else if (ftxIdx.Equals(6))
                            PRM = (StrFTX.Equals("N")) ? "N" : "Y";

                        ftxIdx++;
                    }
                }

                //최초출발지
                string DepartureAirport = DLC.Split(',')[0];

                //최종도착지(목적지)
                string[] TmpALC = ALC.Split(',');
                string DestinationAirport = TmpALC[TmpALC.Length - 1];

                //한국출발여부
                bool DepartureFromKorea = Common.KoreaOfAirport(DepartureAirport.Trim());

                //국내선 예약불가(2015-04-20 추가)
                if (ROT.Equals("RT") && DepartureFromKorea && Common.KoreaOfAirport(DestinationAirport.Trim()))
                {
                    throw new Exception("요청하신 서비스는 해외 전용으로 국내선은 예약할 수 없습니다.");
                }

                //모두닷컴(2,3915),스카이스캐너(4664,4837)는 PUB운임 오픈(2018-03-16,김지영차장)
                if (SNM.Equals(2) || SNM.Equals(3915) || SNM.Equals(4664) || SNM.Equals(4837))
                {
                    PUB = "Y";
                }

                //ABS 예외사항
                if (SNM.Equals(68))
                {
                    //발권마감일 체크를 하지 않는다.(2014-09-30,김지영과장요청)
                    LTD = "N";

                    //대기예약 30% 지정(2015-01-09,김지영과장요청)
                    WLR = 30;
                }
                else
                {
                    //도착지가 필리핀(PH)일 경우 한국출발에 한해 왕복일 경우에만 예약가능(2014-12-24,정성하대리요청)
                    if (Common.PhilippinesOfAirport(DestinationAirport.Trim()))
                    {
                        if (ROT.Equals("OW"))
                            throw new Exception("필리핀은 왕복인 경우에만 항공예약을 진행할 수 있습니다.");
                        else
                        {
                            if (OPN.Equals("N"))
                            {
                                if (!DepartureFromKorea)
                                    throw new Exception("필리핀은 한국출발이면서 왕복인 경우에만 예약을 진행할 수 있습니다.");
                            }
                            else
                                throw new Exception("필리핀은 귀국일 미지정(오픈)인 경우 예약을 진행할 수 없습니다.");
                        }
                    }
                    //도착지가 미주(US)일 경우 편도(국적기), 왕복(전항공)일 경우에만 예약가능(2014-12-24,정성하대리요청)
                    else if (DepartureFromKorea && Common.UnitedStatesOfAirport(DestinationAirport.Trim()))
                    {
                        if (ROT.Equals("OW") || OPN.Equals("Y"))
                        {
                            if (String.IsNullOrWhiteSpace(SAC))
                                SAC = "KE,OZ";
                            else
                            {
                                string SAC2 = string.Empty;

                                foreach (string TmpSAC in SAC.Split(','))
                                {
                                    if (TmpSAC.Trim().Equals("KE") || TmpSAC.Trim().Equals("OZ"))
                                        SAC2 += String.Concat((String.IsNullOrWhiteSpace(SAC2) ? "" : ","), TmpSAC.Trim());
                                }

                                SAC = SAC2;
                            }
                        }
                    }
                }

                //해외출발(SOTO)
                if (!DepartureFromKorea)
                {
                    //해외출발일 경우 PUB 포함(2014-11-06,김지영과장요청)
                    PUB = "Y";

                    //출발지가 필리핀(PH)일 경우 KE,OZ,VN항공사만 예약가능(2015-03-24,TOPAS요청)
                    if (Common.PhilippinesOfAirport(DepartureAirport.Trim()))
                    {
                        if (String.IsNullOrWhiteSpace(SAC))
                            SAC = "KE,OZ,VN";
                        else
                        {
                            string SAC2 = string.Empty;

                            foreach (string TmpSAC in SAC.Split(','))
                            {
                                if (TmpSAC.Trim().Equals("KE") || TmpSAC.Trim().Equals("OZ") || TmpSAC.Trim().Equals("VN"))
                                    SAC2 += String.Concat((String.IsNullOrWhiteSpace(SAC2) ? "" : ","), TmpSAC.Trim());
                            }

                            SAC = SAC2;
                        }
                    }
                }

                Stopwatch sw;
                XmlNode NewRunTime = null;
                XmlElement ResXml = null;

                try
                {
                    NewRunTime = RunTime.CloneNode(false);

                    sw = Stopwatch.StartNew();
                    ResXml = amd.InstantTravelBoardSearchRS(String.Format("{0}-{1}-{2}", GUID, PTC[0], CCD), SNM, SAC, DLC, ALC, "", ROT, DTD, ARD, OPN, "", CCD, PTC, NOP, ACQ, "", PUB, WLR, MTL, NRR);
                    CheckRunTimeEnd(NewRunTime, sw, "InstantTravelBoardSearchRS");
                }
                catch (Exception ex)
                {
                    throw new Exception(ex.ToString());
                }

                //오류 결과일 경우 예외 처리
                XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_InstantTravelBoardSearch"));

                if (ResXml.SelectNodes("m:errorMessage", xnMgr).Count > 0)
                {
                    if (ResXml.SelectNodes("m:errorMessage/m:errorMessageText", xnMgr).Count > 0)
                        throw new Exception(ResXml.SelectSingleNode("m:errorMessage/m:errorMessageText/m:description", xnMgr).InnerText);
                    else
                        throw new Exception(ResXml.SelectSingleNode("m:errorMessage/m:applicationError/m:applicationErrorDetail/m:error", xnMgr).InnerText);
                }

                //프로모션 정보
                XmlElement PromXml = null;

                if (PRM.Equals("Y") && !ROT.Equals("MD"))
                {
                    PromXml = SearchPromotionList(SNM, DLC, ALC, ROT, DTD, ARD, OPN, (CCD.Equals("C") || CCD.Equals("F")) ? CCD : "Y", PTC[0]);
                    cm.XmlFileSave(PromXml, mc.Name, "SearchPromotionList", "Y", GUID);
                }

                sw = Stopwatch.StartNew();
                XmlElement XmlMode = ToModeSearchFareAvailRS(SNM, ResXml, PromXml, xnMgr, DLC, ALC, ROT, CCD, DTD, PUB, LTD, FTR, "0D", "MPIS", GUID);
                CheckRunTimeEnd(NewRunTime, sw, "ToModeInstantSearchRS");

                //실행시간 데이타 XML에 추가
                XmlMode.AppendChild(XmlMode.OwnerDocument.ImportNode(NewRunTime, true));
                cm.XmlFileSave(XmlMode, mc.Name, "ToModeInstantSearchRS", "Y", GUID);

                return XmlMode;
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, 0, 0).ToErrors;
            }
        }

        #endregion "MP Instant Search(MPIS)"

        #region "Fare + Availability 동시조회"

        //[WebMethod(Description = "Fare + Availability 동시조회")]
        public XmlElement AAAA_SearchFareAvailRS_TEST()
        {
            int SNM = 2;
            string SAC = "";
            string DLC = "SEL";
            string ALC = "BKK";
            string ROT = "RT";
            string DTD = "2018-07-01";
            string ARD = "2018-07-05";
            string OPN = "N";
            string CCD = "M";
            int ADC = 1;
            int CHC = 0;
            int IFC = 0;
            string NRR = "50";
            string FTX = "";

            return SearchFareAvailRS(SNM, SAC, DLC, ALC, ROT, DTD, ARD, OPN, CCD, ADC, CHC, IFC, NRR, FTX);
        }

        /// <summary>
		/// Fare + Availability 동시조회
		/// </summary>
		/// <param name="SNM">사이트 번호</param>
		/// <param name="SAC">항공사 코드</param>
		/// <param name="DLC">출발지 공항 코드</param>
		/// <param name="ALC">도착지 공항 코드</param>
		/// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
		/// <param name="DTD">출발일(YYYYMMDD)</param>
		/// <param name="ARD">도착일(YYYYMMDD)</param>
		/// <param name="OPN">오픈여부(YN)</param>
		/// <param name="CCD">캐빈 클래스(Y:일반석, C:비즈니스석, F:일등석)</param>
		/// <param name="ADC">성인 탑승객 수</param>
		/// <param name="CHC">소아 탑승객 수</param>
		/// <param name="IFC">유아 탑승객 수</param>
		/// <param name="NRR">응답 결과 수(Default:200)</param>
		/// <param name="FTX">free text</param>
		/// <returns></returns>
		[WebMethod(Description = "Fare + Availability 동시조회")]
		public XmlElement SearchFareAvailRS(int SNM, string SAC, string DLC, string ALC, string ROT, string DTD, string ARD, string OPN, string CCD, int ADC, int CHC, int IFC, string NRR, string FTX)
		{
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                    new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                    new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                    new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                    new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                    new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                    new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                    new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                    new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                    new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                    new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                    new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                    new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                    new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                    new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                    new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                    new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                    new SqlParameter("@요청10", SqlDbType.VarChar, 3000),
                    new SqlParameter("@요청11", SqlDbType.VarChar, 3000),
                    new SqlParameter("@요청12", SqlDbType.VarChar, 3000),
                    new SqlParameter("@요청13", SqlDbType.VarChar, 3000)
                };

                sqlParam[0].Value = 31;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = SAC;
                sqlParam[8].Value = DLC;
                sqlParam[9].Value = ALC;
                sqlParam[10].Value = ROT;
                sqlParam[11].Value = DTD;
                sqlParam[12].Value = ARD;
                sqlParam[13].Value = OPN;
                sqlParam[14].Value = CCD;
                sqlParam[15].Value = ADC;
                sqlParam[16].Value = CHC;
                sqlParam[17].Value = IFC;
                sqlParam[18].Value = NRR;
                sqlParam[19].Value = FTX;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
			{
                string[] PTC = new String[3] { "ADT", "CH", "INF" };
                int[] NOP = new Int32[3] { ADC, CHC, IFC };

                return SearchFareAvailCabinRS(SNM, SAC, DLC, ALC, "", ROT, DTD, ARD, OPN, "", CCD, "", "", PTC, NOP, cm.RequestInt(NRR, 200), FTX, LogGUID);
			}
			catch (Exception ex)
			{
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 31, 0, 0).ToErrors;
			}
		}

		/// <summary>
        /// Fare + Availability 동시조회(탑승객 타입별 조회)
		/// </summary>
		/// <param name="SNM">사이트 번호</param>
		/// <param name="SAC">항공사 코드</param>
		/// <param name="DLC">출발지 공항 코드</param>
		/// <param name="ALC">도착지 공항 코드</param>
		/// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
		/// <param name="DTD">출발일(YYYYMMDD)</param>
		/// <param name="ARD">도착일(YYYYMMDD)</param>
		/// <param name="OPN">오픈여부(YN)</param>
		/// <param name="FLD">여정추가옵션(C:Connecting Service, D:Direct Service, N:Non-Stop Service, OV:Overnight not allowed)</param>
		/// <param name="CCD">캐빈 클래스(Y:Economic, M:Economic Standard, W:Economic Premium, C:Business, F:First/Supersonic)</param>
		/// <param name="PTC">탑승객 타입 코드</param>
		/// <param name="NOP">탑승객 수</param>
		/// <param name="NRR">응답 결과 수</param>
		/// <param name="FTX">free text</param>
		/// <returns></returns>
		[WebMethod(Description = "Fare + Availability 동시조회(탑승객 타입별 조회)")]
		public XmlElement SearchFareAvailPaxTypeRS(int SNM, string SAC, string DLC, string ALC, string ROT, string DTD, string ARD, string OPN, string FLD, string CCD, string[] PTC, int[] NOP, int NRR, string FTX)
		{
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청10", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청11", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청12", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청13", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 30;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = SAC;
                sqlParam[8].Value = DLC;
                sqlParam[9].Value = ALC;
                sqlParam[10].Value = ROT;
                sqlParam[11].Value = DTD;
                sqlParam[12].Value = ARD;
                sqlParam[13].Value = OPN;
                sqlParam[14].Value = FLD;
                sqlParam[15].Value = CCD;
                sqlParam[16].Value = String.Join("^", PTC);
                sqlParam[17].Value = String.Join("^", NOP);
                sqlParam[18].Value = NRR;
                sqlParam[19].Value = FTX;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                return SearchFareAvailCabinRS(SNM, SAC, DLC, ALC, "", ROT, DTD, ARD, OPN, FLD, CCD, "", "", PTC, NOP, NRR, FTX, LogGUID);
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 30, 0, 0).ToErrors;
            }
		}

        /// <summary>
        /// Fare + Availability 동시조회(통합)
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
		/// <param name="SAC">항공사 코드</param>
		/// <param name="DLC">출발지 공항 코드</param>
		/// <param name="ALC">도착지 공항 코드</param>
		/// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
		/// <param name="DTD">출발일(YYYYMMDD)</param>
		/// <param name="ARD">도착일(YYYYMMDD)</param>
		/// <param name="OPN">오픈여부(YN)</param>
        /// <param name="CCD">캐빈 클래스(Y:Economic, M:Economic Standard, W:Economic Premium, C:Business, F:First/Supersonic)</param>
		/// <param name="PTC">탑승객 타입 코드(성인:ADT, 학생:STU, 노무자:LBR)</param>
        /// <param name="ADC">성인 탑승객 수</param>
		/// <param name="CHC">소아 탑승객 수</param>
		/// <param name="IFC">유아 탑승객 수</param>
        /// <param name="NRR">응답 결과 수</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="FTX">free text</param>
        /// <returns></returns>
        [WebMethod(Description = "Fare + Availability 동시조회(통합)")]
        public XmlElement SearchFareAvailabilityRS(int SNM, string SAC, string DLC, string ALC, string ROT, string DTD, string ARD, string OPN, string CCD, string PTC, int ADC, int CHC, int IFC, int NRR, string RQT, string FTX)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청10", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청11", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청12", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청13", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청14", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 545;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = RQT;
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = SAC;
                sqlParam[8].Value = DLC;
                sqlParam[9].Value = ALC;
                sqlParam[10].Value = ROT;
                sqlParam[11].Value = DTD;
                sqlParam[12].Value = ARD;
                sqlParam[13].Value = OPN;
                sqlParam[14].Value = CCD;
                sqlParam[15].Value = PTC;
                sqlParam[16].Value = ADC;
                sqlParam[17].Value = CHC;
                sqlParam[18].Value = NRR;
                sqlParam[19].Value = IFC;
                sqlParam[20].Value = FTX;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                string[] TmpPTC = new String[3] { (String.IsNullOrWhiteSpace(PTC) ? "ADT" : PTC), "CH", "INF" };
                int[] NOP = new Int32[3] { ADC, CHC, IFC };

                return SearchFareAvailCabinRS(SNM, SAC, DLC, ALC, "", ROT, DTD, ARD, OPN, "", CCD, "", "", TmpPTC, NOP, NRR, FTX, LogGUID);
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 545, 0, 0).ToErrors;
            }
        }

        /// <summary>
        /// Y클래스에 대해 쓰레드 실행(M/W) 그 외에는 일반 실행을 통한 동시조회
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="SAC">항공사 코드</param>
        /// <param name="DLC">출발지 공항 코드</param>
        /// <param name="ALC">도착지 공항 코드</param>
        /// <param name="CLC">경유지 공항 코드(여정구분은 콤마, SEG구분은 슬래시, ex:NRT/SIN,SIN/NRT,RON)</param>
        /// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="ARD">도착일(YYYYMMDD)</param>
        /// <param name="OPN">오픈여부(YN)</param>
        /// <param name="FLD">여정추가옵션(C:Connecting Service, D:Direct Service, N:Non-Stop Service, OV:Overnight not allowed)</param>
        /// <param name="CCD">캐빈 클래스(Y:Economic, M:Economic Standard, W:Economic Premium, C:Business, F:First/Supersonic)</param>
        /// <param name="ACQ">여정의 출발/도착지 코드에 대해 도시 또는 공항코드 여부 지정(A:공항, C:도시, 공백:자동인식)</param>
        /// <param name="FAB">Fare Basis</param>
        /// <param name="PTC">탑승객 타입 코드</param>
        /// <param name="NOP">탑승객 수</param>
        /// <param name="NRR">응답 결과 수</param>
        /// <param name="FTX">free text</param>
        /// <param name="GUID">고유번호</param>
        /// <returns></returns>
        public XmlElement SearchFareAvailCabinRS(int SNM, string SAC, string DLC, string ALC, string CLC, string ROT, string DTD, string ARD, string OPN, string FLD, string CCD, string ACQ, string FAB, string[] PTC, int[] NOP, int NRR, string FTX, string GUID)
        {
            if (OPN.Equals("Y"))
            {
                ARD = cm.OpenDate(DTD, ARD);
            }

            //일반석 요청시 프리미엄이코노미 가능 지역해 한해서만 'Y' 처리
            if (CCD.Equals("Y"))
            {
                if (!Common.PremiumEconomy(ALC))
                    CCD = "M";
            }

            //임시 세이버 테스트용
            if (SNM.Equals(1))
            {
                SNM = 2;
                return SearchFareAvailDetailSabreRS(SNM, SAC, DLC, ALC, CLC, ROT, DTD, ARD, OPN, FLD, CCD, ACQ, FAB, PTC, NOP, NRR, FTX, GUID);
            }
            else
            {
                if (String.IsNullOrWhiteSpace(CCD) || CCD.Equals("Y"))
                {
                    XmlDocument XmlDoc = new XmlDocument();
                    XmlDoc.Load(mc.XmlFullPath("SearchFareAvailRS"));

                    XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

                    XmlNode ResponseDetails = XmlDoc.SelectSingleNode("ResponseDetails");
                    ResponseDetails.RemoveChild(ResponseDetails.SelectSingleNode("flightInfo"));

                    XmlNode PriceInfo = ResponseDetails.SelectSingleNode("priceInfo");
                    PriceInfo.RemoveChild(PriceInfo.SelectSingleNode("priceIndex"));

                    SearchFareAvailCabin sfa = new SearchFareAvailCabin();

                    foreach (XmlElement FareAvail in sfa.GetFareAvail(SNM, SAC, DLC, ALC, ROT, DTD, ARD, OPN, FLD, CCD, ACQ, PTC, NOP, NRR, FTX, GUID))
                    {
                        if (FareAvail != null)
                        {
                            if (FareAvail.SelectNodes("flightInfo").Count > 0)
                            {
                                if (ResponseDetails.SelectNodes("flightInfo").Count.Equals(0))
                                    ResponseDetails.InsertBefore(XmlDoc.ImportNode(FareAvail.SelectSingleNode("flightInfo"), true), PriceInfo);
                                else
                                {
                                    foreach (XmlNode FlightIndex in FareAvail.SelectNodes("flightInfo/flightIndex"))
                                    {
                                        XmlNode TmpFlightIndex = ResponseDetails.SelectSingleNode(String.Format("flightInfo/flightIndex[@ref='{0}']", FlightIndex.Attributes.GetNamedItem("ref").InnerText));

                                        foreach (XmlNode SegGroup in FlightIndex.SelectNodes("segGroup"))
                                        {
                                            TmpFlightIndex.AppendChild(XmlDoc.ImportNode(SegGroup, true));
                                        }
                                    }
                                }

                                foreach (XmlNode PriceIndex in FareAvail.SelectNodes("priceInfo/priceIndex"))
                                {
                                    PriceInfo.AppendChild(XmlDoc.ImportNode(PriceIndex, true));
                                }
                            }

                            try
                            {
                                if (FareAvail.SelectNodes("runTime").Count > 0)
                                {
                                    XmlAttribute AttrPTC = FareAvail.OwnerDocument.CreateAttribute("ptc");
                                    AttrPTC.InnerText = (FareAvail.SelectNodes("flightInfo").Count > 0) ? FareAvail.SelectSingleNode("flightInfo").Attributes.GetNamedItem("ptc").InnerText : "";

                                    XmlAttribute AttrCabin = FareAvail.OwnerDocument.CreateAttribute("cabin");
                                    AttrCabin.InnerText = (FareAvail.SelectNodes("priceInfo").Count > 0) ? FareAvail.SelectSingleNode("priceInfo/priceIndex/paxFareGroup/paxFare/segFareGroup/segFare/fare/cabin").Attributes.GetNamedItem("cabin").InnerText : "";

                                    FareAvail.SelectSingleNode("runTime").Attributes.Append(AttrPTC);
                                    FareAvail.SelectSingleNode("runTime").Attributes.Append(AttrCabin);

                                    ResponseDetails.AppendChild(XmlDoc.ImportNode(FareAvail.SelectSingleNode("runTime"), true));
                                }
                            }
                            catch (Exception) { }
                        }
                    }

                    if (!PriceInfo.HasChildNodes)
                        throw new Exception("항공요금 검색 결과가 없습니다.");

                    return XmlDoc.DocumentElement;
                }
                else
                    return SearchFareAvailDetailRS(SNM, SAC, DLC, ALC, CLC, ROT, DTD, ARD, OPN, FLD, CCD, ACQ, FAB, PTC, NOP, NRR, FTX, GUID);
            }
        }

        #endregion "Fare + Availability 동시조회"

        #region "Fare + Availability 동시조회(아마데우스)"

        /// <summary>
        /// Fare + Availability 동시조회(상세 조건 조회)
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="SAC">항공사 코드</param>
        /// <param name="DLC">출발지 공항 코드</param>
        /// <param name="ALC">도착지 공항 코드</param>
        /// <param name="CLC">경유지 공항 코드(여정구분은 콤마, SEG구분은 슬래시, ex:NRT/SIN,SIN/NRT,RON)</param>
        /// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="ARD">도착일(YYYYMMDD)</param>
        /// <param name="OPN">오픈여부(YN)</param>
        /// <param name="FLD">여정추가옵션(C:Connecting Service, D:Direct Service, N:Non-Stop Service, OV:Overnight not allowed)</param>
        /// <param name="CCD">캐빈 클래스(Y:Economic, M:Economic Standard, W:Economic Premium, C:Business, F:First/Supersonic)</param>
        /// <param name="ACQ">여정의 출발/도착지 코드에 대해 도시 또는 공항코드 여부 지정(A:공항, C:도시, 공백:자동인식)</param>
        /// <param name="FAB">Fare Basis</param>
        /// <param name="PTC">탑승객 타입 코드</param>
        /// <param name="NOP">탑승객 수</param>
        /// <param name="NRR">응답 결과 수</param>
        /// <param name="FTX">free text</param>
        /// <param name="GUID">고유번호</param>
        /// <returns></returns>
        public XmlElement SearchFareAvailDetailRS(int SNM, string SAC, string DLC, string ALC, string CLC, string ROT, string DTD, string ARD, string OPN, string FLD, string CCD, string ACQ, string FAB, string[] PTC, int[] NOP, int NRR, string FTX, string GUID)
        {
            int ftxIdx = 0;
            string PUB = "N";   //PUB요금 출력여부(기본값으로 PUB운임 제외,2014-10-29,김지영과장요청)
            int WLR = 0;        //대기예약 포함 비율
            string LTD = "Y";   //발권마감일 체크여부
            string FTR = "Y";   //필터링 사용여부(발권마감일 체크 포함)
            string MTL = "N";   //ModeTL 적용여부
            string PRM = "Y";   //프로모션 적용여부

            //free text : PUB | WLR | LTD | FTR | MTL | ACQ | PRM
            if (!String.IsNullOrWhiteSpace(FTX))
            {
                foreach (string StrFTX in FTX.Split('|'))
                {
                    if (ftxIdx.Equals(0))
                        PUB = (StrFTX.Equals("Y")) ? "Y" : "N";
                    else if (ftxIdx.Equals(1))
                        WLR = cm.RequestInt(StrFTX);
                    else if (ftxIdx.Equals(2))
                        LTD = (StrFTX.Equals("N")) ? "N" : "Y";
                    else if (ftxIdx.Equals(3))
                        FTR = (StrFTX.Equals("N")) ? "N" : "Y";
                    else if (ftxIdx.Equals(4))
                        MTL = (StrFTX.Equals("Y")) ? "Y" : "N";
                    else if (ftxIdx.Equals(5))
                        ACQ = (String.IsNullOrWhiteSpace(ACQ) ? StrFTX : ACQ);
                    else if (ftxIdx.Equals(6))
                        PRM = (StrFTX.Equals("N")) ? "N" : "Y";

                    ftxIdx++;
                }
            }

            //최초출발지
            string DepartureAirport = DLC.Split(',')[0];

            //최종도착지(목적지)
            string[] TmpALC = ALC.Split(',');
            string DestinationAirport = TmpALC[TmpALC.Length - 1];

            //한국출발여부
            bool DepartureFromKorea = Common.KoreaOfAirport(DepartureAirport.Trim());

            //국내선 예약불가(2015-04-20 추가)
            if (ROT.Equals("RT") && DepartureFromKorea && Common.KoreaOfAirport(DestinationAirport.Trim()))
            {
                throw new Exception("요청하신 서비스는 해외 전용으로 국내선은 예약할 수 없습니다.");
            }

            //모두닷컴(2,3915),스카이스캐너(4664,4837)는 PUB운임 오픈(2018-03-16,김지영차장)
            //전 사이트 PUB운임 오픈(2018-04-05,김경미차장)
            //if (SNM.Equals(2) || SNM.Equals(3915) || SNM.Equals(4664) || SNM.Equals(4837))
            //{
                PUB = "Y";
            //}

            //ABS 예외사항
            if (SNM.Equals(68))
            {
                //발권마감일 체크를 하지 않는다.(2014-09-30,김지영과장요청)
                LTD = "N";

                //대기예약 30% 지정(2015-01-09,김지영과장요청)
                WLR = 30;
            }
            else
            {
                //도착지가 필리핀(PH)일 경우 한국출발에 한해 왕복일 경우에만 예약가능(2014-12-24,정성하대리요청)
                if (Common.PhilippinesOfAirport(DestinationAirport.Trim()))
                {
                    if (ROT.Equals("OW"))
                        throw new Exception("필리핀은 왕복인 경우에만 항공예약을 진행할 수 있습니다.");
                    else
                    {
                        if (OPN.Equals("N"))
                        {
                            if (!DepartureFromKorea)
                                throw new Exception("필리핀은 한국출발이면서 왕복인 경우에만 예약을 진행할 수 있습니다.");
                        }
                        else
                            throw new Exception("필리핀은 귀국일 미지정(오픈)인 경우 예약을 진행할 수 없습니다.");
                    }
                }
                //도착지가 미주(US)일 경우 편도(국적기), 왕복(전항공)일 경우에만 예약가능(2014-12-24,정성하대리요청)
                else if (DepartureFromKorea && Common.UnitedStatesOfAirport(DestinationAirport.Trim()))
                {
                    if (ROT.Equals("OW") || OPN.Equals("Y"))
                    {
                        if (String.IsNullOrWhiteSpace(SAC))
                            SAC = "KE,OZ";
                        else
                        {
                            string SAC2 = string.Empty;

                            foreach (string TmpSAC in SAC.Split(','))
                            {
                                if (TmpSAC.Trim().Equals("KE") || TmpSAC.Trim().Equals("OZ"))
                                    SAC2 += String.Concat((String.IsNullOrWhiteSpace(SAC2) ? "" : ","), TmpSAC.Trim());
                            }

                            SAC = SAC2;
                        }
                    }
                }
            }

            //해외출발(SOTO)
            if (!DepartureFromKorea)
            {
                //해외출발일 경우 PUB 포함(2014-11-06,김지영과장요청)
                PUB = "Y";

                //출발지가 필리핀(PH)일 경우 KE,OZ,VN항공사만 예약가능(2015-03-24,TOPAS요청)
                if (Common.PhilippinesOfAirport(DepartureAirport.Trim()))
                {
                    if (String.IsNullOrWhiteSpace(SAC))
                        SAC = "KE,OZ,VN";
                    else
                    {
                        string SAC2 = string.Empty;

                        foreach (string TmpSAC in SAC.Split(','))
                        {
                            if (TmpSAC.Trim().Equals("KE") || TmpSAC.Trim().Equals("OZ") || TmpSAC.Trim().Equals("VN"))
                                SAC2 += String.Concat((String.IsNullOrWhiteSpace(SAC2) ? "" : ","), TmpSAC.Trim());
                        }

                        SAC = SAC2;
                    }
                }
            }

            Stopwatch sw;
            XmlNode NewRunTime = null;
            XmlElement ResXml = null;

            #region "세션풀 사용"

            //string SID = string.Empty;
            //string SQN = string.Empty;
            //string SCT = string.Empty;

            //try
            //{
            //    NewRunTime = RunTime.CloneNode(false);

            //    sw = Stopwatch.StartNew();
            //    XmlElement Session = amd.SessionCreate(SNM, String.Format("{0}-{1}-{2}-01", GUID, PTC[0], CCD));
            //    CheckRunTimeEnd(NewRunTime, sw, "SessionCreate");

            //    SID = Session.SelectSingleNode("session/sessionId").InnerText;
            //    SQN = Session.SelectSingleNode("session/sequenceNumber").InnerText;
            //    SCT = Session.SelectSingleNode("session/securityToken").InnerText;

            //    sw = Stopwatch.StartNew();
            //    ResXml = amd.MasterPricerTravelBoardSearchRS(SID, SQN, SCT, String.Format("{0}-{1}-{2}-02", GUID, PTC[0], CCD), SNM, SAC, DLC, ALC, "", ROT, DTD, ARD, OPN, FLD, CCD, PTC, NOP, ACQ, FAB, PUB, WLR, MTL, NRR);
            //    CheckRunTimeEnd(NewRunTime, sw, "MasterPricerTravelBoardSearchRS");

            //    //sw = Stopwatch.StartNew();
            //    //XmlElement ReqXml = amd.MasterPricerTravelBoardSearchRQ(SNM, SAC, DLC, ALC, ROT, DTD, ARD, OPN, FLD, CCD, PTC, NOP, PUB, WLR, MTL, NRR);
            //    //CheckRunTimeEnd(NewRunTime, sw, "MasterPricerTravelBoardSearchRQ");
            //    //cm.XmlFileSave(ReqXml, "Amadeus", "MasterPricerTravelBoardSearchRQ", "N", String.Format("{0}-{1}-{2}-02", GUID, PTC[0], CCD));

            //    //sw = Stopwatch.StartNew();
            //    //XmlElement ResXml = amd.MasterPricerTravelBoardSearchRSOnly(SID, SQN, SCT, ReqXml);
            //    //CheckRunTimeEnd(NewRunTime, sw, "MasterPricerTravelBoardSearchRS");
            //    //cm.XmlFileSave(ResXml, "Amadeus", "MasterPricerTravelBoardSearchRS", "N", String.Format("{0}-{1}-{2}-02", GUID, PTC[0], CCD));
            //}
            //catch (Exception ex)
            //{
            //    throw new Exception(ex.ToString());
            //}
            //finally
            //{
            //    if (!String.IsNullOrWhiteSpace(SID))
            //    {
            //        sw = Stopwatch.StartNew();
            //        amd.SessionClose(SID, SCT, String.Format("{0}-{1}-{2}-03", GUID, PTC[0], CCD));
            //        CheckRunTimeEnd(NewRunTime, sw, "SessionClose");
            //    }
            //}

            #endregion "세션풀 사용"

            #region "세션풀 미사용"

            try
            {
                NewRunTime = RunTime.CloneNode(false);

                sw = Stopwatch.StartNew();
                ResXml = amd.MasterPricerTravelBoardSearch4RS(String.Format("{0}-{1}-{2}-02", GUID, PTC[0], CCD), SNM, SAC, "", DLC, ALC, "", ROT, DTD, ARD, OPN, FLD, CCD, PTC, NOP, ACQ, FAB, PUB, WLR, MTL, NRR);
                CheckRunTimeEnd(NewRunTime, sw, "MasterPricerTravelBoardSearchRS");
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }

            #endregion "세션풀 미사용"

            //오류 결과일 경우 예외 처리
            XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
            xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_MasterPricerTravelBoardSearch"));

            if (ResXml.SelectNodes("m:errorMessage", xnMgr).Count > 0)
            {
                if (ResXml.SelectNodes("m:errorMessage/m:errorMessageText", xnMgr).Count > 0)
                    throw new Exception(ResXml.SelectSingleNode("m:errorMessage/m:errorMessageText/m:description", xnMgr).InnerText);
                else
                    throw new Exception(ResXml.SelectSingleNode("m:errorMessage/m:applicationError/m:applicationErrorDetail/m:error", xnMgr).InnerText);
            }

            //MaxStay(유효기간)
            XmlAttribute MaxStay;
            string DepartureDate = cm.RequestDateTime(DTD.Split(',')[0].Trim());

            foreach (XmlNode Value in ResXml.SelectNodes("m:value", xnMgr))
            {
                MaxStay = Value.Attributes.Append(ResXml.OwnerDocument.CreateAttribute("maxStay"));
                MaxStay.InnerText = Common.ConvertToMaxStay(DepartureDate, Value.SelectSingleNode("m:criteriaDetails/m:value", xnMgr).InnerText);
            }
            //cm.XmlFileSave(ResXml, mc.Name, "ToModeSearchFareAvailRS_MaxStay", "N", GUID);

            //프로모션 정보
            XmlElement PromXml = null;

            if (PRM.Equals("Y") && !ROT.Equals("MD"))
            {
                PromXml = SearchPromotionList(SNM, DLC, ALC, ROT, DTD, ARD, OPN, (CCD.Equals("C") || CCD.Equals("F")) ? CCD : "Y", PTC[0]);
                cm.XmlFileSave(PromXml, mc.Name, "SearchPromotionList", "Y", GUID);
            }

            sw = Stopwatch.StartNew();
            XmlElement XmlMode = ToModeSearchFareAvailRS(SNM, ResXml, PromXml, xnMgr, DLC, ALC, ROT, CCD, DTD, PUB, LTD, FTR, "", "", GUID);
            CheckRunTimeEnd(NewRunTime, sw, "ToModeSearchFareAvailRS");

            //실행시간 데이타 XML에 추가
            XmlMode.AppendChild(XmlMode.OwnerDocument.ImportNode(NewRunTime, true));
            cm.XmlFileSave(XmlMode, mc.Name, "ToModeSearchFareAvailRS", "Y", GUID);

            return XmlMode;
        }

		/// <summary>
		/// SearchFareAvailRS를 통합용 XML구조로 치환
		/// </summary>
		/// <param name="SNM">사이트 번호</param>
		/// <param name="ResXml">SearchFareAvailRS의 Data</param>
		/// <param name="PromXml">SearchPromotionList의 Data</param>
        /// <param name="xnMgr">XmlNamespaceManager</param>
        /// <param name="DLC">출발지 공항 코드</param>
        /// <param name="ALC">도착지 공항 코드</param>
        /// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
        /// <param name="CCD">캐빈 클래스(Y:Economic, M:Economic Standard, W:Economic Premium, C:Business, F:First/Supersonic)</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
		/// <param name="PUB">PUB요금 출력여부</param>
		/// <param name="LTD">발권마감일 체크여부</param>
        /// <param name="FTR">필터링 사용여부(발권마감일 체크 포함)</param>
        /// <param name="UMaxStay">유효기간 정보(MPIS 등 고정 처리시)</param>
        /// <param name="MODE">검색방식(MPIS 등)</param>
        /// <param name="GUID">고유번호</param>
		/// <returns></returns>
        public XmlElement ToModeSearchFareAvailRS(int SNM, XmlElement ResXml, XmlElement PromXml, XmlNamespaceManager xnMgr, string DLC, string ALC, string ROT, string CCD, string DTD, string PUB, string LTD, string FTR, string UMaxStay, string MODE, string GUID)
		{
			XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchFareAvailRS"));
			
			XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;
            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("ref").InnerText = ((XmlAttribute)ResXml.Attributes.GetNamedItem("ref") != null) ? ResXml.Attributes.GetNamedItem("ref").InnerText : "";
            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("guid").InnerText = GUID;

			XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
			XmlNode FlightIndex = FlightInfo.SelectSingleNode("flightIndex");
			XmlNode SegmentGroup = FlightIndex.SelectSingleNode("segGroup");
			XmlNode Segment = SegmentGroup.SelectSingleNode("seg");
			XmlNode StopSegment = Segment.SelectSingleNode("seg");

			XmlNode NewFlightIndex;
			XmlNode NewSegmentGroup;
			XmlNode NewSegment;
			XmlNode NewStopSegment;

            CCD = String.IsNullOrWhiteSpace(CCD) ? ResXml.SelectSingleNode("m:recommendation[1]/m:paxFareProduct[1]/m:fareDetails[1]/m:majCabin/m:bookingClassDetails/m:designator", xnMgr).InnerText : CCD;

            bool MPIS = MODE.Equals("MPIS") ? true : false;
			string PTC = Common.ChangePaxType1(ResXml.SelectSingleNode("m:recommendation[1]/m:paxFareProduct[1]/m:paxReference[1]/m:ptc", xnMgr).InnerText);
			string CDS = string.Empty;
            string MCC = string.Empty;
            string OCC = string.Empty;
            bool Train = false;
            int CCDRef = Common.RefOverride((MPIS ? "MPIS" : "Amadeus"), CCD);
			int PriceRef = 1;
            int SegmentRef = 1;
            int SegCount = 0;
            int ChinaStopoverCount = 0;
            
			FlightInfo.Attributes.GetNamedItem("ptc").InnerText = PTC;
            FlightInfo.Attributes.GetNamedItem("rot").InnerText = ROT;

			foreach (XmlNode flightIndex in ResXml.SelectNodes("m:flightIndex", xnMgr))
			{
				NewFlightIndex = FlightInfo.AppendChild(FlightIndex.CloneNode(false));
				NewFlightIndex.Attributes.GetNamedItem("ref").InnerText = flightIndex.SelectSingleNode("m:requestedSegmentRef/m:segRef", xnMgr).InnerText;

				foreach (XmlNode groupOfFlights in flightIndex.SelectNodes("m:groupOfFlights", xnMgr))
				{
                    Train = false;
                    CDS = "N";
                    SegCount = groupOfFlights.SelectNodes("m:flightDetails", xnMgr).Count;
                    ChinaStopoverCount = 0;
                    SegmentRef = 1;
                    
                    NewSegmentGroup = NewFlightIndex.AppendChild(SegmentGroup.CloneNode(false));
					NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = Common.RefSum(groupOfFlights.SelectSingleNode("m:propFlightGrDetail/m:flightProposal[1]/m:ref", xnMgr).InnerText, CCDRef);
					NewSegmentGroup.Attributes.GetNamedItem("eft").InnerText = groupOfFlights.SelectSingleNode("m:propFlightGrDetail/m:flightProposal[m:unitQualifier='EFT']/m:ref", xnMgr).InnerText;
					NewSegmentGroup.Attributes.GetNamedItem("mjc").InnerText = groupOfFlights.SelectSingleNode("m:propFlightGrDetail/m:flightProposal[m:unitQualifier='MCX']/m:ref", xnMgr).InnerText;
                    NewSegmentGroup.Attributes.GetNamedItem("nosp").InnerText = SegCount.ToString();
                    
					foreach (XmlNode flightDetails in groupOfFlights.SelectNodes("m:flightDetails", xnMgr))
					{
                        //항공이 아닌 다른 운송수단(철도 등)이 포함된 경우
                        if (flightDetails.SelectNodes("m:flightInformation/m:productDetail/m:equipmentType", xnMgr).Count > 0 && "/BUS/TGV/THL/THS/TRS/MTL/THT/TRN/TSL/ICE/LCH/".IndexOf(flightDetails.SelectSingleNode("m:flightInformation/m:productDetail/m:equipmentType", xnMgr).InnerText) != -1)
                        {
                            Train = true;
                            break;
                        }
                        
                        //특정항공사 제외
                        MCC = flightDetails.SelectSingleNode("m:flightInformation/m:companyId/m:marketingCarrier", xnMgr).InnerText;
                        OCC = (flightDetails.SelectNodes("m:flightInformation/m:companyId/m:operatingCarrier", xnMgr).Count > 0) ? flightDetails.SelectSingleNode("m:flightInformation/m:companyId/m:operatingCarrier", xnMgr).InnerText : "";

                        if (Common.ScheduleExceptionHandling(MCC, OCC))
                        {
                            Train = true;
                            break;
                        }

                        NewSegment = NewSegmentGroup.AppendChild(Segment.CloneNode(false));
						NewSegment.Attributes.GetNamedItem("dlc").InnerText = flightDetails.SelectSingleNode("m:flightInformation/m:location[1]/m:locationId", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("alc").InnerText = flightDetails.SelectSingleNode("m:flightInformation/m:location[2]/m:locationId", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("ddt").InnerText = (flightDetails.SelectNodes("m:flightInformation/m:productDateTime/m:timeOfDeparture", xnMgr).Count > 0) ? cm.ConvertToDateTime(flightDetails.SelectSingleNode("m:flightInformation/m:productDateTime/m:dateOfDeparture", xnMgr).InnerText, flightDetails.SelectSingleNode("m:flightInformation/m:productDateTime/m:timeOfDeparture", xnMgr).InnerText) : cm.RequestDateTime(flightDetails.SelectSingleNode("m:flightInformation/m:productDateTime/m:dateOfDeparture", xnMgr).InnerText);
						NewSegment.Attributes.GetNamedItem("ardt").InnerText = (flightDetails.SelectNodes("m:flightInformation/m:productDateTime/m:timeOfArrival", xnMgr).Count > 0) ? cm.ConvertToDateTime(flightDetails.SelectSingleNode("m:flightInformation/m:productDateTime/m:dateOfArrival", xnMgr).InnerText, flightDetails.SelectSingleNode("m:flightInformation/m:productDateTime/m:timeOfArrival", xnMgr).InnerText) : cm.RequestDateTime(flightDetails.SelectSingleNode("m:flightInformation/m:productDateTime/m:dateOfArrival", xnMgr).InnerText);
						NewSegment.Attributes.GetNamedItem("mcc").InnerText = MCC;
						NewSegment.Attributes.GetNamedItem("occ").InnerText = OCC;
						NewSegment.Attributes.GetNamedItem("fln").InnerText = (flightDetails.SelectNodes("m:flightInformation/m:flightOrtrainNumber", xnMgr).Count > 0) ? Common.ZeroPaddingFlight(flightDetails.SelectSingleNode("m:flightInformation/m:flightOrtrainNumber", xnMgr).InnerText) : "";
						NewSegment.Attributes.GetNamedItem("eqt").InnerText = (flightDetails.SelectNodes("m:flightInformation/m:productDetail/m:equipmentType", xnMgr).Count > 0) ? flightDetails.SelectSingleNode("m:flightInformation/m:productDetail/m:equipmentType", xnMgr).InnerText : "";
						NewSegment.Attributes.GetNamedItem("stn").InnerText = (flightDetails.SelectNodes("m:flightInformation/m:productDetail/m:techStopNumber", xnMgr).Count > 0) ? cm.RequestInt(flightDetails.SelectSingleNode("m:flightInformation/m:productDetail/m:techStopNumber", xnMgr).InnerText).ToString() : "0";
                        NewSegment.Attributes.GetNamedItem("etc").InnerText = flightDetails.SelectSingleNode("m:flightInformation/m:addProductDetail/m:electronicTicketing", xnMgr).InnerText;

                        //기착은 1회까지만 허용(2018-05-15)
                        if (Convert.ToInt32(NewSegment.Attributes.GetNamedItem("stn").InnerText) > 1)
                        {
                            Train = true;
                            break;
                        }

						if (NewSegment.Attributes.GetNamedItem("stn").InnerText.Equals("1"))
						{
							XmlNode StopDetailsAA = flightDetails.SelectSingleNode("m:technicalStop/m:stopDetails[m:dateQualifier='AA']", xnMgr);
							XmlNode StopDetailsAD = flightDetails.SelectSingleNode("m:technicalStop/m:stopDetails[m:dateQualifier='AD']", xnMgr);

							NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
							NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = NewSegment.Attributes.GetNamedItem("dlc").InnerText;
							NewStopSegment.Attributes.GetNamedItem("alc").InnerText = StopDetailsAA.SelectSingleNode("m:locationId", xnMgr).InnerText;
							NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = NewSegment.Attributes.GetNamedItem("ddt").InnerText;
							NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = (StopDetailsAA.SelectNodes("m:firstTime", xnMgr).Count > 0) ? cm.ConvertToDateTime(StopDetailsAA.SelectSingleNode("m:date", xnMgr).InnerText, StopDetailsAA.SelectSingleNode("m:firstTime", xnMgr).InnerText) : cm.RequestDateTime(StopDetailsAA.SelectSingleNode("m:date", xnMgr).InnerText);

							NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
							NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = StopDetailsAA.SelectSingleNode("m:locationId", xnMgr).InnerText;
							NewStopSegment.Attributes.GetNamedItem("alc").InnerText = NewSegment.Attributes.GetNamedItem("alc").InnerText;
							NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = (StopDetailsAD.SelectNodes("m:firstTime", xnMgr).Count > 0) ? cm.ConvertToDateTime(StopDetailsAD.SelectSingleNode("m:date", xnMgr).InnerText, StopDetailsAD.SelectSingleNode("m:firstTime", xnMgr).InnerText) : cm.RequestDateTime(StopDetailsAD.SelectSingleNode("m:date", xnMgr).InnerText);
							NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = NewSegment.Attributes.GetNamedItem("ardt").InnerText;
						}

                        //공동운항 여부
                        if (CDS.Equals("N") && (MCC != OCC))
							CDS = "Y";

                        //중국 2회 경유(기착 포함)인 경우 제외
                        if (SegCount > 1)
                        {
                            if (SegmentRef < SegCount && Common.ChinaOfAirport(NewSegment.Attributes.GetNamedItem("alc").InnerText))
                                ChinaStopoverCount++;

                            //기착지도 체크
                            if (NewSegment.Attributes.GetNamedItem("stn").InnerText.Equals("1"))
                            {
                                if (Common.ChinaOfAirport(NewSegment.SelectSingleNode("seg[1]").Attributes.GetNamedItem("alc").InnerText))
                                    ChinaStopoverCount++;
                            }
                        }

                        SegmentRef++;
					}

                    NewSegmentGroup.Attributes.GetNamedItem("ewt").InnerText = cm.ElapseWaitingTime(NewSegmentGroup).Replace(":", "");
					NewSegmentGroup.Attributes.GetNamedItem("cds").InnerText = CDS;

                    //항공편이 아닌 경우 및 중국 2회 이상 경유 삭제
                    if (Train || ChinaStopoverCount >= 2)
                        NewFlightIndex.RemoveChild(NewSegmentGroup);
				}
			}

			FlightInfo.RemoveChild(FlightIndex);

			XmlNode PriceInfo = XmlDoc.SelectSingleNode("ResponseDetails/priceInfo");
			XmlNode PriceIndex = PriceInfo.SelectSingleNode("priceIndex");

			SegmentGroup = PriceIndex.SelectSingleNode("segGroup");
			Segment = SegmentGroup.SelectSingleNode("seg");

			XmlNode SegRef = Segment.SelectSingleNode("ref");
			XmlNode SegmentGroup1;
			XmlNode SegmentGroup2;

			XmlNode NewPriceIndex1 = null;
			XmlNode NewPriceIndex2 = null;
			XmlNode NewSegRef;

			//조건설정
            string NowDate = DateTime.Now.ToString("d");
            DateTime ToDate = Convert.ToDateTime(String.Concat(NowDate, cm.TLBasicTime(SNM, "", NowDate)));
			DateTime ModeTL = cm.ModeTL(SNM, "");
			DateTime DepartureDate = (FlightInfo.SelectNodes("flightIndex[1]/segGroup[1]/seg[1]").Count > 0) ? Convert.ToDateTime(FlightInfo.SelectSingleNode("flightIndex[1]/segGroup[1]/seg[1]").Attributes.GetNamedItem("ddt").InnerText.Substring(0, 10)) : Convert.ToDateTime(cm.RequestDateTime(DTD));
			bool CheckChinaAir = (cm.DateDiff("d", ToDate, DepartureDate) < 11 && (!cm.WorkdayYN(ToDate.ToString("d")) || !cm.WorkdayYN(ToDate.AddDays(1).ToString("d")))) ? true : false;
            bool CheckSeg = true;

            //통화코드
            string Currency = (ResXml.SelectNodes("m:conversionRate", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:conversionRate/m:conversionRateDetail/m:currency", xnMgr).InnerText : "";

			//프로모션 정보
			//XmlNodeList PromItems = (PromXml != null) ? PromXml.SelectNodes(String.Format("item[paxType='{0}' or paxType='']", PTC)) : null;
            XmlNodeList PromItems = (PromXml != null) ? PromXml.SelectNodes(String.Format("item[paxType='{0}' or paxType='']", PTC)) : null;
            XmlNodeList CSPromItems = (PromXml != null) ? PromXml.SelectNodes(String.Format("item[paxType='{0}' or paxType=''][codeshare='Y']", PTC)) : null;

            //무료수하물
            XmlNode ServiceFeesGrp = (ResXml.SelectNodes("m:serviceFeesGrp", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:serviceFeesGrp", xnMgr) :  null;

            //한국출발여부
            bool DepartureFromKorea = Common.KoreaOfAirport(DLC.Split(',')[0].Trim());

            //업무일 여부
            bool WorkingDay = cm.WorkdayYN(NowDate);

            foreach (XmlNode recommendation in ResXml.SelectNodes(String.Format("m:recommendation[m:paxFareProduct/m:fareDetails/m:groupOfFares/m:productInformation/m:fareProductDetail[m:passengerType='{0}'{1}]]", Common.AmadeusPaxTypeCode(PTC), (PTC).Equals("ADT") ? " or m:passengerType='IT'" : ""), xnMgr))
			{
				string ValidatingCarrier = recommendation.SelectSingleNode("m:paxFareProduct/m:paxFareDetail/m:codeShareDetails[m:transportStageQualifier='V']/m:company", xnMgr).InnerText;
                
                //예외사항처리
                if (Common.FareExceptionHandling(ValidatingCarrier, DLC, ALC, ROT, DTD))
                {
                    //특정항공사의 경우 MSP운임만 출력(PUB운임 삭제)
                    if (Common.ExcludePubFare(ValidatingCarrier, recommendation.SelectSingleNode("m:paxFareProduct", xnMgr), xnMgr, PUB, DepartureFromKorea))
                    {
                        //발권가능 항공사 체크
                        if (Common.AirlineHost("Amadeus", ValidatingCarrier))
                        {
                            //MPIS일 경우 캐빈클래스 및 RP 운임 체크(2017-11-14,고재영)
                            if (Common.MPISFilter(MPIS, CCD, recommendation.SelectSingleNode("m:paxFareProduct", xnMgr), xnMgr))
                            {
                                //발권마감일
                                string TLDate = (recommendation.SelectNodes("m:paxFareProduct/m:fare/m:pricingMessage[m:freeTextQualification/m:textSubjectQualifier='LTD']", xnMgr).Count > 0 && recommendation.SelectNodes("m:paxFareProduct/m:fare/m:pricingMessage[m:freeTextQualification/m:textSubjectQualifier='LTD']/m:description", xnMgr).Count > 1) ? cm.ConvertToDateTime(recommendation.SelectSingleNode("m:paxFareProduct/m:fare/m:pricingMessage[m:freeTextQualification/m:textSubjectQualifier='LTD']/m:description[2]", xnMgr).InnerText) : NowDate;

                                //PUB운임 여부
                                bool RP = (recommendation.SelectNodes("//m:groupOfFares[m:productInformation/m:fareProductDetail/m:fareType='RP']", xnMgr).Count > 0) ? true : false;

                                //발권가능일 체크
                                if (cm.ApplyTLCondition(SNM, ModeTL, Convert.ToDateTime(String.Concat(TLDate, cm.TLBasicTime(SNM, ValidatingCarrier, TLDate))), ValidatingCarrier, CheckChinaAir, WorkingDay, LTD, FTR))
                                {
                                    SegmentGroup1 = SegmentGroup.CloneNode(false);
                                    SegmentGroup2 = SegmentGroup.CloneNode(false);

                                    //여정 정보
                                    foreach (XmlNode segmentFlightRef in recommendation.SelectNodes("m:segmentFlightRef", xnMgr))
                                    {
                                        NewSegment = Segment.CloneNode(false);

                                        int fRef = 1;
                                        string SegCDS = "N";
                                        XmlNode FlightSegGroup;
                                        CheckSeg = true;

                                        //무료수하물
                                        XmlNode ServiceCoverageInfoGrp = null;
                                        if (segmentFlightRef.SelectNodes("m:referencingDetail[m:refQualifier='B']", xnMgr).Count > 0)
                                        {
                                            ServiceCoverageInfoGrp = ServiceFeesGrp.SelectSingleNode(String.Format("m:serviceCoverageInfoGrp[m:itemNumberInfo/m:itemNumber/m:number='{0}'][m:serviceCovInfoGrp/m:paxRefInfo/m:travellerDetails/m:referenceNumber='1']", segmentFlightRef.SelectSingleNode("m:referencingDetail[m:refQualifier='B']/m:refNumber", xnMgr).InnerText), xnMgr);
                                        }

                                        foreach (XmlNode refNumber in segmentFlightRef.SelectNodes("m:referencingDetail[m:refQualifier='S']/m:refNumber", xnMgr))
                                        {
                                            NewSegRef = NewSegment.AppendChild(SegRef.CloneNode(false));
                                            NewSegRef.InnerText = Common.RefSum(refNumber.InnerText, CCDRef);

                                            FlightSegGroup = FlightInfo.SelectSingleNode(String.Format("flightIndex[@ref='{0}']/segGroup[@ref='{1}']", fRef, NewSegRef.InnerText));

                                            if (FlightSegGroup != null)
                                            {
                                                NewSegRef.Attributes.GetNamedItem("fiRef").InnerText = (fRef++).ToString();
                                                NewSegRef.Attributes.GetNamedItem("nosp").InnerText = FlightSegGroup.Attributes.GetNamedItem("nosp").InnerText;
                                                NewSegRef.Attributes.GetNamedItem("stn").InnerText = (FlightSegGroup.SelectNodes("seg[@stn != '0']").Count > 0) ? "1" : "0";

                                                if (SegCDS.Equals("N") && FlightSegGroup.Attributes.GetNamedItem("cds").InnerText.Equals("Y"))
                                                    SegCDS = "Y";
                                            }
                                            else
                                            {
                                                NewSegRef.Attributes.GetNamedItem("fiRef").InnerText = (fRef++).ToString();
                                                NewSegRef.Attributes.GetNamedItem("nosp").InnerText = "0";
                                                NewSegRef.Attributes.GetNamedItem("stn").InnerText = "0";
                                                CheckSeg = false;
                                                break;
                                            }

                                            //무료수하물
                                            if (ServiceCoverageInfoGrp != null)
                                            {
                                                if (ServiceCoverageInfoGrp.SelectNodes(String.Format("m:serviceCovInfoGrp[m:coveragePerFlightsInfo/m:numberOfItemsDetails[m:referenceQualifier='RS']/m:refNum='{0}']/m:refInfo/m:referencingDetail[m:refQualifier='F']/m:refNumber", NewSegRef.Attributes.GetNamedItem("fiRef").InnerText), xnMgr).Count > 0)
                                                {
                                                    XmlNode FreeBagAllownceInfo = ServiceFeesGrp.SelectSingleNode(String.Format("m:freeBagAllowanceGrp[m:itemNumberInfo/m:itemNumberDetails/m:number='{0}']/m:freeBagAllownceInfo", ServiceCoverageInfoGrp.SelectSingleNode(String.Format("m:serviceCovInfoGrp[m:coveragePerFlightsInfo/m:numberOfItemsDetails[m:referenceQualifier='RS']/m:refNum='{0}']/m:refInfo/m:referencingDetail[m:refQualifier='F']/m:refNumber", NewSegRef.Attributes.GetNamedItem("fiRef").InnerText), xnMgr).InnerText), xnMgr);
                                                    if (FreeBagAllownceInfo != null)
                                                        NewSegRef.Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty(String.Concat(FreeBagAllownceInfo.SelectSingleNode("m:baggageDetails/m:freeAllowance", xnMgr).InnerText, Common.BaggageUnitCode(FreeBagAllownceInfo.SelectSingleNode("m:baggageDetails/m:quantityCode", xnMgr).InnerText, ((FreeBagAllownceInfo.SelectNodes("m:baggageDetails/m:unitQualifier", xnMgr).Count > 0) ? FreeBagAllownceInfo.SelectSingleNode("m:baggageDetails/m:unitQualifier", xnMgr).InnerText : ""))));
                                                }
                                            }
                                        }

                                        if (CheckSeg)
                                        {
                                            //프로모션 정보에서 공동운항 적용 여부 체크하여 프로모션 적용하는 로직으로 변경(2017-12-15,김지영차장)
                                            ////네이버운임은 공동운항일 경우라도 프로모션 적용(2015-07-08,김현준이사님요청)(임시적 적용)
                                            //if (SNM.Equals(4638))
                                            //    SegCDS = "N";

                                            ////대한항공은 공동운항일 경우라도 프로모션 적용(2016-09-20,정성하과장)
                                            //if (ValidatingCarrier.Equals("KE"))
                                            //    SegCDS = "N";
                                            
                                            (SegCDS.Equals("N") ? SegmentGroup1 : SegmentGroup2).AppendChild(NewSegment);
                                        }
                                    }

                                    //유효기간
                                    if (ResXml.SelectNodes("m:value", xnMgr).Count > 0)
                                    {
                                        XmlAttribute MaxStay;

                                        foreach (XmlNode FareFamiliesRef in recommendation.SelectNodes("//m:fareFamiliesRef[m:referencingDetail/m:refQualifier='M']", xnMgr))
                                        {
                                            MaxStay = FareFamiliesRef.Attributes.Append(ResXml.OwnerDocument.CreateAttribute("maxStay"));
                                            MaxStay.InnerText = ResXml.SelectSingleNode("m:value[m:ref='" + FareFamiliesRef.SelectSingleNode("m:referencingDetail/m:refNumber", xnMgr).InnerText + "']", xnMgr).Attributes.GetNamedItem("maxStay").InnerText;
                                        }
                                    }

                                    //TASF 적용 사용자 선택 가능 여부
                                    string SelectUserTASF = Common.SelectUserTASF(SNM, ValidatingCarrier);

                                    //모두투어 단독운임 여부
                                    bool SF = (recommendation.SelectNodes("//m:groupOfFares[m:productInformation/m:fareProductDetail/m:fareType='SF']", xnMgr).Count > 0) ? true : false;

                                    //프로모션 적용된 운임 존재 여부
                                    bool PromFareYN = false;

                                    //프로모션 적용
                                    if (SegmentGroup1.HasChildNodes)
                                    {
                                        if (PromItems != null)
                                        {
                                            foreach (XmlNode PromItem in PromItems)
                                            {
                                                string CabinClassItem = (PromItem.SelectSingleNode("cabinClass").InnerText.Equals("Y")) ? "Y,M,W" : PromItem.SelectSingleNode("cabinClass").InnerText;

                                                //프로모션 적용 여부 판단
                                                if (Common.ApplyPromotion(PromItem.SelectSingleNode("airCode").InnerText, PromItem.SelectSingleNode("fareType").InnerText, PromItem.SelectSingleNode("fareBasis").InnerText, CabinClassItem, PromItem.SelectSingleNode("bookingClass").InnerText, PromItem.SelectSingleNode("bookingClassExc").InnerText, PromItem.SelectSingleNode("specialYN").InnerText, recommendation.SelectSingleNode(String.Format("m:paxFareProduct[m:paxReference/m:ptc='{0}']", PTC), xnMgr), xnMgr))
                                                {
                                                    //여정의 항공사 체크
                                                    //여정의 항공사 체크하지 않음(2017-12-08,김지영차장)
                                                    bool SameAir = true;
                                                    //foreach (XmlNode Seg in SegmentGroup1.SelectNodes("seg"))
                                                    //{
                                                    //    for (int i = 0; i < Seg.SelectNodes("ref").Count; i++)
                                                    //    {
                                                    //        if (FlightInfo.SelectNodes(String.Format("flightIndex[@ref='{0}']/segGroup[@ref='{1}']/seg[@mcc!='{2}']", (i + 1), Seg.SelectNodes("ref")[i].InnerText, PromItem.SelectSingleNode("airCode").InnerText)).Count > 0)
                                                    //        {
                                                    //            SameAir = false;
                                                    //            break;
                                                    //        }
                                                    //    }

                                                    //    if (!SameAir)
                                                    //        break;
                                                    //}

                                                    if (SameAir)
                                                    {
                                                        NewPriceIndex1 = PriceInfo.AppendChild(PriceIndex.CloneNode(true));
                                                        NewPriceIndex1.ReplaceChild(SegmentGroup1.Clone(), NewPriceIndex1.SelectSingleNode("segGroup"));

                                                        NewPriceIndex1.Attributes.GetNamedItem("gds").InnerText = "Amadeus";
                                                        NewPriceIndex1.Attributes.GetNamedItem("mode").InnerText = MODE;
                                                        NewPriceIndex1.Attributes.GetNamedItem("ptc").InnerText = PTC;
                                                        //NewPriceIndex1.Attributes.GetNamedItem("ref").InnerText = Common.RefSum(recommendation.SelectSingleNode("m:itemNumber/m:itemNumberId/m:number", xnMgr).InnerText, CCDRef);
                                                        NewPriceIndex1.Attributes.GetNamedItem("ref").InnerText = Common.RefSum(PriceRef++, CCDRef).ToString();
                                                        NewPriceIndex1.Attributes.GetNamedItem("guid").InnerText = GUID;

                                                        //프로모션이 하나만 존재할 경우 선택한 상태로 변경
                                                        //if (PromItem.SelectNodes("promotions/promotion").Count.Equals(1))
                                                        //{
                                                        //    PromItem.SelectSingleNode("promotionId").InnerText = PromItem.SelectSingleNode("promotions/promotion").Attributes.GetNamedItem("promotionId").InnerText;
                                                        //    PromItem.SelectSingleNode("incentiveCode").InnerText = PromItem.SelectSingleNode("promotions/promotion").Attributes.GetNamedItem("incentiveCode").InnerText;
                                                        //    PromItem.SelectSingleNode("incentiveName").InnerText = PromItem.SelectSingleNode("promotions/promotion").Attributes.GetNamedItem("incentiveName").InnerText;
                                                        //    PromItem.SelectSingleNode("fareTarget").InnerText = PromItem.SelectSingleNode("promotions/promotion").Attributes.GetNamedItem("fareTarget").InnerText;
                                                        //}

                                                        SetPriceIndex(SNM, NewPriceIndex1, recommendation, xnMgr, PromItem, "N", DepartureFromKorea, SelectUserTASF, UMaxStay, TLDate, Currency);

                                                        //항공운임이 일만원 미만일 경우 삭제
                                                        if (cm.RequestDouble(NewPriceIndex1.SelectSingleNode("summary").Attributes.GetNamedItem("fare").InnerText) < 10000)
                                                            PriceInfo.RemoveChild(NewPriceIndex1);
                                                        else
                                                        {
                                                            if (!PromFareYN)
                                                                PromFareYN = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        //프로모션 적용전 운임(SF이면서 프로모션이 적용된 운임이 존재할 경우에는 기본운임은 미노출,2018-06-14,방경도팀장)
                                        if (!SF || !PromFareYN)
                                        {
                                            NewPriceIndex1 = PriceInfo.AppendChild(PriceIndex.CloneNode(true));
                                            NewPriceIndex1.ReplaceChild(SegmentGroup1.Clone(), NewPriceIndex1.SelectSingleNode("segGroup"));

                                            NewPriceIndex1.Attributes.GetNamedItem("gds").InnerText = "Amadeus";
                                            NewPriceIndex1.Attributes.GetNamedItem("mode").InnerText = MODE;
                                            NewPriceIndex1.Attributes.GetNamedItem("ptc").InnerText = PTC;
                                            NewPriceIndex1.Attributes.GetNamedItem("ref").InnerText = Common.RefSum(PriceRef++, CCDRef).ToString();
                                            NewPriceIndex1.Attributes.GetNamedItem("guid").InnerText = GUID;

                                            SetPriceIndex(SNM, NewPriceIndex1, recommendation, xnMgr, null, "N", DepartureFromKorea, SelectUserTASF, UMaxStay, TLDate, Currency);

                                            //항공운임이 일만원 미만일 경우 삭제
                                            if (cm.RequestDouble(NewPriceIndex1.SelectSingleNode("summary").Attributes.GetNamedItem("fare").InnerText) < 10000)
                                                PriceInfo.RemoveChild(NewPriceIndex1);
                                        }
                                    }

                                    //프로모션 적용(코드쉐어)
                                    if (SegmentGroup2.HasChildNodes)
                                    {
                                        PromFareYN = false;
                                        
                                        if (CSPromItems != null)
                                        {
                                            foreach (XmlNode PromItem in CSPromItems)
                                            {
                                                string CabinClassItem = (PromItem.SelectSingleNode("cabinClass").InnerText.Equals("Y")) ? "Y,M,W" : PromItem.SelectSingleNode("cabinClass").InnerText;

                                                //프로모션 적용 여부 판단
                                                if (Common.ApplyPromotion(PromItem.SelectSingleNode("airCode").InnerText, PromItem.SelectSingleNode("fareType").InnerText, PromItem.SelectSingleNode("fareBasis").InnerText, CabinClassItem, PromItem.SelectSingleNode("bookingClass").InnerText, PromItem.SelectSingleNode("bookingClassExc").InnerText, PromItem.SelectSingleNode("specialYN").InnerText, recommendation.SelectSingleNode(String.Format("m:paxFareProduct[m:paxReference/m:ptc='{0}']", PTC), xnMgr), xnMgr))
                                                {
                                                    NewPriceIndex2 = PriceInfo.AppendChild(PriceIndex.CloneNode(true));
                                                    NewPriceIndex2.ReplaceChild(SegmentGroup2.Clone(), NewPriceIndex2.SelectSingleNode("segGroup"));

                                                    NewPriceIndex2.Attributes.GetNamedItem("gds").InnerText = "Amadeus";
                                                    NewPriceIndex2.Attributes.GetNamedItem("mode").InnerText = MODE;
                                                    NewPriceIndex2.Attributes.GetNamedItem("ptc").InnerText = PTC;
                                                    NewPriceIndex2.Attributes.GetNamedItem("ref").InnerText = Common.RefSum(PriceRef++, CCDRef).ToString();
                                                    NewPriceIndex2.Attributes.GetNamedItem("guid").InnerText = GUID;

                                                    SetPriceIndex(SNM, NewPriceIndex2, recommendation, xnMgr, PromItem, "N", DepartureFromKorea, SelectUserTASF, UMaxStay, TLDate, Currency);

                                                    //항공운임이 일만원 미만일 경우 삭제
                                                    if (cm.RequestDouble(NewPriceIndex2.SelectSingleNode("summary").Attributes.GetNamedItem("fare").InnerText) < 10000)
                                                        PriceInfo.RemoveChild(NewPriceIndex2);
                                                    else
                                                    {
                                                        if (!PromFareYN)
                                                            PromFareYN = true;
                                                    }
                                                }
                                            }
                                        }

                                        //프로모션 적용전 운임(SF이면서 프로모션이 적용된 운임이 존재할 경우에는 기본운임은 미노출,2018-06-14,방경도팀장)
                                        if (!SF || !PromFareYN)
                                        {
                                            NewPriceIndex2 = PriceInfo.AppendChild(PriceIndex.CloneNode(true));
                                            NewPriceIndex2.ReplaceChild(SegmentGroup2, NewPriceIndex2.SelectSingleNode("segGroup"));

                                            NewPriceIndex2.Attributes.GetNamedItem("gds").InnerText = "Amadeus";
                                            NewPriceIndex2.Attributes.GetNamedItem("mode").InnerText = MODE;
                                            NewPriceIndex2.Attributes.GetNamedItem("ptc").InnerText = PTC;
                                            NewPriceIndex2.Attributes.GetNamedItem("ref").InnerText = Common.RefSum(PriceRef++, CCDRef).ToString();
                                            NewPriceIndex2.Attributes.GetNamedItem("guid").InnerText = GUID;

                                            SetPriceIndex(SNM, NewPriceIndex2, recommendation, xnMgr, null, "Y", DepartureFromKorea, SelectUserTASF, UMaxStay, TLDate, Currency);

                                            //항공운임이 일만원 미만일 경우 삭제
                                            if (cm.RequestDouble(NewPriceIndex2.SelectSingleNode("summary").Attributes.GetNamedItem("fare").InnerText) < 10000)
                                                PriceInfo.RemoveChild(NewPriceIndex2);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
			}

			PriceInfo.RemoveChild(PriceIndex);
			
			return XmlDoc.DocumentElement;
		}

		/// <summary>
		/// 운임정보리스트 생성
		/// </summary>
        /// <param name="SNM">사이트 번호</param>
		/// <param name="NewPriceIndex">신규 운임 노드</param>
		/// <param name="Recommendation">아마데우스 운임 정보</param>
		/// <param name="xnMgr">네임스페이스</param>
        /// <param name="PromItem">프로모션 정보</param>
        /// <param name="CDS">공동운항 운임 여부</param>
        /// <param name="DepartureFromKorea">한국출발여부</param>
        /// <param name="SelectUserTASF">TASF 적용 사용자 선택 가능 여부(Y:사용자 선택 가능, N:사용자 선택 불가)</param>
        /// <param name="UMaxStay">유효기간 정보(MPIS 등 고정 처리시)</param>
        /// <param name="TLDate">발권마감일(LTD)</param>
        /// <param name="Currency">통화코드</param>
        public void SetPriceIndex(int SNM, XmlNode NewPriceIndex, XmlNode Recommendation, XmlNamespaceManager xnMgr, XmlNode PromItem, string CDS, bool DepartureFromKorea, string SelectUserTASF, string UMaxStay, string TLDate, string Currency)
		{
			//탑승객별 요금정보
			XmlNode PaxFareGroup = NewPriceIndex.SelectSingleNode("paxFareGroup");
			XmlNode PaxFare = PaxFareGroup.SelectSingleNode("paxFare");
			XmlNode SegmentFareGroup;
			XmlNode SegmentFare;
			XmlNode Traveler;
			XmlNode Fare;
			XmlNode FareType;
			XmlNode Ref;

			XmlNode NewPaxFare;
			XmlNode NewSegmentFare;
			XmlNode NewFare;
			XmlNode NewFareType;
			XmlNode NewRef;

            string PTC = string.Empty;
            string FuelSurCharge = string.Empty;
            string QCharge = string.Empty;
			double FareAmount = 0;
			double PaxDiscountFare = 0;
			double TotalDiscountFare = 0;
			string CabinClassItem = string.Empty;
			string MaxStay = string.Empty;
			string ValidatingCarrier = Recommendation.SelectSingleNode("m:paxFareProduct/m:paxFareDetail/m:codeShareDetails[m:transportStageQualifier='V']/m:company", xnMgr).InnerText;
            int PaxCount = 0;

            //TASF(발권 여행사 수수료)
            bool UseTASF = Common.ApplyTASF(SNM, ValidatingCarrier);
            double TASF = 0;
            double TotalTASF = 0;

            //파트너 할인요금(추가할인금액)
            double PartnerDiscount = 0;
            double TotalPartnerDiscount = 0;

			foreach (XmlNode paxFareProduct in Recommendation.SelectNodes("m:paxFareProduct", xnMgr))
			{
                PTC = Common.ChangePaxType1(paxFareProduct.SelectSingleNode("m:paxReference/m:ptc", xnMgr).InnerText);
                FuelSurCharge = (paxFareProduct.SelectNodes("m:paxFareDetail/m:monetaryDetails[m:amountType='F']/m:amount", xnMgr).Count > 0) ? paxFareProduct.SelectSingleNode("m:paxFareDetail/m:monetaryDetails[m:amountType='F']/m:amount", xnMgr).InnerText : "0";
                QCharge = (paxFareProduct.SelectNodes("m:paxFareDetail/m:monetaryDetails[m:amountType='Q']/m:amount", xnMgr).Count > 0) ? paxFareProduct.SelectSingleNode("m:paxFareDetail/m:monetaryDetails[m:amountType='Q']/m:amount", xnMgr).InnerText : "0";

                FareAmount = cm.GetFare(ValidatingCarrier, paxFareProduct.SelectSingleNode("m:paxFareDetail/m:totalFareAmount", xnMgr).InnerText, paxFareProduct.SelectSingleNode("m:paxFareDetail/m:totalTaxAmount", xnMgr).InnerText, QCharge);
                PaxDiscountFare = cm.PromotionFare(FareAmount, paxFareProduct.SelectSingleNode("m:paxReference/m:ptc", xnMgr).InnerText, PromItem) - PartnerDiscount;
                TASF = UseTASF ? Common.GetTASF(SNM, PTC, ValidatingCarrier, DepartureFromKorea) : 0;
                
                PaxCount = paxFareProduct.SelectNodes("m:paxReference/m:traveller", xnMgr).Count;
                TotalDiscountFare += (PaxDiscountFare * PaxCount);
                TotalTASF += (TASF * PaxCount);
                TotalPartnerDiscount += PartnerDiscount;

				NewPaxFare = PaxFareGroup.AppendChild(PaxFare.CloneNode(true));
                NewPaxFare.Attributes.GetNamedItem("ptc").InnerText = PTC;
				NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText = FareAmount.ToString();
				NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("disFare").InnerText = PaxDiscountFare.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tax").InnerText = cm.GetTax(paxFareProduct.SelectSingleNode("m:paxFareDetail/m:totalTaxAmount", xnMgr).InnerText, FuelSurCharge).ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fsc").InnerText = cm.GetFuelSurCharge(ValidatingCarrier, FuelSurCharge, QCharge).ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("disPartner").InnerText = PartnerDiscount.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tasf").InnerText = TASF.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("mTasf").InnerText = TASF.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("aTasf").InnerText = "0";

				//여정별 요금정보
				SegmentFareGroup = NewPaxFare.SelectSingleNode("segFareGroup");
				SegmentFare = SegmentFareGroup.SelectSingleNode("segFare");

				foreach (XmlNode fareDetails in paxFareProduct.SelectNodes("m:fareDetails", xnMgr))
				{
					NewSegmentFare = SegmentFareGroup.AppendChild(SegmentFare.CloneNode(true));
					NewSegmentFare.Attributes.GetNamedItem("ref").InnerText = fareDetails.SelectSingleNode("m:segmentRef/m:segRef", xnMgr).InnerText;

					Fare = NewSegmentFare.SelectSingleNode("fare");

					foreach (XmlNode groupOfFares in fareDetails.SelectNodes("m:groupOfFares", xnMgr))
					{
						NewFare = NewSegmentFare.AppendChild(Fare.CloneNode(true));
						NewFare.Attributes.GetNamedItem("bpt").InnerText = groupOfFares.SelectSingleNode("m:productInformation/m:breakPoint", xnMgr).InnerText;
                        NewFare.Attributes.GetNamedItem("mas").InnerText = (groupOfFares.SelectNodes("m:fareFamiliesRef", xnMgr).Count > 0 && (XmlAttribute)groupOfFares.SelectSingleNode("m:fareFamiliesRef", xnMgr).Attributes.GetNamedItem("maxStay") != null) ? groupOfFares.SelectSingleNode("m:fareFamiliesRef", xnMgr).Attributes.GetNamedItem("maxStay").InnerText : ((groupOfFares.SelectSingleNode("m:productInformation/m:breakPoint", xnMgr).InnerText.Equals("Y")) ? "1Y" : "");
						NewFare.SelectSingleNode("cabin").Attributes.GetNamedItem("rbd").InnerText = groupOfFares.SelectSingleNode("m:productInformation/m:cabinProduct/m:rbd", xnMgr).InnerText;
						NewFare.SelectSingleNode("cabin").Attributes.GetNamedItem("cabin").InnerText = (groupOfFares.SelectNodes("m:productInformation/m:cabinProduct/m:cabin", xnMgr).Count > 0) ? groupOfFares.SelectSingleNode("m:productInformation/m:cabinProduct/m:cabin", xnMgr).InnerText : "";
						NewFare.SelectSingleNode("cabin").Attributes.GetNamedItem("avl").InnerText = (groupOfFares.SelectNodes("m:productInformation/m:cabinProduct/m:avlStatus", xnMgr).Count > 0) ? ((groupOfFares.SelectSingleNode("m:productInformation/m:cabinProduct/m:avlStatus", xnMgr).InnerText.Equals("L")) ? "0" : groupOfFares.SelectSingleNode("m:productInformation/m:cabinProduct/m:avlStatus", xnMgr).InnerText) : "";
						NewFare.SelectSingleNode("fare").Attributes.GetNamedItem("basis").InnerText = groupOfFares.SelectSingleNode("m:productInformation/m:fareProductDetail/m:fareBasis", xnMgr).InnerText;
						NewFare.SelectSingleNode("fare").Attributes.GetNamedItem("ptc").InnerText = groupOfFares.SelectSingleNode("m:productInformation/m:fareProductDetail/m:passengerType", xnMgr).InnerText;
						NewFare.SelectSingleNode("fare").Attributes.GetNamedItem("tkd").InnerText = (groupOfFares.SelectNodes("m:ticketInfos", xnMgr).Count > 0 && groupOfFares.SelectNodes("m:ticketInfos/m:additionalFareDetails/m:ticketDesignator", xnMgr).Count > 0) ? groupOfFares.SelectSingleNode("m:ticketInfos/m:additionalFareDetails/m:ticketDesignator", xnMgr).InnerText : "";
                        
						FareType = NewFare.SelectSingleNode("fare/fareType");
						
						foreach (XmlNode TmpFareType in groupOfFares.SelectNodes("m:productInformation/m:fareProductDetail/m:fareType", xnMgr))
						{
							NewFareType = NewFare.SelectSingleNode("fare").AppendChild(FareType.Clone());
							//NewFareType.InnerText = TmpFareType.InnerText;

                            //MPIS에서 3자리 fareType을 2자리로 잘 못 내려주고 있어 임시 강제 치환(2017-11-14)
                            NewFareType.InnerText = TmpFareType.InnerText.Equals("MS") ? "MSP" : (TmpFareType.InnerText.Equals("NT") ? "NTF" : TmpFareType.InnerText);
						}

						NewFare.SelectSingleNode("fare").RemoveChild(FareType);

                        if (groupOfFares.SelectNodes("m:productInformation/m:corporateId", xnMgr).Count > 0)
                            NewFare.SelectSingleNode("corporateId").InnerText = groupOfFares.SelectSingleNode("m:productInformation/m:corporateId", xnMgr).InnerText;
                        else
                            NewFare.RemoveChild(NewFare.SelectSingleNode("corporateId"));

						MaxStay = cm.SetMaxStay(MaxStay, NewFare.Attributes.GetNamedItem("mas").InnerText);
					}

					NewSegmentFare.RemoveChild(Fare);
				}

				SegmentFareGroup.RemoveChild(SegmentFare);

				//탑승객 번호
				Traveler = NewPaxFare.SelectSingleNode("traveler");
				Ref = Traveler.SelectSingleNode("ref");

				foreach (XmlNode traveller in paxFareProduct.SelectNodes("m:paxReference/m:traveller", xnMgr))
				{
					NewRef = Traveler.AppendChild(Ref.CloneNode(false));
					NewRef.InnerText = traveller.SelectSingleNode("m:ref", xnMgr).InnerText;

					if (traveller.SelectNodes("m:infantIndicator", xnMgr).Count > 0)
					{
						NewRef.Attributes.GetNamedItem("ind").InnerText = traveller.SelectSingleNode("m:infantIndicator", xnMgr).InnerText;
					}
					else
					{
						NewRef.Attributes.RemoveNamedItem("ind");
					}
				}

				Traveler.RemoveChild(Ref);
			}

			PaxFareGroup.RemoveChild(PaxFare);

            //요약 정보
            string SummaryFuelSurCharge = (Recommendation.SelectNodes("m:recPriceInfo/m:monetaryDetail[m:amountType='F']/m:amount", xnMgr).Count > 0) ? Recommendation.SelectSingleNode("m:recPriceInfo/m:monetaryDetail[m:amountType='F']/m:amount", xnMgr).InnerText : "0";
            string SummaryQCharge = (Recommendation.SelectNodes("m:recPriceInfo/m:monetaryDetail[m:amountType='Q']/m:amount", xnMgr).Count > 0) ? Recommendation.SelectSingleNode("m:recPriceInfo/m:monetaryDetail[m:amountType='Q']/m:amount", xnMgr).InnerText : "0";

            //NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("price").InnerText = (TotalDiscountFare + cm.RequestDouble(Recommendation.SelectSingleNode("m:recPriceInfo/m:monetaryDetail[2]/m:amount", xnMgr).InnerText) + cm.RequestDouble(SummaryQCharge)).ToString();
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("fare").InnerText = cm.GetFare(ValidatingCarrier, Recommendation.SelectSingleNode("m:recPriceInfo/m:monetaryDetail[1]/m:amount", xnMgr).InnerText, Recommendation.SelectSingleNode("m:recPriceInfo/m:monetaryDetail[2]/m:amount", xnMgr).InnerText, SummaryQCharge).ToString();
			NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("disFare").InnerText = TotalDiscountFare.ToString();
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("tax").InnerText = cm.GetTax(Recommendation.SelectSingleNode("m:recPriceInfo/m:monetaryDetail[2]/m:amount", xnMgr).InnerText, SummaryFuelSurCharge).ToString();
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("fsc").InnerText = cm.GetFuelSurCharge(ValidatingCarrier, SummaryFuelSurCharge, SummaryQCharge).ToString();
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("disPartner").InnerText = TotalPartnerDiscount.ToString();
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("tasf").InnerText = TotalTASF.ToString();
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("mTasf").InnerText = TotalTASF.ToString();
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("aTasf").InnerText = "0";
			NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("pvc").InnerText = ValidatingCarrier;
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("mas").InnerText = String.IsNullOrWhiteSpace(UMaxStay) ? MaxStay : UMaxStay;
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("ttl").InnerText = TLDate;//(Recommendation.SelectNodes("m:paxFareProduct/m:fare/m:pricingMessage[m:freeTextQualification/m:textSubjectQualifier='LTD']", xnMgr).Count > 0) ? cm.ConvertToDateTime(Recommendation.SelectSingleNode("m:paxFareProduct/m:fare/m:pricingMessage[m:freeTextQualification/m:textSubjectQualifier='LTD']/m:description[2]", xnMgr).InnerText) : "";
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("cds").InnerText = CDS;
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("ucf").InnerText = (Recommendation.SelectNodes("m:itemNumber/m:priceTicketing[m:priceType='UF']", xnMgr).Count > 0) ? "Y" : "N";
			NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("ntf").InnerText = (Recommendation.SelectNodes("m:paxFareProduct/m:fareDetails/m:groupOfFares/m:productInformation/m:fareProductDetail/m:fareType[.='NTF']", xnMgr).Count > 0) ? "Y" : "N";
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("sutf").InnerText = SelectUserTASF;
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("cnc").InnerText = Currency;
            NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("price").InnerText = (TotalDiscountFare + cm.RequestDouble(NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("tax").InnerText) + cm.RequestDouble(NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("fsc").InnerText)).ToString();

			//free Text
			foreach (XmlNode fare in Recommendation.SelectNodes("m:paxFareProduct[1]/m:fare", xnMgr))
			{
				XmlDocument TmpXml = new XmlDocument();
                TmpXml.LoadXml(fare.OuterXml.Replace(String.Format(" xmlns=\"{0}\"", AmadeusConfig.NamespaceURL("Fare_MasterPricerTravelBoardSearch")), "").Replace(String.Format(" xmlns=\"{0}\"", AmadeusConfig.NamespaceURL("Fare_InstantTravelBoardSearch")), ""));

				NewPriceIndex.SelectSingleNode("fareMessage").AppendChild(NewPriceIndex.OwnerDocument.ImportNode(TmpXml.SelectSingleNode("fare"), true));
			}

			if (!NewPriceIndex.SelectSingleNode("fareMessage").HasChildNodes)
				NewPriceIndex.RemoveChild(NewPriceIndex.SelectSingleNode("fareMessage"));

			//프로모션 정보
			if (PromItem != null)
				NewPriceIndex.SelectSingleNode("promotionInfo").AppendChild(NewPriceIndex.OwnerDocument.ImportNode(PromItem, true));
			else
				NewPriceIndex.RemoveChild(NewPriceIndex.SelectSingleNode("promotionInfo"));
		}

        #endregion "Fare + Availability 동시조회(아마데우스)"

        #region "Fare + Availability 동시조회(세이버)"

        /// <summary>
        /// Fare + Availability 동시조회(세이버)
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="SAC">항공사 코드</param>
        /// <param name="DLC">출발지 공항 코드</param>
        /// <param name="ALC">도착지 공항 코드</param>
        /// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="ARD">도착일(YYYYMMDD)</param>
        /// <param name="OPN">오픈여부(YN)</param>
        /// <param name="CCD">캐빈 클래스(Y:Economic, M:Economic Standard, W:Economic Premium, C:Business, F:First/Supersonic)</param>
        /// <param name="ADC">성인 탑승객 수</param>
        /// <param name="CHC">소아 탑승객 수</param>
        /// <param name="IFC">유아 탑승객 수</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="FTX">free text</param>
        [WebMethod(Description = "Fare + Availability 동시조회(세이버)")]
        public XmlElement SearchFareAvailSabreRS(int SNM, string SAC, string DLC, string ALC, string ROT, string DTD, string ARD, string OPN, string CCD, int ADC, int CHC, int IFC, string RQT, string FTX)
        {
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;

            try
            {
                //발권마감일 체크여부
                string LTD = "N";

                //좌석상태(P:가능, W:대기포함(가능,대기), A:모든좌석(가능,대기,마감))
                string SeatType = "P";

                //SOTO여부
                string Soto = "N";

                string SCity1 = "";
                string ECity1 = "";
                string SCity2 = "";
                string ECity2 = "";
                string SCity3 = "";
                string ECity3 = "";
                string SDate1 = "";
                string SDate2 = "";
                string SDate3 = "";
                string StayLength = "";

                if (ROT.Equals("OW"))
                {
                    SCity1 = DLC;
                    ECity1 = ALC;
                    SDate1 = Common.ConvertToOnlyNumber(DTD);
                }
                else if (ROT.Equals("RT"))
                {
                    SCity1 = DLC;
                    ECity1 = ALC;
                    SCity2 = ALC;
                    ECity2 = DLC;
                    SDate1 = Common.ConvertToOnlyNumber(DTD);

                    if (OPN.Equals("Y"))
                    {
                        SDate2 = "";
                        StayLength = String.IsNullOrWhiteSpace(ARD) ? "300D" : ARD;
                    }
                    else
                    {
                        SDate2 = Common.ConvertToOnlyNumber(ARD);
                        StayLength = "";
                    }
                }
                else if (ROT.Equals("DT"))
                {
                    string[] ArrDLC = DLC.Split(',');
                    string[] ArrALC = DLC.Split(',');

                    SCity1 = ArrDLC[0];
                    ECity1 = ArrALC[0];
                    SCity2 = ArrDLC[1];
                    ECity2 = ArrALC[1];
                    SDate1 = Common.ConvertToOnlyNumber(DTD);

                    if (OPN.Equals("Y"))
                    {
                        SDate2 = "";
                        StayLength = String.IsNullOrWhiteSpace(ARD) ? "300D" : ARD;
                    }
                    else
                    {
                        SDate2 = Common.ConvertToOnlyNumber(ARD);
                        StayLength = "";
                    }
                }
                else if (ROT.Equals("MD"))
                {
                    string[] ArrDLC = DLC.Split(',');
                    string[] ArrALC = DLC.Split(',');
                    string[] ArrDTD = DLC.Split(',');

                    SCity1 = ArrDLC[0];
                    ECity1 = ArrALC[0];
                    SCity2 = ArrDLC[1];
                    ECity2 = ArrALC[1];
                    SCity3 = ArrDLC[2];
                    ECity3 = ArrALC[2];
                    SDate1 = Common.ConvertToOnlyNumber(ArrDTD[0]);
                    SDate2 = Common.ConvertToOnlyNumber(ArrDTD[1]);
                    SDate3 = Common.ConvertToOnlyNumber(ArrDTD[2]);
                }

                //최초출발지
                string DepartureAirport = DLC.Split(',')[0];

                //최종도착지(목적지)
                string[] TmpALC = ALC.Split(',');
                string DestinationAirport = TmpALC[TmpALC.Length - 1];

                //한국출발여부
                bool DepartureFromKorea = Common.KoreaOfAirport(DepartureAirport.Trim());

                //국내선 예약불가(2015-04-20 추가)
                if (ROT.Equals("RT") && DepartureFromKorea && Common.KoreaOfAirport(DestinationAirport.Trim()))
                {
                    throw new Exception("요청하신 서비스는 해외 전용으로 국내선은 예약할 수 없습니다.");
                }

                //ABS 예외사항
                if (SNM.Equals(68))
                {
                    LTD = "N";      //발권마감일 미체크
                    SeatType = "W"; //대기예약 가능
                }
                else
                {
                    //도착지가 필리핀(PH)일 경우 한국출발에 한해 왕복일 경우에만 예약가능(2014-12-24,정성하대리요청)
                    if (Common.PhilippinesOfAirport(DestinationAirport.Trim()))
                    {
                        if (ROT.Equals("OW"))
                            throw new Exception("필리핀은 왕복인 경우에만 항공예약을 진행할 수 있습니다.");
                        else
                        {
                            if (OPN.Equals("N"))
                            {
                                if (!DepartureFromKorea)
                                    throw new Exception("필리핀은 한국출발이면서 왕복인 경우에만 예약을 진행할 수 있습니다.");
                            }
                            else
                                throw new Exception("필리핀은 귀국일 미지정(오픈)인 경우 예약을 진행할 수 없습니다.");
                        }
                    }
                    //도착지가 미주(US)일 경우 편도(국적기), 왕복(전항공)일 경우에만 예약가능(2014-12-24,정성하대리요청)
                    else if (DepartureFromKorea && Common.UnitedStatesOfAirport(DestinationAirport.Trim()))
                    {
                        if (ROT.Equals("OW") || OPN.Equals("Y"))
                            SAC = "KE,OZ";
                    }
                }

                //해외출발(SOTO)
                if (!DepartureFromKorea)
                {
                    Soto = "Y";

                    //출발지가 필리핀(PH)일 경우 KE,OZ,VN항공사만 예약가능(2015-03-24,TOPAS요청)
                    if (Common.PhilippinesOfAirport(DepartureAirport.Trim()))
                        SAC = "KE,OZ,VN";
                }

                //Stopwatch sw;
                //XmlNode NewRunTime = RunTime.CloneNode(false);

                //sw = Stopwatch.StartNew();
                //XmlElement ResXml = sas.SearchFareAvailRS(ROT, Dep, Arr, DepDate, RetDate, (OPN.Equals("Y") ? ARD : ""), (CCD.Equals("M") ? "Y" : (CCD.Equals("W") ? "P" : CCD)), ADC, CHC, IFC, SAC, "", GUID);
                //CheckRunTimeEnd(NewRunTime, sw, "SearchFareAvailRS");

                //sw = Stopwatch.StartNew();
                //XmlElement XmlMode = ToModeSearchFareAvailRS2(SNM, ResXml);
                //CheckRunTimeEnd(NewRunTime, sw, "ToModeSearchFareAvailRS");

                //실행시간 데이타 XML에 추가
                //XmlMode.AppendChild(XmlMode.OwnerDocument.ImportNode(NewRunTime, true));
                //cm.XmlFileSave(XmlMode, mc.Name, "ToModeSearchFareAvailRS", "N", GUID);

                //return ResXml;
                return null;
            }
            catch (Exception ex)
            {
                //return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 31).ToErrors;
                return new MWSException(ex, hcc, "Mode", MethodBase.GetCurrentMethod().Name, 0, 0).ToErrors;
            }
        }

        //[WebMethod(Description = "Fare + Availability 동시조회(세이버)")]
        public XmlElement AAASearchFareAvailSabreRS()
        {
            try
            {
                string[] PTC = new string[3] { "ADT", "CHD", "INF" };
                int[] NOP = new int[3] { 1, 0, 0 };

                return SearchFareAvailDetailSabreRS(2, "OZ/RS/BX", "SEL", "NRT", "", "RT", "20181120", "20181125", "N", "", "Y", "", "", PTC, NOP, 50, "", cm.GetGUID);
                //return SearchFareAvailDetailSabreRS(2, "", "SEL", "HKG", "", "RT", "20171114", "20171119", "N", "", "Y", "", "", PTC, NOP, 50, "", cm.GetGUID);
            }
            catch (Exception ex)
            {
                return new MWSException(ex, hcc, "Mode", MethodBase.GetCurrentMethod().Name, 0, 0).ToErrors;
            }
        }

        /// <summary>
        /// Fare + Availability 동시조회(상세 조건 조회)(세이버)
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="SAC">항공사 코드</param>
        /// <param name="DLC">출발지 공항 코드</param>
        /// <param name="ALC">도착지 공항 코드</param>
        /// <param name="CLC">경유지 공항 코드(여정구분은 콤마, SEG구분은 슬래시, ex:NRT/SIN,SIN/NRT,RON)</param>
        /// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="ARD">도착일(YYYYMMDD)</param>
        /// <param name="OPN">오픈여부(YN)</param>
        /// <param name="FLD">여정추가옵션(C:Connecting Service, D:Direct Service, N:Non-Stop Service, OV:Overnight not allowed)</param>
        /// <param name="CCD">캐빈 클래스(Y:Economic, M:Economic Standard, W:Economic Premium, C:Business, F:First/Supersonic)</param>
        /// <param name="ACQ">여정의 출발/도착지 코드에 대해 도시 또는 공항코드 여부 지정(A:공항, C:도시, 공백:자동인식)</param>
        /// <param name="FAB">Fare Basis</param>
        /// <param name="PTC">탑승객 타입 코드</param>
        /// <param name="NOP">탑승객 수</param>
        /// <param name="NRR">응답 결과 수</param>
        /// <param name="FTX">free text</param>
        /// <param name="GUID">고유번호</param>
        /// <returns></returns>
        public XmlElement SearchFareAvailDetailSabreRS(int SNM, string SAC, string DLC, string ALC, string CLC, string ROT, string DTD, string ARD, string OPN, string FLD, string CCD, string ACQ, string FAB, string[] PTC, int[] NOP, int NRR, string FTX, string GUID)
        {
            //호출시간체크용(임시)
            string SearchFareAvailDetailSabreRSDateTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff");

            int ftxIdx = 0;
            string PUB = "N";   //PUB요금 출력여부(기본값으로 PUB운임 제외,2014-10-29,김지영과장요청)
            int WLR = 0;        //대기예약 포함 비율
            string LTD = "Y";   //발권마감일 체크여부
            string FTR = "Y";   //필터링 사용여부(발권마감일 체크 포함)
            string MTL = "N";   //ModeTL 적용여부
            string PRM = "Y";   //프로모션 적용여부

            //free text : PUB | WLR | LTD | FTR | MTL | ACQ | PRM
            if (!String.IsNullOrWhiteSpace(FTX))
            {
                foreach (string StrFTX in FTX.Split('|'))
                {
                    if (ftxIdx.Equals(0))
                        PUB = (StrFTX.Equals("Y")) ? "Y" : "N";
                    else if (ftxIdx.Equals(1))
                        WLR = cm.RequestInt(StrFTX);
                    else if (ftxIdx.Equals(2))
                        LTD = (StrFTX.Equals("N")) ? "N" : "Y";
                    else if (ftxIdx.Equals(3))
                        FTR = (StrFTX.Equals("N")) ? "N" : "Y";
                    else if (ftxIdx.Equals(4))
                        MTL = (StrFTX.Equals("Y")) ? "Y" : "N";
                    else if (ftxIdx.Equals(5))
                        ACQ = (String.IsNullOrWhiteSpace(ACQ) ? StrFTX : ACQ);
                    else if (ftxIdx.Equals(6))
                        PRM = (StrFTX.Equals("N")) ? "N" : "Y";

                    ftxIdx++;
                }
            }

            //최초출발지
            string DepartureAirport = DLC.Split(',')[0];

            //최종도착지(목적지)
            string[] TmpALC = ALC.Split(',');
            string DestinationAirport = TmpALC[TmpALC.Length - 1];

            //한국출발여부
            bool DepartureFromKorea = Common.KoreaOfAirport(DepartureAirport.Trim());

            //국내선 예약불가(2015-04-20 추가)
            if (ROT.Equals("RT") && DepartureFromKorea && Common.KoreaOfAirport(DestinationAirport.Trim()))
            {
                throw new Exception("요청하신 서비스는 해외 전용으로 국내선은 예약할 수 없습니다.");
            }

            //ABS 예외사항
            if (!SNM.Equals(68))
            {
                //도착지가 필리핀(PH)일 경우 한국출발에 한해 왕복일 경우에만 예약가능(2014-12-24,정성하대리요청)
                if (Common.PhilippinesOfAirport(DestinationAirport.Trim()))
                {
                    if (ROT.Equals("OW"))
                        throw new Exception("필리핀은 왕복인 경우에만 항공예약을 진행할 수 있습니다.");
                    else
                    {
                        if (OPN.Equals("N"))
                        {
                            if (!DepartureFromKorea)
                                throw new Exception("필리핀은 한국출발이면서 왕복인 경우에만 예약을 진행할 수 있습니다.");
                        }
                        else
                            throw new Exception("필리핀은 귀국일 미지정(오픈)인 경우 예약을 진행할 수 없습니다.");
                    }
                }
                //도착지가 미주(US)일 경우 편도(국적기), 왕복(전항공)일 경우에만 예약가능(2014-12-24,정성하대리요청)
                else if (DepartureFromKorea && Common.UnitedStatesOfAirport(DestinationAirport.Trim()))
                {
                    if (ROT.Equals("OW") || OPN.Equals("Y"))
                    {
                        if (String.IsNullOrWhiteSpace(SAC))
                            SAC = "KE/OZ";
                        else
                        {
                            string SAC2 = string.Empty;

                            foreach (string TmpSAC in SAC.Split('/'))
                            {
                                if (TmpSAC.Trim().Equals("KE") || TmpSAC.Trim().Equals("OZ"))
                                    SAC2 += String.Concat((String.IsNullOrWhiteSpace(SAC2) ? "" : ","), TmpSAC.Trim());
                            }

                            SAC = SAC2;
                        }
                    }
                }
            }

            //해외출발(SOTO)
            if (!DepartureFromKorea)
            {
                //해외출발일 경우 PUB 포함(2014-11-06,김지영과장요청)
                PUB = "Y";

                //출발지가 필리핀(PH)일 경우 KE,OZ,VN항공사만 예약가능(2015-03-24,TOPAS요청)
                if (Common.PhilippinesOfAirport(DepartureAirport.Trim()))
                {
                    if (String.IsNullOrWhiteSpace(SAC))
                        SAC = "KE/OZ/VN";
                    else
                    {
                        string SAC2 = string.Empty;

                        foreach (string TmpSAC in SAC.Split('/'))
                        {
                            if (TmpSAC.Trim().Equals("KE") || TmpSAC.Trim().Equals("OZ") || TmpSAC.Trim().Equals("VN"))
                                SAC2 += String.Concat((String.IsNullOrWhiteSpace(SAC2) ? "" : ","), TmpSAC.Trim());
                        }

                        SAC = SAC2;
                    }
                }
            }

            string[] Dep = new String[4] { "", "", "", "" };
            string[] Arr = new String[4] { "", "", "", "" };
            string[] DepDate = new String[4] { "", "", "", "" };
            string RetDate = "";
            int ADC = 0;
            int CHC = 0;
            int IFC = 0;

            if (ROT.Equals("RT"))
            {
                Dep[0] = DLC;
                Arr[0] = ALC;
                DepDate[0] = Common.ConvertToOnlyNumber(DTD);

                Dep[1] = ALC;
                Arr[1] = DLC;
                DepDate[1] = Common.ConvertToOnlyNumber(ARD);

                RetDate = DepDate[1];
            }
            else if (ROT.Equals("DT"))
            {
                string[] DLCs = DLC.Split(',');
                string[] ALCs = ALC.Split(',');
                
                Dep[0] = DLCs[0];
                Arr[0] = ALCs[0];
                DepDate[0] = Common.ConvertToOnlyNumber(DTD);

                Dep[1] = DLCs[1];
                Arr[1] = ALCs[1];
                DepDate[1] = Common.ConvertToOnlyNumber(ARD);

                RetDate = DepDate[1];
            }
            else if (ROT.Equals("MD"))
            {
                string[] DLCs = DLC.Split(',');
                string[] ALCs = ALC.Split(',');
                string[] DTDs = DTD.Split(',');

                for (int i = 0; i < DLCs.Length; i++)
                {
                    Dep[i] = DLCs[i];
                    Arr[i] = ALCs[i];
                    DepDate[i] = Common.ConvertToOnlyNumber(DTDs[i]);
                }
            }
            else //OW
            {
                Dep[0] = DLC;
                Arr[0] = ALC;
                DepDate[0] = Common.ConvertToOnlyNumber(DTD);
            }

            for (int i = 0; i < PTC.Length; i++)
            {
                if (PTC[i].Equals("INF"))
                    IFC = NOP[i];
                else if (PTC[i].Equals("CH") || PTC[i].Equals("CHD"))
                    CHC = NOP[i];
                else
                    ADC = NOP[i];
            }

            //MaxFare 수 조정
            NRR = (NRR > 100) ? 10 : 5;

            Stopwatch sw;
            XmlNode NewRunTime = RunTime.CloneNode(false);

            sw = Stopwatch.StartNew();
            XmlElement ResXml = sas.SearchFareAvailFMSRS(ROT, Dep, Arr, DepDate, RetDate, (OPN.Equals("Y") ? ARD : ""), (CCD.Equals("M") ? "Y" : (CCD.Equals("W") ? "P" : CCD)), ADC, CHC, IFC, SAC, "", NRR, String.Format("{0}-{1}-{2}", GUID, PTC[0], CCD));
            //XmlElement ResXml = sas.SearchFareAvailRS(ROT, Dep, Arr, DepDate, RetDate, (OPN.Equals("Y") ? ARD : ""), (CCD.Equals("M") ? "Y" : (CCD.Equals("W") ? "P" : CCD)), ADC, CHC, IFC, (SNM.Equals(2) ? "P" : "M"), String.Format("{0}-{1}-{2}", GUID, PTC[0], CCD));
            CheckRunTimeEnd(NewRunTime, sw, "SearchFareAvailRS");
            
            //오류 결과일 경우 예외 처리
            if (ResXml.SelectSingleNode("error_no").InnerText != "0")
                throw new Exception(ResXml.SelectSingleNode("error_desc").InnerText);

            //if (ResXml.SelectSingleNode("FSAMAP/NFSA").InnerText.Equals("0"))
            //    throw new Exception("항공요금 검색 결과가 없습니다.");

            if (ResXml.SelectNodes("FSAMAP/FSA").Count.Equals("0"))
                throw new Exception("항공요금 검색 결과가 없습니다.");

            //프로모션 정보
            XmlElement PromXml = null;

            if (PRM.Equals("Y") && !ROT.Equals("MD"))
            {
                PromXml = SearchPromotionList(SNM, DLC, ALC, ROT, DTD, ARD, OPN, (CCD.Equals("C") || CCD.Equals("F")) ? CCD : "Y", PTC[0]);
                cm.XmlFileSave(PromXml, mc.Name, "SearchPromotionList", "Y", GUID);
            }

            sw = Stopwatch.StartNew();
            XmlElement XmlMode = ToModeSearchFareAvailSabreRS(SNM, ResXml, PromXml, DLC, ALC, ROT, DTD, OPN, CCD, PUB, LTD, FTR, PTC[0], ADC, CHC, IFC);
            CheckRunTimeEnd(NewRunTime, sw, "ToModeSearchFareAvailSabreRS");

            //실행시간 데이타 XML에 추가
            XmlMode.AppendChild(XmlMode.OwnerDocument.ImportNode(NewRunTime, true));
            cm.XmlFileSave(XmlMode, mc.Name, "ToModeSearchFareAvailSabreRS", "Y", GUID);

            return XmlMode;
        }

        /// <summary>
        /// SearchFareAvailSabreRS를 통합용 XML구조로 치환
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="ResXml">SearchFareAvailRS의 Data</param>
        /// <param name="PromXml">SearchPromotionList의 Data</param>
        /// <param name="DLC">출발지 공항 코드</param>
        /// <param name="ALC">도착지 공항 코드</param>
        /// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="OPN">오픈여부(YN)</param>
        /// <param name="CCD">캐빈 클래스(Y:일반석, P:프리미엄일반석, C:비즈니스석, F:일등석)</param>
        /// <param name="PUB">PUB요금 출력여부</param>
        /// <param name="LTD">발권마감일 체크여부</param>
        /// <param name="FTR">필터링 사용여부(발권마감일 체크 포함)</param>
        /// <param name="PTC">탑승객 타입 코드(ADT:성인, DIS:장애인, STU:학생, SRC:경로, LBR:근로자)</param>
        /// <param name="ADC">성인 탑승객 수</param>
        /// <param name="CHC">소아 탑승객 수</param>
        /// <param name="IFC">유아 탑승객 수</param>
        /// <returns></returns>
        public XmlElement ToModeSearchFareAvailSabreRS(int SNM, XmlElement ResXml, XmlElement PromXml, string DLC, string ALC, string ROT, string DTD, string OPN, string CCD, string PUB, string LTD, string FTR, string PTC, int ADC, int CHC, int IFC)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchFareAvailRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;
            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("ref").InnerText = "";

            XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
            XmlNode FlightIndex = FlightInfo.SelectSingleNode("flightIndex");
            XmlNode SegmentGroup = FlightIndex.SelectSingleNode("segGroup");
            XmlNode Segment = SegmentGroup.SelectSingleNode("seg");
            XmlNode StopSegment = Segment.SelectSingleNode("seg");
            
            XmlNode PriceInfo = XmlDoc.SelectSingleNode("ResponseDetails/priceInfo");
            XmlNode PriceIndex = PriceInfo.SelectSingleNode("priceIndex");
            XmlNode Summary = PriceIndex.SelectSingleNode("summary");
            XmlNode SegGroup = PriceIndex.SelectSingleNode("segGroup");
            XmlNode Seg = SegGroup.SelectSingleNode("seg");
            XmlNode SegRef = Seg.SelectSingleNode("ref");
            XmlNode PaxFareGroup = PriceIndex.SelectSingleNode("paxFareGroup");
            XmlNode PaxFare = PaxFareGroup.SelectSingleNode("paxFare");
            XmlNode PaxFareAmount = PaxFare.SelectSingleNode("amount");
            XmlNode SegFareGroup = PaxFare.SelectSingleNode("segFareGroup");
            XmlNode SegFare = SegFareGroup.SelectSingleNode("segFare");
            XmlNode SegFFare = SegFare.SelectSingleNode("fare");
            XmlNode Traveler = PaxFare.SelectSingleNode("traveler");
            XmlNode TravelerRef = Traveler.SelectSingleNode("ref");
            XmlNode FareMessage = PriceIndex.SelectSingleNode("fareMessage");
            XmlNode FareRuleUrl = PriceIndex.SelectSingleNode("fareRuleUrl");
            XmlNode PromotionInfo = PriceIndex.SelectSingleNode("promotionInfo");

            XmlNode NewFlightIndex;
            XmlNode NewSegmentGroup;
            XmlNode NewSegment;
            XmlNode NewStopSegment;

            XmlNode FARE = null;
            XmlNode NewPriceIndex = null;
            XmlNode NewSummary = null;
            XmlNode NewSegGroup = null;
            XmlNode NewSeg = null;
            XmlNode NewSegRef = null;
            XmlNode NewPaxFareGroup = null;
            //XmlNode NewFareMessage = null;

            //string PTC = Common.ChangePaxType1(ResXml.SelectSingleNode("FARE/IDT").InnerText);
            string CDS = string.Empty;
            int CCDRef = Common.RefOverride("Sabre", CCD);
            int PriceRef = 1;
            int SegmentRef = 1;
            int SegCount = 0;
            int ChinaStopoverCount = 0;
            int FlightRef = 1;
            string SRef = "/";
            string ValidatingCarrier = string.Empty;
            bool CheckPriceIndex = false;

            FlightInfo.Attributes.GetNamedItem("ptc").InnerText = PTC;
            FlightInfo.Attributes.GetNamedItem("rot").InnerText = ROT;
            FlightInfo.Attributes.GetNamedItem("opn").InnerText = OPN;

            //프로모션 정보
            XmlNodeList PromItems = (PromXml != null) ? PromXml.SelectNodes(String.Format("item[paxType='{0}' or paxType='']", PTC)) : null;

            //한국출발여부
            bool DepartureFromKorea = Common.KoreaOfAirport(DLC.Split(',')[0].Trim());

            //CommonHeader
            FareMessage.AppendChild(XmlDoc.ImportNode(ResXml.SelectSingleNode("SiteInfo/SiteInfoDetail/CommonHeader"), true));
            //NewFareMessage = XmlDoc.CreateElement("CommonHeader");
            //NewFareMessage.AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(ResXml.SelectSingleNode("SiteInfo/SiteInfoDetail/CommonHeader").InnerText));
            //FareMessage.AppendChild(NewFareMessage);
            
            foreach (string HSQ in ResXml.SelectSingleNode("FSAMAP/FSA/S").InnerText.Split(';')[0].Split('-'))
            {
                if (HSQ != "0")
                {
                    NewFlightIndex = FlightInfo.AppendChild(FlightIndex.CloneNode(false));
                    NewFlightIndex.Attributes.GetNamedItem("ref").InnerText = (FlightRef++).ToString();
                }
            }

            foreach (XmlNode FSA in ResXml.SelectNodes("FSAMAP/FSA"))
            {
                #region "클래스와 잔여석이 동일한 그룹으로 묶기 위해 소팅"

                List<string[]> SInfo = new List<string[]>();

                foreach (string S in FSA.SelectSingleNode("S").InnerText.Split('^'))
                {
                    if (!String.IsNullOrWhiteSpace(S))
                    {
                        //string[] SData = S.Split(';');

                        ////잔여좌석이 존재하는 경우에만 출력
                        //if (SData[2].Equals("OK"))
                        //    SInfo.Add(SData);

                        SInfo.Add(S.Split(';'));
                    }
                }

                if (SInfo.Count > 1)
                {
                    SInfo.Sort((s1, s2) =>
                    {
                        return s1[1].CompareTo(s2[1]);
                    });
                }

                #endregion "클래스와 잔여석이 동일한 그룹으로 묶기 위해 소팅"

                string ClassInfo = string.Empty;
                int hsqIndex = 1;

                foreach (string[] sInfo in SInfo)
                {
                    #region "스케쥴"

                    hsqIndex = 1;

                    foreach (string hsq in sInfo[0].Split('-'))
                    {
                        if (hsq != "0")
                        {
                            if (SRef.IndexOf(String.Format("/{0}/", hsq)).Equals(-1))
                            {
                                SRef += String.Concat(hsq, "/");
                                NewFlightIndex = FlightInfo.SelectSingleNode(String.Format("flightIndex[@ref='{0}']", hsqIndex));

                                if (NewFlightIndex != null)
                                {
                                    XmlNode SKD = ResXml.SelectSingleNode(String.Format("SKD[HSQ='{0}']", hsq));

                                    CDS = "N";
                                    SegCount = SKD.SelectNodes("SEG").Count;
                                    ChinaStopoverCount = 0;
                                    SegmentRef = 1;
                                    int TF = 0;

                                    NewSegmentGroup = NewFlightIndex.AppendChild(SegmentGroup.CloneNode(false));
                                    NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = Common.RefSum(SKD.SelectSingleNode("HSQ").InnerText, CCDRef);
                                    NewSegmentGroup.Attributes.GetNamedItem("eft").InnerText = SKD.SelectSingleNode("HTF").InnerText;
                                    //NewSegmentGroup.Attributes.GetNamedItem("ewt").InnerText = SKD.SelectSingleNode("HTX").InnerText;
                                    NewSegmentGroup.Attributes.GetNamedItem("mjc").InnerText = SKD.SelectSingleNode("HTC").InnerText;
                                    NewSegmentGroup.Attributes.GetNamedItem("nosp").InnerText = SegCount.ToString();
                                    NewSegmentGroup.Attributes.GetNamedItem("aif").InnerText = String.Format("{0}^{1}", SKD.SelectSingleNode("SH").InnerText, sInfo[1].Split('+')[(hsqIndex - 1)]);

                                    foreach (XmlNode flightDetails in SKD.SelectNodes("SEG"))
                                    {
                                        NewSegment = NewSegmentGroup.AppendChild(Segment.CloneNode(false));
                                        NewSegment.Attributes.GetNamedItem("dlc").InnerText = flightDetails.SelectSingleNode("DS").InnerText;
                                        NewSegment.Attributes.GetNamedItem("alc").InnerText = flightDetails.SelectSingleNode("AS").InnerText;
                                        NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.RequestDateTime(flightDetails.SelectSingleNode("DT").InnerText, "yyyy-MM-dd HH:mm");
                                        NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.RequestDateTime(flightDetails.SelectSingleNode("AT").InnerText, "yyyy-MM-dd HH:mm");
                                        NewSegment.Attributes.GetNamedItem("mcc").InnerText = flightDetails.SelectSingleNode("MC").InnerText;
                                        NewSegment.Attributes.GetNamedItem("occ").InnerText = String.IsNullOrWhiteSpace(flightDetails.SelectSingleNode("OC").InnerText) ? flightDetails.SelectSingleNode("MC").InnerText : flightDetails.SelectSingleNode("OC").InnerText;
                                        NewSegment.Attributes.GetNamedItem("fln").InnerText = flightDetails.SelectSingleNode("MF").InnerText;
                                        NewSegment.Attributes.GetNamedItem("eqt").InnerText = (flightDetails.SelectNodes("L1F").Count > 0) ? flightDetails.SelectSingleNode("L1F").InnerText : "";
                                        NewSegment.Attributes.GetNamedItem("stn").InnerText = flightDetails.SelectSingleNode("NT").InnerText;
                                        NewSegment.Attributes.GetNamedItem("etc").InnerText = "Y";
                                        NewSegment.Attributes.GetNamedItem("aif").InnerText = String.Format("{0}^{1}", flightDetails.SelectSingleNode("CMD").InnerText, flightDetails.SelectSingleNode("SR").InnerText);

                                        if (NewSegment.Attributes.GetNamedItem("stn").InnerText.Equals("1"))
                                        {
                                            NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                                            NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = NewSegment.Attributes.GetNamedItem("dlc").InnerText;
                                            NewStopSegment.Attributes.GetNamedItem("alc").InnerText = flightDetails.SelectSingleNode("V1").InnerText;
                                            NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = NewSegment.Attributes.GetNamedItem("ddt").InnerText;
                                            NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = "";

                                            NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                                            NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = flightDetails.SelectSingleNode("V1").InnerText;
                                            NewStopSegment.Attributes.GetNamedItem("alc").InnerText = NewSegment.Attributes.GetNamedItem("alc").InnerText;
                                            NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = "";
                                            NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = NewSegment.Attributes.GetNamedItem("ardt").InnerText;
                                        }

                                        //기착지 대기시간
                                        TF += cm.RequestInt(flightDetails.SelectSingleNode("TX").InnerText);

                                        //공동운항 여부
                                        if (CDS.Equals("N") && (NewSegment.Attributes.GetNamedItem("mcc").InnerText != NewSegment.Attributes.GetNamedItem("occ").InnerText))
                                            CDS = "Y";

                                        //중국 2회 경유(기착 포함)인 경우 제외
                                        if (SegCount > 1)
                                        {
                                            if (SegmentRef < SegCount && Common.ChinaOfAirport(NewSegment.Attributes.GetNamedItem("alc").InnerText))
                                                ChinaStopoverCount++;

                                            //기착지도 체크
                                            if (NewSegment.Attributes.GetNamedItem("stn").InnerText.Equals("1"))
                                            {
                                                if (Common.ChinaOfAirport(NewSegment.SelectSingleNode("seg[1]").Attributes.GetNamedItem("alc").InnerText))
                                                    ChinaStopoverCount++;
                                            }
                                        }

                                        SegmentRef++;

                                        NewSegmentGroup.Attributes.GetNamedItem("cds").InnerText = CDS;

                                        //중국 2회 이상 경유 삭제
                                        if (ChinaStopoverCount >= 2)
                                            NewFlightIndex.RemoveChild(NewSegmentGroup);
                                    }

                                    //경유시간만 표시하므로 기착지 지상대기시간을 제외한다.
                                    NewSegmentGroup.Attributes.GetNamedItem("ewt").InnerText = cm.NumPosition((cm.RequestInt(SKD.SelectSingleNode("HTX").InnerText) - TF).ToString(), 4);

                                    if (NewSegmentGroup.Attributes.GetNamedItem("ewt").InnerText.Equals("0000"))
                                        NewSegmentGroup.Attributes.GetNamedItem("ewt").InnerText = "";
                                }
                            }
                        }

                        hsqIndex++;
                    }

                    #endregion "스케쥴"

                    #region "요금"

                    //클래스와 잔여석이 동일한 그룹으로 PriceIndex를 생성
                    if (String.IsNullOrWhiteSpace(ClassInfo) || ClassInfo != sInfo[1])
                    {
                        ClassInfo = sInfo[1];
                        CheckPriceIndex = false;
                        FARE = ResXml.SelectSingleNode(String.Format("FARE[SEQ={0}]", FSA.SelectSingleNode("FS").InnerText));
                        ValidatingCarrier = FARE.SelectSingleNode("CR").InnerText;

                        //예외사항처리
                        if (Common.FareExceptionHandling(ValidatingCarrier, DLC, ALC, ROT, DTD))
                        {
                            //발권가능 항공사 체크
                            if (Common.AirlineHost("Sabre", ValidatingCarrier))
                            {
                                CheckPriceIndex = true;
                                
                                NewPriceIndex = PriceInfo.AppendChild(PriceIndex.CloneNode(false));
                                NewSummary = NewPriceIndex.AppendChild(Summary.CloneNode(false));
                                NewSegGroup = NewPriceIndex.AppendChild(SegGroup.CloneNode(false));
                                NewPaxFareGroup = NewPriceIndex.AppendChild(PaxFareGroup.CloneNode(false));
                                NewPriceIndex.AppendChild(FareMessage.CloneNode(true));
                                NewPriceIndex.AppendChild(FareRuleUrl.CloneNode(false));
                                //NewPriceIndex.AppendChild(PromotionInfo.CloneNode(false));

                                NewPriceIndex.Attributes.GetNamedItem("gds").InnerText = "Sabre";
                                NewPriceIndex.Attributes.GetNamedItem("ptc").InnerText = PTC;
                                NewPriceIndex.Attributes.GetNamedItem("ref").InnerText = Common.RefSum(PriceRef++, CCDRef).ToString();

                                //TASF 적용 사용자 선택 가능 여부
                                string SelectUserTASF = Common.SelectUserTASF(SNM, ValidatingCarrier);

                                //TASF(발권 여행사 수수료)
                                bool UseTASF = Common.ApplyTASF(SNM, ValidatingCarrier);
                                
                                int Fare = 0;
                                int DisFare = 0;
                                int Tax = 0;
                                int Fsc = 0;
                                int MTasf = 0;
                                int ATasf = 0;
                                int disPartner = 0;

                                int SumFare = 0;
                                int SumDisFare = 0;
                                int SumTax = 0;
                                int SumFsc = 0;
                                int SumMTasf = 0;
                                int SumATasf = 0;
                                int SumDisPartner = 0;

                                //탑승객별 운임(성인)
                                if (ADC > 0)
                                {
                                    Fare = Convert.ToInt32(Convert.ToDouble(FARE.SelectSingleNode("SF").InnerText));
                                    DisFare = Convert.ToInt32(Convert.ToDouble(FARE.SelectSingleNode("DSF").InnerText));
                                    Fsc = Convert.ToInt32(Convert.ToDouble(FARE.SelectSingleNode("ADFU").InnerText));
                                    Tax = Convert.ToInt32(Convert.ToDouble(FARE.SelectSingleNode("TAX").InnerText)) - Fsc;
                                    MTasf = UseTASF ? Convert.ToInt32(Common.GetTASF(SNM, "ADT", ValidatingCarrier, DepartureFromKorea)) : 0;
                                    ATasf = Convert.ToInt32(Convert.ToDouble(FARE.SelectSingleNode("ADTK").InnerText));

                                    SumFare += (Fare * ADC);
                                    SumDisFare += (DisFare * ADC);
                                    SumTax += (Tax * ADC);
                                    SumFsc += (Fsc * ADC);
                                    SumMTasf += (MTasf * ADC);
                                    SumATasf += (ATasf * ADC);
                                    SumDisPartner += disPartner;

                                    SetPaxFareGroupSabre(NewPaxFareGroup, PaxFare, "ADT", CCD, FARE.SelectSingleNode("VDT").InnerText, sInfo[1], Fare, DisFare, Tax, Fsc, 0, MTasf, ATasf, ADC, 1);
                                }

                                //탑승객별 운임(소아)
                                if (CHC > 0)
                                {
                                    Fare = Convert.ToInt32(Convert.ToDouble(FARE.SelectSingleNode("CF").InnerText));
                                    DisFare = Convert.ToInt32(Convert.ToDouble(FARE.SelectSingleNode("DCF").InnerText));
                                    Fsc = Convert.ToInt32(Convert.ToDouble(FARE.SelectSingleNode("CHFU").InnerText));
                                    Tax = Convert.ToInt32(Convert.ToDouble(FARE.SelectSingleNode("CHTX").InnerText)) - Fsc;
                                    MTasf = UseTASF ? Convert.ToInt32(Common.GetTASF(SNM, "CHD", ValidatingCarrier, DepartureFromKorea)) : 0;
                                    ATasf = Convert.ToInt32(Convert.ToDouble(FARE.SelectSingleNode("CHTK").InnerText));

                                    SumFare += (Fare * CHC);
                                    SumDisFare += (DisFare * CHC);
                                    SumTax += (Tax * CHC);
                                    SumFsc += (Fsc * CHC);
                                    SumMTasf += (MTasf * CHC);
                                    SumATasf += (ATasf * CHC);
                                    SumDisPartner += disPartner;

                                    SetPaxFareGroupSabre(NewPaxFareGroup, PaxFare, "CHD", CCD, FARE.SelectSingleNode("VDT").InnerText, sInfo[1], Fare, DisFare, Tax, Fsc, 0, MTasf, ATasf, CHC, (ADC + CHC));
                                }

                                //탑승객별 운임(유아)
                                if (IFC > 0)
                                {
                                    Fare = Convert.ToInt32(Convert.ToDouble(FARE.SelectSingleNode("IF").InnerText));
                                    DisFare = Convert.ToInt32(Convert.ToDouble(FARE.SelectSingleNode("DIF").InnerText));
                                    Fsc = Convert.ToInt32(Convert.ToDouble(FARE.SelectSingleNode("INFU").InnerText));
                                    Tax = Convert.ToInt32(Convert.ToDouble(FARE.SelectSingleNode("INTX").InnerText)) - Fsc;
                                    MTasf = UseTASF ? Convert.ToInt32(Common.GetTASF(SNM, "INF", ValidatingCarrier, DepartureFromKorea)) : 0;
                                    ATasf = Convert.ToInt32(Convert.ToDouble(FARE.SelectSingleNode("INTK").InnerText));

                                    SumFare += (Fare * IFC);
                                    SumDisFare += (DisFare * IFC);
                                    SumTax += (Tax * IFC);
                                    SumFsc += (Fsc * IFC);
                                    SumMTasf += (MTasf * IFC);
                                    SumATasf += (ATasf * IFC);
                                    SumDisPartner += disPartner;

                                    SetPaxFareGroupSabre(NewPaxFareGroup, PaxFare, "INF", CCD, FARE.SelectSingleNode("VDT").InnerText, sInfo[1], Fare, DisFare, Tax, Fsc, 0, MTasf, ATasf, IFC, (ADC + CHC + IFC));
                                }

                                //링크정보
                                if (FARE.SelectNodes("FARE_REC1").Count > 0)
                                {
                                    NewPriceIndex.SelectSingleNode("fareMessage").AppendChild(XmlDoc.ImportNode(FARE.SelectSingleNode("FARE_REC1"), true));
                                    //NewFareMessage = XmlDoc.CreateElement("FARE_REC1");
                                    //NewFareMessage.AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(FARE.SelectSingleNode("FARE_REC1").InnerText));
                                    //NewPriceIndex.SelectSingleNode("fareMessage").AppendChild(NewFareMessage);
                                }
                                if (FARE.SelectNodes("FARE_REC2").Count > 0)
                                {
                                    NewPriceIndex.SelectSingleNode("fareMessage").AppendChild(XmlDoc.ImportNode(FARE.SelectSingleNode("FARE_REC2"), true));
                                    //NewFareMessage = XmlDoc.CreateElement("FARE_REC2");
                                    //NewFareMessage.AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(FARE.SelectSingleNode("FARE_REC2").InnerText));
                                    //NewPriceIndex.SelectSingleNode("fareMessage").AppendChild(NewFareMessage);
                                }
                                if (FARE.SelectNodes("FARE_REC3").Count > 0)
                                {
                                    NewPriceIndex.SelectSingleNode("fareRuleUrl").AppendChild(XmlDoc.ImportNode(FARE.SelectSingleNode("FARE_REC3"), true));
                                    //NewFareMessage = XmlDoc.CreateElement("FARE_REC3");
                                    //NewFareMessage.AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(FARE.SelectSingleNode("FARE_REC3").InnerText));
                                    //NewPriceIndex.SelectSingleNode("fareMessage").AppendChild(NewFareMessage);
                                }

                                //Summary
                                NewSummary.Attributes.GetNamedItem("price").InnerText = (SumDisFare + SumTax + SumFsc).ToString();
                                NewSummary.Attributes.GetNamedItem("fare").InnerText = SumFare.ToString();
                                NewSummary.Attributes.GetNamedItem("disFare").InnerText = SumDisFare.ToString();
                                NewSummary.Attributes.GetNamedItem("tax").InnerText = SumTax.ToString();
                                NewSummary.Attributes.GetNamedItem("fsc").InnerText = SumFsc.ToString();
                                NewSummary.Attributes.GetNamedItem("disPartner").InnerText = SumDisPartner.ToString();
                                NewSummary.Attributes.GetNamedItem("tasf").InnerText = (SumMTasf + SumATasf).ToString();
                                NewSummary.Attributes.GetNamedItem("mTasf").InnerText = SumMTasf.ToString();
                                NewSummary.Attributes.GetNamedItem("aTasf").InnerText = SumATasf.ToString();
                                NewSummary.Attributes.GetNamedItem("pvc").InnerText = ValidatingCarrier;
                                NewSummary.Attributes.GetNamedItem("mas").InnerText = FARE.SelectSingleNode("VDT").InnerText;
                                NewSummary.Attributes.GetNamedItem("ttl").InnerText = cm.ModeTL(SNM, ValidatingCarrier).ToString("yyyy-MM-dd");
                                NewSummary.Attributes.GetNamedItem("cds").InnerText = "";
                                NewSummary.Attributes.GetNamedItem("ucf").InnerText = "N";
                                NewSummary.Attributes.GetNamedItem("ntf").InnerText = "N";
                                NewSummary.Attributes.GetNamedItem("sutf").InnerText = "N";
                            }
                        }
                    }

                    if (CheckPriceIndex)
                    {
                        //여정
                        int fiRef = 1;
                        NewSeg = NewSegGroup.AppendChild(Seg.CloneNode(false));

                        foreach (string segInfo in sInfo[0].Split('-'))
                        {
                            if (segInfo != "0")
                            {
                                XmlNode SKD = ResXml.SelectSingleNode(String.Format("SKD[HSQ={0}]", segInfo));

                                NewSegRef = NewSeg.AppendChild(SegRef.CloneNode(false));
                                NewSegRef.Attributes.GetNamedItem("fiRef").InnerText = (fiRef++).ToString();
                                NewSegRef.Attributes.GetNamedItem("nosp").InnerText = SKD.SelectSingleNode("HNS").InnerText;
                                NewSegRef.Attributes.GetNamedItem("stn").InnerText = "0";
                                NewSegRef.Attributes.GetNamedItem("baggage").InnerText = "";
                                NewSegRef.InnerText = Common.RefSum(segInfo, CCDRef);
                            }
                        }
                    }

                    #endregion "요금"
                }
            }

            FlightInfo.RemoveChild(FlightIndex);
            PriceInfo.RemoveChild(PriceIndex);

            #region "프로모션 적용"

            XmlNode NewPriceInfo = XmlDoc.CreateElement("priceInfo");
            XmlNode SegmentGroup1 = null;
            XmlNode SegmentGroup2 = null;
            XmlNode NewPriceIndex1 = null;
            XmlNode NewPriceIndex2 = null;

            string SegCDS = "N";
            int NewPriceRef = 1;

            foreach (XmlNode prcIndex in PriceInfo.SelectNodes("priceIndex"))
            {
                SegmentGroup1 = SegmentGroup.CloneNode(false);
                SegmentGroup2 = SegmentGroup.CloneNode(false);

                ValidatingCarrier = prcIndex.SelectSingleNode("summary").Attributes.GetNamedItem("pvc").InnerText;

                //여정정보
                foreach (XmlNode seg in prcIndex.SelectNodes("segGroup/seg"))
                {
                    SegCDS = "N";

                    foreach (XmlNode refNumber in seg.SelectNodes("ref"))
                    {
                        if (SegCDS.Equals("N"))
                            SegCDS = FlightInfo.SelectSingleNode(String.Format("flightIndex[@ref='{0}']/segGroup[@ref='{1}']", refNumber.Attributes.GetNamedItem("fiRef").InnerText, refNumber.InnerText)).Attributes.GetNamedItem("cds").InnerText;
                    }

                    //대한항공은 공동운항일 경우라도 프로모션 적용(2016-09-20,정성하과장)
                    if (ValidatingCarrier.Equals("KE"))
                        SegmentGroup1.AppendChild(seg);
                    else
                        (SegCDS.Equals("N") ? SegmentGroup1 : SegmentGroup2).AppendChild(seg);
                }

                //프로모션 적용
                if (SegmentGroup1.HasChildNodes)
                {
                    if (PromItems != null)
                    {
                        foreach (XmlNode PromItem in PromItems)
                        {
                            string CabinClassItem = (PromItem.SelectSingleNode("cabinClass").InnerText.Equals("Y")) ? "Y,M,W" : PromItem.SelectSingleNode("cabinClass").InnerText;

                            //프로모션 적용 여부 판단
                            if (Common.ApplyPromotionSabre(PromItem.SelectSingleNode("airCode").InnerText, PromItem.SelectSingleNode("fareType").InnerText, PromItem.SelectSingleNode("fareBasis").InnerText, CabinClassItem, PromItem.SelectSingleNode("bookingClass").InnerText, PromItem.SelectSingleNode("bookingClassExc").InnerText, PromItem.SelectSingleNode("specialYN").InnerText, prcIndex))
                            {
                                //여정의 항공사 체크
                                bool SameAir = true;
                                foreach (XmlNode seg in SegmentGroup1.SelectNodes("seg"))
                                {
                                    for (int i = 0; i < seg.SelectNodes("ref").Count; i++)
                                    {
                                        if (FlightInfo.SelectNodes(String.Format("flightIndex[@ref='{0}']/segGroup[@ref='{1}']/seg[@mcc!='{2}']", (i + 1), seg.SelectNodes("ref")[i].InnerText, PromItem.SelectSingleNode("airCode").InnerText)).Count > 0)
                                        {
                                            SameAir = false;
                                            break;
                                        }
                                    }

                                    if (!SameAir)
                                        break;
                                }

                                if (SameAir)
                                {
                                    NewPriceIndex1 = NewPriceInfo.AppendChild(prcIndex.CloneNode(true));
                                    NewPriceIndex1.ReplaceChild(SegmentGroup1.Clone(), NewPriceIndex1.SelectSingleNode("segGroup"));

                                    NewPriceIndex1.Attributes.GetNamedItem("ref").InnerText = Common.RefSum(NewPriceRef++, CCDRef).ToString();

                                    double PaxDiscountFare = 0;
                                    double TotalDiscountFare = 0;

                                    //프로모션 운임 계산
                                    foreach (XmlNode paxFare in NewPriceIndex1.SelectNodes("paxFareGroup/paxFare"))
                                    {
                                        PaxDiscountFare = cm.PromotionFare(Convert.ToDouble(paxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText), paxFare.Attributes.GetNamedItem("ptc").InnerText, PromItem) - Convert.ToDouble(paxFare.SelectSingleNode("amount").Attributes.GetNamedItem("disPartner").InnerText);
                                        TotalDiscountFare += (PaxDiscountFare * paxFare.SelectNodes("traveler/ref").Count);

                                        paxFare.SelectSingleNode("amount").Attributes.GetNamedItem("disFare").InnerText = PaxDiscountFare.ToString();
                                    }

                                    NewPriceIndex1.SelectSingleNode("summary").Attributes.GetNamedItem("disFare").InnerText = TotalDiscountFare.ToString();
                                    NewPriceIndex1.SelectSingleNode("summary").Attributes.GetNamedItem("price").InnerText = (TotalDiscountFare + Convert.ToDouble(NewPriceIndex1.SelectSingleNode("summary").Attributes.GetNamedItem("tax").InnerText) + Convert.ToDouble(NewPriceIndex1.SelectSingleNode("summary").Attributes.GetNamedItem("fsc").InnerText)).ToString();
                                    NewPriceIndex1.SelectSingleNode("summary").Attributes.GetNamedItem("cds").InnerText = SegCDS;
                                    
                                    //프로모션 정보
                                    NewPriceIndex1.AppendChild(PromotionInfo.CloneNode(false));
                                    NewPriceIndex1.SelectSingleNode("promotionInfo").AppendChild(NewPriceIndex1.OwnerDocument.ImportNode(PromItem, true));

                                    //프로모션이 하나만 존재할 경우 선택한 상태로 변경
                                    //if (PromItem.SelectNodes("promotions/promotion").Count.Equals(1))+
                                    //{
                                    //    PromItem.SelectSingleNode("promotionId").InnerText = PromItem.SelectSingleNode("promotions/promotion").Attributes.GetNamedItem("promotionId").InnerText;
                                    //    PromItem.SelectSingleNode("incentiveCode").InnerText = PromItem.SelectSingleNode("promotions/promotion").Attributes.GetNamedItem("incentiveCode").InnerText;
                                    //    PromItem.SelectSingleNode("incentiveName").InnerText = PromItem.SelectSingleNode("promotions/promotion").Attributes.GetNamedItem("incentiveName").InnerText;
                                    //    PromItem.SelectSingleNode("fareTarget").InnerText = PromItem.SelectSingleNode("promotions/promotion").Attributes.GetNamedItem("fareTarget").InnerText;
                                    //}

                                    //항공운임이 일만원 미만일 경우 삭제
                                    if (cm.RequestDouble(NewPriceIndex1.SelectSingleNode("summary").Attributes.GetNamedItem("fare").InnerText) < 10000)
                                        NewPriceInfo.RemoveChild(NewPriceIndex1);
                                }
                            }
                        }
                    }

                    //프로모션 적용전 운임
                    NewPriceIndex1 = NewPriceInfo.AppendChild(prcIndex.CloneNode(true));
                    NewPriceIndex1.ReplaceChild(SegmentGroup1.Clone(), NewPriceIndex1.SelectSingleNode("segGroup"));

                    NewPriceIndex1.Attributes.GetNamedItem("ref").InnerText = Common.RefSum(NewPriceRef++, CCDRef).ToString();
                    NewPriceIndex1.SelectSingleNode("summary").Attributes.GetNamedItem("cds").InnerText = SegCDS;

                    //항공운임이 일만원 미만일 경우 삭제
                    if (cm.RequestDouble(NewPriceIndex1.SelectSingleNode("summary").Attributes.GetNamedItem("fare").InnerText) < 10000)
                        NewPriceInfo.RemoveChild(NewPriceIndex1);
                }

                //프로모션 미적용(코드쉐어)
                if (SegmentGroup2.HasChildNodes)
                {
                    NewPriceIndex2 = NewPriceInfo.AppendChild(prcIndex.CloneNode(true));
                    NewPriceIndex2.ReplaceChild(SegmentGroup2, NewPriceIndex2.SelectSingleNode("segGroup"));

                    NewPriceIndex2.Attributes.GetNamedItem("ref").InnerText = Common.RefSum(NewPriceRef++, CCDRef).ToString();
                    NewPriceIndex2.SelectSingleNode("summary").Attributes.GetNamedItem("cds").InnerText = SegCDS;

                    //항공운임이 일만원 미만일 경우 삭제
                    if (cm.RequestDouble(NewPriceIndex2.SelectSingleNode("summary").Attributes.GetNamedItem("fare").InnerText) < 10000)
                        NewPriceInfo.RemoveChild(NewPriceIndex2);
                }
            }

            XmlDoc.SelectSingleNode("ResponseDetails").ReplaceChild(NewPriceInfo, PriceInfo);

            #endregion "프로모션 적용"

            return XmlDoc.DocumentElement;
        }

        /// <summary>
        /// 운임정보리스트 생성
        /// </summary>
        /// <param name="NewPaxFareGroup">운임정보가 추가될 PaxFareGroup Node</param>
        /// <param name="PaxFare">운임정보 양식</param>
        /// <param name="PTC">탑승객타입</param>
        /// <param name="CCD">캐빈클래스</param>
        /// <param name="MAS">유효기간</param>
        /// <param name="AvailInfo">클래스별 잔여좌석 정보</param>
        /// <param name="Fare">항공운임</param>
        /// <param name="DisFare">항공할인운임</param>
        /// <param name="Tax">텍스</param>
        /// <param name="Fsc">유류할증료</param>
        /// <param name="DisPartner">파트너할인금액</param>
        /// <param name="MTasf">모두투어 TASF</param>
        /// <param name="ATasf">제휴사 TASF</param>
        /// <param name="PaxCount">탑승객수</param>
        /// <param name="PaxTotalCount">전체 탑승객수</param>
        public void SetPaxFareGroupSabre(XmlNode NewPaxFareGroup, XmlNode PaxFare, string PTC, string CCD, string MAS, string AvailInfo, int Fare, int DisFare, int Tax, int Fsc, int DisPartner, int MTasf, int ATasf, int PaxCount, int PaxTotalCount)
        {
            XmlNode PaxFareAmount = PaxFare.SelectSingleNode("amount");
            XmlNode SegFareGroup = PaxFare.SelectSingleNode("segFareGroup");
            XmlNode SegFare = SegFareGroup.SelectSingleNode("segFare");
            XmlNode SegFFare = SegFare.SelectSingleNode("fare");
            XmlNode Traveler = PaxFare.SelectSingleNode("traveler");
            XmlNode TravelerRef = Traveler.SelectSingleNode("ref");
            
            XmlNode NewPaxFare = NewPaxFareGroup.AppendChild(PaxFare.CloneNode(false));
            XmlNode NewPaxFareAmount = NewPaxFare.AppendChild(PaxFareAmount.CloneNode(false));
            XmlNode NewSegFareGroup = NewPaxFare.AppendChild(SegFareGroup.CloneNode(false));
            XmlNode NewSegFare = null;
            XmlNode NewSegFFare = null;
            XmlNode NewTraveler = NewPaxFare.AppendChild(Traveler.CloneNode(false));
            XmlNode NewTravelerRef = null;

            NewPaxFare.Attributes.GetNamedItem("ptc").InnerText = PTC;

            NewPaxFareAmount.Attributes.GetNamedItem("fare").InnerText = DisFare.ToString();
            NewPaxFareAmount.Attributes.GetNamedItem("disFare").InnerText = (DisFare - DisPartner).ToString();
            NewPaxFareAmount.Attributes.GetNamedItem("tax").InnerText = Tax.ToString();
            NewPaxFareAmount.Attributes.GetNamedItem("fsc").InnerText = Fsc.ToString();
            NewPaxFareAmount.Attributes.GetNamedItem("disPartner").InnerText = DisPartner.ToString();
            NewPaxFareAmount.Attributes.GetNamedItem("tasf").InnerText = (MTasf + ATasf).ToString();
            NewPaxFareAmount.Attributes.GetNamedItem("mTasf").InnerText = MTasf.ToString();
            NewPaxFareAmount.Attributes.GetNamedItem("aTasf").InnerText = ATasf.ToString();

            int segFareRef = 1;

            foreach (string segInfo in AvailInfo.Split('+'))
            {
                NewSegFare = NewSegFareGroup.AppendChild(SegFare.CloneNode(false));
                NewSegFare.Attributes.GetNamedItem("ref").InnerText = (segFareRef++).ToString();

                foreach (string fareInfo in segInfo.Split('-'))
                {
                    NewSegFFare = NewSegFare.AppendChild(SegFFare.CloneNode(true));
                    NewSegFFare.Attributes.GetNamedItem("mas").InnerText = MAS;
                    NewSegFFare.SelectSingleNode("cabin").Attributes.GetNamedItem("rbd").InnerText = fareInfo.Substring(0, 1);
                    NewSegFFare.SelectSingleNode("cabin").Attributes.GetNamedItem("cabin").InnerText = CCD;
                    NewSegFFare.SelectSingleNode("cabin").Attributes.GetNamedItem("avl").InnerText = fareInfo.Substring(1, 1);
                    NewSegFFare.SelectSingleNode("fare").Attributes.GetNamedItem("ptc").InnerText = PTC;
                    NewSegFFare.SelectSingleNode("fare/fareType").InnerText = "MSP";

                    NewSegFFare.RemoveChild(NewSegFFare.SelectSingleNode("corporateId"));
                }
            }

            if (PTC.Equals("INF"))
            {
                for (int i = 0; i < PaxCount; i++)
                {
                    NewTravelerRef = NewTraveler.AppendChild(TravelerRef.CloneNode(false));
                    NewTravelerRef.InnerText = (PaxTotalCount++).ToString();
                    NewTravelerRef.Attributes.GetNamedItem("ind").InnerText = (i + 1).ToString();
                }
            }
            else
            {
                for (int i = 0; i < PaxCount; i++)
                {
                    NewTravelerRef = NewTraveler.AppendChild(TravelerRef.CloneNode(false));
                    NewTravelerRef.InnerText = (PaxTotalCount++).ToString();
                    NewTravelerRef.Attributes.RemoveAll();
                }
            }
        }

        #endregion "Fare + Availability 동시조회(세이버)"

        #region "Fare + Availability 동시조회(갈릴레오)"

        /// <summary>
        /// Fare + Availability 동시조회(갈릴레오)
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="SAC">항공사 코드</param>
        /// <param name="DLC">출발지 공항 코드</param>
        /// <param name="ALC">도착지 공항 코드</param>
        /// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="ARD">도착일(YYYYMMDD)</param>
        /// <param name="OPN">오픈여부(YN)</param>
        /// <param name="CCD">캐빈 클래스(Y:Economic, M:Economic Standard, W:Economic Premium, C:Business, F:First/Supersonic)</param>
        /// <param name="ADC">성인 탑승객 수</param>
        /// <param name="CHC">소아 탑승객 수</param>
        /// <param name="IFC">유아 탑승객 수</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="FTX">free text</param>
        //[WebMethod(Description = "Fare + Availability 동시조회(갈릴레오)")]
        public XmlElement SearchFareAvailGalileoRS(int SNM, string SAC, string DLC, string ALC, string ROT, string DTD, string ARD, string OPN, string CCD, int ADC, int CHC, int IFC, string RQT, string FTX)
        {
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;

            try
            {
                //발권마감일 체크여부
                string LTD = "N";

                //좌석상태(P:가능, W:대기포함(가능,대기), A:모든좌석(가능,대기,마감))
                string SeatType = "P";

                //SOTO여부
                string Soto = "N";

                string SCity1 = "";
                string ECity1 = "";
                string SCity2 = "";
                string ECity2 = "";
                string SCity3 = "";
                string ECity3 = "";
                string SDate1 = "";
                string SDate2 = "";
                string SDate3 = "";
                string StayLength = "";

                if (ROT.Equals("OW"))
                {
                    SCity1 = DLC;
                    ECity1 = ALC;
                    SDate1 = Common.ConvertToOnlyNumberDate(DTD);
                }
                else if (ROT.Equals("RT"))
                {
                    SCity1 = DLC;
                    ECity1 = ALC;
                    SCity2 = ALC;
                    ECity2 = DLC;
                    SDate1 = Common.ConvertToOnlyNumberDate(DTD);

                    if (OPN.Equals("Y"))
                    {
                        SDate2 = "";
                        StayLength = String.IsNullOrWhiteSpace(ARD) ? "300D" : ARD;
                    }
                    else
                    {
                        SDate2 = Common.ConvertToOnlyNumberDate(ARD);
                        StayLength = "";
                    }
                }
                else if (ROT.Equals("DT"))
                {
                    string[] ArrDLC = DLC.Split(',');
                    string[] ArrALC = DLC.Split(',');

                    SCity1 = ArrDLC[0];
                    ECity1 = ArrALC[0];
                    SCity2 = ArrDLC[1];
                    ECity2 = ArrALC[1];
                    SDate1 = Common.ConvertToOnlyNumberDate(DTD);

                    if (OPN.Equals("Y"))
                    {
                        SDate2 = "";
                        StayLength = String.IsNullOrWhiteSpace(ARD) ? "300D" : ARD;
                    }
                    else
                    {
                        SDate2 = Common.ConvertToOnlyNumberDate(ARD);
                        StayLength = "";
                    }
                }
                else if (ROT.Equals("MD"))
                {
                    string[] ArrDLC = DLC.Split(',');
                    string[] ArrALC = DLC.Split(',');
                    string[] ArrDTD = DLC.Split(',');

                    SCity1 = ArrDLC[0];
                    ECity1 = ArrALC[0];
                    SCity2 = ArrDLC[1];
                    ECity2 = ArrALC[1];
                    SCity3 = ArrDLC[2];
                    ECity3 = ArrALC[2];
                    SDate1 = Common.ConvertToOnlyNumberDate(ArrDTD[0]);
                    SDate2 = Common.ConvertToOnlyNumberDate(ArrDTD[1]);
                    SDate3 = Common.ConvertToOnlyNumberDate(ArrDTD[2]);
                }

                //최초출발지
                string DepartureAirport = DLC.Split(',')[0];

                //최종도착지(목적지)
                string[] TmpALC = ALC.Split(',');
                string DestinationAirport = TmpALC[TmpALC.Length - 1];

                //한국출발여부
                bool DepartureFromKorea = Common.KoreaOfAirport(DepartureAirport.Trim());

                //국내선 예약불가(2015-04-20 추가)
                if (ROT.Equals("RT") && DepartureFromKorea && Common.KoreaOfAirport(DestinationAirport.Trim()))
                {
                    throw new Exception("요청하신 서비스는 해외 전용으로 국내선은 예약할 수 없습니다.");
                }

                //ABS 예외사항
                if (SNM.Equals(68))
                {
                    LTD = "N";      //발권마감일 미체크
                    SeatType = "W"; //대기예약 가능
                }
                else
                {
                    //도착지가 필리핀(PH)일 경우 한국출발에 한해 왕복일 경우에만 예약가능(2014-12-24,정성하대리요청)
                    if (Common.PhilippinesOfAirport(DestinationAirport.Trim()))
                    {
                        if (ROT.Equals("OW"))
                            throw new Exception("필리핀은 왕복인 경우에만 항공예약을 진행할 수 있습니다.");
                        else
                        {
                            if (OPN.Equals("N"))
                            {
                                if (!DepartureFromKorea)
                                    throw new Exception("필리핀은 한국출발이면서 왕복인 경우에만 예약을 진행할 수 있습니다.");
                            }
                            else
                                throw new Exception("필리핀은 귀국일 미지정(오픈)인 경우 예약을 진행할 수 없습니다.");
                        }
                    }
                    //도착지가 미주(US)일 경우 편도(국적기), 왕복(전항공)일 경우에만 예약가능(2014-12-24,정성하대리요청)
                    else if (DepartureFromKorea && Common.UnitedStatesOfAirport(DestinationAirport.Trim()))
                    {
                        if (ROT.Equals("OW") || OPN.Equals("Y"))
                            SAC = "KE,OZ";
                    }
                }

                //해외출발(SOTO)
                if (!DepartureFromKorea)
                {
                    Soto = "Y";

                    //출발지가 필리핀(PH)일 경우 KE,OZ,VN항공사만 예약가능(2015-03-24,TOPAS요청)
                    if (Common.PhilippinesOfAirport(DepartureAirport.Trim()))
                        SAC = "KE,OZ,VN";
                }

                Stopwatch sw;
                XmlNode NewRunTime = RunTime.CloneNode(false);

                sw = Stopwatch.StartNew();
                XmlElement ResXml = gas.AirAvailabilityRS(SCity1, ECity1, SCity2, ECity2, SCity3, ECity3, SDate1, SDate2, SDate3, (ROT.Equals("DT") ? "RT" : ROT), ((CCD.Equals("M") || CCD.Equals("W")) ? "Y" : CCD), StayLength, ADC, CHC, IFC, 1, 1000, Soto, "ModeTour", SeatType, "X", "N");
                CheckRunTimeEnd(NewRunTime, sw, "MasterPricerTravelBoardSearchRS");

                sw = Stopwatch.StartNew();
                //XmlElement XmlMode = ToModeSearchFareAvailRS(SNM, ResXml);
                CheckRunTimeEnd(NewRunTime, sw, "ToModeSearchFareAvailRS");


                //XmlElement XmlMode = ToModeSearchFareAvailRS2(SNM, ResXml);

                ////실행시간 데이타 XML에 추가
                //XmlMode.AppendChild(XmlMode.OwnerDocument.ImportNode(NewRunTime, true));
                //cm.XmlFileSave(XmlMode, mc.Name, "ToModeSearchFareAvailRS", "N", GUID);

                return ResXml;
            }
            catch (Exception ex)
            {
                //return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 31).ToErrors;
                //return new MWSException(ex, hcc, "Mode", MethodBase.GetCurrentMethod().Name).ToErrors;
            }

            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("_Galileo"));

            return ToModeSearchFareAvailGalileoRS(2, XmlDoc.DocumentElement);
        }

        //[WebMethod(Description = "Fare + Availability 동시조회(갈릴레오)")]
        public XmlElement AAASearchFareAvailGalileoRS()
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("_Galileo"));

            return ToModeSearchFareAvailGalileoRS(2, XmlDoc.DocumentElement);
        }

        public XmlElement ToModeSearchFareAvailGalileoRS(int SNM, XmlElement ResXml)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchFareAvailGalileoRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            XmlNode PriceInfo = XmlDoc.SelectSingleNode("ResponseDetails/priceInfo");
            XmlNode PriceIndex = PriceInfo.SelectSingleNode("priceIndex");
            XmlNode FlightInfo = null;
            XmlNode FlightIndex = null;
            XmlNode SegmentGroup = null;
            XmlNode Segment = null;
            XmlNode StopSegment = null;

            XmlNode NewPriceIndex;
            XmlNode NewFlightIndex;
            XmlNode NewSegmentGroup;
            XmlNode NewSegment;
            XmlNode NewStopSegment;

            int PriceIndexRef = 1;
            int SegGroupRef = 1;

            PriceIndex.Attributes.GetNamedItem("gds").InnerText = "Galileo";
            PriceIndex.Attributes.GetNamedItem("ptc").InnerText = "ADT";

            foreach (XmlNode Goods in ResXml.SelectNodes("GoodsList/Goods[FareTypeCode='ADT'][AirAvail/*]"))
            {
                NewPriceIndex = PriceInfo.AppendChild(PriceIndex.Clone());
                FlightInfo = NewPriceIndex.SelectSingleNode("flightInfo");
                FlightIndex = FlightInfo.SelectSingleNode("flightIndex");
                SegmentGroup = FlightIndex.SelectSingleNode("segGroup");
                Segment = SegmentGroup.SelectSingleNode("seg");
                StopSegment = Segment.SelectSingleNode("seg");

                //NewPriceIndex.Attributes.GetNamedItem("ptc").InnerText = Goods.SelectSingleNode("FareTypeCode").InnerText;
                NewPriceIndex.Attributes.GetNamedItem("ref").InnerText = (PriceIndexRef++).ToString();

                //발권항공사
                string ValidatingCarrier = Goods.SelectSingleNode("AirV").InnerText;

                #region "여정정보"

                //여정정보
                for (int s = 1; s <= Goods.SelectSingleNode("AirAvail").ChildNodes.Count; s++)
                {
                    NewFlightIndex = FlightInfo.AppendChild(FlightIndex.CloneNode(false));
                    NewFlightIndex.Attributes.GetNamedItem("ref").InnerText = s.ToString();

                    SegGroupRef = 1;
                    
                    foreach (XmlNode AirItn in Goods.SelectNodes(String.Format("AirAvail/AvailList{0}/AirItn", s)))
                    {
                        NewSegmentGroup = NewFlightIndex.AppendChild(SegmentGroup.CloneNode(false));
                        NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = (SegGroupRef++).ToString();

                        string CDS = "N"; //공동운항 여부
                        int ETT = 0;      //경유(환승)시간 합
                        int EWT = 0;      //대기(체류)시간 합

                        foreach (XmlNode SegDetail in AirItn.SelectNodes("SegDetail"))
                        {
                            string StartDtTm = cm.RequestDateTime(SegDetail.SelectSingleNode("StartDtTm").InnerText, "yyyy-MM-dd HH:mm");
                            string EndDtTm = cm.RequestDateTime(SegDetail.SelectSingleNode("EndDtTm").InnerText, "yyyy-MM-dd HH:mm");
                            
                            NewSegment = NewSegmentGroup.AppendChild(Segment.CloneNode(false));
                            NewSegment.Attributes.GetNamedItem("dlc").InnerText = SegDetail.SelectSingleNode("StartAirp").InnerText;
                            NewSegment.Attributes.GetNamedItem("alc").InnerText = SegDetail.SelectSingleNode("EndAirp").InnerText;
                            NewSegment.Attributes.GetNamedItem("ddt").InnerText = StartDtTm;
                            NewSegment.Attributes.GetNamedItem("ardt").InnerText = EndDtTm;
                            NewSegment.Attributes.GetNamedItem("mcc").InnerText = SegDetail.SelectSingleNode("AirV").InnerText;
                            NewSegment.Attributes.GetNamedItem("occ").InnerText = String.IsNullOrWhiteSpace(SegDetail.SelectSingleNode("OpAirV").InnerText) ? "" : SegDetail.SelectSingleNode("OpAirV").InnerText;
                            NewSegment.Attributes.GetNamedItem("fln").InnerText = SegDetail.SelectSingleNode("FltNum").InnerText;
                            NewSegment.Attributes.GetNamedItem("eqt").InnerText = "";
                            NewSegment.Attributes.GetNamedItem("stn").InnerText = String.IsNullOrWhiteSpace(SegDetail.SelectSingleNode("StopCity1").InnerText) ? "0" : (String.IsNullOrWhiteSpace(SegDetail.SelectSingleNode("StopCity2").InnerText) ? "1" : "2");
                            NewSegment.Attributes.GetNamedItem("eft").InnerText = SegDetail.SelectSingleNode("FltTm").InnerText;
                            NewSegment.Attributes.GetNamedItem("ett").InnerText = SegDetail.SelectSingleNode("ConTm").InnerText;
                            NewSegment.Attributes.GetNamedItem("ewt").InnerText = cm.SumTime(SegDetail.SelectSingleNode("StopCity1Tm").InnerText, SegDetail.SelectSingleNode("StopCity2Tm").InnerText);
                            NewSegment.Attributes.GetNamedItem("rbd").InnerText = SegDetail.SelectSingleNode("Class").InnerText;
                            NewSegment.Attributes.GetNamedItem("avl").InnerText = SegDetail.SelectSingleNode("Seat").InnerText;
                            NewSegment.Attributes.GetNamedItem("etc").InnerText = "Y";

                            //기착정보
                            if (!String.IsNullOrWhiteSpace(SegDetail.SelectSingleNode("StopCity1").InnerText))
                            {
                                NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                                NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = SegDetail.SelectSingleNode("StartAirp").InnerText;
                                NewStopSegment.Attributes.GetNamedItem("alc").InnerText = SegDetail.SelectSingleNode("StopCity1").InnerText;
                                NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = StartDtTm;
                                NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = "";
                                NewStopSegment.Attributes.GetNamedItem("ewt").InnerText = SegDetail.SelectSingleNode("StopCity1Tm").InnerText;

                                if (String.IsNullOrWhiteSpace(SegDetail.SelectSingleNode("StopCity2").InnerText))
                                {
                                    NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                                    NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = SegDetail.SelectSingleNode("StopCity1").InnerText;
                                    NewStopSegment.Attributes.GetNamedItem("alc").InnerText = SegDetail.SelectSingleNode("EndAirp").InnerText;
                                    NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = "";
                                    NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = EndDtTm;
                                    NewStopSegment.Attributes.GetNamedItem("ewt").InnerText = "";
                                }
                                else
                                {
                                    NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                                    NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = SegDetail.SelectSingleNode("StopCity1").InnerText;
                                    NewStopSegment.Attributes.GetNamedItem("alc").InnerText = SegDetail.SelectSingleNode("StopCity2").InnerText;
                                    NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = "";
                                    NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = "";
                                    NewStopSegment.Attributes.GetNamedItem("ewt").InnerText = SegDetail.SelectSingleNode("StopCity2Tm").InnerText;

                                    NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                                    NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = SegDetail.SelectSingleNode("StopCity2").InnerText;
                                    NewStopSegment.Attributes.GetNamedItem("alc").InnerText = SegDetail.SelectSingleNode("EndAirp").InnerText;
                                    NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = "";
                                    NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = EndDtTm;
                                    NewStopSegment.Attributes.GetNamedItem("ewt").InnerText = "";
                                }
                            }

                            //공동운항 여부
                            if (CDS.Equals("N") && (NewSegment.Attributes.GetNamedItem("mcc").InnerText != NewSegment.Attributes.GetNamedItem("occ").InnerText))
                                CDS = "Y";

                            ETT += (String.IsNullOrWhiteSpace(NewSegment.Attributes.GetNamedItem("ett").InnerText) ? 0 : ((Convert.ToInt32(NewSegment.Attributes.GetNamedItem("ett").InnerText.Substring(0, 2)) * 60) + Convert.ToInt32(NewSegment.Attributes.GetNamedItem("ett").InnerText.Substring(2, 2))));
                            EWT += (String.IsNullOrWhiteSpace(NewSegment.Attributes.GetNamedItem("ewt").InnerText) ? 0 : ((Convert.ToInt32(NewSegment.Attributes.GetNamedItem("ewt").InnerText.Substring(0, 2)) * 60) + Convert.ToInt32(NewSegment.Attributes.GetNamedItem("ewt").InnerText.Substring(2, 2))));
                        }

                        NewSegmentGroup.Attributes.GetNamedItem("ejt").InnerText = AirItn.SelectSingleNode("TotalJrnyTm").InnerText;
                        NewSegmentGroup.Attributes.GetNamedItem("eft").InnerText = AirItn.SelectSingleNode("TotalFltTm").InnerText;
                        NewSegmentGroup.Attributes.GetNamedItem("ett").InnerText = (ETT > 0) ? String.Format("{0}:{1}", cm.NumPosition((ETT / 60).ToString(), 2), cm.NumPosition((ETT % 60).ToString(), 2)) : "";
                        NewSegmentGroup.Attributes.GetNamedItem("ewt").InnerText = (EWT > 0) ? String.Format("{0}:{1}", cm.NumPosition((EWT / 60).ToString(), 2), cm.NumPosition((EWT % 60).ToString(), 2)) : "";
                        NewSegmentGroup.Attributes.GetNamedItem("mjc").InnerText = ValidatingCarrier;
                        NewSegmentGroup.Attributes.GetNamedItem("cds").InnerText = CDS;
                        NewSegmentGroup.Attributes.GetNamedItem("nosp").InnerText = AirItn.SelectNodes("SegDetail").Count.ToString();
                    }
                }

                FlightInfo.RemoveChild(FlightIndex);

                #endregion "여정정보"

                #region "운임정보"



                #endregion "운임정보"
            }

            PriceInfo.RemoveChild(PriceIndex);

            return XmlDoc.DocumentElement;
        }

        #endregion "Fare + Availability 동시조회(갈릴레오)"

        #region "운임조건 체크(사전발권, 발권일 등)"

        /// <summary>
		/// 운임조건 체크(사전발권, 발권일 등)
		/// </summary>
		/// <param name="SNM">사이트 번호</param>
		/// <param name="AirCode">항공사코드</param>
		/// <param name="DTD">출발일</param>
		/// <param name="TL">발권마감일</param>
		/// <param name="FareInfos">요금규정 XML내용 중 fareInfos Node Data String</param>
		/// <returns></returns>
		[WebMethod(Description = "AP조건 제한")]
		public bool CheckFareConditionString(int SNM, string AirCode, string DTD, string TL, string FareInfos)
		{
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청41", SqlDbType.VarChar, -1)
                    };

                sqlParam[0].Value = 9;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = AirCode;
                sqlParam[8].Value = DTD;
                sqlParam[9].Value = TL;
                sqlParam[10].Value = FareInfos;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            //유효성 체크
            try
            {
                string VaFareInfos = FareInfos.ToUpper();

                if (VaFareInfos.IndexOf("?XML") != -1 || VaFareInfos.IndexOf("!DOCTYPE") != -1)
                    throw new Exception("올바르지 않은 정보입니다.");
            }
            catch (Exception ex)
            {
                new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 9, 0, 0);
                return false;
            }
            
            try
			{
				XmlDocument XmlDoc = new XmlDocument();
				XmlDoc.LoadXml(FareInfos);

				return CheckFareCondition(SNM, AirCode, DTD, TL, XmlDoc.DocumentElement);
			}
			catch (Exception ex)
			{
                new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0);
				return false;
			}
		}

		/// <summary>
		/// 운임조건 체크(사전발권, 발권일 등)
		/// </summary>
		/// <param name="SNM">사이트 번호</param>
		/// <param name="AirCode">항공사코드</param>
		/// <param name="DTD">출발일</param>
		/// <param name="TL">발권마감일</param>
		/// <param name="FareInfos">요금규정 XML내용 중 fareInfos Node Data</param>
		/// <returns></returns>
		[WebMethod(Description = "AP조건 제한")]
		public bool CheckFareCondition(int SNM, string AirCode, string DTD, string TL, XmlNode FareInfos)
		{
			bool CheckValue = true;
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청41", SqlDbType.VarChar, -1)
                    };

                sqlParam[0].Value = 8;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = AirCode;
                sqlParam[8].Value = DTD;
                sqlParam[9].Value = TL;
                sqlParam[10].Value = FareInfos.OuterXml;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

			try
			{
				if (FareInfos != null && FareInfos.SelectNodes("fareInfo").Count > 0)
				{
					string NowDate = DateTime.Now.ToString("d");
                    DateTime ToDate = Convert.ToDateTime(String.Concat(NowDate, cm.TLBasicTime(SNM, AirCode, NowDate)));
					DateTime DepartureDate = Convert.ToDateTime(cm.RequestDateTime(DTD));
                    DateTime ModeTL = cm.ModeTL(SNM, AirCode);

					if (!cm.ApplyLTD(SNM))
					{
                        string AdvanceAfter = string.Empty;
						string AdvanceBefore = string.Empty;
                        string TLDate = cm.RequestDateTime(TL);

						//발권마감일(TL)
                        if (cm.DateDiff("d", ModeTL, Convert.ToDateTime(String.Concat(TLDate, cm.TLBasicTime(SNM, AirCode, TLDate)))) < -1)
								CheckValue = false;
						
						if (CheckValue)
						{
							foreach (XmlNode FareInfo in FareInfos.SelectNodes("fareInfo"))
							{
								AdvanceAfter = FareInfo.SelectSingleNode("item[@name='AdvanceAfter']").InnerText;
								AdvanceBefore = FareInfo.SelectSingleNode("item[@name='AdvanceBefore']").InnerText;

								//영문룰일경우 사전/사후 발권 정보가 없어 일단은 OK 처리
								if (String.IsNullOrWhiteSpace(AdvanceAfter) || String.IsNullOrWhiteSpace(AdvanceBefore))
								{
									CheckValue = true;
									break;
								}
								else
								{
									//사전발권(예약일기준)
									if (!AdvanceAfter.Substring(2, 3).Equals("000") && cm.DateDiff("d", ModeTL, cm.AdvanceDateDiff(ToDate, AdvanceAfter, "After")) < -1)
									{
										CheckValue = false;
										break;
									}
									else
									{
										//사후발권(출발일기준)
										if (!AdvanceBefore.Substring(2, 3).Equals("000") && cm.DateDiff("d", ModeTL, cm.AdvanceDateDiff(DepartureDate, AdvanceBefore, "Before")) < -1)
										{
											CheckValue = false;
											break;
										}
									}
								}
							}
						}
					}

					if (CheckValue)
					{
					    //15시 이후라면 발권마감일이 오늘인 운임은 예약 불가(2014-10-02,김지영과장요청)
                        //19시 이후라면 발권마감일이 오늘인 운임은 예약 불가(2017-09-19,김지영과장요청)
                        if (DateTime.Now.Hour >= 19 && ToDate.ToString("yyyy-MM-dd").Equals(TL))
							CheckValue = false;

                        //네이버는 중국항공사 체크를 하지 않는다.(2016-04-08,김지영과장요청)
                        if (SNM != 4638)
                        {
                            //중국항공사(CZ,CA,SC,ZH)의 경우 예약일 또는 예약일 다음날이 업무일이 아닐경우 출발일이 10일전인 경우 요금을 출력하지 않는다.
                            if (AirCode.Equals("CZ") || AirCode.Equals("CA") || AirCode.Equals("SC") || AirCode.Equals("ZH"))
                            {
                                if (cm.DateDiff("d", ToDate, DepartureDate) < 11 && (!cm.WorkdayYN(ToDate.ToString("d")) || !cm.WorkdayYN(ToDate.AddDays(1).ToString("d"))))
                                {
                                    CheckValue = false;
                                }
                            }
                        }
					}
				}
				else
					CheckValue = false;
			}
			catch (Exception ex)
			{
				CheckValue = false;
                new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 8, 0, 0);
			}

			return CheckValue;
		}

		#endregion "운임조건 체크(사전발권, 발권일 등)"

		#region "Fare + Availability 동시조회(달력)(미지원)"

		/// <summary>
		/// Fare + Availability 동시조회(달력)
		/// </summary>
		/// <param name="SNM">사이트 번호</param>
		/// <param name="SAC">항공사 코드</param>
		/// <param name="DLC">출발지 공항 코드</param>
		/// <param name="ALC">도착지 공항 코드</param>
		/// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
		/// <param name="DTD">출발일(YYYYMMDD)</param>
		/// <param name="ARD">도착일(YYYYMMDD)</param>
		/// <param name="CCD">캐빈 클래스(Y:일반석, C:비즈니스석, F:일등석)</param>
		/// <param name="ADC">성인 탑승객 수</param>
		/// <param name="CHC">소아 탑승객 수</param>
		/// <param name="IFC">유아 탑승객 수</param>
		/// <param name="NRR">응답 결과 수(Default:200)</param>
		/// <returns></returns>
		//[WebMethod(Description = "Fare + Availability 동시조회(달력)")]
		public XmlElement SearchFareAvailCalendarRS(int SNM, string SAC, string DLC, string ALC, string ROT, string DTD, string ARD, string CCD, int ADC, int CHC, int IFC, string NRR)
		{
			try
			{
				string GUID = cm.GetGUID;

				XmlElement Session = amd.SessionCreate(SNM, String.Concat(GUID, "-01"));

				string SID = Session.SelectSingleNode("session/sessionId").InnerText;
				string SQN = Session.SelectSingleNode("session/sequenceNumber").InnerText;
				string SCT = Session.SelectSingleNode("session/securityToken").InnerText;

				XmlElement ResXml = amd.MasterPricerCalendarRS(SID, SQN, SCT, SAC, DLC, ALC, ROT, DTD, ARD, CCD, ADC, CHC, IFC, cm.RequestInt(NRR, 200));

				amd.SessionClose(SID, SCT, String.Concat(GUID, "-03"));

				//오류 결과일 경우 예외 처리
				XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
				xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_MasterPricerCalendar"));

				if (ResXml.SelectNodes("m:errorMessage", xnMgr).Count > 0)
				{
					if (ResXml.SelectNodes("m:errorMessage/m:errorMessageText", xnMgr).Count > 0)
						throw new Exception(ResXml.SelectSingleNode("m:errorMessage/m:errorMessageText/m:description", xnMgr).InnerText);
					else
						throw new Exception(ResXml.SelectSingleNode("m:errorMessage/m:applicationError/m:applicationErrorDetail/m:error", xnMgr).InnerText);
				}

				return ToModeSearchFareAvailCalendarRS(ResXml, xnMgr);
			}
			catch (Exception ex)
			{
                return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0).ToErrors;
			}
		}

		/// <summary>
		/// SearchFareAvailCalendarRS를 통합용 XML구조로 치환
		/// </summary>
		/// <param name="ResXml">SearchFareAvailCalendarRS의 Data</param>
		/// <returns></returns>
		protected XmlElement ToModeSearchFareAvailCalendarRS(XmlElement ResXml, XmlNamespaceManager xnMgr)
		{
			XmlDocument XmlDoc = new XmlDocument();
			XmlDoc.Load(mc.XmlFullPath("SearchFareAvailRS"));

			XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

			XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
			XmlNode FlightIndex = FlightInfo.SelectSingleNode("flightIndex");
			XmlNode SegmentGroup = FlightIndex.SelectSingleNode("segGroup");
			XmlNode Segment = SegmentGroup.SelectSingleNode("seg");

			XmlNode NewFlightIndex;
			XmlNode NewSegmentGroup;
			XmlNode NewSegment;

			foreach (XmlNode flightIndex in ResXml.SelectNodes("m:flightIndex", xnMgr))
			{
				NewFlightIndex = FlightInfo.AppendChild(FlightIndex.CloneNode(false));
				NewFlightIndex.Attributes.GetNamedItem("ref").InnerText = flightIndex.SelectSingleNode("m:requestedSegmentRef/m:segRef", xnMgr).InnerText;

				foreach (XmlNode groupOfFlights in flightIndex.SelectNodes("m:groupOfFlights", xnMgr))
				{
					NewSegmentGroup = NewFlightIndex.AppendChild(SegmentGroup.CloneNode(false));
					NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = groupOfFlights.SelectSingleNode("m:propFlightGrDetail/m:flightProposal[1]/m:ref", xnMgr).InnerText;
					NewSegmentGroup.Attributes.GetNamedItem("eft").InnerText = groupOfFlights.SelectSingleNode("m:propFlightGrDetail/m:flightProposal[m:unitQualifier='EFT']/m:ref", xnMgr).InnerText;

					foreach (XmlNode flightDetails in groupOfFlights.SelectNodes("m:flightDetails", xnMgr))
					{
						NewSegment = NewSegmentGroup.AppendChild(Segment.CloneNode(false));
						NewSegment.Attributes.GetNamedItem("dlc").InnerText = flightDetails.SelectSingleNode("m:flightInformation/m:location[1]/m:locationId", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("alc").InnerText = flightDetails.SelectSingleNode("m:flightInformation/m:location[2]/m:locationId", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(flightDetails.SelectSingleNode("m:flightInformation/m:productDateTime/m:dateOfDeparture", xnMgr).InnerText, flightDetails.SelectSingleNode("m:flightInformation/m:productDateTime/m:timeOfDeparture", xnMgr).InnerText);
						NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(flightDetails.SelectSingleNode("m:flightInformation/m:productDateTime/m:dateOfArrival", xnMgr).InnerText, flightDetails.SelectSingleNode("m:flightInformation/m:productDateTime/m:timeOfArrival", xnMgr).InnerText);
						NewSegment.Attributes.GetNamedItem("mcc").InnerText = flightDetails.SelectSingleNode("m:flightInformation/m:companyId/m:marketingCarrier", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("occ").InnerText = flightDetails.SelectSingleNode("m:flightInformation/m:companyId/m:operatingCarrier", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("fln").InnerText = flightDetails.SelectSingleNode("m:flightInformation/m:flightNumber", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("eqt").InnerText = flightDetails.SelectSingleNode("m:flightInformation/m:productDetail/m:equipmentType", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("stn").InnerText = (flightDetails.SelectNodes("m:flightInformation/m:productDetail/m:techStopNumber", xnMgr).Count > 0) ? cm.RequestInt(flightDetails.SelectSingleNode("m:flightInformation/m:productDetail/m:techStopNumber", xnMgr).InnerText).ToString() : "0";
					}
				}
			}

			FlightInfo.RemoveChild(FlightIndex);


			XmlNode PriceInfo = XmlDoc.SelectSingleNode("ResponseDetails/priceInfo");
			XmlNode PriceIndex = PriceInfo.SelectSingleNode("priceIndex");
			XmlNode PaxFareGroup;
			XmlNode PaxFare;
			XmlNode SegmentFareGroup;
			XmlNode SegmentFare;
			XmlNode Traveler;
			XmlNode Fare;
			XmlNode Ref;

			XmlNode NewPriceIndex;
			XmlNode NewPaxFare;
			XmlNode NewSegmentFare;
			XmlNode NewFare;
			XmlNode NewRef;

			foreach (XmlNode recommendation in ResXml.SelectNodes("m:recommendation", xnMgr))
			{
				NewPriceIndex = PriceInfo.AppendChild(PriceIndex.CloneNode(true));
				NewPriceIndex.Attributes.GetNamedItem("ref").InnerText = recommendation.SelectSingleNode("m:itemNumber/m:itemNumberId/m:number", xnMgr).InnerText;
				NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("fare").InnerText = recommendation.SelectSingleNode("m:recPriceInfo/m:monetaryDetail[1]/m:amount", xnMgr).InnerText;
				NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("tax").InnerText = recommendation.SelectSingleNode("m:recPriceInfo/m:monetaryDetail[2]/m:amount", xnMgr).InnerText;
				NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("pvc").InnerText = recommendation.SelectSingleNode("m:paxFareProduct/m:paxFareDetail/m:codeShareDetails/m:company", xnMgr).InnerText;
				NewPriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("ttl").InnerText = cm.ConvertToDateTime(recommendation.SelectSingleNode("m:paxFareProduct/m:fare/m:pricingMessage[m:freeTextQualification/m:textSubjectQualifier='LTD']/m:description[2]", xnMgr).InnerText);

				SegmentGroup = NewPriceIndex.SelectSingleNode("segGroup");
				Segment = SegmentGroup.SelectSingleNode("seg");

				foreach (XmlNode segmentFlightRef in recommendation.SelectNodes("m:segmentFlightRef", xnMgr))
				{
					NewSegment = SegmentGroup.AppendChild(Segment.CloneNode(true));

					Ref = NewSegment.SelectSingleNode("ref");

					foreach (XmlNode refNumber in segmentFlightRef.SelectNodes("m:referencingDetail[m:refQualifier='S']/m:refNumber", xnMgr))
					{
						NewRef = NewSegment.AppendChild(Ref.CloneNode(false));
						NewRef.InnerText = refNumber.InnerText;
					}

					NewSegment.RemoveChild(Ref);
				}

				SegmentGroup.RemoveChild(Segment);


				PaxFareGroup = NewPriceIndex.SelectSingleNode("paxFareGroup");
				PaxFare = PaxFareGroup.SelectSingleNode("paxFare");

				foreach (XmlNode paxFareProduct in recommendation.SelectNodes("m:paxFareProduct", xnMgr))
				{
					NewPaxFare = PaxFareGroup.AppendChild(PaxFare.CloneNode(true));
					NewPaxFare.Attributes.GetNamedItem("ptc").InnerText = paxFareProduct.SelectSingleNode("m:paxReference/m:ptc", xnMgr).InnerText;
					NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText = paxFareProduct.SelectSingleNode("m:paxFareDetail/m:totalFareAmount", xnMgr).InnerText;
					NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tax").InnerText = paxFareProduct.SelectSingleNode("m:paxFareDetail/m:totalTaxAmount", xnMgr).InnerText;

					Traveler = NewPaxFare.SelectSingleNode("traveler");
					Ref = Traveler.SelectSingleNode("ref");

					foreach (XmlNode traveller in paxFareProduct.SelectNodes("m:paxReference/m:traveller", xnMgr))
					{
						NewRef = Traveler.AppendChild(Ref.CloneNode(false));
						NewRef.InnerText = traveller.SelectSingleNode("m:ref", xnMgr).InnerText;

						if (traveller.SelectNodes("m:infantIndicator", xnMgr).Count > 0)
						{
							NewRef.Attributes.GetNamedItem("ind").InnerText = traveller.SelectSingleNode("m:infantIndicator", xnMgr).InnerText;
						}
						else
						{
							NewRef.Attributes.RemoveNamedItem("ind");
						}
					}

					Traveler.RemoveChild(Ref);
				}

				PaxFareGroup.RemoveChild(PaxFare);


				SegmentFareGroup = NewPriceIndex.SelectSingleNode("segFareGroup");
				SegmentFare = SegmentFareGroup.SelectSingleNode("segFare");

				foreach (XmlNode fareDetails in recommendation.SelectNodes("m:paxFareProduct[1]/m:fareDetails", xnMgr))
				{
					NewSegmentFare = SegmentFareGroup.AppendChild(SegmentFare.CloneNode(true));
					NewSegmentFare.Attributes.GetNamedItem("ref").InnerText = fareDetails.SelectSingleNode("m:segmentRef/m:segRef", xnMgr).InnerText;

					Fare = NewSegmentFare.SelectSingleNode("fare");

					foreach (XmlNode groupOfFares in fareDetails.SelectNodes("m:groupOfFares", xnMgr))
					{
						NewFare = NewSegmentFare.AppendChild(Fare.CloneNode(true));
						NewFare.SelectSingleNode("cabin").Attributes.GetNamedItem("rbd").InnerText = groupOfFares.SelectSingleNode("m:productInformation/m:cabinProduct/m:rbd", xnMgr).InnerText;
						NewFare.SelectSingleNode("cabin").Attributes.GetNamedItem("cabin").InnerText = groupOfFares.SelectSingleNode("m:productInformation/m:cabinProduct/m:cabin", xnMgr).InnerText;
						NewFare.SelectSingleNode("cabin").Attributes.GetNamedItem("avl").InnerText = (groupOfFares.SelectNodes("m:productInformation/m:cabinProduct/m:avlStatus", xnMgr).Count > 0) ? groupOfFares.SelectSingleNode("m:productInformation/m:cabinProduct/m:avlStatus", xnMgr).InnerText : "";
						NewFare.SelectSingleNode("fareBasis").InnerText = groupOfFares.SelectSingleNode("m:productInformation/m:fareProductDetail/m:fareBasis", xnMgr).InnerText;
						NewFare.SelectSingleNode("fareType").InnerText = groupOfFares.SelectSingleNode("m:productInformation/m:fareProductDetail/m:fareType", xnMgr).InnerText;
						NewFare.SelectSingleNode("breakPoint").InnerText = groupOfFares.SelectSingleNode("m:productInformation/m:breakPoint", xnMgr).InnerText;
						NewFare.SelectSingleNode("ticket").Attributes.GetNamedItem("dsn").InnerText = (groupOfFares.SelectNodes("m:ticketInfos", xnMgr).Count > 0 && groupOfFares.SelectNodes("m:ticketInfos/m:additionalFareDetails", xnMgr).Count > 0 && groupOfFares.SelectNodes("m:ticketInfos/m:additionalFareDetails/m:ticketDesignator", xnMgr).Count > 0) ? groupOfFares.SelectSingleNode("m:ticketInfos/m:additionalFareDetails/m:ticketDesignator", xnMgr).InnerText : "";
					}

					NewSegmentFare.RemoveChild(Fare);
				}

				SegmentFareGroup.RemoveChild(SegmentFare);

				//free Text
				foreach (XmlNode fare in recommendation.SelectNodes("m:paxFareProduct[1]/m:fare[m:pricingMessage/m:freeTextQualification/m:textSubjectQualifier!='LTD']", xnMgr))
				{
					NewPriceIndex.SelectSingleNode("fareMessage").AppendChild(XmlDoc.ImportNode(fare, true));
				}
			}

			PriceInfo.RemoveChild(PriceIndex);

			return XmlDoc.DocumentElement;
		}

		#endregion "Fare + Availability 동시조회(달력)"

		#region "Availability 조회"

		/// <summary>
		/// Availability 조회
		/// </summary>
		/// <param name="SNM">사이트번호</param>
		/// <param name="DTD">출발일(YYYYMMDD)</param>
		/// <param name="DTT">출발시간(HHMM)</param>
		/// <param name="DLC">출발지</param>
		/// <param name="ALC">도착지</param>
		/// <param name="CLC">경유지(콤마로 구분)</param>
		/// <param name="SCD">서비스클래스(콤마로 구분)</param>
		/// <param name="MCC">항공사(콤마로 구분)</param>
		/// <param name="FLN">편명(콤마로 구분)</param>
		/// <param name="NOS">좌석수</param>
		/// <returns></returns>
		[WebMethod(Description = "Availability 조회")]
		public XmlElement AvailabilityRS(int SNM, string DTD, string DTT, string DLC, string ALC, string CLC, string SCD, string MCC, string FLN, string NOS)
		{
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 3;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = DTD;
                sqlParam[8].Value = DTT;
                sqlParam[9].Value = DLC;
                sqlParam[10].Value = ALC;
                sqlParam[11].Value = CLC;
                sqlParam[12].Value = SCD;
                sqlParam[13].Value = MCC;
                sqlParam[14].Value = FLN;
                sqlParam[15].Value = NOS;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
			{
                //결과
                XmlElement ResXml;

                //네임스페이스
                XmlNamespaceManager xnMgr;

                //### 01.세션생성 #####
				XmlElement Session = amd.SessionCreate(SNM, String.Concat(GUID, "-01"));

                SID = Session.SelectSingleNode("session/sessionId").InnerText;
                SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                //### 02.Availability(Air_MultiAvailability) #####
                ResXml = amd.MultiAvailabilityRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), "48", DTD, DTT, DLC, ALC, CLC, SCD, MCC, FLN, cm.RequestInt(NOS));

                //### 03.세션종료 #####
                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"));

				//오류 결과일 경우 예외 처리
				xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
				xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Air_MultiAvailability"));

				if (ResXml.SelectNodes("m:errorOrWarningSection", xnMgr).Count > 0)
				{
					throw new Exception(ResXml.SelectSingleNode("m:errorOrWarningSection/m:textInformation/m:freeText", xnMgr).InnerText);
				}
                else if (ResXml.SelectNodes("m:singleCityPairInfo/m:cityPairErrorOrWarning", xnMgr).Count > 0)
                {
                    throw new Exception(ResXml.SelectSingleNode("m:singleCityPairInfo/m:cityPairErrorOrWarning/m:cityPairErrorOrWarningText/m:freeText", xnMgr).InnerText);
                }

				return ToModeAvailabilityRS(ResXml, xnMgr);
			}
			catch (Exception ex)
			{
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 3, 0, 0).ToErrors;
			}
		}

		/// <summary>
		/// AvailabilityRS를 통합용 XML구조로 치환
		/// </summary>
		/// <param name="ResXml">AvailabilityRS의 Data</param>
		/// <param name="xnMgr">XmlNamespaceManager</param>
		/// <returns></returns>
		protected XmlElement ToModeAvailabilityRS(XmlElement ResXml, XmlNamespaceManager xnMgr)
		{
			XmlDocument XmlDoc = new XmlDocument();
			XmlDoc.Load(mc.XmlFullPath("AvailabilityRS"));

			XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

			XmlNode Location = XmlDoc.SelectSingleNode("ResponseDetails/location");
			XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
			XmlNode SegmentGroup = FlightInfo.SelectSingleNode("segGroup");
			XmlNode Segment = SegmentGroup.SelectSingleNode("seg");
			XmlNode ServiceClass = Segment.SelectSingleNode("svcClass");
			XmlNode NewSegmentGroup;
			XmlNode NewSegment;
			XmlNode NewServiceClass;
            int SegGroupRef = 1;

			Location.SelectSingleNode("origin").InnerText = ResXml.SelectSingleNode("m:singleCityPairInfo/m:locationDetails/m:origin", xnMgr).InnerText;
			Location.SelectSingleNode("destination").InnerText = ResXml.SelectSingleNode("m:singleCityPairInfo/m:locationDetails/m:destination", xnMgr).InnerText;

			foreach (XmlNode flightInfo in ResXml.SelectNodes("m:singleCityPairInfo/m:flightInfo", xnMgr))
			{
				if (flightInfo.SelectNodes("m:basicFlightInfo/m:lineItemNumber", xnMgr).Count > 0)
				{
					NewSegmentGroup = FlightInfo.AppendChild(SegmentGroup.CloneNode(false));
					//NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = flightInfo.SelectSingleNode("m:basicFlightInfo/m:lineItemNumber", xnMgr).InnerText;
                    NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = (SegGroupRef++).ToString();
				}
				else
					NewSegmentGroup = FlightInfo.LastChild;

				if (flightInfo.SelectNodes("m:additionalFlightInfo/m:flightDetails/m:legDuration", xnMgr).Count > 0)
					NewSegmentGroup.Attributes.GetNamedItem("eft").InnerText = flightInfo.SelectSingleNode("m:additionalFlightInfo/m:flightDetails/m:legDuration", xnMgr).InnerText;

				NewSegment = NewSegmentGroup.AppendChild(Segment.CloneNode(false));
				NewSegment.Attributes.GetNamedItem("dlc").InnerText = flightInfo.SelectSingleNode("m:basicFlightInfo/m:departureLocation/m:cityAirport", xnMgr).InnerText;
				NewSegment.Attributes.GetNamedItem("alc").InnerText = flightInfo.SelectSingleNode("m:basicFlightInfo/m:arrivalLocation/m:cityAirport", xnMgr).InnerText;
				NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(flightInfo.SelectSingleNode("m:basicFlightInfo/m:flightDetails/m:departureDate", xnMgr).InnerText, flightInfo.SelectSingleNode("m:basicFlightInfo/m:flightDetails/m:departureTime", xnMgr).InnerText);
				NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(flightInfo.SelectSingleNode("m:basicFlightInfo/m:flightDetails/m:arrivalDate", xnMgr).InnerText, flightInfo.SelectSingleNode("m:basicFlightInfo/m:flightDetails/m:arrivalTime", xnMgr).InnerText);
				NewSegment.Attributes.GetNamedItem("mcc").InnerText = flightInfo.SelectSingleNode("m:basicFlightInfo/m:marketingCompany/m:identifier", xnMgr).InnerText;
				NewSegment.Attributes.GetNamedItem("occ").InnerText = (flightInfo.SelectNodes("m:basicFlightInfo/m:operatingCompany/m:identifier", xnMgr).Count.Equals(0)) ? "" : flightInfo.SelectSingleNode("m:basicFlightInfo/m:operatingCompany/m:identifier", xnMgr).InnerText;
				NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(flightInfo.SelectSingleNode("m:basicFlightInfo/m:flightIdentification/m:number", xnMgr).InnerText);
				NewSegment.Attributes.GetNamedItem("eqt").InnerText = flightInfo.SelectSingleNode("m:additionalFlightInfo/m:flightDetails/m:typeOfAircraft", xnMgr).InnerText;
				NewSegment.Attributes.GetNamedItem("stn").InnerText = cm.RequestInt(flightInfo.SelectSingleNode("m:additionalFlightInfo/m:flightDetails/m:numberOfStops", xnMgr).InnerText).ToString();

				foreach (XmlNode productClassDetail in flightInfo.SelectNodes("m:infoOnClasses/m:productClassDetail", xnMgr))
				{
					NewServiceClass = NewSegment.AppendChild(ServiceClass.CloneNode(false));
					NewServiceClass.Attributes.GetNamedItem("rbd").InnerText = productClassDetail.SelectSingleNode("m:serviceClass", xnMgr).InnerText;
					NewServiceClass.Attributes.GetNamedItem("avl").InnerText = productClassDetail.SelectSingleNode("m:availabilityStatus", xnMgr).InnerText;
				}
			}

			FlightInfo.RemoveChild(SegmentGroup);

			return XmlDoc.DocumentElement;
		}

		#endregion "Availability 조회"

        #region "Schedule 조회"

        /// <summary>
        /// Availability 간단 조회
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="DLC">출발지</param>
        /// <param name="ALC">도착지</param>
        /// <param name="CLC">경유지(콤마로 구분)</param>
        /// <param name="SCD">서비스클래스(콤마로 구분)</param>
        /// <param name="MCC">항공사(콤마로 구분)</param>
        /// <param name="FLN">편명(콤마로 구분)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "Schedule 간단 조회")]
        public XmlElement SearchScheduleSimpleRS(int SNM, string DTD, string DLC, string ALC, string CLC, string SCD, string MCC, string FLN, string RQT)
        {
            int ServiceNumber = 511;
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = ServiceNumber;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = RQT;
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = DTD;
                sqlParam[8].Value = DLC;
                sqlParam[9].Value = ALC;
                sqlParam[10].Value = CLC;
                sqlParam[11].Value = SCD;
                sqlParam[12].Value = MCC;
                sqlParam[13].Value = FLN;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                return SearchSchedule(SNM, "44", DTD, "", DLC, ALC, CLC, SCD, MCC, FLN, 0, (String.IsNullOrWhiteSpace(CLC) ? "OD,ON" : "OC"), "TN", RQT, LogGUID);
            }

            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, 0, 0).ToErrors;
            }
        }

        /// <summary>
        /// Availability/Schedule/TimeTable 조회
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="FAC">구분코드(44:Availability, 48:Schedule, 51:TimeTable)</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="DTT">출발시간(HHMM)</param>
        /// <param name="DLC">출발지</param>
        /// <param name="ALC">도착지</param>
        /// <param name="CLC">경유지(콤마로 구분)</param>
        /// <param name="SCD">서비스클래스(콤마로 구분)</param>
        /// <param name="MCC">항공사(콤마로 구분)</param>
        /// <param name="FLN">편명(콤마로 구분)</param>
        /// <param name="NOS">좌석수</param>
        /// <param name="FLO">항공조회옵션(OD:direct only, ON:non-stop only, OC:connections only)(콤마로 구분)</param>
        /// <param name="TOR">요청타입(SF:Flight Specific, TA:By arrival time, TD:By departure time, TE:By elapsed time, TG:Group availability, TN:By neutral order, TT:Negociated space)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "Schedule 조회")]
        public XmlElement SearchScheduleRS(int SNM, string FAC, string DTD, string DTT, string DLC, string ALC, string CLC, string SCD, string MCC, string FLN, string NOS, string FLO, string TOR, string RQT)
        {
            int ServiceNumber = 512;
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청10", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청11", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청12", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = ServiceNumber;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = RQT;
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = FAC;
                sqlParam[8].Value = DTD;
                sqlParam[9].Value = DTT;
                sqlParam[10].Value = DLC;
                sqlParam[11].Value = ALC;
                sqlParam[12].Value = CLC;
                sqlParam[13].Value = SCD;
                sqlParam[14].Value = MCC;
                sqlParam[15].Value = FLN;
                sqlParam[16].Value = NOS;
                sqlParam[17].Value = FLO;
                sqlParam[18].Value = TOR;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                return SearchSchedule(SNM, FAC, DTD, DTT, DLC, ALC, CLC, SCD, MCC, FLN, cm.RequestInt(NOS), FLO, TOR, RQT, LogGUID);
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, 0, 0).ToErrors;
            }
        }

        public XmlElement SearchSchedule(int SNM, string FAC, string DTD, string DTT, string DLC, string ALC, string CLC, string SCD, string MCC, string FLN, int NOS, string FLO, string TOR, string RQT, string GUID)
        {
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            try
            {
                //결과
                XmlElement ResXml;
                XmlElement ResXml2;

                //네임스페이스
                XmlNamespaceManager xnMgr;
                XmlNamespaceManager xnMgr2 = null;

                //여정정보
                XmlNode SingleCityPairInfo = null;

                //### 01.세션생성 #####
                XmlElement Session = amd.SessionCreate(2, String.Concat(GUID, "-01"));

                SID = Session.SelectSingleNode("session/sessionId").InnerText;
                SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                //### 02.Availability(Air_MultiAvailability) #####
                ResXml = amd.MultiAvailability2RS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), FAC, DTD, DTT, DLC, ALC, CLC, SCD, MCC, FLN, NOS, FLO, TOR);

                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Air_MultiAvailability"));

                //오류체크
                if (ResXml.SelectNodes("m:errorOrWarningSection", xnMgr).Count > 0)
                    throw new Exception(ResXml.SelectSingleNode("m:errorOrWarningSection/m:textInformation/m:freeText", xnMgr).InnerText);
                else if (ResXml.SelectNodes("m:singleCityPairInfo/m:cityPairErrorOrWarning", xnMgr).Count > 0)
                    throw new Exception(ResXml.SelectSingleNode("m:singleCityPairInfo/m:cityPairErrorOrWarning/m:cityPairErrorOrWarningText/m:freeText", xnMgr).InnerText);

                if (ResXml.SelectNodes("m:singleCityPairInfo/m:flightInfo", xnMgr).Count > 0)
                {
                    SingleCityPairInfo = ResXml.SelectSingleNode("m:singleCityPairInfo", xnMgr).CloneNode(false);
                    SingleCityPairInfo.AppendChild(ResXml.SelectSingleNode("m:singleCityPairInfo/m:locationDetails", xnMgr));

                    int Lop = 3;
                    int SegCount = 0;
                    int CLCCount = String.IsNullOrWhiteSpace(CLC) ? 0 : CLC.Split(',').Length;

                    while (true)
                    {
                        //### 00.Availability(Air_MultiAvailability) #####
                        if (Lop > 3)
                            ResXml2 = amd.MultiAvailability2RS(SID, (++SQN).ToString(), SCT, String.Format("{0}-{1}", GUID, cm.NumPosition(Lop.ToString(), 2)), "55", DTD, DTT, DLC, ALC, CLC, SCD, MCC, FLN, NOS, FLO, TOR);
                        else
                        {
                            ResXml2 = ResXml;

                            xnMgr2 = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            xnMgr2.AddNamespace("m", AmadeusConfig.NamespaceURL("Air_MultiAvailability"));
                        }

                        if (ResXml2.SelectNodes("m:errorOrWarningSection", xnMgr2).Count > 0 || ResXml2.SelectNodes("m:singleCityPairInfo/m:cityPairErrorOrWarning", xnMgr2).Count > 0)
                            break;

                        foreach (XmlNode FlightInfo in ResXml2.SelectNodes("m:singleCityPairInfo/m:flightInfo", xnMgr2))
                        {
                            if (CLCCount > 0)
                            {
                                //요청된 경유수와 동일한 경유수가 존재하는 결과만 리턴하기 위한 처리
                                if (FlightInfo.SelectNodes("m:basicFlightInfo/m:lineItemNumber", xnMgr2).Count > 0)
                                {
                                    XmlNode NextSiblingFlightInfo = FlightInfo.NextSibling;
                                    SegCount = 0;

                                    while (NextSiblingFlightInfo != null && NextSiblingFlightInfo.SelectNodes("m:basicFlightInfo/m:lineItemNumber", xnMgr2).Count.Equals(0))
                                    {
                                        NextSiblingFlightInfo = NextSiblingFlightInfo.NextSibling;
                                        SegCount++;
                                    }

                                    if (SegCount > CLCCount)
                                    {
                                        Lop = 99;
                                        break;
                                    }
                                }
                            }

                            SingleCityPairInfo.AppendChild(ResXml.OwnerDocument.ImportNode(FlightInfo, true));
                        }

                        if (Lop++ > 10)
                            break;
                    }
                }

                //### 99.세션종료 #####
                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-99"));

                //최초 검색결과에 여정정보리스트 치환(통합구조로 변경하기 위한 구조 일치용)
                ResXml.ReplaceChild(SingleCityPairInfo, ResXml.SelectSingleNode("m:singleCityPairInfo", xnMgr));

                return ToModeAvailabilityRS(ResXml, xnMgr);
            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                throw new Exception(ex.ToString());
            }
        }

        #endregion "Schedule 조회"

        #region "최저가 운임조회(스케쥴 이용)"

        /// <summary>
		/// 최저가 운임조회(스케쥴 이용)
		/// </summary>
		/// <param name="SNM">사이트번호</param>
		/// <returns></returns>
		//[WebMethod(Description = "최저가 운임조회(스케쥴 이용)")]
		public XmlElement SearchFareBestWithoutPNRRS(int SNM)
		{
			try
			{
				string GUID = cm.GetGUID;

				XmlElement Session = amd.SessionCreate(SNM, String.Concat(GUID, "-01"));

				string SID = Session.SelectSingleNode("session/sessionId").InnerText;
				string SQN = Session.SelectSingleNode("session/sequenceNumber").InnerText;
				string SCT = Session.SelectSingleNode("session/securityToken").InnerText;

				XmlElement ResXml = amd.InformativeBestPricingWithoutPNRRS(SID, SQN, SCT, String.Concat(GUID, "-02"));

				amd.SessionClose(SID, SCT, String.Concat(GUID, "-03"));

				//오류 결과일 경우 예외 처리
				//xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
				//xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_InformativeBestPricingWithoutPNR"));

				//if (ResXml.SelectNodes("m:errorGroup", xnMgr).Count > 0)
				//{
				//    throw new Exception(ResXml.SelectSingleNode("m:errorGroup/m:errorMessage/m:freeText", xnMgr).InnerText);
				//}

				return ResXml;
			}
			catch (Exception ex)
			{
                return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0).ToErrors;
			}
		}

		#endregion "최저가 운임조회(스케쥴 이용)"

        #region "운임 및 텍스"

        #region "운임조회(스케쥴 이용)"

        /// <summary>
        /// 항공운임 조회
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="FXL">요금조회 결과 중 선택된 <priceIndex>~</priceIndex> XmlNode(segGroup는 제외)</param>
        /// <param name="SXL">선택한 여정을 <itinerary>~<itinerary>노드에 삽입한 XmlNode</param>
        /// <returns></returns>
        [WebMethod(Description = "항공운임 조회(SearchFareAvailRS의 결과 이용)")]
        public XmlElement SearchFareInfoRS(int SNM, string FXL, string SXL)
        {
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청41", SqlDbType.VarChar, -1),
                        new SqlParameter("@요청42", SqlDbType.VarChar, -1)
                    };

                sqlParam[0].Value = 357;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = FXL;
                sqlParam[8].Value = SXL;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            //유효성 체크
            try
            {
                string VaFXL = FXL.ToUpper();
                string VaSXL = SXL.ToUpper();

                if (VaFXL.IndexOf("?XML") != -1 || VaFXL.IndexOf("!DOCTYPE") != -1)
                    throw new Exception("올바르지 않은 정보입니다.");

                if (VaSXL.IndexOf("?XML") != -1 || VaSXL.IndexOf("!DOCTYPE") != -1)
                    throw new Exception("올바르지 않은 정보입니다.");
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 357, 0, 0).ToErrors;
            }

            try
            {
                //여정정보
                XmlDocument XmlSeg = new XmlDocument();
                XmlSeg.LoadXml(SXL);

                //운임정보
                XmlDocument XmlFare = new XmlDocument();
                XmlFare.LoadXml(FXL);

                int i = 0;
                int SegNo = 1;
                int SegCount = XmlSeg.SelectNodes("itinerary/segGroup/seg").Count;

                int[] INO = new int[SegCount];
                string[] DTD = new string[SegCount];
                string[] DTT = new string[SegCount];
                string[] ARD = new string[SegCount];
                string[] ART = new string[SegCount];
                string[] DLC = new string[SegCount];
                string[] ALC = new string[SegCount];
                string[] MCC = new string[SegCount];
                string[] OCC = new string[SegCount];
                string[] FLN = new string[SegCount];
                string[] RBD = new string[SegCount];
                string[] PTC = { "ADT", "CHD", "INF" };
                int[] NOP = { 1, 0, 0 };

                foreach (XmlNode SegGroup in XmlSeg.SelectNodes("itinerary/segGroup"))
                {
                    foreach (XmlNode Seg in SegGroup.SelectNodes("seg"))
                    {
                        INO[i] = SegNo;
                        DTD[i] = Seg.Attributes.GetNamedItem("ddt").InnerText;
                        DTT[i] = Seg.Attributes.GetNamedItem("ddt").InnerText;
                        ARD[i] = Seg.Attributes.GetNamedItem("ardt").InnerText;
                        ART[i] = Seg.Attributes.GetNamedItem("ardt").InnerText;
                        DLC[i] = Seg.Attributes.GetNamedItem("dlc").InnerText;
                        ALC[i] = Seg.Attributes.GetNamedItem("alc").InnerText;
                        MCC[i] = Seg.Attributes.GetNamedItem("mcc").InnerText;
                        OCC[i] = Seg.Attributes.GetNamedItem("occ").InnerText;
                        FLN[i] = Seg.Attributes.GetNamedItem("fln").InnerText;
                        RBD[i] = XmlFare.SelectNodes("priceIndex/paxFareGroup/paxFare[1]/segFareGroup/segFare/fare")[i].SelectSingleNode("cabin").Attributes.GetNamedItem("rbd").InnerText;

                        i++;
                    }

                    SegNo++;
                }

                //운임타입
                int FareTypeRP = 0;
                int FareTypeRU = 0;
                int FareTypeRW = 0;
                string FAT = string.Empty;

                foreach (XmlNode FareType in XmlFare.SelectNodes("priceIndex/paxFareGroup/paxFare[1]/segFareGroup/segFare/fare/fare/fareType"))
                {
                    if (FareType.InnerText.Equals("RP"))
                        FareTypeRP++;
                    else if (FareType.InnerText.Equals("RB") || FareType.InnerText.Equals("RC") || FareType.InnerText.Equals("RX") || FareType.InnerText.Equals("RZ"))
                        FareTypeRW++;
                    else
                        FareTypeRU++;
                }

                if (FareTypeRP > 0 && (FareTypeRU > 0 || FareTypeRW > 0))
                    FAT = "RP,RU";
                else if (FareTypeRP > 0 && FareTypeRU.Equals(0) && FareTypeRW.Equals(0))
                    FAT = "RP";
                else if (FareTypeRP.Equals(0) && (FareTypeRU > 0 || FareTypeRW > 0))
                    FAT = "RU";
                else
                    FAT = "";

                //탑승객
                foreach (XmlNode PaxFare in XmlFare.SelectNodes("priceIndex/paxFareGroup/paxFare"))
                {
                    switch (PaxFare.Attributes.GetNamedItem("ptc").InnerText)
                    {
                        case "CHD": NOP[1] = 1; break;
                        case "INF": NOP[2] = 1; break;
                    }
                }

                //프로모션
                string PMID = (XmlFare.SelectNodes("priceIndex/promotionInfo").Count > 0) ? XmlFare.SelectSingleNode("priceIndex/promotionInfo/item/promotionId").InnerText : "";

                return SearchFareWithoutPNRRS(SNM, PMID, FAT, INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, PTC, NOP);
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 357, 0, 0).ToErrors;
            }
        }

        /// <summary>
        /// 운임조회(스케쥴 이용)
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="PMID">프로모션 번호</param>
        /// <param name="FAT">Fare Type(RP/RU)</param>
        /// <param name="INO">여정번호</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="DTT">출발시간(HHMM)</param>
        /// <param name="ARD">도착일(YYYYMMDD)</param>
        /// <param name="ART">도착시간(HHMM)</param>
        /// <param name="DLC">출발지</param>
        /// <param name="ALC">도착지</param>
        /// <param name="MCC">마케팅항공사</param>
        /// <param name="OCC">운항항공사</param>
        /// <param name="FLN">편명</param>
        /// <param name="RBD">좌석클래스</param>
        /// <param name="PTC">탑승객 타입 코드</param>
        /// <param name="NOP">탑승객 수</param>
        /// <returns></returns>
        [WebMethod(Description = "운임조회(스케쥴 이용)")]
        public XmlElement SearchFareWithoutPNRRS(int SNM, string PMID, string FAT, int[] INO, string[] DTD, string[] DTT, string[] ARD, string[] ART, string[] DLC, string[] ALC, string[] MCC, string[] OCC, string[] FLN, string[] RBD, string[] PTC, int[] NOP)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청10", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청11", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청12", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청13", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청14", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청15", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 33;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = PMID;
                sqlParam[8].Value = FAT;
                sqlParam[9].Value = String.Join("^", INO);
                sqlParam[10].Value = String.Join("^", DTD);
                sqlParam[11].Value = String.Join("^", DTT);
                sqlParam[12].Value = String.Join("^", ARD);
                sqlParam[13].Value = String.Join("^", ART);
                sqlParam[14].Value = String.Join("^", DLC);
                sqlParam[15].Value = String.Join("^", ALC);
                sqlParam[16].Value = String.Join("^", MCC);
                sqlParam[17].Value = String.Join("^", OCC);
                sqlParam[18].Value = String.Join("^", FLN);
                sqlParam[19].Value = String.Join("^", RBD);
                sqlParam[20].Value = String.Join("^", PTC);
                sqlParam[21].Value = String.Join("^", NOP);

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                return SearchFareWithoutPNR(SNM, PMID, FAT, INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, PTC, NOP, LogGUID);
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 33, 0, 0).ToErrors;
            }
        }

        [WebMethod(Description = "운임조회(스케쥴 이용)")]
        public XmlElement SearchFareWithoutPNR(int SNM, string PMID, string FAT, int[] INO, string[] DTD, string[] DTT, string[] ARD, string[] ART, string[] DLC, string[] ALC, string[] MCC, string[] OCC, string[] FLN, string[] RBD, string[] PTC, int[] NOP, string GUID)
        {
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            try
            {
                //결과
                XmlElement ResXml;

                //네임스페이스
                XmlNamespaceManager xnMgr;

                //### 01.세션생성 #####
                XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

                SID = Session.SelectSingleNode("session/sessionId").InnerText;
                SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                //### 02.Pricing(Fare_InformativePricingWithoutPNR) #####
                ResXml = amd.InformativePricingWithoutPNRRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), FAT, INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, PTC, NOP);

                //### 03.세션종료 #####
                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"));

                //오류 결과일 경우 예외 처리
                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_InformativePricingWithoutPNR"));

                if (ResXml.SelectNodes("m:errorGroup", xnMgr).Count > 0)
                {
                    throw new Exception(ResXml.SelectSingleNode("m:errorGroup/m:errorWarningDescription/m:freeText", xnMgr).InnerText);
                }

                //프로모션
                XmlElement PromInfo = SearchPromotionDetail(cm.RequestInt(PMID));
                XmlNode PromItem = (PromInfo.SelectNodes("item").Count > 0) ? PromInfo.FirstChild : null;

                //return PromInfo;
                //return ResXml;
                return ToModeSearchFareWithoutPNRRS(ResXml, xnMgr, PromItem, GUID);
            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                throw new Exception(ex.ToString());
            }
        }

        /// <summary>
        /// SearchFareWithoutPNRRS를 통합용 XML구조로 치환
        /// </summary>
        /// <param name="ResXml">SearchFareWithoutPNRRS의 Data</param>
        /// <param name="xnMgr">네임스페이스</param>
        /// <param name="PromItem">프로모션 정보</param>
        /// <param name="GUID">고유번호</param>
        /// <returns></returns>
        public XmlElement ToModeSearchFareWithoutPNRRS(XmlElement ResXml, XmlNamespaceManager xnMgr, XmlNode PromItem, string GUID)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchBookingPriceRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("guid").InnerText = GUID;
            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            XmlNode PaxFareGroup = XmlDoc.SelectSingleNode("ResponseDetails/paxFareGroup");
            XmlNode PaxFare = PaxFareGroup.SelectSingleNode("paxFare");
            XmlNode TaxInfo;
            XmlNode Tax;
            XmlNode NewPaxFare;
            XmlNode NewTax;
            string ValidatingCarrier = string.Empty;
            double FareAmount = 0;
            double SumTax = 0;
            double SumFsc = 0;
            double QCharge = 0;
            double ROE = 0;
            double CalFsc = 0;

            foreach (XmlNode FareInfoGroup in ResXml.SelectNodes("m:mainGroup/m:pricingGroupLevelGroup/m:fareInfoGroup", xnMgr))
            {
                NewPaxFare = PaxFareGroup.AppendChild(PaxFare.CloneNode(true));
                TaxInfo = NewPaxFare.SelectSingleNode("taxInfo");
                Tax = TaxInfo.SelectSingleNode("tax");
                ValidatingCarrier = FareInfoGroup.SelectSingleNode("m:pricingIndicators/m:companyDetails/m:otherCompany", xnMgr).InnerText;
                FareAmount = (FareInfoGroup.SelectSingleNode("m:fareAmount/m:monetaryDetails[m:typeQualifier='B']/m:currency", xnMgr).InnerText != "KRW" && FareInfoGroup.SelectNodes("m:fareAmount/m:monetaryDetails[m:typeQualifier='E']", xnMgr).Count > 0) ? cm.RequestDouble(FareInfoGroup.SelectSingleNode("m:fareAmount/m:monetaryDetails[m:typeQualifier='E']/m:amount", xnMgr).InnerText) : cm.RequestDouble(FareInfoGroup.SelectSingleNode("m:fareAmount/m:monetaryDetails[m:typeQualifier='B']/m:amount", xnMgr).InnerText);
                SumTax = 0;
                SumFsc = 0;

                foreach (XmlNode TaxDetails in FareInfoGroup.SelectNodes("m:surchargesGroup/m:taxesAmount/m:taxDetails", xnMgr))
                {
                    NewTax = TaxInfo.AppendChild(Tax.Clone());
                    NewTax.Attributes.GetNamedItem("isoCountry").InnerText = TaxDetails.SelectSingleNode("m:countryCode", xnMgr).InnerText;
                    NewTax.Attributes.GetNamedItem("amount").InnerText = TaxDetails.SelectSingleNode("m:rate", xnMgr).InnerText;

                    if (NewTax.Attributes.GetNamedItem("isoCountry").InnerText.Equals("YR") || NewTax.Attributes.GetNamedItem("isoCountry").InnerText.Equals("YQ"))
                        SumFsc += cm.RequestDouble(NewTax.Attributes.GetNamedItem("amount").InnerText);
                    else
                        SumTax += cm.RequestDouble(NewTax.Attributes.GetNamedItem("amount").InnerText);
                }

                //Q-Charge
                QCharge = 0;
                ROE = 0;
                CalFsc = 0;

                if (FareInfoGroup.SelectSingleNode("m:fareAmount/m:monetaryDetails[m:typeQualifier='B']/m:currency", xnMgr).InnerText.Equals("KRW"))
                {
                    if (FareInfoGroup.SelectNodes("m:textData[m:freeTextQualification/m:informationType='15']/m:freeText", xnMgr).Count > 0)
                    {
                        string FreeText = string.Empty;

                        foreach (XmlNode FreeTextNode in FareInfoGroup.SelectNodes("m:textData[m:freeTextQualification/m:informationType='15']/m:freeText", xnMgr))
                        {
                            FreeText += FreeTextNode.InnerText;
                        }

                        if (!String.IsNullOrWhiteSpace(FreeText) && FreeText.IndexOf("Q") != -1)
                        {
                            double[] QInfo = Common.GetQCharge(FreeText);
                            QCharge += QInfo[0];
                            ROE = (QInfo[1] > 0) ? QInfo[1] : ROE;
                        }

                        CalFsc = Common.IntIncrement(QCharge * ROE, 100);

                        NewTax = TaxInfo.AppendChild(Tax.Clone());
                        NewTax.Attributes.GetNamedItem("isoCountry").InnerText = "Q";
                        NewTax.Attributes.GetNamedItem("amount").InnerText = CalFsc.ToString();

                        //FareAmount = Common.GetFare(ValidatingCarrier, FareAmount, CalFsc);
                        SumFsc = Common.GetFuelSurCharge(ValidatingCarrier, SumFsc, CalFsc);

                        if (ValidatingCarrier.Equals("HA") || ValidatingCarrier.Equals("TW"))
                            FareAmount = FareAmount - CalFsc;
                    }
                }

                TaxInfo.RemoveChild(Tax);

                NewPaxFare.Attributes.GetNamedItem("ptc").InnerText = Common.ChangePaxType1(FareInfoGroup.SelectSingleNode("m:segmentLevelGroup/m:ptcSegment/m:quantityDetails/m:unitQualifier", xnMgr).InnerText);
                NewPaxFare.Attributes.GetNamedItem("tstRef").InnerText = "";
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText = FareAmount.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("disFare").InnerText = Convert.ToString(cm.PromotionFare(FareAmount, NewPaxFare.Attributes.GetNamedItem("ptc").InnerText, PromItem));
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tax").InnerText = SumTax.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fsc").InnerText = SumFsc.ToString();
            }

            PaxFareGroup.RemoveChild(PaxFare);

            if (PromItem != null)
                XmlDoc.SelectSingleNode("ResponseDetails/promotionInfo").AppendChild(XmlDoc.ImportNode(PromItem, true));

            return XmlDoc.DocumentElement;
        }

        #endregion "운임조회(스케쥴 이용)"

        #region "운임조회(스케쥴 이용)(MP구조로 리턴)"

        /// <summary>
        /// 운임조회(스케쥴 이용)(MP구조로 리턴)
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="PMID">프로모션 번호</param>
        /// <param name="FAT">Fare Type(RP/RU)</param>
        /// <param name="INO">여정번호</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="DTT">출발시간(HHMM)</param>
        /// <param name="ARD">도착일(YYYYMMDD)</param>
        /// <param name="ART">도착시간(HHMM)</param>
        /// <param name="DLC">출발지</param>
        /// <param name="ALC">도착지</param>
        /// <param name="MCC">마케팅항공사</param>
        /// <param name="OCC">운항항공사</param>
        /// <param name="FLN">편명</param>
        /// <param name="RBD">좌석클래스</param>
        /// <param name="PTC">탑승객 타입 코드</param>
        /// <param name="NOP">탑승객 수</param>
        /// <returns></returns>
        [WebMethod(Description = "운임조회(스케쥴 이용)(MP구조로 리턴)")]
        public XmlElement SearchFareScheduleRS(int SNM, string PMID, string FAT, int[] INO, string[] DTD, string[] DTT, string[] ARD, string[] ART, string[] DLC, string[] ALC, string[] MCC, string[] OCC, string[] FLN, string[] RBD, string[] PTC, int[] NOP)
        {
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청10", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청11", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청12", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청13", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청14", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청15", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 468;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = PMID;
                sqlParam[8].Value = FAT;
                sqlParam[9].Value = String.Join("^", INO);
                sqlParam[10].Value = String.Join("^", DTD);
                sqlParam[11].Value = String.Join("^", DTT);
                sqlParam[12].Value = String.Join("^", ARD);
                sqlParam[13].Value = String.Join("^", ART);
                sqlParam[14].Value = String.Join("^", DLC);
                sqlParam[15].Value = String.Join("^", ALC);
                sqlParam[16].Value = String.Join("^", MCC);
                sqlParam[17].Value = String.Join("^", OCC);
                sqlParam[18].Value = String.Join("^", FLN);
                sqlParam[19].Value = String.Join("^", RBD);
                sqlParam[20].Value = String.Join("^", PTC);
                sqlParam[21].Value = String.Join("^", NOP);

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //결과
                XmlElement ResXml;

                //네임스페이스
                XmlNamespaceManager xnMgr;

                //### 01.세션생성 #####
                XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

                SID = Session.SelectSingleNode("session/sessionId").InnerText;
                SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                //### 02.Pricing(Fare_InformativePricingWithoutPNR) #####
                ResXml = amd.InformativePricingWithoutPNRRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), FAT, INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, PTC, NOP);

                //### 03.세션종료 #####
                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"));

                //오류 결과일 경우 예외 처리
                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_InformativePricingWithoutPNR"));

                if (ResXml.SelectNodes("m:errorGroup", xnMgr).Count > 0)
                {
                    throw new Exception(ResXml.SelectSingleNode("m:errorGroup/m:errorWarningDescription/m:freeText", xnMgr).InnerText);
                }

                //프로모션
                XmlElement PromInfo = SearchPromotionDetail(cm.RequestInt(PMID));
                XmlNode PromItem = (PromInfo.SelectNodes("item").Count > 0) ? PromInfo.FirstChild : null;

                return ToModeSearchFareScheduleRS(SNM, DLC[0].Trim(), ResXml, xnMgr, PromItem);
            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 468, 0, 0).ToErrors;
            }
        }

        //[WebMethod(Description = "")]
        public double[] AAAAAAAGetQCharge(string QChargeString)
        {
            double[] QCharge = new Double[3] { 0, 0, 0 };

            if (!String.IsNullOrWhiteSpace(QChargeString))
            {
                String[] Pattern = {
									@"\sQ(?<QCharge>[0-9]+\.[0-9]+)\s",                 //_Q5.80_
                                    @"\sQ(?<QCharge>[0-9]+\.[0-9]+)Q",                  //_Q17.12Q5.80_(앞부분)
                                    @"[0-9]+Q(?<QCharge>[0-9]+\.[0-9]+)\s",             //_Q17.12Q5.80_(뒷부분)
                                    @"\sQ\s[A-Z]{6}(?<QCharge>[0-9]+\.[0-9]+)\s",       //_Q YVRSEL11.73_
                                    @"\sQ\s[A-Z]{6}(?<QCharge>[0-9]+\.[0-9]+)Q\s",      //_Q HKGYVR5.79Q HKGYVR11.73_(앞부분)
                                    @"[0-9]+Q\s[A-Z]{6}(?<QCharge>[0-9]+\.[0-9]+)\s",   //_Q HKGYVR5.79Q HKGYVR11.73_(뒷부분)
									@"\sROE(?<ROE>[0-9]+\.?[0-9]*)$",                   //_ROE1159.796000
                                    @"\sROE(?<ROE>[0-9]+\.?[0-9]*)\s"                   //_ROE1159.796000_
                                    //@"[A-Z]{2}\s(?<HKG>HKG)[0-9]*"                      //_HKG_
                                    };

                foreach (string pattern in Pattern)
                {
                    Regex regex = new Regex(pattern, RegexOptions.Singleline);
                    Match match = regex.Match(QChargeString);

                    while (match.Success)
                    {
                        if (!String.IsNullOrWhiteSpace(match.Groups["QCharge"].Value))
                            QCharge[0] += Convert.ToDouble(match.Groups["QCharge"].Value);

                        if (!String.IsNullOrWhiteSpace(match.Groups["ROE"].Value))
                            QCharge[1] = Convert.ToDouble(match.Groups["ROE"].Value);

                        //if (QCharge[2].Equals(0) && !String.IsNullOrWhiteSpace(match.Groups["HKG"].Value))
                        //    QCharge[2] = 1;

                        match = match.NextMatch();
                    }
                }
            }

            return QCharge;
        }

        /// <summary>
        /// SearchFareScheduleRS를 통합용 XML구조로 치환
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="DLC">출발지</param>
        /// <param name="ResXml">SearchFareScheduleRS의 Data</param>
        /// <param name="xnMgr">네임스페이스</param>
        /// <param name="PromItem">프로모션 정보</param>
        /// <returns></returns>
        public XmlElement ToModeSearchFareScheduleRS(int SNM, string DLC, XmlElement ResXml, XmlNamespaceManager xnMgr, XmlNode PromItem)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchFareAvailRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            XmlNode PriceInfo = XmlDoc.SelectSingleNode("ResponseDetails/priceInfo");
            XmlNode PriceIndex = PriceInfo.SelectSingleNode("priceIndex");
            XmlNode PaxFareGroup = PriceIndex.SelectSingleNode("paxFareGroup");
            XmlNode PaxFare = PaxFareGroup.SelectSingleNode("paxFare");
            XmlNode NewPaxFare;

            string PTC = string.Empty;
            double FareAmount = 0;
            double SumTax = 0;
            double SumFsc = 0;
            double QCharge = 0;
            double ROE = 0;
            double CalFsc = 0;

            double TotalFare = 0;
            double TotalDisFare = 0;
            double TotalTax = 0;
            double TotalFsc = 0;
            int PaxCount = 0;

            //발권항공사
            string ValidatingCarrier = ResXml.SelectSingleNode("m:mainGroup/m:pricingGroupLevelGroup/m:fareInfoGroup/m:pricingIndicators/m:companyDetails/m:otherCompany", xnMgr).InnerText;

            //한국출발여부
            bool DepartureFromKorea = Common.KoreaOfAirport(DLC);

            //TASF(발권 여행사 수수료)
            bool UseTASF = Common.ApplyTASF(SNM, ValidatingCarrier);
            double TASF = 0;
            double TotalTASF = 0;

            foreach (XmlNode FareInfoGroup in ResXml.SelectNodes("m:mainGroup/m:pricingGroupLevelGroup/m:fareInfoGroup", xnMgr))
            {
                PTC = Common.ChangePaxType1(FareInfoGroup.SelectSingleNode("m:segmentLevelGroup/m:ptcSegment/m:quantityDetails[m:numberOfUnit='1']/m:unitQualifier", xnMgr).InnerText);
                FareAmount = (FareInfoGroup.SelectSingleNode("m:fareAmount/m:monetaryDetails[m:typeQualifier='B']/m:currency", xnMgr).InnerText != "KRW" && FareInfoGroup.SelectNodes("m:fareAmount/m:monetaryDetails[m:typeQualifier='E']", xnMgr).Count > 0) ? cm.RequestDouble(FareInfoGroup.SelectSingleNode("m:fareAmount/m:monetaryDetails[m:typeQualifier='E']/m:amount", xnMgr).InnerText) : cm.RequestDouble(FareInfoGroup.SelectSingleNode("m:fareAmount/m:monetaryDetails[m:typeQualifier='B']/m:amount", xnMgr).InnerText);
                TASF = UseTASF ? Common.GetTASF(SNM, PTC, ValidatingCarrier, DepartureFromKorea) : 0;
                SumTax = 0;
                SumFsc = 0;

                foreach (XmlNode TaxDetails in FareInfoGroup.SelectNodes("m:surchargesGroup/m:taxesAmount/m:taxDetails", xnMgr))
                {
                    if (TaxDetails.SelectSingleNode("m:countryCode", xnMgr).InnerText.Equals("YR") || TaxDetails.SelectSingleNode("m:countryCode", xnMgr).InnerText.Equals("YQ"))
                        SumFsc += cm.RequestDouble(TaxDetails.SelectSingleNode("m:rate", xnMgr).InnerText);
                    else
                        SumTax += cm.RequestDouble(TaxDetails.SelectSingleNode("m:rate", xnMgr).InnerText);
                }

                //Q-Charge
                QCharge = 0;
                ROE = 0;
                CalFsc = 0;

                if (FareInfoGroup.SelectSingleNode("m:fareAmount/m:monetaryDetails[m:typeQualifier='B']/m:currency", xnMgr).InnerText.Equals("KRW"))
                {
                    if (FareInfoGroup.SelectNodes("m:textData[m:freeTextQualification/m:informationType='15']/m:freeText", xnMgr).Count > 0)
                    {
                        string FreeText = string.Empty;

                        foreach (XmlNode FreeTextNode in FareInfoGroup.SelectNodes("m:textData[m:freeTextQualification/m:informationType='15']/m:freeText", xnMgr))
                        {
                            FreeText += FreeTextNode.InnerText;
                        }

                        if (!String.IsNullOrWhiteSpace(FreeText) && FreeText.IndexOf("Q") != -1)
                        {
                            double[] QInfo = Common.GetQCharge(FreeText);
                            QCharge += QInfo[0];
                            ROE = (QInfo[1] > 0) ? QInfo[1] : ROE;
                        }

                        CalFsc = Common.IntIncrement(QCharge * ROE, 100);
                        SumFsc = Common.GetFuelSurCharge(ValidatingCarrier, SumFsc, CalFsc);

                        if (ValidatingCarrier.Equals("HA") || ValidatingCarrier.Equals("TW"))
                            FareAmount = FareAmount - CalFsc;
                    }
                }

                NewPaxFare = PaxFareGroup.AppendChild(PaxFare.CloneNode(true));
                NewPaxFare.Attributes.GetNamedItem("ptc").InnerText = PTC;
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText = FareAmount.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("disFare").InnerText = Convert.ToString(cm.PromotionFare(FareAmount, NewPaxFare.Attributes.GetNamedItem("ptc").InnerText, PromItem));
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tax").InnerText = SumTax.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fsc").InnerText = SumFsc.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("disPartner").InnerText = "0";
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tasf").InnerText = TASF.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("mTasf").InnerText = TASF.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("aTasf").InnerText = "0";

                PaxCount = FareInfoGroup.ParentNode.SelectNodes("m:passengersID/m:travellerDetails", xnMgr).Count;
                TotalFare += (FareAmount * PaxCount);
                TotalDisFare += (cm.RequestDouble(NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("disFare").InnerText) * PaxCount);
                TotalTax += (SumTax * PaxCount);
                TotalFsc += (SumFsc * PaxCount);
                TotalTASF += (TASF * PaxCount);

                //여정별 운임정보
                XmlNode SegFareGroup = NewPaxFare.SelectSingleNode("segFareGroup");
                XmlNode SegFare = SegFareGroup.SelectSingleNode("segFare");
                XmlNode NewSegFare;

                foreach (XmlNode FareComponentDetailsGroup in FareInfoGroup.SelectNodes("m:fareComponentDetailsGroup", xnMgr))
                {
                    NewSegFare = SegFareGroup.AppendChild(SegFare.CloneNode(true));
                    NewSegFare.Attributes.GetNamedItem("ref").InnerText = FareComponentDetailsGroup.SelectSingleNode("m:fareComponentID/m:itemNumberDetails/m:number", xnMgr).InnerText;

                    XmlNode Fare = NewSegFare.SelectSingleNode("fare");
                    XmlNode NewFare;

                    foreach (XmlNode CouponDetailsGroup in FareComponentDetailsGroup.SelectNodes("m:couponDetailsGroup", xnMgr))
                    {
                        XmlNode SegmentLevelGroup = FareInfoGroup.SelectSingleNode(String.Format("m:segmentLevelGroup[m:segmentInformation/m:itemNumber='{0}']", CouponDetailsGroup.SelectSingleNode("m:productId/m:referenceDetails[m:type='ST']/m:value", xnMgr).InnerText), xnMgr);

                        NewFare = NewSegFare.AppendChild(Fare.CloneNode(true));
                        NewFare.Attributes.GetNamedItem("bpt").InnerText = "";
                        NewFare.Attributes.GetNamedItem("mas").InnerText = "";
                        NewFare.SelectSingleNode("cabin").Attributes.GetNamedItem("rbd").InnerText = SegmentLevelGroup.SelectSingleNode("m:cabinGroup/m:cabinSegment/m:bookingClassDetails/m:designator", xnMgr).InnerText;
                        NewFare.SelectSingleNode("cabin").Attributes.GetNamedItem("cabin").InnerText = SegmentLevelGroup.SelectSingleNode("m:cabinGroup/m:cabinSegment/m:bookingClassDetails/m:option", xnMgr).InnerText;
                        NewFare.SelectSingleNode("cabin").Attributes.GetNamedItem("avl").InnerText = "";
                        NewFare.SelectSingleNode("fare").Attributes.GetNamedItem("basis").InnerText = SegmentLevelGroup.SelectSingleNode("m:fareBasis/m:additionalFareDetails/m:rateClass", xnMgr).InnerText;
                        NewFare.SelectSingleNode("fare").Attributes.GetNamedItem("ptc").InnerText = SegmentLevelGroup.SelectSingleNode("m:ptcSegment/m:quantityDetails[m:numberOfUnit='1']/m:unitQualifier", xnMgr).InnerText;
                        NewFare.SelectSingleNode("fare").Attributes.GetNamedItem("tkd").InnerText = (SegmentLevelGroup.SelectNodes("m:additionalInformation/m:idNumber", xnMgr).Count > 0) ? SegmentLevelGroup.SelectSingleNode("m:additionalInformation/m:idNumber", xnMgr).InnerText : "";
                        NewFare.SelectSingleNode("fare/fareType").InnerText = "MSP";
                        NewFare.RemoveChild(NewFare.SelectSingleNode("corporateId"));
                    }

                    NewSegFare.RemoveChild(Fare);
                }

                SegFareGroup.RemoveChild(SegFare);

                //탑승객 번호
                XmlNode Traveler = NewPaxFare.SelectSingleNode("traveler");
                XmlNode Ref = Traveler.SelectSingleNode("ref");
                XmlNode NewRef;

                if (NewPaxFare.Attributes.GetNamedItem("ptc").InnerText.Equals("INF"))
                {
                    int TmpAdultCount = 1;
                    foreach (XmlNode TravellerDetails in FareInfoGroup.ParentNode.SelectNodes("m:passengersID/m:travellerDetails", xnMgr))
                    {
                        NewRef = Traveler.AppendChild(Ref.CloneNode(false));
                        NewRef.InnerText = TravellerDetails.SelectSingleNode("m:measurementValue", xnMgr).InnerText;
                        NewRef.Attributes.GetNamedItem("ind").InnerText = Convert.ToString((TmpAdultCount / 2) + (TmpAdultCount % 2));
                        TmpAdultCount++;
                    }
                }
                else
                {
                    foreach (XmlNode TravellerDetails in FareInfoGroup.ParentNode.SelectNodes("m:passengersID/m:travellerDetails", xnMgr))
                    {
                        NewRef = Traveler.AppendChild(Ref.CloneNode(false));
                        NewRef.InnerText = TravellerDetails.SelectSingleNode("m:measurementValue", xnMgr).InnerText;
                        NewRef.Attributes.RemoveAll();
                    }
                }

                Traveler.RemoveChild(Ref);
            }

            PaxFareGroup.RemoveChild(PaxFare);

            PriceIndex.Attributes.GetNamedItem("gds").InnerText = "Amadeus";
            PriceIndex.Attributes.GetNamedItem("ptc").InnerText = PaxFareGroup.SelectSingleNode("paxFare[1]").Attributes.GetNamedItem("ptc").InnerText;
            PriceIndex.Attributes.GetNamedItem("ref").InnerText = "1";
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("price").InnerText = (TotalDisFare + TotalTax + TotalFsc).ToString();
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("fare").InnerText = TotalFare.ToString();
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("disFare").InnerText = TotalDisFare.ToString();
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("tax").InnerText = TotalTax.ToString();
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("fsc").InnerText = TotalFsc.ToString();
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("disPartner").InnerText = "0";
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("tasf").InnerText = TotalTASF.ToString();
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("mTasf").InnerText = TotalTASF.ToString();
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("aTasf").InnerText = "0";
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("pvc").InnerText = ValidatingCarrier;
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("mas").InnerText = "";
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("ttl").InnerText = "";
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("ucf").InnerText = "N";
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("ntf").InnerText = "N";
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("sutf").InnerText = Common.SelectUserTASF(SNM, ValidatingCarrier);

            //프로모션 정보
            if (PromItem != null)
            {
                if (PromItem.SelectNodes("cardRule").Count > 0)
                    PromItem.RemoveChild(PromItem.SelectSingleNode("cardRule"));

                XmlNode TmpPromotions = PromItem.OwnerDocument.CreateElement("promotions");
                XmlNode TmpPromotion = PromItem.OwnerDocument.CreateElement("promotion");
                XmlAttribute TmpPromotionId = PromItem.OwnerDocument.CreateAttribute("promotionId");
                XmlAttribute TmpIncentiveCode = PromItem.OwnerDocument.CreateAttribute("incentiveCode");
                XmlAttribute TmpIncentiveName = PromItem.OwnerDocument.CreateAttribute("incentiveName");
                XmlAttribute TmpFareTarget = PromItem.OwnerDocument.CreateAttribute("fareTarget");
                XmlAttribute TmpPromotionTL = PromItem.OwnerDocument.CreateAttribute("promotionTL");

                TmpPromotionId.InnerText = PromItem.SelectSingleNode("promotionId").InnerText;
                TmpIncentiveCode.InnerText = PromItem.SelectSingleNode("incentiveCode").InnerText;
                TmpIncentiveName.InnerText = PromItem.SelectSingleNode("incentiveName").InnerText;
                TmpFareTarget.InnerText = PromItem.SelectSingleNode("fareTarget").InnerText;
                TmpPromotionTL.InnerText = PromItem.SelectSingleNode("promotionTL").InnerText;

                TmpPromotion.Attributes.Append(TmpPromotionId);
                TmpPromotion.Attributes.Append(TmpIncentiveCode);
                TmpPromotion.Attributes.Append(TmpIncentiveName);
                TmpPromotion.Attributes.Append(TmpFareTarget);
                TmpPromotion.Attributes.Append(TmpPromotionTL);

                TmpPromotions.AppendChild(TmpPromotion);
                PromItem.AppendChild(TmpPromotions);

                PriceIndex.SelectSingleNode("promotionInfo").AppendChild(XmlDoc.ImportNode(PromItem, true));
            }
            else
                PriceIndex.RemoveChild(PriceIndex.SelectSingleNode("promotionInfo"));

            return XmlDoc.DocumentElement;
        }

        #endregion "운임조회(스케쥴 이용)(MP구조로 리턴)"

        #region "예상텍스조회(스케쥴 이용)"

        /// <summary>
        /// 예상텍스조회(스케쥴 이용)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="INO">여정번호</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="DTT">출발시간(HHMM)</param>
        /// <param name="ARD">도착일(YYYYMMDD)</param>
        /// <param name="ART">도착시간(HHMM)</param>
        /// <param name="DLC">출발지</param>
        /// <param name="ALC">도착지</param>
        /// <param name="MCC">마케팅항공사</param>
        /// <param name="OCC">운항항공사</param>
        /// <param name="FLN">편명</param>
        /// <param name="RBD">좌석클래스</param>
        /// <param name="ADC">성인 탑승객 수</param>
        /// <param name="CHC">소아 탑승객 수</param>
        /// <param name="IFC">유아 탑승객 수</param>
        /// <returns></returns>
        [WebMethod(Description = "예상텍스조회(스케쥴 이용)")]
        public XmlElement SearchAirQuoteTaxRS(int SNM, int[] INO, string[] DTD, string[] DTT, string[] ARD, string[] ART, string[] DLC, string[] ALC, string[] MCC, string[] OCC, string[] FLN, string[] RBD, int ADC, int CHC, int IFC)
        {
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청10", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청11", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청12", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청13", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청14", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 18;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = String.Join("^", INO);
                sqlParam[8].Value = String.Join("^", DTD);
                sqlParam[9].Value = String.Join("^", DTT);
                sqlParam[10].Value = String.Join("^", ARD);
                sqlParam[11].Value = String.Join("^", ART);
                sqlParam[12].Value = String.Join("^", DLC);
                sqlParam[13].Value = String.Join("^", ALC);
                sqlParam[14].Value = String.Join("^", MCC);
                sqlParam[15].Value = String.Join("^", OCC);
                sqlParam[16].Value = String.Join("^", FLN);
                sqlParam[17].Value = String.Join("^", RBD);
                sqlParam[18].Value = ADC;
                sqlParam[19].Value = CHC;
                sqlParam[20].Value = IFC;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //결과
                XmlElement ResXml = SearchAirQuoteTax(SNM, GUID, INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, ADC, CHC, IFC);

                //네임스페이스
                XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_InformativePricingWithoutPNR"));

                return ToModeSearchAirQuoteTaxRS(ResXml, xnMgr);
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 18, 0, 0).ToErrors;
            }
        }

        /// <summary>
        /// 예상텍스조회(스케쥴 이용)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="GUID">고유번호</param>
        /// <param name="INO">여정번호</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="DTT">출발시간(HHMM)</param>
        /// <param name="ARD">도착일(YYYYMMDD)</param>
        /// <param name="ART">도착시간(HHMM)</param>
        /// <param name="DLC">출발지</param>
        /// <param name="ALC">도착지</param>
        /// <param name="MCC">마케팅항공사</param>
        /// <param name="OCC">운항항공사</param>
        /// <param name="FLN">편명</param>
        /// <param name="RBD">좌석클래스</param>
        /// <param name="ADC">성인 탑승객 수</param>
        /// <param name="CHC">소아 탑승객 수</param>
        /// <param name="IFC">유아 탑승객 수</param>
        /// <returns></returns>
        public XmlElement SearchAirQuoteTax(int SNM, string GUID, int[] INO, string[] DTD, string[] DTT, string[] ARD, string[] ART, string[] DLC, string[] ALC, string[] MCC, string[] OCC, string[] FLN, string[] RBD, int ADC, int CHC, int IFC)
        {
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            try
            {
                string[] PTC = new String[3] { "ADT", "CH", "INF" };
                int[] NOP = new Int32[3] { ADC, CHC, IFC };

                if (String.IsNullOrWhiteSpace(GUID))
                    GUID = cm.GetGUID;

                //결과
                XmlElement ResXml;

                //네임스페이스
                XmlNamespaceManager xnMgr;

                //### 01.세션생성 #####
                XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

                SID = Session.SelectSingleNode("session/sessionId").InnerText;
                SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                //### 02.Pricing(Fare_InformativePricingWithoutPNR) #####
                ResXml = amd.InformativePricingWithoutPNRRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), "", INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, PTC, NOP);

                //오류 결과일 경우 예외 처리
                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_InformativePricingWithoutPNR"));

                if (ResXml.SelectNodes("m:errorGroup", xnMgr).Count > 0)
                {
                    throw new Exception(ResXml.SelectSingleNode("m:errorGroup/m:errorWarningDescription/m:freeText", xnMgr).InnerText);
                }

                //### 03.세션종료 #####
                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"));

                return ResXml;
            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0);
            }
        }

        /// <summary>
        /// SearchAirQuoteTaxRS를 통합용 XML구조로 치환
        /// </summary>
        /// <param name="ResXml">SearchAirQuoteTaxRS의 Data</param>
        /// <param name="xnMgr">XmlNamespaceManager</param>
        /// <returns></returns>
        protected XmlElement ToModeSearchAirQuoteTaxRS(XmlElement ResXml, XmlNamespaceManager xnMgr)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchAirQuoteTaxRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            XmlNode PaxQuoteTaxGroup = XmlDoc.SelectSingleNode("ResponseDetails/paxQuoteTaxGroup");
            XmlNode PaxQuoteTax = PaxQuoteTaxGroup.SelectSingleNode("paxQuoteTax");
            XmlNode Tax;
            XmlNode NewPaxQuoteTax;
            XmlNode NewTax;
            double SumTax = 0;
            double SumFsc = 0;

            foreach (XmlNode FareInfoGroup in ResXml.SelectNodes("m:mainGroup/m:pricingGroupLevelGroup/m:fareInfoGroup", xnMgr))
            {
                NewPaxQuoteTax = PaxQuoteTaxGroup.AppendChild(PaxQuoteTax.CloneNode(true));
                Tax = NewPaxQuoteTax.SelectSingleNode("tax");
                SumTax = 0;
                SumFsc = 0;

                foreach (XmlNode TaxDetails in FareInfoGroup.SelectNodes("m:surchargesGroup/m:taxesAmount/m:taxDetails", xnMgr))
                {
                    NewTax = NewPaxQuoteTax.AppendChild(Tax.Clone());
                    NewTax.Attributes.GetNamedItem("isoCountry").InnerText = TaxDetails.SelectSingleNode("m:countryCode", xnMgr).InnerText;
                    NewTax.Attributes.GetNamedItem("amount").InnerText = TaxDetails.SelectSingleNode("m:rate", xnMgr).InnerText;

                    if (NewTax.Attributes.GetNamedItem("isoCountry").InnerText.Equals("YR") || NewTax.Attributes.GetNamedItem("isoCountry").InnerText.Equals("YQ"))
                        SumFsc += cm.RequestDouble(NewTax.Attributes.GetNamedItem("amount").InnerText);
                    else
                        SumTax += cm.RequestDouble(NewTax.Attributes.GetNamedItem("amount").InnerText);
                }

                NewPaxQuoteTax.Attributes.GetNamedItem("ptc").InnerText = Common.ChangePaxType1(FareInfoGroup.SelectSingleNode("m:segmentLevelGroup/m:ptcSegment/m:quantityDetails/m:unitQualifier", xnMgr).InnerText);
                NewPaxQuoteTax.SelectSingleNode("amount").Attributes.GetNamedItem("tax").InnerText = SumTax.ToString();
                NewPaxQuoteTax.SelectSingleNode("amount").Attributes.GetNamedItem("fsc").InnerText = SumFsc.ToString();
                NewPaxQuoteTax.SelectSingleNode("amount").InnerText = (SumTax + SumFsc).ToString();

                NewPaxQuoteTax.RemoveChild(Tax);
            }

            PaxQuoteTaxGroup.RemoveChild(PaxQuoteTax);

            return XmlDoc.DocumentElement;
        }

        #endregion "예상텍스조회(스케쥴 이용)"

        #region "예상운임조회(스케쥴 이용)"

        /// <summary>
        /// 예상운임조회(스케쥴 이용)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="INO">여정번호</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="DTT">출발시간(HHMM)</param>
        /// <param name="ARD">도착일(YYYYMMDD)</param>
        /// <param name="ART">도착시간(HHMM)</param>
        /// <param name="DLC">출발지</param>
        /// <param name="ALC">도착지</param>
        /// <param name="MCC">마케팅항공사</param>
        /// <param name="OCC">운항항공사</param>
        /// <param name="FLN">편명</param>
        /// <param name="RBD">좌석클래스</param>
        /// <param name="ADC">성인 탑승객 수</param>
        /// <param name="CHC">소아 탑승객 수</param>
        /// <param name="IFC">유아 탑승객 수</param>
        /// <returns></returns>
        [WebMethod(Description = "예상운임조회(스케쥴 이용)")]
        public XmlElement SearchAirQuoteFareRS(int SNM, int[] INO, string[] DTD, string[] DTT, string[] ARD, string[] ART, string[] DLC, string[] ALC, string[] MCC, string[] OCC, string[] FLN, string[] RBD, int ADC, int CHC, int IFC)
        {
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청10", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청11", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청12", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청13", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청14", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 469;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = String.Join("^", INO);
                sqlParam[8].Value = String.Join("^", DTD);
                sqlParam[9].Value = String.Join("^", DTT);
                sqlParam[10].Value = String.Join("^", ARD);
                sqlParam[11].Value = String.Join("^", ART);
                sqlParam[12].Value = String.Join("^", DLC);
                sqlParam[13].Value = String.Join("^", ALC);
                sqlParam[14].Value = String.Join("^", MCC);
                sqlParam[15].Value = String.Join("^", OCC);
                sqlParam[16].Value = String.Join("^", FLN);
                sqlParam[17].Value = String.Join("^", RBD);
                sqlParam[18].Value = ADC;
                sqlParam[19].Value = CHC;
                sqlParam[20].Value = IFC;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //결과
                XmlElement ResXml = SearchAirQuoteTax(SNM, GUID, INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, ADC, CHC, IFC);

                //네임스페이스
                XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_InformativePricingWithoutPNR"));

                return ToModeSearchAirQuoteFareRS(ResXml, xnMgr);
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 469, 0, 0).ToErrors;
            }
        }

        /// <summary>
        /// SearchAirQuoteFareRS를 통합용 XML구조로 치환
        /// </summary>
        /// <param name="ResXml">SearchAirQuoteTaxRS의 Data</param>
        /// <param name="xnMgr">XmlNamespaceManager</param>
        /// <returns></returns>
        protected XmlElement ToModeSearchAirQuoteFareRS(XmlElement ResXml, XmlNamespaceManager xnMgr)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchAirQuoteFareRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            XmlNode PaxFareGroup = XmlDoc.SelectSingleNode("ResponseDetails/paxFareGroup");
            XmlNode PaxFare = PaxFareGroup.SelectSingleNode("paxFare");
            XmlNode TaxInfo;
            XmlNode Tax;
            XmlNode NewPaxFare;
            XmlNode NewTax;
            string ValidatingCarrier = string.Empty;
            double FareAmount = 0;
            double SumTax = 0;
            double SumFsc = 0;
            double QCharge = 0;
            double ROE = 0;
            double CalFsc = 0;

            foreach (XmlNode FareInfoGroup in ResXml.SelectNodes("m:mainGroup/m:pricingGroupLevelGroup/m:fareInfoGroup", xnMgr))
            {
                NewPaxFare = PaxFareGroup.AppendChild(PaxFare.CloneNode(true));
                TaxInfo = NewPaxFare.SelectSingleNode("taxInfo");
                Tax = TaxInfo.SelectSingleNode("tax");
                ValidatingCarrier = FareInfoGroup.SelectSingleNode("m:pricingIndicators/m:companyDetails/m:otherCompany", xnMgr).InnerText;
                FareAmount = (FareInfoGroup.SelectSingleNode("m:fareAmount/m:monetaryDetails[m:typeQualifier='B']/m:currency", xnMgr).InnerText != "KRW" && FareInfoGroup.SelectNodes("m:fareAmount/m:monetaryDetails[m:typeQualifier='E']", xnMgr).Count > 0) ? cm.RequestDouble(FareInfoGroup.SelectSingleNode("m:fareAmount/m:monetaryDetails[m:typeQualifier='E']/m:amount", xnMgr).InnerText) : cm.RequestDouble(FareInfoGroup.SelectSingleNode("m:fareAmount/m:monetaryDetails[m:typeQualifier='B']/m:amount", xnMgr).InnerText);
                SumTax = 0;
                SumFsc = 0;

                foreach (XmlNode TaxDetails in FareInfoGroup.SelectNodes("m:surchargesGroup/m:taxesAmount/m:taxDetails", xnMgr))
                {
                    NewTax = TaxInfo.AppendChild(Tax.Clone());
                    NewTax.Attributes.GetNamedItem("isoCountry").InnerText = TaxDetails.SelectSingleNode("m:countryCode", xnMgr).InnerText;
                    NewTax.Attributes.GetNamedItem("amount").InnerText = TaxDetails.SelectSingleNode("m:rate", xnMgr).InnerText;
                    NewTax.Attributes.RemoveNamedItem("Q");
                    NewTax.Attributes.RemoveNamedItem("ROE");

                    if (NewTax.Attributes.GetNamedItem("isoCountry").InnerText.Equals("YR") || NewTax.Attributes.GetNamedItem("isoCountry").InnerText.Equals("YQ"))
                        SumFsc += cm.RequestDouble(NewTax.Attributes.GetNamedItem("amount").InnerText);
                    else
                        SumTax += cm.RequestDouble(NewTax.Attributes.GetNamedItem("amount").InnerText);
                }

                //Q-Charge
                QCharge = 0;
                ROE = 0;
                CalFsc = 0;

                if (FareInfoGroup.SelectSingleNode("m:fareAmount/m:monetaryDetails[m:typeQualifier='B']/m:currency", xnMgr).InnerText.Equals("KRW"))
                {
                    if (FareInfoGroup.SelectNodes("m:textData[m:freeTextQualification/m:informationType='15']/m:freeText", xnMgr).Count > 0)
                    {
                        string FreeText = string.Empty;

                        foreach (XmlNode FreeTextNode in FareInfoGroup.SelectNodes("m:textData[m:freeTextQualification/m:informationType='15']/m:freeText", xnMgr))
                        {
                            FreeText += FreeTextNode.InnerText;
                        }

                        double[] QInfo = Common.GetQCharge(FreeText);
                        QCharge = QInfo[0];
                        ROE = QInfo[1];

                        CalFsc = Common.IntIncrement(QCharge * ROE, 100);

                        NewTax = TaxInfo.AppendChild(Tax.Clone());
                        NewTax.Attributes.GetNamedItem("isoCountry").InnerText = "Q";
                        NewTax.Attributes.GetNamedItem("amount").InnerText = CalFsc.ToString();
                        NewTax.Attributes.GetNamedItem("Q").InnerText = QCharge.ToString();
                        NewTax.Attributes.GetNamedItem("ROE").InnerText = ROE.ToString();

                        //FareAmount = Common.GetFare(ValidatingCarrier, FareAmount, CalFsc);
                        SumFsc = Common.GetFuelSurCharge(ValidatingCarrier, SumFsc, CalFsc);

                        if (ValidatingCarrier.Equals("HA") || ValidatingCarrier.Equals("TW"))
                            FareAmount = FareAmount - CalFsc;
                    }
                }

                TaxInfo.RemoveChild(Tax);

                NewPaxFare.Attributes.GetNamedItem("ptc").InnerText = Common.ChangePaxType1(FareInfoGroup.SelectSingleNode("m:segmentLevelGroup/m:ptcSegment/m:quantityDetails/m:unitQualifier", xnMgr).InnerText);
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText = FareAmount.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tax").InnerText = SumTax.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fsc").InnerText = SumFsc.ToString();
                NewPaxFare.SelectSingleNode("amount").InnerText = (FareAmount + SumTax + SumFsc).ToString();
            }

            PaxFareGroup.RemoveChild(PaxFare);

            return XmlDoc.DocumentElement;
        }

        #endregion "예상운임조회(스케쥴 이용)"

        #region "텍스 조회(PNR 이용)"

        /// <summary>
        /// 텍스조회(PNR 이용)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="PNR">PNR</param>
        /// <returns></returns>
        [WebMethod(Description = "텍스조회(PNR 이용)")]
        public XmlElement SearchAirTaxRS(int SNM, string PNR)
        {
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 19;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = PNR;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //결과
                XmlElement ResXml;

                //네임스페이스
                XmlNamespaceManager xnMgr;

                //### 01.세션생성 #####
                XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

                SID = Session.SelectSingleNode("session/sessionId").InnerText;
                SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                //### 02.PNR조회(PNR_Retrieve) #####
                ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                //### 03.운임Pricing(Fare_PricePNRWithBookingClass) #####
                ResXml = amd.PricePNRWithBookingClassPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), ((ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo", xnMgr).Count > 0 && ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).InnerText : null), "", null);

                //오류 결과일 경우 예외 처리
                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassPricing"));

                if (ResXml.SelectNodes("m:applicationError", xnMgr).Count > 0)
                {
                    throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgr).InnerText);
                }

                //### 04.세션종료 #####
                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"));

                return ToModeSearchAirTaxRS(ResXml, xnMgr);
            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 19, 0, 0).ToErrors;
            }
        }

        /// <summary>
        /// SearchAirTaxRS를 통합용 XML구조로 치환
        /// </summary>
        /// <param name="ResXml">SearchAirTaxRS의 Data</param>
        /// <param name="xnMgr">XmlNamespaceManager</param>
        /// <returns></returns>
        protected XmlElement ToModeSearchAirTaxRS(XmlElement ResXml, XmlNamespaceManager xnMgr)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchAirTaxRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            XmlNode PaxTaxGroup = XmlDoc.SelectSingleNode("ResponseDetails/paxTaxGroup");
            XmlNode PaxTax = PaxTaxGroup.SelectSingleNode("paxTax");
            XmlNode Tax;
            XmlNode NewPaxTax;
            XmlNode NewTax;
            double SumTax = 0;
            double SumFsc = 0;

            foreach (XmlNode FareList in ResXml.SelectNodes("m:fareList", xnMgr))
            {
                NewPaxTax = PaxTaxGroup.AppendChild(PaxTax.CloneNode(true));
                Tax = NewPaxTax.SelectSingleNode("tax");
                SumTax = 0;
                SumFsc = 0;

                foreach (XmlNode TaxInformation in FareList.SelectNodes("m:taxInformation", xnMgr))
                {
                    NewTax = NewPaxTax.AppendChild(Tax.Clone());
                    NewTax.Attributes.GetNamedItem("isoCountry").InnerText = TaxInformation.SelectSingleNode("m:taxDetails/m:taxType/m:isoCountry", xnMgr).InnerText;
                    NewTax.Attributes.GetNamedItem("amount").InnerText = TaxInformation.SelectSingleNode("m:amountDetails/m:fareDataMainInformation/m:fareAmount", xnMgr).InnerText;

                    if (NewTax.Attributes.GetNamedItem("isoCountry").InnerText.Equals("YR") || NewTax.Attributes.GetNamedItem("isoCountry").InnerText.Equals("YQ"))
                        SumFsc += cm.RequestDouble(NewTax.Attributes.GetNamedItem("amount").InnerText);
                    else
                        SumTax += cm.RequestDouble(NewTax.Attributes.GetNamedItem("amount").InnerText);
                }

                //Q-Charge
                //bool inHKG = false;
                double QCharge = 0;
                double ROE = 0;
                double CalFsc = 0;

                if (FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareCurrency", xnMgr).InnerText.Equals("KRW"))
                {
                    if (FareList.SelectNodes("m:otherPricingInfo/m:attributeDetails[m:attributeType='FCA']/m:attributeDescription", xnMgr).Count > 0)
                    {
                        //foreach (string ADes in FareList.SelectSingleNode("m:otherPricingInfo/m:attributeDetails[m:attributeType='FCA']/m:attributeDescription", xnMgr).InnerText.Split(' '))
                        //{
                        //    if (ADes.Equals("HKG"))
                        //        inHKG = true;
                        //}

                        double[] QInfo = Common.GetQCharge(FareList.SelectSingleNode("m:otherPricingInfo/m:attributeDetails[m:attributeType='FCA']/m:attributeDescription", xnMgr).InnerText);
                        QCharge = QInfo[0];
                        ROE = QInfo[1];

                        CalFsc = Common.IntIncrement(QCharge * ROE, 100);

                        NewTax = NewPaxTax.AppendChild(Tax.Clone());
                        NewTax.Attributes.GetNamedItem("isoCountry").InnerText = "Q";
                        NewTax.Attributes.GetNamedItem("amount").InnerText = CalFsc.ToString();

                        //if (inHKG)
                        //    SumTax += CalFsc;
                        //else
                        //    SumFsc += CalFsc;
                    }
                }

                NewPaxTax.Attributes.GetNamedItem("ptc").InnerText = FareList.SelectSingleNode("m:paxSegReference/m:refDetails/m:refQualifier", xnMgr).InnerText.Equals("PI") ? "INF" : Common.ChangePaxType1(FareList.SelectSingleNode("m:segmentInformation/m:fareQualifier/m:fareBasisDetails/m:discTktDesignator", xnMgr).InnerText);
                NewPaxTax.SelectSingleNode("amount").Attributes.GetNamedItem("tax").InnerText = SumTax.ToString();
                NewPaxTax.SelectSingleNode("amount").Attributes.GetNamedItem("fsc").InnerText = SumFsc.ToString();
                NewPaxTax.SelectSingleNode("amount").InnerText = (SumTax + SumFsc).ToString();

                NewPaxTax.RemoveChild(Tax);
            }

            PaxTaxGroup.RemoveChild(PaxTax);

            return XmlDoc.DocumentElement;
        }

        #endregion "텍스 조회(PNR 이용)"

        #region "운임 및 텍스 조회(주문번호 이용)"

        /// <summary>
        /// 운임 및 텍스 조회
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <returns></returns>
        [WebMethod(Description = "운임 및 텍스 조회")]
        public XmlElement SearchBookingPriceRS(int OID, int PID)
        {
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 20;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");
                XmlDocument FareXml = null;
                string ValidatingCarrier = string.Empty;

                if (XmlDBBooking.SelectNodes("item3/요금XML").Count > 0)
                {
                    FareXml = new XmlDocument();
                    FareXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                    ValidatingCarrier = (FareXml.SelectNodes("priceIndex/summary").Count > 0) ? FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("pvc").InnerText : XmlDBBooking.SelectSingleNode("item3/마케팅항공사").InnerText;
                }

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;

                    if (String.Compare(GDS, "Amadeus", true).Equals(0) || String.Compare(GDS, "Topas", true).Equals(0))
                    {
                        string SID = String.Empty;
                        string SCT = String.Empty;
                        int SQN = 0;

                        try
                        {
                            //결과
                            XmlElement ResXml;

                            //네임스페이스
                            XmlNamespaceManager xnMgr;

                            //### 01.세션생성 #####
                            XmlElement Session = amd.Authenticate(cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), String.Concat(GUID, "-01"));

                            SID = Session.SelectSingleNode("session/sessionId").InnerText;
                            SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                            SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                            //### 02.PNR조회(PNR_Retrieve) #####
                            ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText);

                            xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                            //### 03.운임Pricing(Fare_PricePNRWithBookingClass) #####
                            ResXml = amd.PricePNRWithBookingClassPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), (String.IsNullOrWhiteSpace(ValidatingCarrier) ? ((ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo", xnMgr).Count > 0 && ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).InnerText : null) : ValidatingCarrier), "", (FareXml != null) ? FareXml.SelectSingleNode("priceIndex/paxFareGroup") : null);

                            //오류 결과일 경우 예외 처리
                            xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassPricing"));

                            if (ResXml.SelectNodes("m:applicationError", xnMgr).Count > 0)
                            {
                                throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgr).InnerText);
                            }

                            //### 04.세션종료 #####
                            SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"));

                            return ToModeSearchBookingPriceAmadeus(ResXml, xnMgr, ((FareXml != null && FareXml.SelectNodes("priceIndex/promotionInfo").Count > 0) ? FareXml.SelectSingleNode("priceIndex/promotionInfo/item") : null), XmlDBBooking.SelectNodes("item4"));
                        }
                        catch (Exception ex)
                        {
                            //### 세션종료 #####
                            if (SQN > 0)
                                amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                            throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, 0);
                        }
                    }
                    else if (String.Compare(GDS, "Abacus", true).Equals(0))
                    {
                        string CID = String.Empty;
                        string STK = String.Empty;

                        try
                        {
                            //결과
                            XmlElement ResXml;

                            //네임스페이스
                            XmlNamespaceManager xnMgr;

                            //### 01.세션생성 #####
                            XmlElement Session = aas.SessionCreate();
                            CID = Session.ChildNodes[0].InnerText;
                            STK = Session.ChildNodes[1].InnerText;

                            //### 02.PNR조회(AbacusReadXml) #####
                            ResXml = aas.TravelItineraryReadXml(CID, STK, aas.TravelItineraryReadRQ(XmlDBBooking.SelectSingleNode("item3/GDS주문번호").InnerText));
                            cm.XmlFileSave(ResXml, mc.Name, "TravelItineraryReadXml", "N", String.Concat(GUID, "-02"));

                            xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            xnMgr.AddNamespace("stl", AbacusConfig.NamespaceURL("TravelItineraryRead_stl"));
                            xnMgr.AddNamespace("tir310", AbacusConfig.NamespaceURL("TravelItineraryRead_tir310"));

                            //오류 결과일 경우 예외 처리
                            if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
                            {
                                if (ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText.Trim().Equals("NAK3 - UPDATED PNR CURRENTLY IN AAA - FINISH OR IGNORE"))
                                {
                                    aas.AbacusCommand(CID, STK, "E", String.Concat(GUID, "-03"));
                                    ResXml = aas.TravelItineraryReadXml(CID, STK, aas.TravelItineraryReadRQ(XmlDBBooking.SelectSingleNode("item3/GDS주문번호").InnerText));
                                    cm.XmlFileSave(ResXml, "Abacus", "TravelItineraryReadXml", "N", String.Concat(GUID, "-03"));
                                }
                            }

                            //### 03.운임Pricing(AbacusAirPriceRS) #####
                            ResXml = aas.AbacusAirPriceRS(CID, STK, String.Concat(GUID, "-04"), (String.IsNullOrWhiteSpace(ValidatingCarrier) ? "OZ" : ValidatingCarrier));

                            xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            xnMgr.AddNamespace("m", AbacusConfig.NamespaceURL("OTA_AirPriceLLS"));
                            xnMgr.AddNamespace("stl", "http://services.sabre.com/STL/v01");

                            //오류 결과일 경우 예외 처리
                            if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
                            {
                                throw new Exception(ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText);
                            }

                            //### 04.세션종료 #####
                            aas.SessionClose(CID, STK);
                            CID = "";
                            STK = "";

                            return ToModeSearchBookingPriceAbacus(ResXml, xnMgr, ((FareXml != null && FareXml.SelectNodes("priceIndex/promotionInfo").Count > 0) ? FareXml.SelectSingleNode("priceIndex/promotionInfo/item") : null), XmlDBBooking.SelectNodes("item4"));
                        }
                        catch (Exception ex)
                        {
                            //### 세션종료 #####
                            if (!String.IsNullOrWhiteSpace(CID))
                                aas.SessionClose(CID, STK);

                            throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, 0);
                        }
                    }
                    else if (String.Compare(GDS, "Galileo", true).Equals(0))
                    {
                        try
                        {
                            return ToModeSearchBookingPriceGalileo(SearchAirQuoteTaxGalileoRS(0, OID, PID, 0, "WEBSERVICE"), ((FareXml != null && FareXml.SelectNodes("priceIndex/promotionInfo").Count > 0) ? FareXml.SelectSingleNode("priceIndex/promotionInfo/item") : null), XmlDBBooking.SelectNodes("item4"));
                        }
                        catch (Exception ex)
                        {
                            throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, 0);
                        }
                    }
                    else
                        throw new Exception("PNR 운임 재계산이 지원되지 않는 GDS입니다.");
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 20, OID, 0).ToErrors;
            }
        }

        /// <summary>
        /// 운임 및 텍스 조회(TST 저장)
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <returns></returns>
        [WebMethod(Description = "운임 및 텍스 조회(TST 저장)")]
        public XmlElement SearchBookingPriceTSTRS(int OID, int PID)
        {
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 21;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");
                
                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;

                    if (String.Compare(GDS, "Amadeus", true).Equals(0) || String.Compare(GDS, "Topas", true).Equals(0))
                    {
                        string SID = String.Empty;
                        string SCT = String.Empty;
                        int SQN = 0;

                        XmlDocument FareXml = null;
                        string ValidatingCarrier = string.Empty;

                        if (XmlDBBooking.SelectNodes("item3/요금XML").Count > 0)
                        {
                            FareXml = new XmlDocument();
                            FareXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                            ValidatingCarrier = FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("pvc").InnerText;
                        }

                        try
                        {
                            //결과
                            XmlElement ResXml;
                            XmlElement RefXml;
                            XmlElement TSTXml;

                            //네임스페이스
                            XmlNamespaceManager xnMgr;
                            XmlNamespaceManager xnMgrTST;

                            //### 01.세션생성 ##### (2015-09-08,오프라인 예약일 경우 SELK138AB로 Pricing 진행,김지영과장)
                            XmlElement Session = amd.Authenticate(XmlDBBooking.SelectSingleNode("item3/품목코드").InnerText.Equals("OA") ? 2 : cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), String.Concat(GUID, "-01"));

                            SID = Session.SelectSingleNode("session/sessionId").InnerText;
                            SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                            SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                            //### 02.PNR조회(PNR_Retrieve) #####
                            ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText);

                            xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                            //### 03.운임Pricing(Fare_PricePNRWithBookingClass) #####
                            ResXml = amd.PricePNRWithBookingClassPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), (String.IsNullOrWhiteSpace(ValidatingCarrier) ? ((ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo", xnMgr).Count > 0 && ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).InnerText : null) : ValidatingCarrier), "", (FareXml != null) ? FareXml.SelectSingleNode("priceIndex/paxFareGroup") : null);

                            //오류 결과일 경우 예외 처리
                            xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassPricing"));

                            if (ResXml.SelectNodes("m:applicationError", xnMgr).Count > 0)
                            {
                                throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgr).InnerText);
                            }

                            //### 04.TST저장(Ticket_CreateTSTFromPricing) #####
                            TSTXml = amd.CreateTSTFromPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"), ResXml, "Fare_PricePNRWithBookingClassPricing");

                            //오류 결과일 경우 예외 처리
                            xnMgrTST = new XmlNamespaceManager(TSTXml.OwnerDocument.NameTable);
                            xnMgrTST.AddNamespace("m", AmadeusConfig.NamespaceURL("Ticket_CreateTSTFromPricing"));

                            if (TSTXml.SelectNodes("m:applicationError", xnMgrTST).Count > 0)
                            {
                                throw new Exception(TSTXml.SelectSingleNode("m:applicationError/m:errorText/m:errorFreeText", xnMgrTST).InnerText);
                            }

                            //### 05.ReceiveFrom(PNR_AddMultiElements) #####
                            RefXml = amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05"), String.Concat("P-", "WEBSERVICE"));

                            //### 06.세션종료 #####
                            SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06"));

                            return ToModeSearchBookingPriceAmadeus(ResXml, xnMgr, ((FareXml != null && FareXml.SelectNodes("priceIndex/promotionInfo").Count > 0) ? FareXml.SelectSingleNode("priceIndex/promotionInfo/item") : null), XmlDBBooking.SelectNodes("item4"));
                        }
                        catch (Exception ex)
                        {
                            //### 세션종료 #####
                            if (SQN > 0)
                                amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                            throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, 0);
                        }
                    }
                    //웹사이트에서 호출시 갈릴레오 예약에 대한 오류 방지를 위해 예약정보로 구조에 맞게 응답(2018-09-12)
                    else if (String.Compare(GDS, "Galileo", true).Equals(0))
                    {
                        XmlDocument FareXml = new XmlDocument();
                        FareXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                        XmlDocument BookXml = new XmlDocument();
                        BookXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/예약XML").InnerText);

                        return ToModeSearchBookingPriceGalileo(BookXml.DocumentElement, ((FareXml != null && FareXml.SelectNodes("priceIndex/promotionInfo").Count > 0) ? FareXml.SelectSingleNode("priceIndex/promotionInfo/item") : null), XmlDBBooking.SelectNodes("item4"));
                    }
                    else
                        throw new Exception("PNR 운임 재계산이 지원되지 않는 GDS입니다.");
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 21, OID, 0).ToErrors;
            }
        }

        /// <summary>
        /// SearchBookingPriceRS를 통합용 XML구조로 치환
        /// </summary>
        /// <param name="ResXml">SearchBookingPriceRS의 Data</param>
        /// <param name="xnMgr">네임스페이스</param>
        /// <param name="PromItem">프로모션 정보</param>
        /// <param name="PaxDBInfos">탑승자 DB 정보</param>
        /// <returns></returns>
        public XmlElement ToModeSearchBookingPriceAmadeus(XmlElement ResXml, XmlNamespaceManager xnMgr, XmlNode PromItem, XmlNodeList PaxDBInfos)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchBookingPriceRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            XmlNode PaxFareGroup = XmlDoc.SelectSingleNode("ResponseDetails/paxFareGroup");
            XmlNode PaxFare = PaxFareGroup.SelectSingleNode("paxFare");
            XmlNode TaxInfo;
            XmlNode Tax;
            XmlNode NewPaxFare;
            XmlNode NewTax;
            string ValidatingCarrier = string.Empty;
            double FareAmount = 0;
            double SumTax = 0;
            double SumFsc = 0;
            double QCharge = 0;
            double ROE = 0;
            double CalFsc = 0;

            foreach (XmlNode FareList in ResXml.SelectNodes("m:fareList", xnMgr))
            {
                NewPaxFare = PaxFareGroup.AppendChild(PaxFare.CloneNode(true));
                TaxInfo = NewPaxFare.SelectSingleNode("taxInfo");
                Tax = TaxInfo.SelectSingleNode("tax");
                ValidatingCarrier = FareList.SelectSingleNode("m:validatingCarrier/m:carrierInformation/m:carrierCode", xnMgr).InnerText;
                FareAmount = (FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareCurrency", xnMgr).InnerText != "KRW" && FareList.SelectNodes("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='E']", xnMgr).Count > 0) ? cm.RequestDouble(FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='E']/m:fareAmount", xnMgr).InnerText) : cm.RequestDouble(FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareAmount", xnMgr).InnerText);
                SumTax = 0;
                SumFsc = 0;

                foreach (XmlNode TaxInformation in FareList.SelectNodes("m:taxInformation", xnMgr))
                {
                    NewTax = TaxInfo.AppendChild(Tax.Clone());
                    NewTax.Attributes.GetNamedItem("isoCountry").InnerText = TaxInformation.SelectSingleNode("m:taxDetails/m:taxType/m:isoCountry", xnMgr).InnerText;
                    NewTax.Attributes.GetNamedItem("amount").InnerText = TaxInformation.SelectSingleNode("m:amountDetails/m:fareDataMainInformation/m:fareAmount", xnMgr).InnerText;

                    if (NewTax.Attributes.GetNamedItem("isoCountry").InnerText.Equals("YR") || NewTax.Attributes.GetNamedItem("isoCountry").InnerText.Equals("YQ"))
                        SumFsc += cm.RequestDouble(NewTax.Attributes.GetNamedItem("amount").InnerText);
                    else
                        SumTax += cm.RequestDouble(NewTax.Attributes.GetNamedItem("amount").InnerText);
                }

                //Q-Charge
                QCharge = 0;
                ROE = 0;
                CalFsc = 0;

                if (FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareCurrency", xnMgr).InnerText.Equals("KRW"))
                {
                    if (FareList.SelectNodes("m:otherPricingInfo/m:attributeDetails[m:attributeType='FCA']/m:attributeDescription", xnMgr).Count > 0)
                    {
                        double[] QInfo = Common.GetQCharge(FareList.SelectSingleNode("m:otherPricingInfo/m:attributeDetails[m:attributeType='FCA']/m:attributeDescription", xnMgr).InnerText);
                        QCharge = QInfo[0];
                        ROE = QInfo[1];

                        CalFsc = Common.IntIncrement(QCharge * ROE, 100);

                        NewTax = TaxInfo.AppendChild(Tax.Clone());
                        NewTax.Attributes.GetNamedItem("isoCountry").InnerText = "Q";
                        NewTax.Attributes.GetNamedItem("amount").InnerText = CalFsc.ToString();

                        //FareAmount = Common.GetFare(ValidatingCarrier, FareAmount, CalFsc);
                        SumFsc = Common.GetFuelSurCharge(ValidatingCarrier, SumFsc, CalFsc);

                        if (ValidatingCarrier.Equals("HA") || ValidatingCarrier.Equals("TW"))
                            FareAmount = FareAmount - CalFsc;
                    }
                }

                TaxInfo.RemoveChild(Tax);

                NewPaxFare.Attributes.GetNamedItem("ptc").InnerText = FareList.SelectSingleNode("m:paxSegReference/m:refDetails/m:refQualifier", xnMgr).InnerText.Equals("PI") ? "INF" : Common.ChangePaxType1(FareList.SelectSingleNode("m:segmentInformation/m:fareQualifier/m:fareBasisDetails/m:discTktDesignator", xnMgr).InnerText);
                NewPaxFare.Attributes.GetNamedItem("tstRef").InnerText = FareList.SelectSingleNode("m:fareReference[m:referenceType='TST']/m:uniqueReference", xnMgr).InnerText;
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText = FareAmount.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("disFare").InnerText = Convert.ToString(cm.PromotionFare(FareAmount, NewPaxFare.Attributes.GetNamedItem("ptc").InnerText, PromItem));
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tax").InnerText = SumTax.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fsc").InnerText = SumFsc.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tasf").InnerText = "0";

                if (PaxDBInfos != null)
                {
                    foreach (XmlNode PaxDBInfo in PaxDBInfos)
                    {
                        if (NewPaxFare.Attributes.GetNamedItem("ptc").InnerText.Equals(PaxDBInfo.SelectSingleNode("구분").InnerText))
                        {
                            NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tasf").InnerText = PaxDBInfo.SelectSingleNode("발권수수료").InnerText;
                            break;
                        }
                    }
                }
            }

            PaxFareGroup.RemoveChild(PaxFare);

            if (PromItem != null)
                XmlDoc.SelectSingleNode("ResponseDetails/promotionInfo").AppendChild(XmlDoc.ImportNode(PromItem, true));

            return XmlDoc.DocumentElement;
        }

        /// <summary>
        /// SearchBookingPriceRS를 통합용 XML구조로 치환
        /// </summary>
        /// <param name="ResXml">SearchBookingPriceRS의 Data</param>
        /// <param name="xnMgr">네임스페이스</param>
        /// <param name="PromItem">프로모션 정보</param>
        /// <param name="PaxDBInfos">탑승자 DB 정보</param>
        /// <returns></returns>
        public XmlElement ToModeSearchBookingPriceAbacus(XmlElement ResXml, XmlNamespaceManager xnMgr, XmlNode PromItem, XmlNodeList PaxDBInfos)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchBookingPriceRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            XmlNode PaxFareGroup = XmlDoc.SelectSingleNode("ResponseDetails/paxFareGroup");
            XmlNode PaxFare = PaxFareGroup.SelectSingleNode("paxFare");
            XmlNode TaxInfo;
            XmlNode Tax;
            XmlNode NewPaxFare;
            XmlNode NewTax;
            string ValidatingCarrier = ResXml.SelectSingleNode("m:PriceQuote/m:MiscInformation/m:HeaderInformation/m:ValidatingCarrier", xnMgr).Attributes.GetNamedItem("Code").InnerText;
            double FareAmount = 0;
            double SumTax = 0;
            double SumFsc = 0;
            double QCharge = 0;
            double ROE = 0;
            double CalFsc = 0;

            foreach (XmlNode AirItineraryPricingInfo in ResXml.SelectNodes("m:PriceQuote/m:PricedItinerary/m:AirItineraryPricingInfo", xnMgr))
            {
                NewPaxFare = PaxFareGroup.AppendChild(PaxFare.CloneNode(true));
                TaxInfo = NewPaxFare.SelectSingleNode("taxInfo");
                Tax = TaxInfo.SelectSingleNode("tax");
                FareAmount = cm.RequestDouble(AirItineraryPricingInfo.SelectSingleNode("m:ItinTotalFare/m:BaseFare", xnMgr).Attributes.GetNamedItem("Amount").InnerText);
                SumTax = 0;
                SumFsc = 0;

                foreach (XmlNode TaxInformation in AirItineraryPricingInfo.SelectNodes("m:ItinTotalFare/m:Taxes/m:Tax", xnMgr))
                {
                    NewTax = TaxInfo.AppendChild(Tax.Clone());
                    NewTax.Attributes.GetNamedItem("isoCountry").InnerText = TaxInformation.Attributes.GetNamedItem("TicketingTaxCode").InnerText;
                    NewTax.Attributes.GetNamedItem("amount").InnerText = TaxInformation.Attributes.GetNamedItem("Amount").InnerText;

                    if (NewTax.Attributes.GetNamedItem("isoCountry").InnerText.Equals("YR") || NewTax.Attributes.GetNamedItem("isoCountry").InnerText.Equals("YQ"))
                        SumFsc += cm.RequestDouble(NewTax.Attributes.GetNamedItem("amount").InnerText);
                    else
                        SumTax += cm.RequestDouble(NewTax.Attributes.GetNamedItem("amount").InnerText);
                }

                //Q-Charge
                QCharge = 0;
                ROE = 0;
                CalFsc = 0;

                if (AirItineraryPricingInfo.SelectSingleNode("m:ItinTotalFare/m:BaseFare", xnMgr).Attributes.GetNamedItem("CurrencyCode").InnerText.Equals("KRW"))
                {
                    if (AirItineraryPricingInfo.SelectNodes("m:FareCalculation", xnMgr).Count > 0 && AirItineraryPricingInfo.SelectSingleNode("m:FareCalculation/m:Text", xnMgr).InnerText.IndexOf("Q") != -1)
                    {
                        double[] QInfo = Common.GetQCharge(AirItineraryPricingInfo.SelectSingleNode("m:FareCalculation/m:Text", xnMgr).InnerText);
                        QCharge = QInfo[0];
                        ROE = QInfo[1];

                        CalFsc = Common.IntIncrement(QCharge * ROE, 100);

                        NewTax = TaxInfo.AppendChild(Tax.Clone());
                        NewTax.Attributes.GetNamedItem("isoCountry").InnerText = "Q";
                        NewTax.Attributes.GetNamedItem("amount").InnerText = CalFsc.ToString();

                        SumFsc = Common.GetFuelSurCharge(ValidatingCarrier, SumFsc, CalFsc);

                        if (ValidatingCarrier.Equals("HA") || ValidatingCarrier.Equals("TW"))
                            FareAmount = FareAmount - CalFsc;
                    }
                }

                TaxInfo.RemoveChild(Tax);

                NewPaxFare.Attributes.GetNamedItem("ptc").InnerText = Common.ChangePaxType1(AirItineraryPricingInfo.SelectSingleNode("m:PassengerTypeQuantity", xnMgr).Attributes.GetNamedItem("Code").InnerText);
                NewPaxFare.Attributes.GetNamedItem("tstRef").InnerText = "";
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText = FareAmount.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("disFare").InnerText = Convert.ToString(cm.PromotionFare(FareAmount, NewPaxFare.Attributes.GetNamedItem("ptc").InnerText, PromItem));
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tax").InnerText = SumTax.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fsc").InnerText = SumFsc.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tasf").InnerText = "0";

                if (PaxDBInfos != null)
                {
                    foreach (XmlNode PaxDBInfo in PaxDBInfos)
                    {
                        if (NewPaxFare.Attributes.GetNamedItem("ptc").InnerText.Equals(PaxDBInfo.SelectSingleNode("구분").InnerText))
                        {
                            NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tasf").InnerText = PaxDBInfo.SelectSingleNode("발권수수료").InnerText;
                            break;
                        }
                    }
                }
            }

            PaxFareGroup.RemoveChild(PaxFare);

            if (PromItem != null)
                XmlDoc.SelectSingleNode("ResponseDetails/promotionInfo").AppendChild(XmlDoc.ImportNode(PromItem, true));

            return XmlDoc.DocumentElement;
        }

        /// <summary>
        /// SearchBookingPriceRS를 통합용 XML구조로 치환
        /// </summary>
        /// <param name="ResXml">SearchBookingPriceRS의 Data</param>
        /// <param name="PromItem">프로모션 정보</param>
        /// <param name="PaxDBInfos">탑승자 DB 정보</param>
        /// <returns></returns>
        public XmlElement ToModeSearchBookingPriceGalileo(XmlElement ResXml, XmlNode PromItem, XmlNodeList PaxDBInfos)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchBookingPriceRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            XmlNode PaxFareGroup = XmlDoc.SelectSingleNode("ResponseDetails/paxFareGroup");
            XmlNode PaxFare = PaxFareGroup.SelectSingleNode("paxFare");
            XmlNode TaxInfo;
            XmlNode Tax;
            XmlNode NewPaxFare;
            XmlNode NewTax;

            foreach (XmlNode PaxDetail in ResXml.SelectNodes("PaxDetails/PaxDetail[not(@ptc=preceding-sibling::PaxDetail/@ptc)]"))
            {
                double FareAmount = Convert.ToDouble(PaxDetail.SelectSingleNode("Pax_TaxTotal/NormalAmount").InnerText);
                int TaxQAmount = Convert.ToInt32(PaxDetail.SelectSingleNode("Pax_TaxTotal/Tot_TaxQAmount").InnerText);
                int FuelSurCharge = Convert.ToInt32(PaxDetail.SelectSingleNode("Pax_TaxTotal/Tot_FuelSurCharge").InnerText);

                NewPaxFare = PaxFareGroup.AppendChild(PaxFare.CloneNode(true));
                TaxInfo = NewPaxFare.SelectSingleNode("taxInfo");
                Tax = TaxInfo.SelectSingleNode("tax");

                foreach (XmlNode PaxTaxDetails in PaxDetail.SelectNodes("Pax_TaxDetails/Pax_TaxInfo"))
                {
                    NewTax = TaxInfo.AppendChild(Tax.Clone());
                    NewTax.Attributes.GetNamedItem("isoCountry").InnerText = PaxTaxDetails.SelectSingleNode("Pax_TaxCode").InnerText;
                    NewTax.Attributes.GetNamedItem("amount").InnerText = PaxTaxDetails.SelectSingleNode("Pax_TaxAmount").InnerText;
                }

                TaxInfo.RemoveChild(Tax);

                NewPaxFare.Attributes.GetNamedItem("ptc").InnerText = PaxDetail.Attributes.GetNamedItem("ptc").InnerText;
                NewPaxFare.Attributes.GetNamedItem("tstRef").InnerText = "";
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText = FareAmount.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("disFare").InnerText = Convert.ToString(cm.PromotionFare(FareAmount, NewPaxFare.Attributes.GetNamedItem("ptc").InnerText, PromItem));
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tax").InnerText = (TaxQAmount - FuelSurCharge).ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fsc").InnerText = FuelSurCharge.ToString();
                NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tasf").InnerText = "0";

                if (PaxDBInfos != null)
                {
                    foreach (XmlNode PaxDBInfo in PaxDBInfos)
                    {
                        if (NewPaxFare.Attributes.GetNamedItem("ptc").InnerText.Equals(PaxDBInfo.SelectSingleNode("구분").InnerText))
                        {
                            NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tasf").InnerText = PaxDBInfo.SelectSingleNode("발권수수료").InnerText;
                            break;
                        }
                    }
                }
            }

            PaxFareGroup.RemoveChild(PaxFare);

            if (PromItem != null)
                XmlDoc.SelectSingleNode("ResponseDetails/promotionInfo").AppendChild(XmlDoc.ImportNode(PromItem, true));

            return XmlDoc.DocumentElement;
        }

        #endregion "운임 및 텍스 조회(주문번호 이용)"

        #region "운임 및 텍스 업데이트"

        //[WebMethod(Description = "운임 및 텍스 업데이트")]
        public XmlElement UpdateBookingPriceRS(int OID, int PID)
        {
            return null;
        }

        #endregion "운임 및 텍스 업데이트"

        #region "운임확인(예약 전 선택 운임 체크)"

        //[WebMethod(Description = "운임확인(예약 전 선택 운임 체크)")]
        public XmlElement AAAAAAAAAAAAACheckSelectFareRSTEST()
        {
            int SNM = 2;
            string FXL = "<priceIndex gds=\"Amadeus\" mode=\"\" ptc=\"ADT\" ref=\"2001\" guid=\"ITHV010-201910281113270898\"><summary price=\"907100\" fare=\"511900\" disFare=\"511900\" tax=\"325600\" fsc=\"69600\" disPartner=\"0\" tasf=\"30000\" mTasf=\"30000\" aTasf=\"0\" pvc=\"HX\" mas=\"3M\" ttl=\"2019-10-30\" cds=\"N\" ucf=\"N\" ntf=\"N\" sutf=\"N\" cnc=\"KRW\"/><segGroup><seg><ref fiRef=\"1\" nosp=\"2\" stn=\"0\" baggage=\"30KG\">2001</ref><ref fiRef=\"2\" nosp=\"2\" stn=\"0\" baggage=\"30KG\">2001</ref></seg></segGroup><paxFareGroup><paxFare ptc=\"ADT\"><amount fare=\"179600\" disFare=\"179600\" tax=\"95200\" fsc=\"17400\" disPartner=\"0\" tasf=\"10000\" mTasf=\"10000\" aTasf=\"0\"/><segFareGroup><segFare ref=\"1\"><fare bpt=\"N\" mas=\"\"><cabin rbd=\"V\" cabin=\"M\" orginCabin=\"\" avl=\"9\"/><fare basis=\"VAVZ5KR\" ptc=\"ADT\" tkd=\"\"><fareType>RA</fareType></fare></fare><fare bpt=\"Y\" mas=\"3M\"><cabin rbd=\"V\" cabin=\"M\" orginCabin=\"\" avl=\"9\"/><fare basis=\"VAVZ5KR\" ptc=\"ADT\" tkd=\"\"><fareType>RA</fareType></fare></fare></segFare><segFare ref=\"2\"><fare bpt=\"N\" mas=\"\"><cabin rbd=\"W\" cabin=\"M\" orginCabin=\"\" avl=\"9\"/><fare basis=\"WAVZ5KR\" ptc=\"ADT\" tkd=\"\"><fareType>RA</fareType></fare></fare><fare bpt=\"Y\" mas=\"3M\"><cabin rbd=\"W\" cabin=\"M\" orginCabin=\"\" avl=\"9\"/><fare basis=\"WAVZ5KR\" ptc=\"ADT\" tkd=\"\"><fareType>RA</fareType></fare></fare></segFare></segFareGroup><traveler><ref>1</ref><ref>2</ref></traveler></paxFare><paxFare ptc=\"CHD\"><amount fare=\"134700\" disFare=\"134700\" tax=\"95200\" fsc=\"17400\" disPartner=\"0\" tasf=\"10000\" mTasf=\"10000\" aTasf=\"0\"/><segFareGroup><segFare ref=\"1\"><fare bpt=\"N\" mas=\"\"><cabin rbd=\"V\" cabin=\"M\" orginCabin=\"\" avl=\"9\"/><fare basis=\"VAVZ5KR\" ptc=\"CH\" tkd=\"CH25\"><fareType>RA</fareType></fare></fare><fare bpt=\"Y\" mas=\"1Y\"><cabin rbd=\"V\" cabin=\"M\" orginCabin=\"\" avl=\"9\"/><fare basis=\"VAVZ5KR\" ptc=\"CH\" tkd=\"CH25\"><fareType>RA</fareType></fare></fare></segFare><segFare ref=\"2\"><fare bpt=\"N\" mas=\"\"><cabin rbd=\"W\" cabin=\"M\" orginCabin=\"\" avl=\"9\"/><fare basis=\"WAVZ5KR\" ptc=\"CH\" tkd=\"CH25\"><fareType>RA</fareType></fare></fare><fare bpt=\"Y\" mas=\"1Y\"><cabin rbd=\"W\" cabin=\"M\" orginCabin=\"\" avl=\"9\"/><fare basis=\"WAVZ5KR\" ptc=\"CH\" tkd=\"CH25\"><fareType>RA</fareType></fare></fare></segFare></segFareGroup><traveler><ref>3</ref></traveler></paxFare><paxFare ptc=\"INF\"><amount fare=\"18000\" disFare=\"18000\" tax=\"40000\" fsc=\"17400\" disPartner=\"0\" tasf=\"0\" mTasf=\"0\" aTasf=\"0\"/><segFareGroup><segFare ref=\"1\"><fare bpt=\"N\" mas=\"\"><cabin rbd=\"V\" cabin=\"M\" orginCabin=\"\" avl=\"9\"/><fare basis=\"VAVZ5KR\" ptc=\"IN\" tkd=\"IN90\"><fareType>RA</fareType></fare></fare><fare bpt=\"Y\" mas=\"1Y\"><cabin rbd=\"V\" cabin=\"M\" orginCabin=\"\" avl=\"9\"/><fare basis=\"VAVZ5KR\" ptc=\"IN\" tkd=\"IN90\"><fareType>RA</fareType></fare></fare></segFare><segFare ref=\"2\"><fare bpt=\"N\" mas=\"\"><cabin rbd=\"W\" cabin=\"M\" orginCabin=\"\" avl=\"9\"/><fare basis=\"WAVZ5KR\" ptc=\"IN\" tkd=\"IN90\"><fareType>RA</fareType></fare></fare><fare bpt=\"Y\" mas=\"1Y\"><cabin rbd=\"W\" cabin=\"M\" orginCabin=\"\" avl=\"9\"/><fare basis=\"WAVZ5KR\" ptc=\"IN\" tkd=\"IN90\"><fareType>RA</fareType></fare></fare></segFare></segFareGroup><traveler><ref ind=\"1\">1</ref></traveler></paxFare></paxFareGroup><fareMessage><fare><pricingMessage><freeTextQualification><textSubjectQualifier>PEN</textSubjectQualifier><informationType>70</informationType></freeTextQualification><description>TICKETS ARE NON-REFUNDABLE</description></pricingMessage></fare><fare><pricingMessage><freeTextQualification><textSubjectQualifier>LTD</textSubjectQualifier><informationType>41</informationType></freeTextQualification><description>LAST TKT DTE</description><description>30OCT19</description><description> - DATE OF ORIGIN</description></pricingMessage></fare></fareMessage><fareRuleUrl/><promotionInfo><item><promotionId/><siteNum>2</siteNum><airCode>HX</airCode><tripType>RT</tripType><fareType/><fareBasis/><cabinClass>Y</cabinClass><bookingClass/><bookingClassExc/><paxType/><discount>0.0000</discount><commission>0.0000</commission><fareDiscount>0.0000</fareDiscount><incentive>0.0000</incentive><incentiveCode/><incentiveName/><fareTarget/><childDiscountYN>N</childDiscountYN><supplementaryServiceCode/><supplementaryServiceTitle/><codeshare>N</codeshare><specialYN>N</specialYN><promotionTL/><promotions><promotion promotionId=\"615906\" incentiveCode=\"ADT0124\" incentiveName=\"KB국민카드 할인\" fareTarget=\"성인/국민카드할인\" promotionTL=\"2019-12-31 17:00:00\"/><promotion promotionId=\"615908\" incentiveCode=\"ADT0136\" incentiveName=\"현대카드 할인\" fareTarget=\"성인/현대카드 할인\" promotionTL=\"2019-12-31 17:00:00\"/></promotions></item></promotionInfo></priceIndex>";
            string SXL = "<itinerary><segGroup ref=\"2001\" eft=\"0920\" ewt=\"0135\" mjc=\"HX\" cds=\"N\" nosp=\"2\" aif=\"\"><seg dlc=\"ICN\" alc=\"HKG\" ddt=\"2019-10-30 06:50\" ardt=\"2019-10-30 10:15\" mcc=\"HX\" occ=\"HX\" fln=\"647\" eqt=\"320\" stn=\"0\" etc=\"Y\" aif=\"\"/><seg dlc=\"HKG\" alc=\"BKK\" ddt=\"2019-10-30 11:50\" ardt=\"2019-10-30 14:10\" mcc=\"HX\" occ=\"HX\" fln=\"775\" eqt=\"333\" stn=\"0\" etc=\"Y\" aif=\"\"/></segGroup><segGroup ref=\"2001\" eft=\"1115\" ewt=\"0435\" mjc=\"HX\" cds=\"N\" nosp=\"2\" aif=\"\"><seg dlc=\"BKK\" alc=\"HKG\" ddt=\"2019-11-02 15:10\" ardt=\"2019-11-02 18:55\" mcc=\"HX\" occ=\"HX\" fln=\"776\" eqt=\"332\" stn=\"0\" etc=\"Y\" aif=\"\"/><seg dlc=\"HKG\" alc=\"ICN\" ddt=\"2019-11-02 23:30\" ardt=\"2019-11-03 04:25\" mcc=\"HX\" occ=\"HX\" fln=\"646\" eqt=\"320\" stn=\"0\" etc=\"Y\" aif=\"\"/></segGroup></itinerary>";

            return CheckSelectFareRS(SNM, FXL, SXL, "WEBSERVICE");
        }

        /// <summary>
        /// 운임확인(예약 전 선택 운임 체크)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="FXL">요금조회 결과 중 선택된 <priceIndex>~</priceIndex> XmlNode(segGroup는 제외)</param>
        /// <param name="SXL">선택한 여정을 <itinerary>~<itinerary>노드에 삽입한 XmlNode</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "운임확인(예약 전 선택 운임 체크)")]
        public XmlElement CheckSelectFareRS(int SNM, string FXL, string SXL, string RQT)
        {
            int ServiceNumber = 694;
            string LogGUID = cm.GetGUID;

            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청41", SqlDbType.VarChar, -1),
                        new SqlParameter("@요청42", SqlDbType.VarChar, -1)
                    };

                sqlParam[0].Value = ServiceNumber;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = RQT;
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = FXL;
                sqlParam[8].Value = SXL;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            //유효성 체크
            try
            {
                string VaFXL = FXL.ToUpper();
                string VaSXL = SXL.ToUpper();

                if (VaFXL.IndexOf("?XML") != -1 || VaFXL.IndexOf("!DOCTYPE") != -1)
                    throw new Exception("올바르지 않은 정보입니다.");

                if (VaSXL.IndexOf("?XML") != -1 || VaSXL.IndexOf("!DOCTYPE") != -1)
                    throw new Exception("올바르지 않은 정보입니다.");
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, 0, 0).ToErrors;
            }

            try
            {
                //여정정보
                XmlDocument XmlSeg = new XmlDocument();
                XmlSeg.LoadXml(SXL);

                //운임정보
                XmlDocument XmlFare = new XmlDocument();
                XmlFare.LoadXml(FXL);

                int i = 0;
                int SegNo = 1;
                int SegCount = XmlSeg.SelectNodes("itinerary/segGroup/seg").Count;

                int[] INO = new int[SegCount];
                string[] DTD = new string[SegCount];
                string[] DTT = new string[SegCount];
                string[] ARD = new string[SegCount];
                string[] ART = new string[SegCount];
                string[] DLC = new string[SegCount];
                string[] ALC = new string[SegCount];
                string[] MCC = new string[SegCount];
                string[] OCC = new string[SegCount];
                string[] FLN = new string[SegCount];
                string[] RBD = new string[SegCount];
                string[] PTC = { "ADT", "CHD", "INF" };
                int[] NOP = { 1, 0, 0 };

                foreach (XmlNode SegGroup in XmlSeg.SelectNodes("itinerary/segGroup"))
                {
                    foreach (XmlNode Seg in SegGroup.SelectNodes("seg"))
                    {
                        INO[i] = SegNo;
                        DTD[i] = Seg.Attributes.GetNamedItem("ddt").InnerText;
                        DTT[i] = Seg.Attributes.GetNamedItem("ddt").InnerText;
                        ARD[i] = Seg.Attributes.GetNamedItem("ardt").InnerText;
                        ART[i] = Seg.Attributes.GetNamedItem("ardt").InnerText;
                        DLC[i] = Seg.Attributes.GetNamedItem("dlc").InnerText;
                        ALC[i] = Seg.Attributes.GetNamedItem("alc").InnerText;
                        MCC[i] = Seg.Attributes.GetNamedItem("mcc").InnerText;
                        OCC[i] = Seg.Attributes.GetNamedItem("occ").InnerText;
                        FLN[i] = Seg.Attributes.GetNamedItem("fln").InnerText;
                        RBD[i] = XmlFare.SelectNodes("priceIndex/paxFareGroup/paxFare[1]/segFareGroup/segFare/fare")[i].SelectSingleNode("cabin").Attributes.GetNamedItem("rbd").InnerText;

                        i++;
                    }

                    SegNo++;
                }

                //운임타입
                int FareTypeRP = 0;
                int FareTypeRU = 0;
                int FareTypeRW = 0;
                string FAT = string.Empty;

                foreach (XmlNode FareType in XmlFare.SelectNodes("priceIndex/paxFareGroup/paxFare[1]/segFareGroup/segFare/fare/fare/fareType"))
                {
                    if (FareType.InnerText.Equals("RP"))
                        FareTypeRP++;
                    else if (FareType.InnerText.Equals("RB") || FareType.InnerText.Equals("RC") || FareType.InnerText.Equals("RX") || FareType.InnerText.Equals("RZ"))
                        FareTypeRW++;
                    else
                        FareTypeRU++;
                }

                if (FareTypeRP > 0 && (FareTypeRU > 0 || FareTypeRW > 0))
                    FAT = "RP,RU";
                else if (FareTypeRP > 0 && FareTypeRU.Equals(0) && FareTypeRW.Equals(0))
                    FAT = "RP";
                else if (FareTypeRP.Equals(0) && (FareTypeRU > 0 || FareTypeRW > 0))
                    FAT = "RU";
                else
                    FAT = "";

                //탑승객
                foreach (XmlNode PaxFare in XmlFare.SelectNodes("priceIndex/paxFareGroup/paxFare"))
                {
                    int PaxCount = PaxFare.SelectNodes("traveler/ref").Count;

                    switch (PaxFare.Attributes.GetNamedItem("ptc").InnerText)
                    {
                        case "CHD": NOP[1] = PaxCount; break;
                        case "INF": NOP[2] = PaxCount; break;
                        default: NOP[0] = PaxCount; break;
                    }
                }

                //프로모션
                string PMID = (XmlFare.SelectNodes("priceIndex/promotionInfo").Count > 0 && XmlFare.SelectNodes("priceIndex/promotionInfo/item").Count > 0) ? XmlFare.SelectSingleNode("priceIndex/promotionInfo/item/promotionId").InnerText : "";

                //운임조회
                XmlElement ResXml = SearchFareWithoutPNR(SNM, PMID, FAT, INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, PTC, NOP, LogGUID);
                XmlNode FareComparison = ResXml.InsertBefore(ResXml.OwnerDocument.CreateElement("fareComparison"), ResXml.FirstChild);
                XmlNode RequestData = ResXml.AppendChild(ResXml.OwnerDocument.CreateElement("requestData"));

                RequestData.AppendChild(ResXml.OwnerDocument.ImportNode(XmlSeg.FirstChild, true));
                RequestData.AppendChild(ResXml.OwnerDocument.ImportNode(XmlFare.FirstChild, true));

                //운임 비교
                if (XmlFare.SelectNodes("priceIndex/paxFareGroup/paxFare").Count.Equals(ResXml.SelectNodes("paxFareGroup/paxFare").Count))
                {
                    foreach (XmlNode oPaxFare in XmlFare.SelectNodes("priceIndex/paxFareGroup/paxFare"))
                    {
                        XmlNode PaxFare = ResXml.SelectSingleNode(String.Format("paxFareGroup/paxFare[@ptc='{0}']/amount", oPaxFare.Attributes.GetNamedItem("ptc").InnerText));

                        if (oPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText != PaxFare.Attributes.GetNamedItem("fare").InnerText)
                        {
                            FareComparison.InnerText = String.Format("{0}의 항공료가 일치하지 않습니다.", Common.PaxTypeText(oPaxFare.Attributes.GetNamedItem("ptc").InnerText));
                            break;
                        }
                        else
                        {
                            if (oPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tax").InnerText != PaxFare.Attributes.GetNamedItem("tax").InnerText)
                            {
                                FareComparison.InnerText = String.Format("{0}의 텍스가 일치하지 않습니다.", Common.PaxTypeText(oPaxFare.Attributes.GetNamedItem("ptc").InnerText));
                                break;
                            }
                            else
                            {
                                if (oPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fsc").InnerText != PaxFare.Attributes.GetNamedItem("fsc").InnerText)
                                {
                                    FareComparison.InnerText = String.Format("{0}의 유류할증료가 일치하지 않습니다.", Common.PaxTypeText(oPaxFare.Attributes.GetNamedItem("ptc").InnerText));
                                    break;
                                }
                                else
                                    FareComparison.InnerText = "OK";
                            }
                        }
                    }
                }
                else
                    FareComparison.InnerText = "운임수가 일치하지 않습니다.";

                //로그
                cm.XmlFileSave(ResXml, mc.Name, "CheckSelectFareRS", "N", LogGUID);

                return ResXml;
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, 0, 0).ToErrors;
            }
        }

        #endregion "운임확인(예약 전 선택 운임 체크)"

        #endregion "운임 및 텍스"

        #region "운임규정 조회"

        #region "SearchRule"

        //[WebMethod(Description = "운임규정 조회 테스트")]
        public XmlElement AAAASearchRuleRSTEST()
        {
            int SNM = 2;
            string SAC = "";
            string PMID = "";
            int[] INO = new Int32[3] { 1, 1, 2 };
            string[] DTD = new String[3] { "20190709", "20190709", "20190712" };
            string[] DTT = new String[3] { "0955", "2040", "0145" };
            string[] ARD = new String[3] { "20190709", "20190709", "20190712" };
            string[] ART = new String[3] { "1235", "2250", "0920" };
            string[] DLC = new String[3] { "ICN", "HKG", "BKK" };
            string[] ALC = new String[3] { "HKG", "BKK", "ICN" };
            string[] MCC = new String[3] { "7C", "HX", "7C" };
            string[] OCC = new String[3] { "7C", "HX", "7C" };
            string[] FLN = new String[3] { "2101", "779", "2206" };
            string[] RBD = new String[3] { "S", "Y", "S" };
            string PFG = "<paxFareGroup><paxFare ptc=\"ADT\"><amount fare=\"851900\" disFare=\"826300\" tax=\"76300\" fsc=\"32400\" disPartner=\"0\" tasf=\"10000\" mTasf=\"10000\" aTasf=\"0\"/><segFareGroup><segFare ref=\"1\"><fare bpt=\"Y\" mas=\"1Y\"><cabin rbd=\"S\" cabin=\"M\" avl=\"9\"/><fare basis=\"SOW17C\" ptc=\"ADT\" tkd=\"\"><fareType>RP</fareType></fare></fare><fare bpt=\"Y\" mas=\"1Y\"><cabin rbd=\"Y\" cabin=\"M\" avl=\"9\"/><fare basis=\"YOW\" ptc=\"ADT\" tkd=\"\"><fareType>RP</fareType></fare></fare></segFare><segFare ref=\"2\"><fare bpt=\"Y\" mas=\"1Y\"><cabin rbd=\"S\" cabin=\"M\" avl=\"9\"/><fare basis=\"SOW17C\" ptc=\"ADT\" tkd=\"\"><fareType>RP</fareType></fare></fare></segFare></segFareGroup><traveler><ref>1</ref></traveler></paxFare></paxFareGroup>";

            return SearchRuleRS(SNM, SAC, PMID, INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, PFG);
        }

        //[WebMethod(Description = "운임규정 조회 테스트(JSON)")]
        public string AAAAASearchRuleRSJSONTEST()
        {
            int SNM = 2;
            string SAC = "";
            int[] INO = new Int32[3] { 1, 1, 2 };
            string[] DTD = new String[3] { "20190709", "20190709", "20190712" };
            string[] DTT = new String[3] { "0955", "2040", "0145" };
            string[] ARD = new String[3] { "20190709", "20190709", "20190712" };
            string[] ART = new String[3] { "1235", "2250", "0920" };
            string[] DLC = new String[3] { "ICN", "HKG", "BKK" };
            string[] ALC = new String[3] { "HKG", "BKK", "ICN" };
            string[] MCC = new String[3] { "7C", "HX", "7C" };
            string[] OCC = new String[3] { "7C", "HX", "7C" };
            string[] FLN = new String[3] { "2101", "779", "2206" };
            string[] RBD = new String[3] { "S", "Y", "S" };
            string PFG = "<paxFareGroup><paxFare ptc=\"ADT\"><amount fare=\"851900\" disFare=\"826300\" tax=\"76300\" fsc=\"32400\" disPartner=\"0\" tasf=\"10000\" mTasf=\"10000\" aTasf=\"0\"/><segFareGroup><segFare ref=\"1\"><fare bpt=\"Y\" mas=\"1Y\"><cabin rbd=\"S\" cabin=\"M\" avl=\"9\"/><fare basis=\"SOW17C\" ptc=\"ADT\" tkd=\"\"><fareType>RP</fareType></fare></fare><fare bpt=\"Y\" mas=\"1Y\"><cabin rbd=\"Y\" cabin=\"M\" avl=\"9\"/><fare basis=\"YOW\" ptc=\"ADT\" tkd=\"\"><fareType>RP</fareType></fare></fare></segFare><segFare ref=\"2\"><fare bpt=\"Y\" mas=\"1Y\"><cabin rbd=\"S\" cabin=\"M\" avl=\"9\"/><fare basis=\"SOW17C\" ptc=\"ADT\" tkd=\"\"><fareType>RP</fareType></fare></fare></segFare></segFareGroup><traveler><ref>1</ref></traveler></paxFare></paxFareGroup>";
            string GUID = cm.GetGUID;

            return tas.AutomatedRuleTranslatorRS(SNM, SAC, INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, PFG, GUID);
        }

        /// <summary>
        /// 운임규정 조회
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="SAC">Stock 항공사코드</param>
        /// <param name="PMID">프로모션 번호</param>
        /// <param name="INO">여정번호</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="DTT">출발시간(HHMM)</param>
        /// <param name="ARD">도착일(YYYYMMDD)</param>
        /// <param name="ART">도착시간(HHMM)</param>
        /// <param name="DLC">출발지</param>
        /// <param name="ALC">도착지</param>
        /// <param name="MCC">마케팅항공사</param>
        /// <param name="OCC">운항항공사</param>
        /// <param name="FLN">편명</param>
        /// <param name="RBD">좌석클래스</param>
        /// <param name="PFG">paxFareGroup XmlNode</param>
        /// <returns></returns>
        [WebMethod(Description = "운임규정 조회")]
        public XmlElement SearchRuleRS(int SNM, string SAC, string PMID, int[] INO, string[] DTD, string[] DTT, string[] ARD, string[] ART, string[] DLC, string[] ALC, string[] MCC, string[] OCC, string[] FLN, string[] RBD, string PFG)
        {
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청10", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청11", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청12", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청13", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청41", SqlDbType.VarChar, -1)
                    };

                sqlParam[0].Value = 38;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = PMID;
                sqlParam[8].Value = String.Join("^", INO);
                sqlParam[9].Value = String.Join("^", DTD);
                sqlParam[10].Value = String.Join("^", DTT);
                sqlParam[11].Value = String.Join("^", ARD);
                sqlParam[12].Value = String.Join("^", ART);
                sqlParam[13].Value = String.Join("^", DLC);
                sqlParam[14].Value = String.Join("^", ALC);
                sqlParam[15].Value = String.Join("^", MCC);
                sqlParam[16].Value = String.Join("^", OCC);
                sqlParam[17].Value = String.Join("^", FLN);
                sqlParam[18].Value = String.Join("^", RBD);
                sqlParam[19].Value = SAC;
                sqlParam[20].Value = PFG;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            //유효성 체크
            try
            {
                string VaPFG = PFG.ToUpper();

                if (VaPFG.IndexOf("?XML") != -1 || VaPFG.IndexOf("!DOCTYPE") != -1)
                    throw new Exception("올바르지 않은 정보입니다.");
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 38, 0, 0).ToErrors;
            }
            
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            try
            {
                //결과
                XmlElement ResXml;
                XmlElement ResPricing;

                //네임스페이스
                XmlNamespaceManager xnMgr1 = null;
                XmlNamespaceManager xnMgr2 = null;
                XmlNamespaceManager xnMgr3 = null;
                XmlNamespaceManager xnMgrPricing = null;

                //한글규정 미호출여부
                string Gubun = "N";

                //운임항공사리스트
                string FareAirList = "/";

                //PaxFareGroup
                XmlDocument XmlPFG = new XmlDocument();
                XmlPFG.LoadXml(PFG);

                string PTC = XmlPFG.SelectSingleNode("paxFareGroup/paxFare").Attributes.GetNamedItem("ptc").InnerText;

                //도착지
                string Destination = "";

                for (int i = 0; i < INO.Length; i++)
                {
                    if (INO[i].Equals(INO[0]))
                        Destination = ALC[i];
                    else
                        break;
                }

                //### 01.세션생성 #####
                XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

                SID = Session.SelectSingleNode("session/sessionId").InnerText;
                SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                //### 02.Pricing(Fare_InformativePricingWithoutPNR) #####
                ResPricing = amd.InformativePricingWithoutPNRRuleRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, "N", XmlPFG.DocumentElement);

                //오류 결과일 경우 예외 처리
                xnMgrPricing = new XmlNamespaceManager(ResPricing.OwnerDocument.NameTable);
                xnMgrPricing.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_InformativePricingWithoutPNRRule"));

                //무료수하물
                XmlElement ResBaggage = ToModeSearchBaggageRS(INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, 1, 0, 0, ResPricing, xnMgrPricing);

                if (ResPricing.SelectNodes("m:errorGroup", xnMgrPricing).Count > 0)
                {
                    throw new Exception(ResPricing.SelectSingleNode("m:errorGroup/m:errorWarningDescription/m:freeText", xnMgrPricing).InnerText);
                }
                else
                {
                    //운임항공사리스트
                    foreach (XmlNode CompanyDetails in ResPricing.SelectNodes("m:mainGroup/m:pricingGroupLevelGroup/m:fareInfoGroup/m:segmentLevelGroup/m:segmentInformation/m:companyDetails", xnMgrPricing))
                    {
                        if (CompanyDetails.SelectNodes("m:marketingCompany", xnMgrPricing).Count > 0)
                            FareAirList += String.Concat(CompanyDetails.SelectSingleNode("m:marketingCompany", xnMgrPricing).InnerText, "/");
                    }
                    
                    //### 03.규정조회(한글)(Fare_GetRulesOfPricedItinerary) #####
                    ResXml = amd.GetRulesOfPricedItineraryRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), "KO");

                    //오류 결과일 경우 예외 처리
                    xnMgr1 = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                    xnMgr1.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_GetRulesOfPricedItinerary"));

                    if (ResXml.SelectNodes("m:errorInfoGroup", xnMgr1).Count > 0)
                    {
                        Gubun = "Y";
                    }
                    //else
                    //{
                    //    foreach (XmlNode DescriptionInfoGrp in ResXml.SelectNodes("m:mnrDescriptionInfoGrp", xnMgr1))
                    //    {
                    //        if (DescriptionInfoGrp.SelectNodes("m:mnrRulesInfoGrp/m:itemText[m:itemContent/m:textPortion/m:messageText='여행사로 확인 요망']", xnMgr1).Count > 1)
                    //        {
                    //            Gubun = "Y";
                    //            break;
                    //        }
                    //    }
                    //}

                    //TOPAS or MODETOUR 단에 포함된 규정만 한글규정으로 인정(2015-08-07,김지영과장요청)
                    int UseRule = 0;

                    foreach (XmlNode ItemGroup in ResXml.SelectNodes("m:mnrDescriptionInfoGrp", xnMgr1))
                    {
                        foreach (XmlNode RuleGroup in ItemGroup.SelectNodes("m:mnrRulesInfoGrp", xnMgr1))
                        {
                            if (RuleGroup.SelectNodes("m:itemText[starts-with(m:itemName/m:messageText, 'TOPAS') or starts-with(m:itemName/m:messageText, 'MODETOUR')]", xnMgr1).Count > 0)
                            {
                                UseRule++;
                            }
                        }
                    }

                    if (UseRule.Equals(0))
                        Gubun = "Y";
                }

                //한글규정이 없고, 전 여정의 항공사가 OZ일 경우에는 ART로 조회(2019-08-16,김지영매니저)
                bool UseART = false;

                if (Gubun.Equals("Y"))
                {
                    bool OnlyOZ = true;
                    foreach (string TmpMCC in MCC)
                    {
                        if (TmpMCC != "OZ")
                        {
                            OnlyOZ = false;
                            break;
                        }
                    }

                    if (OnlyOZ)
                        UseART = Common.IsOIDforART(AmadeusConfig.OfficeId(SNM));
                }

                if (UseART)
                {
                    //### 04. ART #####
                    XmlElement XmlMode = ToModeSearchRuleARTRS(SNM, new TopasAirService().AutomatedRuleTranslatorRS(SNM, SAC, INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, PFG, String.Concat(GUID, "-04")));

                    //### 05.프로모션 #####
                    if (cm.RequestInt(PMID) > 0 && XmlMode.SelectNodes("rule").Count > 0)
                        XmlMode = UpdatePromotionInfo(cm.RequestInt(PMID), XmlMode);

                    //### 06.무료수하물 #####
                    if (ResBaggage != null)
                    {
                        XmlMode.AppendChild((XmlNode)XmlMode.OwnerDocument.CreateElement("baggageInfo"));
                        XmlMode.SelectSingleNode("baggageInfo").AppendChild(XmlMode.OwnerDocument.ImportNode(ResBaggage.SelectSingleNode("flightInfo"), true));
                    }
                    
                    cm.XmlFileSave(XmlMode, mc.Name, "ToModeSearchRuleARTRS", "N", String.Concat(GUID, "-08"));

                    return XmlMode;
                }
                else
                {
                    //오류가 발생하거나 한글규정이 없을 경우 미니룰(영문규정) 출력
                    if (Gubun.Equals("Y"))
                    {
                        XmlDocument XmlDoc = new XmlDocument();
                        XmlDoc.LoadXml("<CheckRulesReply></CheckRulesReply>");

                        //### 04.MiniRuleGetFromPricingRS #####
                        XmlElement ResMiniRule = amd.MiniRuleGetFromPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"));

                        xnMgr2 = new XmlNamespaceManager(ResMiniRule.OwnerDocument.NameTable);
                        xnMgr2.AddNamespace("m", AmadeusConfig.NamespaceURL("MiniRule_GetFromPricing"));

                        if (ResMiniRule.SelectNodes("m:errorWarningGroup", xnMgr2).Count > 0)
                        {
                            new Exception(ResMiniRule.SelectSingleNode("m:errorWarningGroup/m:errorWarningDescription/m:freeText", xnMgr2).InnerText);
                        }
                        else
                        {
                            XmlDoc.SelectSingleNode("CheckRulesReply").AppendChild(XmlDoc.ImportNode(ResMiniRule, true));
                        }

                        //### 05.CheckRules #####
                        foreach (XmlNode FareComponent in ResPricing.SelectNodes("m:mainGroup/m:pricingGroupLevelGroup/m:fareInfoGroup/m:fareComponentDetailsGroup", xnMgrPricing))
                        {
                            string FcNumber = FareComponent.SelectSingleNode("m:fareComponentID/m:itemNumberDetails/m:number", xnMgrPricing).InnerText;

                            XmlElement ResRule = amd.CheckRulesRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-05_{1}_{2}_", GUID, FcNumber, 1), FcNumber, 3);

                            xnMgr3 = new XmlNamespaceManager(ResRule.OwnerDocument.NameTable);
                            xnMgr3.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_CheckRules"));

                            if (ResRule.SelectNodes("m:errorInfo", xnMgr3).Count > 0)
                            {
                                throw new Exception(ResRule.SelectSingleNode("m:errorInfo/m:errorFreeText/m:freeText", xnMgr3).InnerText);
                            }

                            XmlDoc.SelectSingleNode("CheckRulesReply").AppendChild(XmlDoc.ImportNode(ResRule, true));
                        }

                        ResXml = XmlDoc.DocumentElement;
                    }

                    //### 06.세션종료 #####
                    SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06"));

                    //### 07. 통합모드 #####
                    XmlElement XmlMode = UpdateRuleInfo(SNM, "Amadeus", PTC, DLC[0], Destination, MCC[0], ToModeSearchRuleRS(ResXml, xnMgr1, xnMgr2, xnMgr3, FareAirList, DTD[0]));

                    //### 08.프로모션 #####
                    if (cm.RequestInt(PMID) > 0 && XmlMode.SelectNodes("rule").Count > 0)
                        XmlMode = UpdatePromotionInfo(cm.RequestInt(PMID), XmlMode);

                    //### 09.무료수하물 #####
                    if (ResBaggage != null)
                    {
                        XmlMode.AppendChild((XmlNode)XmlMode.OwnerDocument.CreateElement("baggageInfo"));
                        XmlMode.SelectSingleNode("baggageInfo").AppendChild(XmlMode.OwnerDocument.ImportNode(ResBaggage.SelectSingleNode("flightInfo"), true));
                    }

                    cm.XmlFileSave(XmlMode, mc.Name, "ToModeSearchRuleRS", "N", String.Concat(GUID, "-08"));

                    //### 10.캐싱 #####
                    //try
                    //{
                    //    int ItNum = INO.Length;
                    //    string ECity = string.Empty;
                    //    string RTG = string.Empty;
                    //    string CRR = string.Empty;
                    //    string OCR = string.Empty;
                    //    string CLS = string.Empty;
                    //    string FLT = string.Empty;

                    //    for (int i = 0; i < ItNum; i++)
                    //    {
                    //        RTG += String.Concat(String.IsNullOrWhiteSpace(RTG) ? "" : "-", DLC[i]);
                    //        CRR += String.Concat(String.IsNullOrWhiteSpace(CRR) ? "" : "-", MCC[i]);
                    //        OCR += String.Concat(String.IsNullOrWhiteSpace(OCR) ? "" : "-", OCC[i]);
                    //        CLS += String.Concat(String.IsNullOrWhiteSpace(CLS) ? "" : "-", RBD[i]);
                    //        FLT += String.Concat(String.IsNullOrWhiteSpace(FLT) ? "" : "-", FLN[i]);

                    //        if (String.IsNullOrWhiteSpace(ECity) && INO[i].Equals(2))
                    //            ECity = DLC[i];
                    //    }

                    //    if (String.IsNullOrWhiteSpace(ECity))
                    //        ECity = ALC[(ItNum - 1)];

                    //    RTG += String.Concat("-", ALC[(ItNum - 1)]);

                    //    CheckRuleDB(DLC[0], ECity, MCC[0], DTD[0], ARD[(ItNum - 1)], RTG, CRR, OCR, CLS, FLT, ResXml, XmlMode, Gubun);
                    //}
                    //catch (Exception) { }

                    return ReorderRule(XmlMode);
                }
            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 38, 0, 0).ToErrors;
            }
        }

        /// <summary>
        /// 운임규정 조회
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="PNR">PNR</param>
        /// <returns></returns>
        [WebMethod(Description = "운임규정 조회")]
        public XmlElement SearchRulePNRRS(int SNM, string PNR)
        {
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 358;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = PNR;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //결과
                XmlElement ResXml;

                //네임스페이스
                XmlNamespaceManager xnMgr;
                XmlNamespaceManager xnMgr2 = null;
                XmlNamespaceManager xnMgr3 = null;

                //한글규정 미호출여부
                string Gubun = "N";

                //운임항공사리스트
                string FareAirList = "/";

                //출발일
                string DTD = String.Empty;

                //출발지
                string DLC = String.Empty;

                //도착지
                string ALC = String.Empty;

                //대표항공사
                string MJC = String.Empty;

                //### 01.세션생성 #####
                XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

                SID = Session.SelectSingleNode("session/sessionId").InnerText;
                SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                //### 02.PNR조회(PNR_Retrieve) #####
                ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                //출발일
                DTD = cm.ConvertToDateTime(ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR']", xnMgr)[0].SelectSingleNode("m:travelProduct/m:product/m:depDate", xnMgr).InnerText);

                //출발공항
                DLC = ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR']", xnMgr)[0].SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText;

                //도착공항
                ALC = ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR']", xnMgr)[ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR']", xnMgr).Count - 1].SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText;

                //대표항공사
                MJC = ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR']", xnMgr)[0].SelectSingleNode("m:travelProduct/m:companyDetail/m:identification", xnMgr).InnerText;

                //### 03.운임Pricing(Fare_PricePNRWithBookingClass) #####
                ResXml = amd.PricePNRWithBookingClassPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), ((ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo", xnMgr).Count > 0 && ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).InnerText : null), "", null);

                //오류 결과일 경우 예외 처리
                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassPricing"));

                if (ResXml.SelectNodes("m:applicationError", xnMgr).Count > 0)
                {
                    throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgr).InnerText);
                }
                else
                {
                    //운임항공사리스트
                    foreach (XmlNode ValidatingCarrier in ResXml.SelectNodes("m:fareList/m:validatingCarrier", xnMgr))
                    {
                        if (ValidatingCarrier.SelectNodes("m:carrierInformation", xnMgr).Count > 0)
                            FareAirList += String.Concat(ValidatingCarrier.SelectSingleNode("m:carrierInformation/m:carrierCode", xnMgr).InnerText, "/");
                    }
                    
                    //### 04.규정조회(한글)(Fare_GetRulesOfPricedItinerary) #####
                    ResXml = amd.GetRulesOfPricedItineraryRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"), "KO");

                    //오류 결과일 경우 예외 처리
                    xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                    xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_GetRulesOfPricedItinerary"));

                    //Gubun = (ResXml.SelectNodes("m:errorInfoGroup", xnMgr).Count > 0 || ResXml.SelectNodes("m:mnrDescriptionInfoGrp/m:mnrRulesInfoGrp/m:itemText[m:itemContent/m:textPortion/m:messageText='여행사로 확인 요망']", xnMgr).Count > 2) ? "Y" : "N";
                    Gubun = ResXml.SelectNodes("m:errorInfoGroup", xnMgr).Count > 0 ? "Y" : "N";
                }

                //### 05.세션종료 #####
                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05"));

                //오류가 발생하거나 한글규정이 없을 경우 영문규정 출력
                if (Gubun.Equals("Y"))
                {
                    //### 06.세션생성 #####
                    Session = amd.Authenticate(SNM, String.Concat(GUID, "-06"));

                    SID = Session.SelectSingleNode("session/sessionId").InnerText;
                    SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                    SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                    //### 07.PNR조회(PNR_Retrieve) #####
                    ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-07"), PNR);

                    xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                    xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                    //출발일
                    DTD = cm.ConvertToDateTime(ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR']", xnMgr)[0].SelectSingleNode("m:travelProduct/m:product/m:depDate", xnMgr).InnerText);

                    //출발공항
                    DLC = ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR']", xnMgr)[0].SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText;

                    //도착공항
                    ALC = ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR']", xnMgr)[ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR']", xnMgr).Count - 1].SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText;

                    //대표항공사
                    MJC = ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR']", xnMgr)[0].SelectSingleNode("m:travelProduct/m:companyDetail/m:identification", xnMgr).InnerText;

                    //### 08.운임Pricing(Fare_PricePNRWithBookingClass) #####
                    ResXml = amd.PricePNRWithBookingClassPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-08"), ((ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo", xnMgr).Count > 0 && ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).InnerText : null), "", null);

                    //오류 결과일 경우 예외 처리
                    xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                    xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassPricing"));

                    if (ResXml.SelectNodes("m:applicationError", xnMgr).Count > 0)
                    {
                        throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgr).InnerText);
                    }
                    else
                    {
                        XmlDocument XmlDoc = new XmlDocument();
                        XmlDoc.LoadXml("<CheckRulesReply></CheckRulesReply>");

                        //### 09.CheckRules #####
                        foreach (XmlNode FareComponent in ResXml.SelectNodes("m:fareList/m:fareComponentDetailsGroup", xnMgr))
                        {
                            string FcNumber = FareComponent.SelectSingleNode("m:fareComponentID/m:itemNumberDetails/m:number", xnMgr).InnerText;

                            //첫번째 규정 정보
                            XmlElement ResRule1 = amd.CheckRulesRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-09_{1}_{2}_", GUID, FcNumber, 1), FcNumber, 1);

                            xnMgr2 = new XmlNamespaceManager(ResRule1.OwnerDocument.NameTable);
                            xnMgr2.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_CheckRules"));

                            if (ResRule1.SelectNodes("m:errorInfo", xnMgr2).Count > 0)
                            {
                                throw new Exception(ResRule1.SelectSingleNode("m:errorInfo/m:errorFreeText/m:freeText", xnMgr2).InnerText);
                            }

                            //두번째 규정 정보
                            XmlElement ResRule2 = amd.CheckRulesRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-09_{1}_{2}_", GUID, FcNumber, 2), FcNumber, 2);

                            xnMgr3 = new XmlNamespaceManager(ResRule2.OwnerDocument.NameTable);
                            xnMgr3.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_CheckRules"));

                            if (ResRule2.SelectNodes("m:errorInfo", xnMgr3).Count > 0)
                            {
                                throw new Exception(ResRule2.SelectSingleNode("m:errorInfo/m:errorFreeText/m:freeText", xnMgr3).InnerText);
                            }

                            //규정 하나로 합치기
                            foreach (XmlNode TariffInfo in ResRule2.SelectNodes("m:tariffInfo", xnMgr3))
                            {
                                ResRule1.InsertBefore(ResRule1.OwnerDocument.ImportNode(TariffInfo, true), ResRule1.SelectSingleNode("m:flightDetails", xnMgr2));

                                XmlNode RuleSectionId = ResRule1.SelectSingleNode("m:flightDetails/m:travellerGrp/m:fareRulesDetails/m:ruleSectionId[last()]", xnMgr2);
                                ResRule1.SelectSingleNode("m:flightDetails/m:travellerGrp/m:fareRulesDetails", xnMgr2).AppendChild(RuleSectionId.CloneNode(false)).InnerText = (cm.RequestInt(RuleSectionId.InnerText) + 1).ToString();
                            }

                            XmlDoc.SelectSingleNode("CheckRulesReply").AppendChild(XmlDoc.ImportNode(ResRule1, true));
                        }

                        ResXml = XmlDoc.DocumentElement;
                        //xnMgr = xnMgr2;
                    }

                    //### 10.세션종료 #####
                    SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-10"));
                }

                //### 09. 통합모드 #####
                XmlElement XmlMode = UpdateRuleInfo(SNM, "Amadeus", "", DLC, ALC, MJC, ToModeSearchRuleRS(ResXml, xnMgr, null, xnMgr2, FareAirList, DTD));

                cm.XmlFileSave(XmlMode, mc.Name, "ToModeSearchRuleRS", "N", String.Concat(GUID, "-11"));

                return ReorderRule(XmlMode);
            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 358, 0, 0).ToErrors;
            }
        }

		/// <summary>
		/// SearchRuleRS를 통합용 XML구조로 치환
		/// </summary>
		/// <param name="ResXml">SearchRuleRS의 Data</param>
        /// <param name="xnMgr1">한글룰 XmlNamespaceManager</param>
        /// <param name="xnMgr2">미니룰 XmlNamespaceManager</param>
        /// <param name="xnMgr3">영문룰 XmlNamespaceManager</param>
        /// <param name="FareAirList">운임항공사 리스트</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
		/// <returns></returns>
        public XmlElement ToModeSearchRuleRS(XmlElement ResXml, XmlNamespaceManager xnMgr1, XmlNamespaceManager xnMgr2, XmlNamespaceManager xnMgr3, string FareAirList, string DTD)
		{
			XmlDocument XmlDoc = new XmlDocument();
			XmlDoc.Load(mc.XmlFullPath("SearchRuleRS"));

			XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

			XmlNode ResponseDetails = XmlDoc.SelectSingleNode("ResponseDetails");
			XmlNode Rule = ResponseDetails.SelectSingleNode("rule");
			XmlNode Item = Rule.SelectSingleNode("item");
			XmlNode FareInfos = ResponseDetails.SelectSingleNode("fareInfos");
			XmlNode FareInfo = FareInfos.SelectSingleNode("fareInfo");
			XmlNode NewRule;
			XmlNode NewItem;
			XmlNode NewFareInfo;
            string AirCode = String.IsNullOrWhiteSpace(FareAirList) ? "" : ((FareAirList.IndexOf('/') != -1) ? FareAirList.Split('/')[1].Trim() : FareAirList);
			string StrMessage = string.Empty;
			int RefNum = 1;

            if (ResXml.SelectNodes("m:mnrDescriptionInfoGrp", xnMgr1).Count > 0)
            {
                FareInfos.Attributes.GetNamedItem("gds").InnerText = "Amadeus";
                FareInfos.Attributes.GetNamedItem("ulc").InnerText = "KO";

                foreach (XmlNode ItemGroup in ResXml.SelectNodes("m:mnrDescriptionInfoGrp", xnMgr1))
                {
                    foreach (XmlNode RuleGroup in ItemGroup.SelectNodes("m:mnrRulesInfoGrp", xnMgr1))
                    {
                        NewRule = ResponseDetails.InsertBefore(Rule.CloneNode(false), Rule);
                        NewRule.Attributes.GetNamedItem("ref").InnerText = RuleGroup.SelectSingleNode("m:mnrFCInfoGrp/m:refInfo/m:referenceDetails[m:type='FC']/m:value", xnMgr1).InnerText;

                        foreach (XmlNode ItemText in RuleGroup.SelectNodes("m:itemText[not(starts-with(m:itemName/m:messageText, 'TOPAS')) and not(starts-with(m:itemName/m:messageText, 'MODETOUR'))]", xnMgr1))
                        {
                            NewItem = NewRule.AppendChild(Item.CloneNode(true));
                            NewItem.Attributes.GetNamedItem("ref").InnerText = ItemText.SelectSingleNode("m:itemNb/m:ruleSectionId", xnMgr1).InnerText;
                            NewItem.SelectSingleNode("name").InnerText = (ItemText.SelectSingleNode("m:itemName/m:messageText", xnMgr1).InnerText.Equals("NO SHOW")) ? "NO SHOW" : ItemText.SelectSingleNode("m:itemName/m:messageText", xnMgr1).InnerText.Replace(" ", "");
                            StrMessage = "";

                            foreach (XmlNode MessageText in ItemText.SelectNodes("m:itemContent/m:textPortion/m:messageText", xnMgr1))
                                StrMessage += MessageText.InnerText.Replace("[", "(").Replace("]", ")").Replace("&", "and").Replace("'", "＇").Replace("\"", "＇");

                            NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(StrMessage));
                        }
                    }
                }

                foreach (XmlNode FareComponentInfo in ResXml.SelectNodes("m:allFaresInfoGroup/m:fareProductInfoGroup/m:passengerTypeInfoGroup/m:fareComponentsInfoGroup/m:pricingUnitInfoGroup/m:fareComponentInfo", xnMgr1))
                {
                    NewFareInfo = FareInfos.AppendChild(FareInfo.CloneNode(true));
                    NewFareInfo.Attributes.GetNamedItem("ref").InnerText = FareComponentInfo.SelectSingleNode("m:componentIdentInfo/m:itemNumberDetails/m:number", xnMgr1).InnerText;
                    NewFareInfo.SelectSingleNode("item[@name='Origin']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='Destination']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='FareCategory']").InnerText = FareComponentInfo.SelectSingleNode("m:fareQualifierDetails/m:fareDetails/m:fareCategory", xnMgr1).InnerText;
                    NewFareInfo.SelectSingleNode("item[@name='FareClass']").InnerText = FareComponentInfo.SelectSingleNode("m:fareQualifierDetails/m:additionalFareDetails/m:secondRateClass", xnMgr1).InnerText;
                    NewFareInfo.SelectSingleNode("item[@name='AdvanceAfter']").InnerText = cm.ChangeTerm(FareComponentInfo.SelectSingleNode("m:quantitiesInfo/m:quantityDetails[m:qualifier='TAR']/m:unit", xnMgr1).InnerText, FareComponentInfo.SelectSingleNode("m:quantitiesInfo/m:quantityDetails[m:qualifier='TAR']/m:value", xnMgr1).InnerText);
                    NewFareInfo.SelectSingleNode("item[@name='AdvanceBefore']").InnerText = cm.ChangeTerm(FareComponentInfo.SelectSingleNode("m:quantitiesInfo/m:otherquantityDetails[m:qualifier='TBD']/m:unit", xnMgr1).InnerText, FareComponentInfo.SelectSingleNode("m:quantitiesInfo/m:otherquantityDetails[m:qualifier='TBD']/m:value", xnMgr1).InnerText);
                    NewFareInfo.SelectSingleNode("item[@name='MinStay']").InnerText = cm.ChangeTerm(FareComponentInfo.SelectSingleNode("m:quantitiesInfo/m:otherquantityDetails[m:qualifier='MNS']/m:unit", xnMgr1).InnerText, FareComponentInfo.SelectSingleNode("m:quantitiesInfo/m:otherquantityDetails[m:qualifier='MNS']/m:value", xnMgr1).InnerText);
                    NewFareInfo.SelectSingleNode("item[@name='MaxStay']").InnerText = cm.ChangeTerm(FareComponentInfo.SelectSingleNode("m:quantitiesInfo/m:otherquantityDetails[m:qualifier='MXS']/m:unit", xnMgr1).InnerText, FareComponentInfo.SelectSingleNode("m:quantitiesInfo/m:otherquantityDetails[m:qualifier='MXS']/m:value", xnMgr1).InnerText);
                    NewFareInfo.SelectSingleNode("item[@name='FareType']").InnerText = FareComponentInfo.SelectSingleNode("m:fareComponentMatchedSeqInfo/m:referenceDetails/m:type", xnMgr1).InnerText;
                    NewFareInfo.SelectSingleNode("item[@name='BookingClass']").InnerText = FareComponentInfo.SelectSingleNode("m:productInfo/m:bookingClassDetails/m:designator", xnMgr1).InnerText;
                    NewFareInfo.SelectSingleNode("item[@name='RuleNumber']").InnerText = FareComponentInfo.SelectSingleNode("m:fareComponentMatchedSeqInfo/m:referenceDetails/m:value", xnMgr1).InnerText;
                    NewFareInfo.SelectSingleNode("item[@name='TariffId']").InnerText = "";
                }
            }
            else if (xnMgr2 != null && ResXml.SelectNodes("m:MiniRule_GetFromPricingReply", xnMgr2).Count > 0)
            {
                FareInfos.Attributes.GetNamedItem("gds").InnerText = "Amadeus";
                FareInfos.Attributes.GetNamedItem("ulc").InnerText = "EN";

                string[] AP = new String[6] {"", "", "", "", "", ""};
                string[] MinStay = new String[2] {"", ""};
                string[] MaxStay = new String[3] {"", "", ""};
                string[] Reissue = new String[26] { "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""};
                string[] Refund = new String[14] { "", "", "", "", "", "", "", "", "", "", "", "", "", ""};
                
                int ArrIndex = 0;
                string TmpDate = string.Empty;
                string TmpCurrency = string.Empty;
                double TmpAmount = 0;
                double TmpRefund = 0;
                string RefundCurrency = string.Empty;
                double RefundAmount = 0;
                bool ExistRule = false;

                //왕복여부(여정이 하나 이상이면 왕복으로 판단)
                bool RoundTrip = (ResXml.SelectNodes("m:MiniRule_GetFromPricingReply/m:mnrByFareRecommendation/m:fareComponentInfo[m:segmentRefernce/m:reference[m:type='ST']/m:value!='1']", xnMgr2).Count > 0) ? true : false;

                foreach (XmlNode ResRule in ResXml.SelectNodes("m:MiniRule_GetFromPricingReply/m:mnrByFareRecommendation[m:paxRef/m:passengerReference[m:type='PA' or m:type='P']]", xnMgr2))
                {
                    foreach (XmlNode RulesInfoGrp in ResRule.SelectNodes("m:mnrRulesInfoGrp", xnMgr2))
                    {
                        string CategoryNumber = RulesInfoGrp.SelectSingleNode("m:mnrCatInfo/m:descriptionInfo/m:number", xnMgr2).InnerText;

                        #region "Category 5 : Advance Reservation/Ticketing (AP)(사전발권)"

                        if (CategoryNumber.Equals("5"))
                        {
                            if (RulesInfoGrp.SelectNodes("m:mnrCatInfo/m:processIndicator", xnMgr2).Count > 0 && RulesInfoGrp.SelectSingleNode("m:mnrCatInfo/m:processIndicator", xnMgr2).InnerText.Equals("ASS"))
                                AP[0] = "ASS";
                        
                            foreach (XmlNode DateInfoGrp in RulesInfoGrp.SelectNodes("m:mnrDateInfoGrp", xnMgr2))
                            {
                                foreach (XmlNode DateAndTimeDetails in DateInfoGrp.SelectNodes("m:dateInfo/m:dateAndTimeDetails", xnMgr2))
                                {
                                    ArrIndex = Common.MiniRuleArrIndex(CategoryNumber, DateAndTimeDetails.SelectSingleNode("m:qualifier", xnMgr2).InnerText);

                                    if (DateAndTimeDetails.SelectNodes("m:time", xnMgr2).Count.Equals(0) || DateAndTimeDetails.SelectSingleNode("m:time", xnMgr2).InnerText.Equals("0000"))
                                        TmpDate = cm.ConvertToDateTime(DateAndTimeDetails.SelectSingleNode("m:date", xnMgr2).InnerText);
                                    else
                                        TmpDate = String.Format("{0} {1}", cm.ConvertToDateTime(DateAndTimeDetails.SelectSingleNode("m:date", xnMgr2).InnerText), cm.ConvertToDateTime(DateAndTimeDetails.SelectSingleNode("m:time", xnMgr2).InnerText));

                                    if (String.IsNullOrWhiteSpace(AP[ArrIndex]))
                                        AP[ArrIndex] = TmpDate;
                                    else
                                    {
                                        if (ArrIndex.Equals(1) || ArrIndex.Equals(3))
                                        {
                                            if (cm.DateDiff("m", AP[ArrIndex], TmpDate) > 0)
                                                AP[ArrIndex] = TmpDate;
                                        }
                                        else
                                        {
                                            if (cm.DateDiff("m", AP[ArrIndex], TmpDate) < 0)
                                                AP[ArrIndex] = TmpDate;
                                        }
                                    }
                                }
                            }
                        }

                        #endregion

                        #region "Category 6 : Minimum Stay (최소체류일)"

                        if (CategoryNumber.Equals("6"))
                        {
                            if (RulesInfoGrp.SelectNodes("m:mnrCatInfo/m:processIndicator", xnMgr2).Count > 0 && RulesInfoGrp.SelectSingleNode("m:mnrCatInfo/m:processIndicator", xnMgr2).InnerText.Equals("ASS"))
                                MinStay[0] = "ASS";

                            foreach (XmlNode DateInfoGrp in RulesInfoGrp.SelectNodes("m:mnrDateInfoGrp", xnMgr2))
                            {
                                foreach (XmlNode DateAndTimeDetails in DateInfoGrp.SelectNodes("m:dateInfo/m:dateAndTimeDetails", xnMgr2))
                                {
                                    ArrIndex = Common.MiniRuleArrIndex(CategoryNumber, DateAndTimeDetails.SelectSingleNode("m:qualifier", xnMgr2).InnerText);

                                    if (DateAndTimeDetails.SelectNodes("m:time", xnMgr2).Count.Equals(0) || DateAndTimeDetails.SelectSingleNode("m:time", xnMgr2).InnerText.Equals("0000"))
                                        TmpDate = cm.ConvertToDateTime(DateAndTimeDetails.SelectSingleNode("m:date", xnMgr2).InnerText);
                                    else
                                        TmpDate = String.Format("{0} {1}", cm.ConvertToDateTime(DateAndTimeDetails.SelectSingleNode("m:date", xnMgr2).InnerText), cm.ConvertToDateTime(DateAndTimeDetails.SelectSingleNode("m:time", xnMgr2).InnerText));

                                    if (String.IsNullOrWhiteSpace(MinStay[ArrIndex]))
                                        MinStay[ArrIndex] = TmpDate;
                                    else
                                    {
                                        if (cm.DateDiff("m", MinStay[ArrIndex], TmpDate) > 0)
                                            MinStay[ArrIndex] = TmpDate;
                                    }
                                }
                            }
                        }

                        #endregion

                        #region "Category 7 : Maximum Stay (최대체류일)"

                        if (CategoryNumber.Equals("7"))
                        {
                            if (RulesInfoGrp.SelectNodes("m:mnrCatInfo/m:processIndicator", xnMgr2).Count > 0 && RulesInfoGrp.SelectSingleNode("m:mnrCatInfo/m:processIndicator", xnMgr2).InnerText.Equals("ASS"))
                                MaxStay[0] = "ASS";

                            foreach (XmlNode DateInfoGrp in RulesInfoGrp.SelectNodes("m:mnrDateInfoGrp", xnMgr2))
                            {
                                foreach (XmlNode DateAndTimeDetails in DateInfoGrp.SelectNodes("m:dateInfo/m:dateAndTimeDetails", xnMgr2))
                                {
                                    ArrIndex = Common.MiniRuleArrIndex(CategoryNumber, DateAndTimeDetails.SelectSingleNode("m:qualifier", xnMgr2).InnerText);

                                    if (DateAndTimeDetails.SelectNodes("m:time", xnMgr2).Count.Equals(0) || DateAndTimeDetails.SelectSingleNode("m:time", xnMgr2).InnerText.Equals("0000"))
                                        TmpDate = cm.ConvertToDateTime(DateAndTimeDetails.SelectSingleNode("m:date", xnMgr2).InnerText);
                                    else
                                        TmpDate = String.Format("{0} {1}", cm.ConvertToDateTime(DateAndTimeDetails.SelectSingleNode("m:date", xnMgr2).InnerText), cm.ConvertToDateTime(DateAndTimeDetails.SelectSingleNode("m:time", xnMgr2).InnerText));

                                    if (String.IsNullOrWhiteSpace(MaxStay[ArrIndex]))
                                        MaxStay[ArrIndex] = TmpDate;
                                    else
                                    {
                                        if (ArrIndex.Equals(1))
                                        {
                                            if (cm.DateDiff("m", MaxStay[ArrIndex], TmpDate) < 0)
                                                MaxStay[ArrIndex] = TmpDate;
                                        }
                                        else
                                        {
                                            if (cm.DateDiff("m", MaxStay[ArrIndex], TmpDate) > 0)
                                                MaxStay[ArrIndex] = TmpDate;
                                        }
                                    }
                                }
                            }
                        }

                        #endregion

                        #region "Category 16/31 : Revalidation/Reissue (날짜변경/재발행)"

                        if (CategoryNumber.Equals("31"))
                        {
                            if (RulesInfoGrp.SelectNodes("m:mnrCatInfo/m:processIndicator", xnMgr2).Count > 0 && RulesInfoGrp.SelectSingleNode("m:mnrCatInfo/m:processIndicator", xnMgr2).InnerText.Equals("ASS"))
                                Reissue[0] = "ASS";

                            foreach (XmlNode DateInfoGrp in RulesInfoGrp.SelectNodes("m:mnrDateInfoGrp", xnMgr2))
                            {
                                foreach (XmlNode DateAndTimeDetails in DateInfoGrp.SelectNodes("m:dateInfo/m:dateAndTimeDetails", xnMgr2))
                                {
                                    ArrIndex = Common.MiniRuleArrIndex(CategoryNumber, DateAndTimeDetails.SelectSingleNode("m:qualifier", xnMgr2).InnerText);

                                    if (DateAndTimeDetails.SelectNodes("m:time", xnMgr2).Count.Equals(0) || DateAndTimeDetails.SelectSingleNode("m:time", xnMgr2).InnerText.Equals("0000"))
                                        TmpDate = cm.ConvertToDateTime(DateAndTimeDetails.SelectSingleNode("m:date", xnMgr2).InnerText);
                                    else
                                        TmpDate = String.Format("{0} {1}", cm.ConvertToDateTime(DateAndTimeDetails.SelectSingleNode("m:date", xnMgr2).InnerText), cm.ConvertToDateTime(DateAndTimeDetails.SelectSingleNode("m:time", xnMgr2).InnerText));

                                    if (String.IsNullOrWhiteSpace(Reissue[ArrIndex]))
                                        Reissue[ArrIndex] = TmpDate;
                                    else
                                    {
                                        if (cm.DateDiff("m", Reissue[ArrIndex], TmpDate) < 0)
                                            Reissue[ArrIndex] = TmpDate;
                                    }
                                }
                            }

                            foreach (XmlNode MonInfoGrp in RulesInfoGrp.SelectNodes("m:mnrMonInfoGrp", xnMgr2))
                            {
                                foreach (XmlNode MonetaryDetails in MonInfoGrp.SelectNodes("m:monetaryInfo/m:monetaryDetails[m:amount!='0' and m:amount!='0.00']", xnMgr2))
                                {
                                    TmpAmount = cm.RequestDouble(MonetaryDetails.SelectSingleNode("m:amount", xnMgr2).InnerText);

                                    if (TmpAmount > 0)
                                    {
                                        ArrIndex = Common.MiniRuleArrIndex(CategoryNumber, MonetaryDetails.SelectSingleNode("m:typeQualifier", xnMgr2).InnerText);
                                        TmpCurrency = MonetaryDetails.SelectSingleNode("m:currency", xnMgr2).InnerText;

                                        if (String.IsNullOrWhiteSpace(Reissue[ArrIndex]))
                                            Reissue[ArrIndex] = String.Format("{0}|{1}", TmpCurrency, TmpAmount);
                                        else
                                        {

                                            string[] TmpReissue = Reissue[ArrIndex].Split('|');

                                            if (TmpReissue[0].Trim().Equals("KRW"))
                                            {
                                                if (TmpCurrency.Equals("KRW"))
                                                {
                                                    if (cm.RequestDouble(TmpReissue[1]) < TmpAmount)
                                                        Reissue[ArrIndex] = String.Format("{0}|{1}", TmpCurrency, TmpAmount);
                                                }
                                                else
                                                    Reissue[ArrIndex] = String.Format("{0}|{1}", TmpCurrency, TmpAmount);
                                            }
                                            else
                                            {
                                                if (!TmpCurrency.Equals("KRW"))
                                                {
                                                    if (cm.RequestDouble(TmpReissue[1]) < TmpAmount)
                                                        Reissue[ArrIndex] = String.Format("{0}|{1}", TmpCurrency, TmpAmount);
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            foreach (XmlNode RestriAppInfoGrp in RulesInfoGrp.SelectNodes("m:mnrRestriAppInfoGrp", xnMgr2))
                            {
                                foreach (XmlNode StatusInformation in RestriAppInfoGrp.SelectNodes("m:mnrRestriAppInfo/m:statusInformation", xnMgr2))
                                {
                                    ArrIndex = Common.MiniRuleArrIndex(CategoryNumber, StatusInformation.SelectSingleNode("m:indicator", xnMgr2).InnerText);

                                    if (String.IsNullOrWhiteSpace(Reissue[ArrIndex]) || Reissue[ArrIndex] != "0")
                                        Reissue[ArrIndex] = StatusInformation.SelectSingleNode("m:action", xnMgr2).InnerText;
                                }
                            }
                        }

                        #endregion

                        #region "Category 16/33 : Refund (환불규정)"

                        if (CategoryNumber.Equals("33"))
                        {
                            if (RulesInfoGrp.SelectNodes("m:mnrCatInfo/m:processIndicator", xnMgr2).Count > 0 && RulesInfoGrp.SelectSingleNode("m:mnrCatInfo/m:processIndicator", xnMgr2).InnerText.Equals("ASS"))
                                Refund[0] = "ASS";

                            foreach (XmlNode DateInfoGrp in RulesInfoGrp.SelectNodes("m:mnrDateInfoGrp", xnMgr2))
                            {
                                foreach (XmlNode DateAndTimeDetails in DateInfoGrp.SelectNodes("m:dateInfo/m:dateAndTimeDetails", xnMgr2))
                                {
                                    ArrIndex = Common.MiniRuleArrIndex(CategoryNumber, DateAndTimeDetails.SelectSingleNode("m:qualifier", xnMgr2).InnerText);

                                    if (DateAndTimeDetails.SelectNodes("m:time", xnMgr2).Count.Equals(0) || DateAndTimeDetails.SelectSingleNode("m:time", xnMgr2).InnerText.Equals("0000"))
                                        TmpDate = cm.ConvertToDateTime(DateAndTimeDetails.SelectSingleNode("m:date", xnMgr2).InnerText);
                                    else
                                        TmpDate = String.Format("{0} {1}", cm.ConvertToDateTime(DateAndTimeDetails.SelectSingleNode("m:date", xnMgr2).InnerText), cm.ConvertToDateTime(DateAndTimeDetails.SelectSingleNode("m:time", xnMgr2).InnerText));

                                    if (String.IsNullOrWhiteSpace(Refund[ArrIndex]))
                                        Refund[ArrIndex] = TmpDate;
                                    else
                                    {
                                        if (cm.DateDiff("m", Refund[ArrIndex], TmpDate) < 0)
                                            Refund[ArrIndex] = TmpDate;
                                    }
                                }
                            }

                            foreach (XmlNode MonInfoGrp in RulesInfoGrp.SelectNodes("m:mnrMonInfoGrp", xnMgr2))
                            {
                                foreach (XmlNode MonetaryDetails in MonInfoGrp.SelectNodes("m:monetaryInfo/m:monetaryDetails[m:amount!='0' and m:amount!='0.00']", xnMgr2))
                                {
                                    TmpAmount = cm.RequestDouble(MonetaryDetails.SelectSingleNode("m:amount", xnMgr2).InnerText);

                                    if (TmpAmount > 0)
                                    {
                                        ArrIndex = Common.MiniRuleArrIndex(CategoryNumber, MonetaryDetails.SelectSingleNode("m:typeQualifier", xnMgr2).InnerText);
                                        TmpCurrency = MonetaryDetails.SelectSingleNode("m:currency", xnMgr2).InnerText;
                                        
                                        if (String.IsNullOrWhiteSpace(Refund[ArrIndex]))
                                            Refund[ArrIndex] = String.Format("{0}|{1}", TmpCurrency, TmpAmount);
                                        else
                                        {
                                            string[] TmpRefundInfo = Refund[ArrIndex].Split('|');

                                            if (TmpRefundInfo[0].Trim().Equals("KRW"))
                                            {
                                                if (TmpCurrency.Equals("KRW"))
                                                {
                                                    if (cm.RequestDouble(TmpRefundInfo[1]) < TmpAmount)
                                                        Refund[ArrIndex] = String.Format("{0}|{1}", TmpCurrency, TmpAmount);
                                                }
                                                else
                                                    Refund[ArrIndex] = String.Format("{0}|{1}", TmpCurrency, TmpAmount);
                                            }
                                            else
                                            {
                                                if (!TmpCurrency.Equals("KRW"))
                                                {
                                                    if (cm.RequestDouble(TmpRefundInfo[1]) < TmpAmount)
                                                        Refund[ArrIndex] = String.Format("{0}|{1}", TmpCurrency, TmpAmount);
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            foreach (XmlNode RestriAppInfoGrp in RulesInfoGrp.SelectNodes("m:mnrRestriAppInfoGrp", xnMgr2))
                            {
                                foreach (XmlNode StatusInformation in RestriAppInfoGrp.SelectNodes("m:mnrRestriAppInfo/m:statusInformation", xnMgr2))
                                {
                                    ArrIndex = Common.MiniRuleArrIndex(CategoryNumber, StatusInformation.SelectSingleNode("m:indicator", xnMgr2).InnerText);

                                    if (String.IsNullOrWhiteSpace(Refund[ArrIndex]) || Refund[ArrIndex] != "0")
                                        Refund[ArrIndex] = StatusInformation.SelectSingleNode("m:action", xnMgr2).InnerText;
                                }
                            }
                        }

                        #endregion
                    }
                }

                NewRule = ResponseDetails.InsertBefore(Rule.CloneNode(false), FareInfos);
                NewRule.Attributes.GetNamedItem("ref").InnerText = RefNum.ToString();

                #region "Category 5 : Advance Reservation/Ticketing (AP)(사전발권)"

                StrMessage = "";

                //귀국일오픈
                //NewItem = NewRule.AppendChild(Item.CloneNode(true));
                //NewItem.Attributes.GetNamedItem("ref").InnerText = "5";
                //NewItem.SelectSingleNode("name").InnerText = "귀국일오픈";
                //NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection((AP[0].Equals("ASS")) ? "가능" : "자세한 규정은 여행사 문의"));

                if (String.IsNullOrWhiteSpace(AP[2]))
                {
                    if (!String.IsNullOrWhiteSpace(AP[1]))
                        StrMessage = String.Concat(AP[1], " 이후부터 예약 가능");
                }
                else
                    StrMessage = String.Concat(AP[2], " 까지만 예약 가능");

                if (String.IsNullOrWhiteSpace(AP[4]))
                {
                    if (!String.IsNullOrWhiteSpace(AP[3]))
                        StrMessage += String.Concat(String.IsNullOrWhiteSpace(StrMessage) ? "" : "<BR>", AP[3], " 이후부터 발권 가능");
                }
                else
                    StrMessage += String.Format("{0}출발 전 {1} 까지 발권 완료해야 함", String.IsNullOrWhiteSpace(StrMessage) ? "" : "<BR>", AP[4]);

                if (!String.IsNullOrWhiteSpace(AP[5]))
                    StrMessage += String.Format("{0}예약 후 {1} 까지 발권 완료해야 함", String.IsNullOrWhiteSpace(StrMessage) ? "" : "<BR>", AP[5]);

                NewItem = NewRule.AppendChild(Item.CloneNode(true));
                NewItem.Attributes.GetNamedItem("ref").InnerText = "5";
                NewItem.SelectSingleNode("name").InnerText = Common.SetCategoryTitle1("5");
                NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(String.IsNullOrWhiteSpace(StrMessage) ? "자세한 규정은 여행사 문의" : StrMessage.TrimEnd()));
                
                #endregion

                #region "Category 6 : Minimum Stay (최소체류일)"

                StrMessage = "";

                if (MinStay[0].Equals("ASS"))
                    StrMessage = "제한없음";

                if (!String.IsNullOrWhiteSpace(MinStay[1]))
                    StrMessage += String.Format("{0}{1}", String.IsNullOrWhiteSpace(StrMessage) ? "" : "<BR>", MinStay[1]);

                NewItem = NewRule.AppendChild(Item.CloneNode(true));
                NewItem.Attributes.GetNamedItem("ref").InnerText = "6";
                NewItem.SelectSingleNode("name").InnerText = Common.SetCategoryTitle1("6");
                NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(String.IsNullOrWhiteSpace(StrMessage) ? "자세한 규정은 여행사 문의" : StrMessage.TrimEnd()));
                
                #endregion

                #region "Category 7 : Maximum Stay (최대체류일)"

                StrMessage = "";

                if (MaxStay[0].Equals("ASS"))
                    StrMessage = "제한없음";

                if (!String.IsNullOrWhiteSpace(MaxStay[1]))
                    StrMessage += String.Format("{0}{1} 까지 여행을 종료해야 함", String.IsNullOrWhiteSpace(StrMessage) ? "" : "<BR>", MaxStay[1]);

                if (!String.IsNullOrWhiteSpace(MaxStay[2]))
                    StrMessage += String.Format("{0}{1} 전에 여행을 시작해야 함", String.IsNullOrWhiteSpace(StrMessage) ? "" : "<BR>", MaxStay[2]);

                NewItem = NewRule.AppendChild(Item.CloneNode(true));
                NewItem.Attributes.GetNamedItem("ref").InnerText = "7";
                NewItem.SelectSingleNode("name").InnerText = Common.SetCategoryTitle1("7");
                NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(String.IsNullOrWhiteSpace(StrMessage) ? "자세한 규정은 여행사 문의" : StrMessage.TrimEnd()));
                
                #endregion

                #region "Category 16/31 : Revalidation (날짜변경)"

                //Revalidation
                //출발전
                //    최소 패널티 금액 : BDM,BDF, 
                //    최대 패널티 금액 : BDX,BDG,BDT,
                //출발전(노쇼)
                //    최소 패널티 금액 : BNI
                //    최대 패널티 금액 : BNU,BNH,BNL,BNC
                //출발후
                //    최소 패널티 금액 : ADI,ADH
                //    최대 패널티 금액 : ADU,ADL,ADC
                //출발후(노쇼)
                //    최소 패널티 금액 : ANI,ANH
                //    최대 패널티 금액 : ANU,ANL,ANC

                StrMessage = "";
                ExistRule = false;

                //FFT항목의 값이 '1'인 경우에는 '문의요망' 처리(2016-09-08,김지영과장)(2016-09-09,김지영과장 체크로직 삭제요청)
                //if (Reissue[25].Equals("0"))
                //{
                    if (Reissue[0].Equals("ASS"))
                    {
                        StrMessage += "불가<BR>";
                        ExistRule = true;
                    }

                    if (!String.IsNullOrWhiteSpace(Reissue[1]))
                        StrMessage += String.Format("출발전 티켓 유효기간 : {0}<BR>", Reissue[1]);

                    //if (!String.IsNullOrWhiteSpace(Reissue[4]))
                    //    StrMessage += String.Format("출발전 노쇼(사전 예약취소 안함)인 경우 티켓 유효기간 : {0}<BR>", Reissue[4]);

                    if (!String.IsNullOrWhiteSpace(Reissue[5]))
                        StrMessage += String.Format("출발후 티켓 유효기간 : {0}<BR>", Reissue[5]);

                    //if (!String.IsNullOrWhiteSpace(Reissue[6]))
                    //    StrMessage += String.Format("출발후 노쇼(사전 예약취소 안함)인 경우 티켓 유효기간 : {0}", Reissue[6]);

                    if (Reissue[2].Equals("0"))
                    {
                        StrMessage += "출발전 날짜변경 불가<BR>";
                        ExistRule = true;
                    }
                    else
                    {
                        if (!String.IsNullOrWhiteSpace(Reissue[11]))
                        {
                            string[] TmpReissue = Reissue[11].Split('|');

                            if (TmpReissue[0].Trim().Equals("KRW"))
                                StrMessage += String.Format("출발전 날짜변경 패널티 : {0:#,###}원<BR>", Common.MiniRulePenalty(cm.RequestDouble(TmpReissue[1]), AirCode, RoundTrip, DTD));
                            else
                                StrMessage += String.Format("출발전 날짜변경 패널티 : {0} {1:#,###}<BR>", TmpReissue[0], Common.MiniRulePenalty(cm.RequestDouble(TmpReissue[1]), AirCode, RoundTrip, DTD));

                            ExistRule = true;
                        }
                        else
                        {
                            StrMessage += "출발전 제한적 변경허용(출발변경불가)<BR>";
                        }
                    }

                    //if (!String.IsNullOrWhiteSpace(Reissue[9]) && !Reissue[9].Equals("0"))
                    //{
                    //    StrMessage += "출발전 가족 사망으로 인한 패널티 일부 또는 전체 면제 가능<BR>";
                    //    ExistRule = true;
                    //}

                    //if (Reissue[13].Equals("0"))
                    //{
                    //    StrMessage += "출발전 노쇼(사전 예약취소 안함)인 경우 날짜변경 불가<BR>";
                    //    ExistRule = true;
                    //}
                    //else
                    //{
                    //    if (!String.IsNullOrWhiteSpace(Reissue[16]))
                    //    {
                    //        string[] TmpReissue = Reissue[16].Split('|');

                    //        if (TmpReissue[0].Trim().Equals("KRW"))
                    //            StrMessage += String.Format("출발전 노쇼(사전 예약취소 안함)인 경우 날짜변경 패널티 : {0:#,###}원<BR>", Common.MiniRulePenalty(cm.RequestDouble(TmpReissue[1]), AirCode, RoundTrip));
                    //        else
                    //            StrMessage += String.Format("출발전 노쇼(사전 예약취소 안함)인 경우 날짜변경 패널티 : {0} {1:#,###}<BR>", TmpReissue[0], Common.MiniRulePenalty(cm.RequestDouble(TmpReissue[1]), AirCode, RoundTrip));

                    //        ExistRule = true;
                    //    }
                    //}

                    //if (!String.IsNullOrWhiteSpace(Reissue[12]) && !Reissue[12].Equals("0"))
                    //{
                    //    StrMessage += "출발전 노쇼(사전 예약취소 안함)인 경우 가족 사망으로 인한 패널티 일부 또는 전체 면제 가능<BR>";
                    //    ExistRule = true;
                    //}

                    if (Reissue[7].Equals("0"))
                    {
                        StrMessage += "출발후 날짜변경 불가<BR>";
                        ExistRule = true;
                    }
                    else
                    {
                        if (!String.IsNullOrWhiteSpace(Reissue[19]))
                        {
                            string[] TmpReissue = Reissue[19].Split('|');

                            if (TmpReissue[0].Trim().Equals("KRW"))
                                StrMessage += String.Format("출발후 날짜변경 패널티 : {0:#,###}원<BR>", Common.MiniRulePenalty(cm.RequestDouble(TmpReissue[1]), AirCode, RoundTrip, DTD));
                            else
                                StrMessage += String.Format("출발후 날짜변경 패널티 : {0} {1:#,###}<BR>", TmpReissue[0], Common.MiniRulePenalty(cm.RequestDouble(TmpReissue[1]), AirCode, RoundTrip, DTD));

                            ExistRule = true;
                        }
                        else
                        {
                            StrMessage += "출발후 제한적 변경허용(출발변경불가)<BR>";
                        }
                    }

                    //if (!String.IsNullOrWhiteSpace(Reissue[17]) && !Reissue[17].Equals("0"))
                    //{
                    //    StrMessage += "출발후 가족 사망으로 인한 패널티 일부 또는 전체 면제 가능<BR>";
                    //    ExistRule = true;
                    //}

                    //if (Reissue[21].Equals("0"))
                    //{
                    //    StrMessage += "출발후 노쇼(사전 예약취소 안함)인 경우 날짜변경 불가<BR>";
                    //    ExistRule = true;
                    //}
                    //else
                    //{
                    //    if (!String.IsNullOrWhiteSpace(Reissue[24]))
                    //    {
                    //        string[] TmpReissue = Reissue[24].Split('|');

                    //        if (TmpReissue[0].Trim().Equals("KRW"))
                    //            StrMessage += String.Format("출발후 노쇼(사전 예약취소 안함)인 경우 날짜변경 패널티 : {0:#,###}원<BR>", Common.MiniRulePenalty(cm.RequestDouble(TmpReissue[1]), AirCode, RoundTrip));
                    //        else
                    //            StrMessage += String.Format("출발후 노쇼(사전 예약취소 안함)인 경우 날짜변경 패널티 : {0} {1:#,###}<BR>", TmpReissue[0], Common.MiniRulePenalty(cm.RequestDouble(TmpReissue[1]), AirCode, RoundTrip));

                    //        ExistRule = true;
                    //    }
                    //}

                    //if (!String.IsNullOrWhiteSpace(Reissue[20]) && !Reissue[20].Equals("0"))
                    //{
                    //    StrMessage += "출발후 노쇼(사전 예약취소 안함)인 경우 가족 사망으로 인한 패널티 일부 또는 전체 면제 가능<BR>";
                    //    ExistRule = true;
                    //}

                    if (!ExistRule)
                        StrMessage += "자세한 규정은 여행사 문의";

                    //GA(가루다항공)인 경우 내용이 없을 경우 별도 내용으로 출력(2016-10-25,김지영과장)
                    if (AirCode.Equals("GA"))
                    {
                        if (String.IsNullOrWhiteSpace(StrMessage))
                            StrMessage = "변경시 특가운임인 경우 변경 차액과 수수료가 발생될 수 있으며, 자세한 내용은 담당자로 문의";
                        else
                            StrMessage = StrMessage.Replace("자세한 규정은 여행사 문의", "변경시 특가운임인 경우 변경 차액과 수수료가 발생될 수 있으며, 자세한 내용은 담당자로 문의");
                    }

                    //다음 내용 무조건 노출(2017-04-05,김지영차장)
                    if (String.IsNullOrWhiteSpace(StrMessage))
                        StrMessage = "※일부 항공사는 구간당 패널티가 징수 됩니다. (문의요망)";
                    else
                        StrMessage += "<BR>※일부 항공사는 구간당 패널티가 징수 됩니다. (문의요망)";
                //}

                NewItem = NewRule.AppendChild(Item.CloneNode(true));
                NewItem.Attributes.GetNamedItem("ref").InnerText = "31";
                NewItem.SelectSingleNode("name").InnerText = "날짜변경";
                NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(String.IsNullOrWhiteSpace(StrMessage) ? "자세한 규정은 여행사 문의" : StrMessage.TrimEnd()));

                #endregion

                #region "Category 16/31 : Reissue (재발행)"

                //Reissue
                //출발전
                //    최소 패널티 금액 : BDI,BDH, 
                //    최대 패널티 금액 : BDU,BDL,BDC,
                //출발전(노쇼)
                //    최소 패널티 금액 : BNM,BNF,
                //    최대 패널티 금액 : BNX,BNG,BNT
                //출발후
                //    최소 패널티 금액 : ADM,ADF,
                //    최대 패널티 금액 : ADX,ADG,ADT,
                //출발후(노쇼)
                //    최소 패널티 금액 : ANM,ANF,
                //    최대 패널티 금액 : ANX,ANG,ANT

                StrMessage = "";
                ExistRule = false;

                //FFT항목의 값이 '1'인 경우에는 '문의요망' 처리(2016-09-08,김지영과장)(2016-09-09,김지영과장 체크로직 삭제요청)
                //if (Reissue[25].Equals("0"))
                //{
                    if (Reissue[0].Equals("ASS"))
                    {
                        StrMessage += "불가<BR>";
                        ExistRule = true;
                    }

                    if (!String.IsNullOrWhiteSpace(Reissue[1]))
                        StrMessage += String.Format("출발전 티켓 유효기간 : {0}<BR>", Reissue[1]);

                    //if (!String.IsNullOrWhiteSpace(Reissue[4]))
                    //    StrMessage += String.Format("출발전 노쇼(사전 예약취소 안함)인 경우 티켓 유효기간 : {0}<BR>", Reissue[4]);

                    if (!String.IsNullOrWhiteSpace(Reissue[5]))
                        StrMessage += String.Format("출발후 티켓 유효기간 : {0}<BR>", Reissue[5]);

                    //if (!String.IsNullOrWhiteSpace(Reissue[6]))
                    //    StrMessage += String.Format("출발후 노쇼(사전 예약취소 안함)인 경우 티켓 유효기간 : {0}<BR>", Reissue[6]);

                    if (Reissue[3].Equals("0"))
                    {
                        StrMessage += "출발전 재발행 불가<BR>";
                        ExistRule = true;
                    }
                    else
                    {
                        if (!String.IsNullOrWhiteSpace(Reissue[10]))
                        {
                            string[] TmpReissue = Reissue[10].Split('|');

                            if (TmpReissue[0].Trim().Equals("KRW"))
                                StrMessage += String.Format("출발전 재발행 패널티 : {0:#,###}원<BR>", Common.MiniRulePenalty(cm.RequestDouble(TmpReissue[1]), AirCode, RoundTrip, DTD));
                            else
                                StrMessage += String.Format("출발전 재발행 패널티 : {0} {1:#,###}<BR>", TmpReissue[0], Common.MiniRulePenalty(cm.RequestDouble(TmpReissue[1]), AirCode, RoundTrip, DTD));

                            ExistRule = true;
                        }
                    }

                    if (!String.IsNullOrWhiteSpace(Reissue[9]) && !Reissue[9].Equals("0"))
                    {
                        StrMessage += "출발전 가족 사망으로 인한 패널티 일부 또는 전체 면제 가능<BR>";
                        ExistRule = true;
                    }

                    //if (Reissue[14].Equals("0"))
                    //{
                    //    StrMessage += "출발전 노쇼(사전 예약취소 안함)인 경우 재발행 불가<BR>";
                    //    ExistRule = true;
                    //}
                    //else
                    //{
                    //    if (!String.IsNullOrWhiteSpace(Reissue[15]))
                    //    {
                    //        string[] TmpReissue = Reissue[15].Split('|');

                    //        if (TmpReissue[0].Trim().Equals("KRW"))
                    //            StrMessage += String.Format("출발전 노쇼(사전 예약취소 안함)인 경우 재발행 패널티 : {0:#,###}원<BR>", Common.MiniRulePenalty(cm.RequestDouble(TmpReissue[1]), AirCode, RoundTrip));
                    //        else
                    //            StrMessage += String.Format("출발전 노쇼(사전 예약취소 안함)인 경우 재발행 패널티 : {0} {1:#,###}<BR>", TmpReissue[0], Common.MiniRulePenalty(cm.RequestDouble(TmpReissue[1]), AirCode, RoundTrip));

                    //        ExistRule = true;
                    //    }
                    //}

                    //if (!String.IsNullOrWhiteSpace(Reissue[12]) && !Reissue[12].Equals("0"))
                    //{
                    //    StrMessage += "출발전 노쇼(사전 예약취소 안함)인 경우 가족 사망으로 인한 패널티 일부 또는 전체 면제 가능<BR>";
                    //    ExistRule = true;
                    //}

                    if (Reissue[8].Equals("0"))
                    {
                        StrMessage += "출발후 재발행 불가<BR>";
                        ExistRule = true;
                    }
                    else
                    {
                        if (!String.IsNullOrWhiteSpace(Reissue[18]))
                        {
                            string[] TmpReissue = Reissue[18].Split('|');

                            if (TmpReissue[0].Trim().Equals("KRW"))
                                StrMessage += String.Format("출발후 재발행 패널티 : {0:#,###}원<BR>", Common.MiniRulePenalty(cm.RequestDouble(TmpReissue[1]), AirCode, RoundTrip, DTD));
                            else
                                StrMessage += String.Format("출발후 재발행 패널티 : {0} {1:#,###}<BR>", TmpReissue[0], Common.MiniRulePenalty(cm.RequestDouble(TmpReissue[1]), AirCode, RoundTrip, DTD));

                            ExistRule = true;
                        }
                    }

                    if (!String.IsNullOrWhiteSpace(Reissue[17]) && !Reissue[17].Equals("0"))
                    {
                        StrMessage += "출발후 가족 사망으로 인한 패널티 일부 또는 전체 면제 가능<BR>";
                        ExistRule = true;
                    }

                    //if (Reissue[22].Equals("0"))
                    //{
                    //    StrMessage += "출발후 노쇼(사전 예약취소 안함)인 경우 재발행 불가<BR>";
                    //    ExistRule = true;
                    //}
                    //else
                    //{
                    //    if (!String.IsNullOrWhiteSpace(Reissue[23]))
                    //    {
                    //        string[] TmpReissue = Reissue[23].Split('|');

                    //        if (TmpReissue[0].Trim().Equals("KRW"))
                    //            StrMessage += String.Format("출발후 노쇼(사전 예약취소 안함)인 경우 재발행 패널티 : {0:#,###}원<BR>", Common.MiniRulePenalty(cm.RequestDouble(TmpReissue[1]), AirCode, RoundTrip));
                    //        else
                    //            StrMessage += String.Format("출발후 노쇼(사전 예약취소 안함)인 경우 재발행 패널티 : {0} {1:#,###}<BR>", TmpReissue[0], Common.MiniRulePenalty(cm.RequestDouble(TmpReissue[1]), AirCode, RoundTrip));

                    //        ExistRule = true;
                    //    }
                    //}

                    //if (!String.IsNullOrWhiteSpace(Reissue[20]) && !Reissue[20].Equals("0"))
                    //{
                    //    StrMessage += "출발후 노쇼(사전 예약취소 안함)인 경우 가족 사망으로 인한 패널티 일부 또는 전체 면제 가능<BR>";
                    //    ExistRule = true;
                    //}

                    if (!ExistRule)
                        StrMessage += "자세한 규정은 여행사 문의";

                    //GA(가루다항공)인 경우 내용이 없을 경우 별도 내용으로 출력(2016-10-25,김지영과장)    
                    if (AirCode.Equals("GA"))
                    {
                        if (String.IsNullOrWhiteSpace(StrMessage))
                            StrMessage = "변경시 수수료가 발생될 수 있음(특가운임의 경우 추가 차액금 발생 됨). 자세한 내용은 담당자로 문의";
                        else
                            StrMessage = StrMessage.Replace("자세한 규정은 여행사 문의", "변경시 수수료가 발생될 수 있음(특가운임의 경우 추가 차액금 발생 됨). 자세한 내용은 담당자로 문의");
                    }

                    //다음 내용 무조건 노출(2017-04-05,김지영차장)
                    if (String.IsNullOrWhiteSpace(StrMessage))
                        StrMessage = "※일부 항공사는 구간당 패널티가 징수 됩니다. (문의요망)";
                    else
                        StrMessage += "<BR>※일부 항공사는 구간당 패널티가 징수 됩니다. (문의요망)";
                //}

                NewItem = NewRule.AppendChild(Item.CloneNode(true));
                NewItem.Attributes.GetNamedItem("ref").InnerText = "31";
                NewItem.SelectSingleNode("name").InnerText = "재발행";
                NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(String.IsNullOrWhiteSpace(StrMessage) ? "자세한 규정은 여행사 문의" : StrMessage.TrimEnd()));
                
                #endregion

                #region "Category 16/33 : Refund (환불규정)"

                //출발전
                //    최소 패널티 금액 : BDM,BDF, 
                //    최대 패널티 금액 : BDX,BDG,BDT,
                //출발전(노쇼)
                //    최소 패널티 금액 : BNM,BNF,
                //    최대 패널티 금액 : BNX,BNG,BNT
                //출발후
                //    최소 패널티 금액 : ADM,ADF,
                //    최대 패널티 금액 : ADX,ADG,ADT,
                //출발후(노쇼)
                //    최소 패널티 금액 : ANM,ANF,
                //    최대 패널티 금액 : ANX,ANG,ANT

                StrMessage = "";
                ExistRule = false;

                //FFT항목의 값이 '1'인 경우에는 '문의요망' 처리(2016-09-08,김지영과장)(2016-09-09,김지영과장 체크로직 삭제요청)
                //if (Refund[13].Equals("0"))
                //{
                    if (Refund[0].Equals("ASS"))
                    {
                        StrMessage += "환불 수수료 없음<BR>";
                        ExistRule = true;
                    }

                    if (!String.IsNullOrWhiteSpace(Refund[1]))
                        StrMessage += String.Format("출발전 티켓 유효기간 : {0}<BR>", Refund[1]);

                    //if (!String.IsNullOrWhiteSpace(Refund[2]))
                    //    StrMessage += String.Format("출발전 노쇼(사전 예약취소 안함)인 경우 티켓 유효기간 : {0}<BR>", Refund[2]);

                    if (!String.IsNullOrWhiteSpace(Refund[3]))
                        StrMessage += String.Format("출발후 티켓 유효기간 : {0}<BR>", Refund[3]);

                    //if (!String.IsNullOrWhiteSpace(Refund[4]))
                    //    StrMessage += String.Format("출발후 노쇼(사전 예약취소 안함)인 경우 티켓 유효기간 : {0}<BR>", Refund[4]);

                    if (Refund[5].Equals("0"))
                    {
                        StrMessage += "출발전 환불 불가<BR>";
                        ExistRule = true;
                    }
                    else
                    {
                        if (!String.IsNullOrWhiteSpace(Refund[6]))
                        {
                            string[] TmpRefundInfo = Refund[6].Split('|');

                            TmpRefund = Common.MiniRulePenalty(cm.RequestDouble(TmpRefundInfo[1]), AirCode, RoundTrip, DTD);

                            if (TmpRefundInfo[0].Trim().Equals("KRW"))
                                StrMessage += String.Format("출발전 환불 패널티 : {0:#,###}원<BR>", TmpRefund);
                            else
                                StrMessage += String.Format("출발전 환불 패널티 : {0} {1:#,###}<BR>", TmpRefundInfo[0]);

                            RefundCurrency = TmpRefundInfo[0];
                            RefundAmount = TmpRefund;
                            ExistRule = true;
                        }
                        else
                        {
                            StrMessage += "출발전 : 항공사 수수료 별도문의 요망<BR>";
                            RefundCurrency = "";
                            RefundAmount = 0;
                        }
                    }
                    
                    //if (Refund[7].Equals("0"))
                    //{
                    //    StrMessage += "출발전 노쇼(사전 예약취소 안함)인 경우 환불 불가<BR>";
                    //    ExistRule = true;
                    //}
                    //else
                    //{
                    //    if (!String.IsNullOrWhiteSpace(Refund[8]))
                    //    {
                    //        string[] TmpRefundInfo = Refund[8].Split('|');

                    //        if (TmpRefundInfo[0].Trim().Equals("KRW"))
                    //            StrMessage += String.Format("출발전 노쇼(사전 예약취소 안함)인 경우 환불 패널티 : {0:#,###}원<BR>", Common.MiniRulePenalty(cm.RequestDouble(TmpRefundInfo[1]), AirCode, RoundTrip));
                    //        else
                    //            StrMessage += String.Format("출발전 노쇼(사전 예약취소 안함)인 경우 환불 패널티 : {0} {1:#,###}<BR>", TmpRefundInfo[0], Common.MiniRulePenalty(cm.RequestDouble(TmpRefundInfo[1]), AirCode, RoundTrip));

                    //        ExistRule = true;
                    //    }
                    //}
                    
                    if (Refund[9].Equals("0"))
                    {
                        StrMessage += "출발후 환불 불가<BR>";
                        ExistRule = true;
                    }
                    else
                    {
                        if (!String.IsNullOrWhiteSpace(Refund[10]))
                        {
                            string[] TmpRefundInfo = Refund[10].Split('|');

                            TmpRefund = Common.MiniRulePenalty(cm.RequestDouble(TmpRefundInfo[1]), AirCode, RoundTrip, DTD);

                            if (TmpRefundInfo[0].Trim().Equals("KRW"))
                                StrMessage += String.Format("출발후 환불 패널티 : {0:#,###}원<BR>", TmpRefund);
                            else
                                StrMessage += String.Format("출발후 환불 패널티 : {0} {1:#,###}<BR>", TmpRefundInfo[0], TmpRefund);

                            if (RefundCurrency.Equals(TmpRefundInfo[0]) && RefundAmount > 0)
                                RefundAmount += TmpRefund;
                            else
                            {
                                RefundCurrency = "";
                                RefundAmount = 0;
                            }

                            ExistRule = true;
                        }
                        else
                        {
                            StrMessage += "출발후 : 항공사 수수료 별도문의 요망<BR>";
                            RefundCurrency = "";
                            RefundAmount = 0;
                        }
                    }
                    
                    //if (Refund[11].Equals("0"))
                    //{
                    //    StrMessage += "출발후 노쇼(사전 예약취소 안함)인 경우 환불 불가<BR>";
                    //    ExistRule = true;
                    //}
                    //else
                    //{
                    //    if (!String.IsNullOrWhiteSpace(Refund[12]))
                    //    {
                    //        string[] TmpRefund = Refund[12].Split('|');

                    //        if (TmpRefund[0].Trim().Equals("KRW"))
                    //            StrMessage += String.Format("출발후 노쇼(사전 예약취소 안함)인 경우 환불 패널티 : {0:#,###}원<BR>", Common.MiniRulePenalty(cm.RequestDouble(TmpRefund[1]), AirCode, RoundTrip));
                    //        else
                    //            StrMessage += String.Format("출발후 노쇼(사전 예약취소 안함)인 경우 환불 패널티 : {0} {1:#,###}<BR>", TmpRefund[0], Common.MiniRulePenalty(cm.RequestDouble(TmpRefund[1]), AirCode, RoundTrip));

                    //        ExistRule = true;
                    //    }
                    //}
                    
                    if (!ExistRule)
                    {
                        StrMessage += "자세한 규정은 여행사 문의";
                    }
                    else if (!String.IsNullOrWhiteSpace(RefundCurrency) && Common.RefundSumAir(FareAirList))
                    {
                        if (!Common.KoreaOfAirport(ResXml.SelectSingleNode("m:MiniRule_GetFromPricingReply/m:mnrByFareRecommendation[1]/m:fareComponentInfo[1]/m:originAndDestination/m:origin", xnMgr2).InnerText))
                        {
                            if (StrMessage.IndexOf("불가") != -1)
                                StrMessage = "환불 불가";
                            else
                            {
                                if (RefundCurrency.Equals("KRW"))
                                    StrMessage = String.Format("환불 패널티 : {0:#,###}원<BR>", RefundAmount);
                                else
                                    StrMessage = String.Format("환불 패널티 : {0} {1:#,###}<BR>", RefundCurrency, RefundAmount);
                            }
                        }
                    }
                //}

                //VJ항공은 환불규정에 '출발 7일 이내 환불불가' 무조건 추가(2016-09-26,김지영과장)
                if (AirCode.Equals("VJ"))
                {
                    if (!String.IsNullOrWhiteSpace(StrMessage))
                        StrMessage += "<BR>";
                    
                    StrMessage += "출발 7일 이내 환불 불가";
                }

                //GA(가루다항공)인 경우 내용이 없을 경우 별도 내용으로 출력(2016-10-25,김지영과장)
                if (AirCode.Equals("GA"))
                {
                    if (String.IsNullOrWhiteSpace(StrMessage))
                        StrMessage = "환불시 수수료가 발생될 수 있음. 자세한 내용은 담당자로 문의";
                    else
                        StrMessage = StrMessage.Replace("자세한 규정은 여행사 문의", "환불시 수수료가 발생될 수 있음. 자세한 내용은 담당자로 문의");
                }

                //다음 내용 무조건 노출(2017-04-05,김지영차장)
                if (String.IsNullOrWhiteSpace(StrMessage))
                    StrMessage = "※일부 항공사는 구간당 패널티가 징수 됩니다. (문의요망)";
                else
                    StrMessage += "<BR>※일부 항공사는 구간당 패널티가 징수 됩니다. (문의요망)";

                NewItem = NewRule.AppendChild(Item.CloneNode(true));
                NewItem.Attributes.GetNamedItem("ref").InnerText = "33";
                NewItem.SelectSingleNode("name").InnerText = Common.SetCategoryTitle1("33");
                NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(String.IsNullOrWhiteSpace(StrMessage) ? "자세한 규정은 여행사 문의" : StrMessage.TrimEnd()));
                
                #endregion

                #region "NO-SHOW"

                NewItem = NewRule.AppendChild(Item.CloneNode(true));
                NewItem.Attributes.GetNamedItem("ref").InnerText = "";
                NewItem.SelectSingleNode("name").InnerText = String.Format("NO-SHOW{0}(사전예약취소안함)", Environment.NewLine);
                NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection("출발전 사전예약취소를 안 할 경우, 항공사규정에 따라 환불불가, 변경불가, 재사용이 불가할 수 있으며, 패널티가 부과될 수 있음<BR>*항공사별 사전예약취소 기준이 상이하므로 문의요망"));

                #endregion

                #region "영문규정 : 증빙서류"

                string RuleRef = string.Empty;
                StrMessage = "";

                foreach (XmlNode ResRule in ResXml.SelectNodes("m:Fare_CheckRulesReply", xnMgr3))
                {
                    if (ResRule.SelectNodes("m:tariffInfo", xnMgr3).Count > 0)
                    {
                        foreach (XmlNode TariffInfo in ResRule.SelectNodes("m:tariffInfo[m:fareRuleInfo/m:ruleCategoryCode!='(9)']", xnMgr3))
                        {
                            if (TariffInfo.SelectSingleNode("m:fareRuleText[1]/m:freeText", xnMgr3).InnerText.Substring(0, 2).Equals("EL"))
                            {
                                RuleRef = cm.ExtractNumber(TariffInfo.SelectSingleNode("m:fareRuleInfo/m:ruleCategoryCode", xnMgr3).InnerText).ToString();
                                
                                for (int i = 1; i < TariffInfo.SelectNodes("m:fareRuleText", xnMgr3).Count; i++)
                                {
                                    string StrRuleText = TariffInfo.SelectNodes("m:fareRuleText", xnMgr3)[i].SelectSingleNode("m:freeText", xnMgr3).InnerText.Trim();

                                    if (!(i.Equals(1) && String.IsNullOrWhiteSpace(StrRuleText)))
                                        StrMessage += String.Concat(String.IsNullOrWhiteSpace(StrMessage) ? "" : " ", cm.IsRuleText(StrRuleText) ? StrRuleText : "<BR>");
                                }
                            }
                        }
                    }

                    NewFareInfo = FareInfos.AppendChild(FareInfo.CloneNode(true));
                    NewFareInfo.Attributes.GetNamedItem("ref").InnerText = (RefNum++).ToString();

                    foreach (XmlNode FlightDetails in ResRule.SelectNodes("m:flightDetails", xnMgr3))
                    {
                        NewFareInfo.SelectSingleNode("item[@name='Origin']").InnerText = FlightDetails.SelectSingleNode("m:odiGrp/m:originDestination/m:origin", xnMgr3).InnerText;
                        NewFareInfo.SelectSingleNode("item[@name='Destination']").InnerText = FlightDetails.SelectSingleNode("m:odiGrp/m:originDestination/m:destination", xnMgr3).InnerText;
                        NewFareInfo.SelectSingleNode("item[@name='FareCategory']").InnerText = "";
                        NewFareInfo.SelectSingleNode("item[@name='FareClass']").InnerText = "";
                        NewFareInfo.SelectSingleNode("item[@name='AdvanceAfter']").InnerText = "";
                        NewFareInfo.SelectSingleNode("item[@name='AdvanceBefore']").InnerText = "";
                        NewFareInfo.SelectSingleNode("item[@name='MinStay']").InnerText = "";
                        NewFareInfo.SelectSingleNode("item[@name='MaxStay']").InnerText = "";
                        NewFareInfo.SelectSingleNode("item[@name='FareType']").InnerText = "";
                        NewFareInfo.SelectSingleNode("item[@name='BookingClass']").InnerText = "";
                        NewFareInfo.SelectSingleNode("item[@name='RuleNumber']").InnerText = (FlightDetails.SelectNodes("m:travellerGrp/m:travellerIdentRef/m:referenceDetails[m:type='RU']", xnMgr3).Count > 0) ? FlightDetails.SelectSingleNode("m:travellerGrp/m:travellerIdentRef/m:referenceDetails[m:type='RU']/m:value", xnMgr3).InnerText : "";
                        NewFareInfo.SelectSingleNode("item[@name='TariffId']").InnerText = (FlightDetails.SelectNodes("m:travellerGrp/m:fareRulesDetails", xnMgr3).Count > 0) ? FlightDetails.SelectSingleNode("m:travellerGrp/m:fareRulesDetails/m:tariffClassId", xnMgr3).InnerText : "";
                    }
                }

                if (!String.IsNullOrWhiteSpace(StrMessage))
                {
                    NewItem = NewRule.AppendChild(Item.CloneNode(true));
                    NewItem.Attributes.GetNamedItem("ref").InnerText = RuleRef;
                    NewItem.SelectSingleNode("name").InnerText = "증빙서류";
                    NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(Common.ReplaceProof(StrMessage, AirCode).Replace(". ", ".<BR>")));
                }

                #endregion "영문규정 : 증빙서류"

                #region "무료수하물 추가"

                NewItem = NewRule.AppendChild(Item.CloneNode(true));
                NewItem.Attributes.GetNamedItem("ref").InnerText = "";
                NewItem.SelectSingleNode("name").InnerText = "무료수하물";
                NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection("좌석등급 및 노선에 따라 상이하므로 항공권 구입전 해당 항공사로 문의 바랍니다."));

                #endregion "무료수하물 추가"
            }
            else if (xnMgr3 != null && ResXml.SelectNodes("m:Fare_CheckRulesReply", xnMgr3).Count > 0)
            {
                FareInfos.Attributes.GetNamedItem("gds").InnerText = "Amadeus";
                FareInfos.Attributes.GetNamedItem("ulc").InnerText = "EN";

                foreach (XmlNode ResRule in ResXml.SelectNodes("m:Fare_CheckRulesReply", xnMgr3))
                {
                    NewRule = ResponseDetails.InsertBefore(Rule.CloneNode(false), FareInfos);
                    NewRule.Attributes.GetNamedItem("ref").InnerText = RefNum.ToString();

                    if (ResRule.SelectNodes("m:tariffInfo", xnMgr3).Count > 0)
                    {
                        foreach (XmlNode TariffInfo in ResRule.SelectNodes("m:tariffInfo[m:fareRuleInfo/m:ruleCategoryCode!='(9)']", xnMgr3))
                        {
                            NewItem = NewRule.AppendChild(Item.CloneNode(true));
                            NewItem.Attributes.GetNamedItem("ref").InnerText = cm.ExtractNumber(TariffInfo.SelectSingleNode("m:fareRuleInfo/m:ruleCategoryCode", xnMgr3).InnerText).ToString();
                            NewItem.SelectSingleNode("name").InnerText = Common.SetCategoryTitle2(TariffInfo.SelectSingleNode("m:fareRuleText[1]/m:freeText", xnMgr3).InnerText);
                            StrMessage = "";

                            for (int i = 1; i < TariffInfo.SelectNodes("m:fareRuleText", xnMgr3).Count; i++)
                            {
                                string StrRuleText = TariffInfo.SelectNodes("m:fareRuleText", xnMgr3)[i].SelectSingleNode("m:freeText", xnMgr3).InnerText.Trim();

                                if (!(i.Equals(1) && String.IsNullOrWhiteSpace(StrRuleText)))
                                    StrMessage += String.Concat(String.IsNullOrWhiteSpace(StrMessage) ? "" : " ", cm.IsRuleText(StrRuleText) ? StrRuleText : Environment.NewLine);
                            }

                            if (NewItem.SelectSingleNode("name").InnerText.Equals("증빙서류"))
                            {
                                StrMessage = Common.ReplaceProof(StrMessage, AirCode);
                            }

                            NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(StrMessage.Replace(". ", String.Concat(".", Environment.NewLine))));
                        }
                    }

                    NewFareInfo = FareInfos.AppendChild(FareInfo.CloneNode(true));
                    NewFareInfo.Attributes.GetNamedItem("ref").InnerText = (RefNum++).ToString();

                    foreach (XmlNode FlightDetails in ResRule.SelectNodes("m:flightDetails", xnMgr3))
                    {
                        NewFareInfo.SelectSingleNode("item[@name='Origin']").InnerText = FlightDetails.SelectSingleNode("m:odiGrp/m:originDestination/m:origin", xnMgr3).InnerText;
                        NewFareInfo.SelectSingleNode("item[@name='Destination']").InnerText = FlightDetails.SelectSingleNode("m:odiGrp/m:originDestination/m:destination", xnMgr3).InnerText;
                        NewFareInfo.SelectSingleNode("item[@name='FareCategory']").InnerText = "";
                        NewFareInfo.SelectSingleNode("item[@name='FareClass']").InnerText = "";
                        NewFareInfo.SelectSingleNode("item[@name='AdvanceAfter']").InnerText = "";
                        NewFareInfo.SelectSingleNode("item[@name='AdvanceBefore']").InnerText = "";
                        NewFareInfo.SelectSingleNode("item[@name='MinStay']").InnerText = "";
                        NewFareInfo.SelectSingleNode("item[@name='MaxStay']").InnerText = "";
                        NewFareInfo.SelectSingleNode("item[@name='FareType']").InnerText = "";
                        NewFareInfo.SelectSingleNode("item[@name='BookingClass']").InnerText = "";
                        NewFareInfo.SelectSingleNode("item[@name='RuleNumber']").InnerText = (FlightDetails.SelectNodes("m:travellerGrp/m:travellerIdentRef/m:referenceDetails[m:type='RU']", xnMgr3).Count > 0) ? FlightDetails.SelectSingleNode("m:travellerGrp/m:travellerIdentRef/m:referenceDetails[m:type='RU']/m:value", xnMgr3).InnerText : "";
                        NewFareInfo.SelectSingleNode("item[@name='TariffId']").InnerText = (FlightDetails.SelectNodes("m:travellerGrp/m:fareRulesDetails", xnMgr3).Count > 0) ? FlightDetails.SelectSingleNode("m:travellerGrp/m:fareRulesDetails/m:tariffClassId", xnMgr3).InnerText : "";
                    }
                }
            }

            FareInfos.RemoveChild(FareInfo);
            ResponseDetails.RemoveChild(Rule);

			return XmlDoc.DocumentElement;
		}

		/// <summary>
		/// 운임규정에 프로모션 정보 업데이트
		/// </summary>
		/// <param name="PMID">프로모션 번호</param>
		/// <param name="XmlMode">통합용 운임규정 XML</param>
		/// <returns></returns>
        public XmlElement UpdatePromotionInfo(int PMID, XmlElement XmlMode)
		{
			if (PMID > 0)
			{
				XmlElement PromXml = SearchPromotionDetail(PMID);

				if (PromXml.SelectNodes("item").Count > 0 && !String.IsNullOrWhiteSpace(PromXml.SelectSingleNode("item/cardRule").InnerText))
				{
					foreach (XmlNode Rule in XmlMode.SelectNodes("rule"))
					{
						if (Rule.SelectNodes("item").Count > 0)
						{
							XmlNodeList RuleItems = Rule.SelectNodes("item[starts-with(name, '신용카드')]");
							XmlNode RuleItem;

							if (RuleItems.Count > 0)
							{
								RuleItem = RuleItems[0];
							}
							else
							{
								RuleItem = Rule.AppendChild(Rule.SelectSingleNode("item").CloneNode(true));

								RuleItem.Attributes.GetNamedItem("ref").InnerText = "";
								RuleItem.SelectSingleNode("name").InnerText = "신용카드";
							}

							RuleItem.SelectSingleNode("message").RemoveAll();
							RuleItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlMode.OwnerDocument.CreateCDataSection(PromXml.SelectSingleNode("item/cardRule").InnerText));
						}
					}
				}
			}

			return XmlMode;
		}

		/// <summary>
		/// 운임규정에 개별 정보 업데이트
		/// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="GDS">GDS명</param>
		/// <param name="PTC">운임타입</param>
        /// <param name="DLC">출발지</param>
        /// <param name="ALC">목적지</param>
        /// <param name="MJC">대표항공사코드</param>
		/// <param name="XmlMode">통합용 운임규정 XML</param>
		/// <returns></returns>
		public XmlElement UpdateRuleInfo(int SNM, string GDS, string PTC, string DLC, string ALC, string MJC, XmlElement XmlMode)
		{
			foreach (XmlNode Rule in XmlMode.SelectNodes("rule"))
			{
				if (Rule.SelectNodes("item").Count > 0)
				{
                    //한국출발여부
                    bool DepartureFromKorea = Common.KoreaOfAirport(DLC);
                    
                    if (PTC.Equals("STU") || PTC.Equals("LBR"))
					{
						if (Rule.SelectNodes("item[name='증빙서류']").Count > 0)
						{
							foreach (XmlNode Item in Rule.SelectNodes("item[name='증빙서류']"))
							{
								Item.SelectSingleNode("message").RemoveAll();
								Item.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlMode.OwnerDocument.CreateCDataSection(String.Concat(Common.AppendELRuleText(PTC), Environment.NewLine, Item.SelectSingleNode("message").InnerText)));
                                break;
							}
						}
						else
						{
							XmlNode RuleItem = Rule.AppendChild(Rule.SelectSingleNode("item").CloneNode(true));

							RuleItem.Attributes.GetNamedItem("ref").InnerText = "";
							RuleItem.SelectSingleNode("name").InnerText = "증빙서류";
							RuleItem.SelectSingleNode("message").RemoveAll();
							RuleItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlMode.OwnerDocument.CreateCDataSection(Common.AppendELRuleText(PTC)));
						}
					}
						
					//필수추가
					if (!SNM.Equals(68))
					{
                        string RuleText = String.Empty;

                        //발권대행수수료 관련 내용 적용
                        //네이버(4638)는 별도 문구 강제 적용(2017-02-28,김경미과장)
                        //이베이(5020,5119,5161,5163,5162,5164)는 별도 문구 강제 적용(2018-07-12,김경미매니저)
                        //if (SNM.Equals(4638))
                        //    RuleText = "예약 후 발권/취소/환불/변경/유료상담요청시 여행사 업무대행수수료가 1인당 부과됩니다.(성인, 소아 동일/유아 없음)<BR><BR>※발권/유료상담/취소/환불/변경 대행수수료 10,000원/건당/인당<BR>※신청하신 업무대행수수료는 환불되지 않습니다.<BR>※항공사가 정한 환불/변경수수료는 별도 징수되며, 요금규정에 안내되어 있사오니 꼭 확인 후 결제/발권 요청 부탁드립니다.<BR>※결제/발권 요청 후에는 바로 발권대행과정이 진행되며, 취소/환불시에는 수수료가 추가 징수되오니, 신중하게 결제요청 부탁드립니다.";
                        //else if (SNM.Equals(5020) || SNM.Equals(5119) || SNM.Equals(5161) || SNM.Equals(5163) || SNM.Equals(5162) || SNM.Equals(5164))
                        //    RuleText = "예약 후 발권/취소/환불/변경 여행사 업무대행수수료가 1인당 부과됩니다. (성인, 소아 동일/유아 없음)<BR><BR>※발권대행 수수료 1만원, 취소/환불/변경 수수료 1만원 징수됩니다.<BR>※신청하신 업무대행수수료는 환불되지 않습니다.<BR>※항공사가 정한 환불/변경수수료는 별도 징수되며, 요금규정에 안내되어 있사오니 꼭 확인 후 결제/발권 요청 부탁드립니다.<BR>※결제/발권 요청 후에는 바로 발권대행과정이 진행되며, 취소/환불시에는 수수료가 추가 징수되오니, 신중하게 결제요청 부탁드립니다.";
                        //else if (Common.ApplyTASF(SNM, MJC))
                        //    RuleText = String.Format("예약 후 발권/취소/환불/변경/유료상담요청시 여행사 업무대행수수료가 1인당 부과됩니다.(성인, 소아 동일/유아 없음)<BR><BR>※발권대행 수수료 {0}원, 유료상담/취소/환불/변경 수수료 10,000원<BR>※신청하신 업무대행수수료는 환불되지 않습니다.<BR>※항공사가 정한 환불/변경수수료는 별도 징수되며, 요금규정에 안내되어 있사오니 꼭 확인 후 결제/발권 요청 부탁드립니다.<BR>※결제/발권 요청 후에는 바로 발권대행과정이 진행되며, 취소/환불시에는 수수료가 추가 징수되오니, 신중하게 결제요청 부탁드립니다.", String.Format("{0:#,##0}", Common.GetTASF(SNM, "ADT", MJC, DepartureFromKorea)));
                        //else
                        //    RuleText = "결제 요청후 취소/환불/변경요청시 여행사 업무대행수수료 1만원(성인, 소아 동일/유아 없음)<BR><BR>※신청하신 업무대행수수료는 환불되지 않습니다.<BR>※항공사 수수료는 별도 징수되며, 요금규정에 안내되어 있사오니 꼭 확인 부탁드립니다.<BR>※결제요청 후에는 바로 발권대행과정이 진행되며, 이에 대한 수수료를 징수하고 있습니다.<BR>※결제요청 전에는 수수료 없이 예약취소가 가능하오니, 신중하게 결제진행 부탁드립니다.";

                        //여행사대행수수료 일괄 수정(2019-02-19,김경미매니저)
                        if (SNM.Equals(4638))
                            RuleText = "예약 후 발권/취소/환불/변경요청시 여행사 업무대행 수수료가 1인당 부과됩니다.<BR><BR>- 발권대행수수료 (성인/소아동일 , 유아 없음) : 10,000원<BR>- 취소/환불 대행수수료 (성인/소아/유아 동일) : 30,000원<BR>- 변경/재발행수수료 (성인/소아/유아 동일)<BR> : 재발행이 필요없는 변경의 경우 : 10,000원<BR> : 재발행이 필요한 변경의 경우 : 30,000원<BR><BR>※ 신청하신 업무대행수수료는 환불되지 않습니다.<BR>※ 항공사가 정한 환불/변경수수료는 별도로 징수되며, 요금규정에 안내 되어 있사오니, 반드시 확인 후 결제/발권 요청 부탁드립니다.<BR>※ 결제/발권 요청 후에는 바로 발권대행 과정이 진행되며, 취소/환불/변경시에는 수수료가 징수되오니, 신중하게 결제요청 부탁드립니다.<BR>※ 대행수수료는 항공권과는 별도로 [모두투어]로 일시불 승인되며, 항공권 금액승인 시점과 차이가 발생 할 수 있습니다.";
                        else if (SNM.Equals(5020) || SNM.Equals(5119) || SNM.Equals(5161) || SNM.Equals(5163) || SNM.Equals(5162) || SNM.Equals(5164))
                            RuleText = "예약 후 발권/취소/환불/변경요청시 여행사 업무대행 수수료가 1인당 부과됩니다.<BR><BR>- 발권대행수수료 (성인/소아동일 , 유아 없음) : 10,000원<BR>- 취소/환불 대행수수료 (성인/소아/유아 동일) : 30,000원<BR>- 변경/재발행수수료 (성인/소아/유아 동일)<BR> : 재발행이 필요없는 변경의 경우 : 10,000원<BR> : 재발행이 필요한 변경의 경우 : 30,000원<BR><BR>※ 신청하신 업무대행수수료는 환불되지 않습니다.<BR>※ 항공사가 정한 환불/변경수수료는 별도로 징수되며, 요금규정에 안내 되어 있사오니, 반드시 확인 후 결제/발권 요청 부탁드립니다.<BR>※ 결제/발권 요청 후에는 바로 발권대행 과정이 진행되며, 취소/환불/변경시에는 수수료가 징수되오니, 신중하게 결제요청 부탁드립니다.<BR>※ 대행수수료는 항공권과는 별도로 [모두투어]로 일시불 승인되며, 항공권 금액승인 시점과 차이가 발생 할 수 있습니다.";
                        else
                            RuleText = String.Format("예약 후 발권/취소/환불/변경요청시 여행사 업무대행 수수료가 1인당 부과됩니다.<BR><BR>- 발권대행수수료 (성인/소아동일 , 유아 없음) : {0}원<BR>- 취소/환불 대행수수료 (성인/소아/유아 동일) : 30,000원<BR>- 변경/재발행수수료 (성인/소아/유아 동일)<BR> : 재발행이 필요없는 변경의 경우 : 10,000원<BR> : 재발행이 필요한 변경의 경우 : 30,000원<BR><BR>※ 신청하신 업무대행수수료는 환불되지 않습니다.<BR>※ 항공사가 정한 환불/변경수수료는 별도로 징수되며, 요금규정에 안내 되어 있사오니, 반드시 확인 후 결제/발권 요청 부탁드립니다.<BR>※ 결제/발권 요청 후에는 바로 발권대행 과정이 진행되며, 취소/환불/변경시에는 수수료가 징수되오니, 신중하게 결제요청 부탁드립니다.<BR>※ 대행수수료는 항공권과는 별도로 [모두투어]로 일시불 승인되며, 항공권 금액승인 시점과 차이가 발생 할 수 있습니다.", String.Format("{0:#,##0}", Common.GetTASF(SNM, "ADT", MJC, DepartureFromKorea)));
                        
                        if (Rule.SelectNodes("item[name='여행사대행수수료']").Count > 0)
						{
                            foreach (XmlNode Item in Rule.SelectNodes("item[name='여행사대행수수료']"))
							{
								Item.SelectSingleNode("message").RemoveAll();
                                Item.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlMode.OwnerDocument.CreateCDataSection(RuleText));
                                break;
							}
						}
						else
						{
							//여행사대행수수료 항목을 규정 처음에 노출(2016-08-08,박주영차장)
                            //XmlNode RuleItem = Rule.AppendChild(Rule.SelectSingleNode("item").CloneNode(true));
                            XmlNode RuleItem = Rule.InsertBefore(Rule.SelectSingleNode("item").CloneNode(true), Rule.FirstChild);

							RuleItem.Attributes.GetNamedItem("ref").InnerText = "";
                            RuleItem.SelectSingleNode("name").InnerText = "여행사대행수수료";
							RuleItem.SelectSingleNode("message").RemoveAll();
                            RuleItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlMode.OwnerDocument.CreateCDataSection(RuleText));
						}

                        if (Rule.SelectNodes("item[name='여행업무취급수수료']").Count > 0)
                        {
                            foreach (XmlNode Item in Rule.SelectNodes("item[name='여행업무취급수수료']"))
                            {
                                Rule.RemoveChild(Item);
                                break;
                            }
                        }
                        else if (Rule.SelectNodes("item[name='여행사수수료']").Count > 0)
                        {
                            foreach (XmlNode Item in Rule.SelectNodes("item[name='여행사수수료']"))
                            {
                                Rule.RemoveChild(Item);
                                break;
                            }
                        }
					}

                    //해외출발일 경우 특정 항공사 기타내용 추가
                    //LH,LX,OX 추가(2016-06-15,김지영과장)
                    //AY 추가(2017-08-07,김경미차장)
                    if (!DepartureFromKorea && (MJC.Equals("LH") || MJC.Equals("LX") || MJC.Equals("OS") || MJC.Equals("AY")))
                    {
                        string RuleText = string.Empty;

                        if (MJC.Equals("AY"))
                            RuleText = String.Concat("* 유럽국가 출발 항공권을 신용카드로 결제할 경우 신용카드 결제 수수료가 부과됨.(현금결제 제외)<BR>",
                                                        "- 첫번째 발권시에만 부과됨. 즉, 재발행시에는 해당 없음.<BR>",
                                                        "- 항공권 총액(End-price : 운임+세금+유류할증료+각종 수수료) 기준으로 Percentage(1%) 또는 EUR 10 / AUD 25 등 출발국가에 따라서 금액 상이할 수 있음.   본 수수료는 환불 안됨.<BR>",
                                                        "- 수수료 부과 예외대상 : 유아");
                        else
                            RuleText = String.Concat("* 유럽특정국가 출발 항공권을 신용카드로 결제할 경우 신용카드 결제 수수료가 부과됨.(현금결제 제외)<BR>",
                                                        "- 독일, 스위스, 벨기에, 핀란드, 네덜란드, 영국 및 아일랜드 '출발' 항공권에 한함.<BR>",
                                                        "- 운임, 여정, 이용 항공사 등등 상관없이 상기 7 개국 출발 여정으로 LH/LX/OS 항공사 티켓은 신용카드 발권시 항공권당 자동 부과.<BR>",
                                                        "- 첫번째 발권시에만 부과됨. 즉, 재발행시에는 해당 없음.<BR>",
                                                        "- 항공권 총액(End-price : 운임+세금+유류할증료+각종 수수료) 기준으로 Percentage(1.65%. 단, 최대 EUR25/CHF30/GBP20)로 수수료 자동적용.<BR>",
                                                        "- 본 수수료는 환불 안됨.<BR>",
                                                        "- 수수료 부과 예외대상 : 유아");

                        if (Rule.SelectNodes("item[name='기타']").Count > 0)
                        {
                            foreach (XmlNode Item in Rule.SelectNodes("item[name='기타']"))
                            {
                                Item.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlMode.OwnerDocument.CreateCDataSection(String.Concat("<BR><BR>", RuleText)));
                                break;
                            }
                        }
                        else
                        {
                            XmlNode RuleItem = Rule.AppendChild(Rule.SelectSingleNode("item").CloneNode(true));

                            RuleItem.Attributes.GetNamedItem("ref").InnerText = "";
                            RuleItem.SelectSingleNode("name").InnerText = "기타";
                            RuleItem.SelectSingleNode("message").RemoveAll();
                            RuleItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlMode.OwnerDocument.CreateCDataSection(RuleText));
                        }
                    }

                    //베트남 노선일 경우 추가(2016-09-19,김지영과장)
                    if (Common.VietnamOfAirport(ALC))
                    {
                        string RuleText = String.Concat("* 베트남 무비자 입국 조건(한국 국적)<BR>",
                                                        "- 입국 기준 여권 잔여기간 6개월 이상<BR>",
                                                        "- 최종 베트남 출국일로부터 최소 30일 경과 후 무비자 재입국 가능(이전 재입국시 비자필요)<BR>",
                                                        "- 14세 미만인 경우 입국 제한 / 결제 전 반드시 입국 가능 여부 확인요망");

                        if (Rule.SelectNodes("item[name='기타']").Count > 0)
                        {
                            foreach (XmlNode Item in Rule.SelectNodes("item[name='기타']"))
                            {
                                Item.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlMode.OwnerDocument.CreateCDataSection(String.Concat("<BR><BR>", RuleText)));
                                break;
                            }
                        }
                        else
                        {
                            XmlNode RuleItem = Rule.AppendChild(Rule.SelectSingleNode("item").CloneNode(true));

                            RuleItem.Attributes.GetNamedItem("ref").InnerText = "";
                            RuleItem.SelectSingleNode("name").InnerText = "기타";
                            RuleItem.SelectSingleNode("message").RemoveAll();
                            RuleItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlMode.OwnerDocument.CreateCDataSection(RuleText));
                        }
                    }

                    //무료수하물
                    if (GDS.Equals("Amadeus"))
                    {
                        string RuleText = "항공사 요금규정에 무료수화물 내용이 누락된 경우 표기되지 않을 수 있습니다. 표기되지 않은 경우, 해당항공사에 문의 부탁드립니다.<BR>※공동운항편, 타항공사 연결편, 24시간 이상 체류 일정, 해외출발 일정, 특수 수하물의 경우 운항항공사에 따라 수하물 규정이 상이할 수 있습니다. 각 항공사로 문의하시거나 담당자에게 문의 부탁드립니다.";
                        
                        if (Rule.SelectNodes("item[name='무료수하물']").Count > 0)
                        {
                            foreach (XmlNode Item in Rule.SelectNodes("item[name='무료수하물']"))
                            {
                                Item.SelectSingleNode("message").RemoveAll();
                                Item.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlMode.OwnerDocument.CreateCDataSection(RuleText));
                                break;
                            }
                        }
                        else
                        {
                            XmlNode RuleItem = Rule.AppendChild(Rule.SelectSingleNode("item").CloneNode(true));

                            RuleItem.Attributes.GetNamedItem("ref").InnerText = "";
                            RuleItem.SelectSingleNode("name").InnerText = "무료수하물";
                            RuleItem.SelectSingleNode("message").RemoveAll();
                            RuleItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlMode.OwnerDocument.CreateCDataSection(RuleText));
                        }
                    }

                    //여권 및 비자
                    if (Rule.SelectNodes("item[name='여권 및 비자']").Count.Equals(0))
                    {
                        //string RuleText = "- 여권은 출발일 기준으로 6개월 이상 남아있어야 합니다.<BR>- 경유지 및 목적지 국가에서 비자가 필요할 수 있으니 출발전 비자 필요 유무를 확인하고 발급 받으시기 바랍니다.<BR>- 편도 여정으로 항공권을 구입하실 경우 상대편 입국 국가의 비자를 반드시 소지하고 계셔야 합니다.<BR>- 비자를 소지하지 않은 경우에는 해당 국가로의 출국이 거부됩니다.<BR>※여권 및 비자 상담은 여권과(여권 관련), 해당 국가의 대사관이나 영사관(비자관련)에 문의하시기 바랍니다.<BR><a href=\"http://www.mofa.go.kr/trade/beforejustice/exemption/information/index2.jsp?menu=m_30_180_30&tabmenu=t_2\" target=\"_blank\" title=\"비자확인\">비자확인하러가기</a>";
                        string RuleText = "- 여권은 출발일 기준으로 6개월 이상 남아있어야 합니다.<BR>- 경유지 및 목적지 국가에서 비자가 필요할 수 있으니 출발전 비자 필요 유무를 확인하고 발급 받으시기 바랍니다.<BR>- 편도 여정으로 항공권을 구입하실 경우 상대편 입국 국가의 비자를 반드시 소지하고 계셔야 합니다.<BR>- 비자를 소지하지 않은 경우에는 해당 국가로의 출국이 거부됩니다.<BR>※여권 및 비자 상담은 여권과(여권 관련), 해당 국가의 대사관이나 영사관(비자관련)에 문의하시기 바랍니다.";

                        XmlNode RuleItem = Rule.AppendChild(Rule.SelectSingleNode("item").CloneNode(true));

                        RuleItem.Attributes.GetNamedItem("ref").InnerText = "";
                        RuleItem.SelectSingleNode("name").InnerText = "여권 및 비자";
                        RuleItem.SelectSingleNode("message").RemoveAll();
                        RuleItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlMode.OwnerDocument.CreateCDataSection(RuleText));
                    }

                    //TW항공일 경우 증빙서류 내용 모두 삭제(실제 증빙서류와 다른 내용이 입력됨)(2019-06-25,김경미매니저)
                    if (MJC.Equals("TW"))
                    {
                        if (Rule.SelectNodes("item[name='증빙서류']").Count > 0)
                        {
                            foreach (XmlNode Item in Rule.SelectNodes("item[name='증빙서류']"))
                            {
                                Rule.RemoveChild(Item);
                                break;
                            }
                        }
                    }
				}
			}

			return XmlMode;
		}

        /// <summary>
        /// 운임규정 재정렬
        /// </summary>
        /// <param name="XmlMode">통합용 운임규정 XML</param>
        /// <returns></returns>
        public XmlElement ReorderRule(XmlElement XmlMode)
        {
            XmlElement BackupXml = XmlMode;
            
            try
            {
                string[] ItemOrder = new String[20] { "여행사대행수수료", "항공사수수료-예약변경", "항공사수수료-NOSHOW", "항공사수수료-환불", "운임종류", "요금조건", "적용대상", "출국요일", "귀국요일", "최소체류일", "최대체류일", "유효기간", "소아요금", "유아요금", "귀국일오픈", "사전발권", "기타", "무료수하물", "신용카드", "항공사마일리지적립" };
                int ItemOrderLen = ItemOrder.Length;

                foreach (XmlNode Rule in XmlMode.SelectNodes("rule"))
                {
                    if (Rule.SelectNodes("item").Count > 0)
                    {
                        int Len = Rule.SelectNodes("item").Count;
                        int ItemLen = (ItemOrderLen > Len) ? ItemOrderLen : Len;
                        string[] ItemName = new String[ItemLen];
                        string[] ItemMessage = new String[ItemLen];
                        string[] OtherName = new String[10] { "", "", "", "", "", "", "", "", "", "" };
                        string[] OtherMessage = new String[10] { "", "", "", "", "", "", "", "", "", "" };
                        int OtherIdx = 0;

                        foreach (XmlNode Item in Rule.SelectNodes("item"))
                        {
                            string TmpName = Item.SelectSingleNode("name").InnerText.Replace(" ", "");
                            bool SameName = false;

                            for (int i = 0; i < ItemOrderLen; i++)
                            {
                                if (ItemOrder[i].Trim().Equals(TmpName))
                                {
                                    if (String.IsNullOrWhiteSpace(ItemName[i]))
                                    {
                                        ItemName[i] = TmpName;
                                        ItemMessage[i] = Item.SelectSingleNode("message").InnerText;
                                    }
                                    else
                                        ItemMessage[i] += String.Concat("<BR><BR>", Item.SelectSingleNode("message").InnerText);

                                    SameName = true;
                                    break;
                                }
                            }

                            if (!SameName)
                            {
                                if (String.IsNullOrWhiteSpace(OtherName[OtherIdx]))
                                {
                                    OtherName[OtherIdx] = TmpName;
                                    OtherMessage[OtherIdx] = Item.SelectSingleNode("message").InnerText;
                                }
                                else
                                    OtherMessage[OtherIdx] += String.Concat("<BR><BR>", Item.SelectSingleNode("message").InnerText);

                                OtherIdx++;
                            }
                        }

                        XmlNode ItemNode = Rule.SelectSingleNode("item").Clone();
                        XmlNode NewItem = null;
                        int NewItemIdx = 1;

                        Rule.RemoveAll();

                        ItemNode.Attributes.GetNamedItem("ref").InnerText = "";
                        ItemNode.SelectSingleNode("name").InnerText = "";
                        ItemNode.SelectSingleNode("message").RemoveAll();

                        for (int i = 0; i < ItemLen; i++)
                        {
                            if (!String.IsNullOrWhiteSpace(ItemName[i]))
                            {
                                NewItem = Rule.AppendChild(ItemNode.Clone());
                                NewItem.Attributes.GetNamedItem("ref").InnerText = (NewItemIdx++).ToString();
                                NewItem.SelectSingleNode("name").InnerText = ItemName[i].Trim();
                                NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlMode.OwnerDocument.CreateCDataSection(ItemMessage[i].Trim()));
                            }
                        }

                        for (int i = 0; i < 10; i++)
                        {
                            if (!String.IsNullOrWhiteSpace(OtherName[i]))
                            {
                                NewItem = Rule.AppendChild(ItemNode.Clone());
                                NewItem.Attributes.GetNamedItem("ref").InnerText = (NewItemIdx++).ToString();
                                NewItem.SelectSingleNode("name").InnerText = OtherName[i].Trim();
                                NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlMode.OwnerDocument.CreateCDataSection(OtherMessage[i].Trim()));
                            }
                            else
                                break;
                        }
                    }
                }

                return XmlMode;
            }
            catch (Exception)
            {
                return BackupXml;
            }
        }

        /// <summary>
        /// SearchRuleARTRS를 통합용 XML구조로 치환
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="SearchRuleJson">SearchRuleARTRS의 Data</param>
        /// <returns></returns>
        public XmlElement ToModeSearchRuleARTRS(int SNM, string SearchRuleJson)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchRuleRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            XmlNode ResponseDetails = XmlDoc.SelectSingleNode("ResponseDetails");
            XmlNode Rule = ResponseDetails.SelectSingleNode("rule");
            XmlNode Item = Rule.SelectSingleNode("item");
            XmlNode FareInfos = ResponseDetails.SelectSingleNode("fareInfos");
            XmlNode FareInfo = FareInfos.SelectSingleNode("fareInfo");
            XmlNode NewRule;
            XmlNode NewItem;
            XmlNode NewFareInfo;

            FareInfos.Attributes.GetNamedItem("gds").InnerText = "Amadeus";
            FareInfos.Attributes.GetNamedItem("ulc").InnerText = "KO";

            if (!String.IsNullOrWhiteSpace(SearchRuleJson))
            {
                JObject ArtRule = JObject.Parse(SearchRuleJson);
                JArray RuleGroup = JArray.Parse(ArtRule["farerulers"]["data"]["fareruletextinfogrp"]["rulegrp"].ToString());

                foreach (JObject ruleGroup in RuleGroup)
                {
                    JArray JARule = JArray.Parse(ruleGroup["fareruleinfo"].ToString());

                    NewRule = ResponseDetails.InsertBefore(Rule.CloneNode(false), Rule);
                    NewRule.Attributes.GetNamedItem("ref").InnerText = ruleGroup["ruleseqno"].ToString();

                    //CRS인 경우에는 '여행업무취급수수료' 항목 삭제(2019-08-26,김경미매니저)
                    if (SNM.Equals(68))
                    {
                        foreach (JObject rule in JARule)
                        {
                            if (rule["title"].ToString() != "여행업무취급수수료")
                            {
                                NewItem = NewRule.AppendChild(Item.CloneNode(true));
                                NewItem.Attributes.GetNamedItem("ref").InnerText = rule["orderno"].ToString();
                                NewItem.SelectSingleNode("name").InnerText = rule["title"].ToString();
                                NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(rule["transrule"].ToString()));
                            }
                        }
                    }
                    else
                    {
                        foreach (JObject rule in JARule)
                        {
                            NewItem = NewRule.AppendChild(Item.CloneNode(true));
                            NewItem.Attributes.GetNamedItem("ref").InnerText = rule["orderno"].ToString();
                            NewItem.SelectSingleNode("name").InnerText = rule["title"].ToString();
                            NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(rule["transrule"].ToString()));
                        }
                    }

                    NewFareInfo = FareInfos.AppendChild(FareInfo.CloneNode(true));
                    NewFareInfo.Attributes.GetNamedItem("ref").InnerText = ruleGroup["ruleseqno"].ToString();
                    NewFareInfo.SelectSingleNode("item[@name='Origin']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='Destination']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='FareCategory']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='FareClass']").InnerText = ruleGroup["fareclass"].ToString();
                    NewFareInfo.SelectSingleNode("item[@name='AdvanceAfter']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='AdvanceBefore']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='MinStay']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='MaxStay']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='FareType']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='BookingClass']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='RuleNumber']").InnerText = ruleGroup["ruleno"].ToString();
                    NewFareInfo.SelectSingleNode("item[@name='TariffId']").InnerText = ruleGroup["tariffclassid"].ToString();
                }
            }

            FareInfos.RemoveChild(FareInfo);
            ResponseDetails.RemoveChild(Rule);

            return XmlDoc.DocumentElement;
        }

		#endregion "SearchRule"

        #region "CheckRuls"

        /// <summary>
		/// 운임규정 조회
		/// </summary>
		/// <param name="SNM">사이트 번호</param>
		/// <param name="PMID">프로모션 번호</param>
		/// <param name="INO">여정번호</param>
		/// <param name="DTD">출발일(YYYYMMDD)</param>
		/// <param name="DTT">출발시간(HHMM)</param>
		/// <param name="ARD">도착일(YYYYMMDD)</param>
		/// <param name="ART">도착시간(HHMM)</param>
		/// <param name="DLC">출발지</param>
		/// <param name="ALC">도착지</param>
		/// <param name="MCC">마케팅항공사</param>
		/// <param name="OCC">운항항공사</param>
		/// <param name="FLN">편명</param>
		/// <param name="RBD">좌석클래스</param>
		/// <param name="PTC">탑승객 타입 코드</param>
		/// <param name="NOP">탑승객 수</param>
		/// <returns></returns>
		[WebMethod(Description = "운임규정 조회")]
		public XmlElement CheckRuleRS(int SNM, string PMID, int[] INO, string[] DTD, string[] DTT, string[] ARD, string[] ART, string[] DLC, string[] ALC, string[] MCC, string[] OCC, string[] FLN, string[] RBD, string[] PTC, int[] NOP)
		{
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
			string SID = String.Empty;
			string SCT = String.Empty;
			int SQN = 0;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청10", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청11", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청12", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청13", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청14", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 10;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = PMID;
                sqlParam[8].Value = String.Join("^", INO);
                sqlParam[9].Value = String.Join("^", DTD);
                sqlParam[10].Value = String.Join("^", DTT);
                sqlParam[11].Value = String.Join("^", ARD);
                sqlParam[12].Value = String.Join("^", ART);
                sqlParam[13].Value = String.Join("^", DLC);
                sqlParam[14].Value = String.Join("^", ALC);
                sqlParam[15].Value = String.Join("^", MCC);
                sqlParam[16].Value = String.Join("^", OCC);
                sqlParam[17].Value = String.Join("^", FLN);
                sqlParam[18].Value = String.Join("^", RBD);
                sqlParam[19].Value = String.Join("^", PTC);
                sqlParam[20].Value = String.Join("^", NOP);

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

			try
			{
				//결과
				XmlElement ResPricing;
				XmlElement ResRule;

				//네임스페이스
				XmlNamespaceManager xnMgr1;
				XmlNamespaceManager xnMgr2 = null;

                //운임항공사리스트
                string FareAirList = "/";

				XmlDocument XmlDoc = new XmlDocument();
				XmlDoc.LoadXml("<CheckRulesReply></CheckRulesReply>");

				//### 01.세션생성 #####
				XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

				SID = Session.SelectSingleNode("session/sessionId").InnerText;
				SCT = Session.SelectSingleNode("session/securityToken").InnerText;
				SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

				//### 02.Pricing(Fare_InformativePricingWithoutPNR) #####
                ResPricing = amd.InformativePricingWithoutPNRRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), "", INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, PTC, NOP);

				//오류 결과일 경우 예외 처리
				xnMgr1 = new XmlNamespaceManager(ResPricing.OwnerDocument.NameTable);
				xnMgr1.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_InformativePricingWithoutPNR"));

                if (ResPricing.SelectNodes("m:errorGroup", xnMgr1).Count > 0)
                {
                    throw new Exception(ResPricing.SelectSingleNode("m:errorGroup/m:errorWarningDescription/m:freeText", xnMgr1).InnerText);
                }
                else
                {
                    //운임항공사리스트
                    foreach (XmlNode CompanyDetails in ResPricing.SelectNodes("m:mainGroup/m:pricingGroupLevelGroup/m:fareInfoGroup/m:segmentLevelGroup/m:segmentInformation/m:companyDetails", xnMgr1))
                    {
                        if (CompanyDetails.SelectNodes("m:marketingCompany", xnMgr1).Count > 0)
                            FareAirList += String.Concat(CompanyDetails.SelectSingleNode("m:marketingCompany", xnMgr1).InnerText, "/");
                    }
                }

				//### 03.CheckRules #####
				foreach (XmlNode FareComponent in ResPricing.SelectNodes("m:mainGroup/m:pricingGroupLevelGroup/m:fareInfoGroup/m:fareComponentDetailsGroup", xnMgr1))
				{
					string FcNumber = FareComponent.SelectSingleNode("m:fareComponentID/m:itemNumberDetails/m:number", xnMgr1).InnerText;
					ResRule = amd.CheckRulesRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03_", FcNumber), FcNumber, 0);

					xnMgr2 = new XmlNamespaceManager(ResRule.OwnerDocument.NameTable);
					xnMgr2.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_CheckRules"));

					if (ResRule.SelectNodes("m:errorInfo", xnMgr2).Count > 0)
					{
						throw new Exception(ResRule.SelectSingleNode("m:errorInfo/m:errorFreeText/m:freeText", xnMgr2).InnerText);
					}

					XmlDoc.SelectSingleNode("CheckRulesReply").AppendChild(XmlDoc.ImportNode(ResRule, true));
				}

				//### 04.세션종료 #####
				SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"));

				//### 05. 통합모드 #####
                XmlElement XmlMode = ToModeSearchRuleRS(XmlDoc.DocumentElement, null, null, xnMgr2, FareAirList, DTD[0]);
                cm.XmlFileSave(XmlMode, mc.Name, "ToModeSearchRuleRS", "N", String.Concat(GUID, "-05"));

                return ReorderRule(XmlMode);
			}
			catch (Exception ex)
			{
				//### 세션종료 #####
				if (SQN > 0)
					amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 10, 0, 0).ToErrors;
			}
		}

		#endregion "CheckRuls"

        #region "CheckRuleAP(사전발권 조회)"

        /// <summary>
        /// 24시간 발권 조건 여부
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="INO">여정번호</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="DTT">출발시간(HHMM)</param>
        /// <param name="ARD">도착일(YYYYMMDD)</param>
        /// <param name="ART">도착시간(HHMM)</param>
        /// <param name="DLC">출발지</param>
        /// <param name="ALC">도착지</param>
        /// <param name="MCC">마케팅항공사</param>
        /// <param name="OCC">운항항공사</param>
        /// <param name="FLN">편명</param>
        /// <param name="RBD">좌석클래스</param>
        /// <param name="PTC">탑승객 타입 코드</param>
        /// <param name="NOP">탑승객 수</param>
        /// <param name="GUID">고유번호</param>
        /// <example>/CheckRuleTicketing24?SNM=2&INO=1&DTD=20160912&DTT=1440&ARD=20160912&ART=1220&DLC=ICN&ALC=LAX&MCC=OZ&OCC=OZ&FLN=0202&RBD=V&INO=2&DTD=20160919&DTT=0020&ARD=20160920&ART=0510&DLC=LAX&ALC=ICN&MCC=OZ&OCC=OZ&FLN=0203&RBD=V&PTC=ADT&NOP=1</example>
        /// <returns></returns>
        //[WebMethod(Description = "24시간 발권 조건 여부")]
        public bool CheckRuleTicketing24(int SNM, int[] INO, string[] DTD, string[] DTT, string[] ARD, string[] ART, string[] DLC, string[] ALC, string[] MCC, string[] OCC, string[] FLN, string[] RBD, string[] PTC, int[] NOP, string GUID)
        {
            //고유번호
            GUID = String.IsNullOrWhiteSpace(GUID) ? cm.GetGUID : GUID;
            
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            //24시간 발권 조건 여부
            bool Ticketing = false;

            try
            {
                //결과
                XmlElement ResXml;
                XmlElement ResRule;

                //네임스페이스
                XmlNamespaceManager xnMgr1;
                XmlNamespaceManager xnMgr2;

                //### 01.세션생성 #####
                XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

                SID = Session.SelectSingleNode("session/sessionId").InnerText;
                SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                //### 02.Pricing(Fare_InformativePricingWithoutPNR) #####
                ResXml = amd.InformativePricingWithoutPNRRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), "", INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, PTC, NOP);

                //오류 결과일 경우 예외 처리
                xnMgr1 = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr1.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_InformativePricingWithoutPNR"));

                if (ResXml.SelectNodes("m:errorGroup", xnMgr1).Count > 0)
                {
                    throw new Exception(ResXml.SelectSingleNode("m:errorGroup/m:errorWarningDescription/m:freeText", xnMgr1).InnerText);
                }

                //### 03.CheckRules #####
                foreach (XmlNode FareComponent in ResXml.SelectNodes("m:mainGroup/m:pricingGroupLevelGroup/m:fareInfoGroup/m:fareComponentDetailsGroup", xnMgr1))
                {
                    string FcNumber = FareComponent.SelectSingleNode("m:fareComponentID/m:itemNumberDetails/m:number", xnMgr1).InnerText;
                    ResRule = amd.CheckRulesTariffRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03_", FcNumber), FcNumber);

                    xnMgr2 = new XmlNamespaceManager(ResRule.OwnerDocument.NameTable);
                    xnMgr2.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_CheckRules"));

                    if (ResRule.SelectNodes("m:errorInfo", xnMgr2).Count.Equals(0))
                    {
                        //'1 DAY'인 경우에도 24시 발권으로 체크(2016-10-10,정성하과장)
                        if (ResRule.SelectNodes("m:tariffInfo/m:fareRuleText[contains(m:freeText, 'TICKETING MUST BE COMPLETED WITHIN 24 HOURS')]", xnMgr2).Count > 0 || ResRule.SelectNodes("m:tariffInfo/m:fareRuleText[contains(m:freeText, 'TICKETING MUST BE COMPLETED WITHIN 1 DAY')]", xnMgr2).Count > 0)
                        {
                            Ticketing = true;
                            break;
                        }
                    }
                }

                //### 04.세션종료 #####
                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"));
            }
            catch (Exception ex)
            {
                //오류발생시 무조건 24시간 발권으로 처리(2016-08-25,김지영과장)
                Ticketing = true;
                
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0);
            }

            return Ticketing;
        }

        /// <summary>
        /// 운임규정(사전발권) 조회
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="INO">여정번호</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="DTT">출발시간(HHMM)</param>
        /// <param name="ARD">도착일(YYYYMMDD)</param>
        /// <param name="ART">도착시간(HHMM)</param>
        /// <param name="DLC">출발지</param>
        /// <param name="ALC">도착지</param>
        /// <param name="MCC">마케팅항공사</param>
        /// <param name="OCC">운항항공사</param>
        /// <param name="FLN">편명</param>
        /// <param name="RBD">좌석클래스</param>
        /// <param name="PTC">탑승객 타입 코드</param>
        /// <param name="NOP">탑승객 수</param>
        /// <example>/CheckRuleAPRS?SNM=2&INO=1&DTD=20160912&DTT=1440&ARD=20160912&ART=1220&DLC=ICN&ALC=LAX&MCC=OZ&OCC=OZ&FLN=0202&RBD=V&INO=2&DTD=20160919&DTT=0020&ARD=20160920&ART=0510&DLC=LAX&ALC=ICN&MCC=OZ&OCC=OZ&FLN=0203&RBD=V&PTC=ADT&NOP=1</example>
        /// <returns></returns>
        //[WebMethod(Description = "Advance Purchase(사전발권) 조회")]
        public XmlElement CheckRuleAPRS(int SNM, int[] INO, string[] DTD, string[] DTT, string[] ARD, string[] ART, string[] DLC, string[] ALC, string[] MCC, string[] OCC, string[] FLN, string[] RBD, string[] PTC, int[] NOP)
        {
            string GUID = cm.GetGUID;
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            try
            {
                //통합용
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.Load(mc.XmlFullPath("CheckRulesAPRS"));

                XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

                XmlNode FareRuleInfo = XmlDoc.SelectSingleNode("ResponseDetails/fareRuleInfo");
                XmlNode FreeText = FareRuleInfo.SelectSingleNode("freeText");
                XmlNode NewFreeText;

                //결과
                XmlElement ResXml;
                XmlElement ResRule;

                //네임스페이스
                XmlNamespaceManager xnMgr1;
                XmlNamespaceManager xnMgr2;

                //### 01.세션생성 #####
                XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

                SID = Session.SelectSingleNode("session/sessionId").InnerText;
                SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                //### 02.Pricing(Fare_InformativePricingWithoutPNR) #####
                ResXml = amd.InformativePricingWithoutPNRRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), "", INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, PTC, NOP);

                //오류 결과일 경우 예외 처리
                xnMgr1 = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr1.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_InformativePricingWithoutPNR"));

                if (ResXml.SelectNodes("m:errorGroup", xnMgr1).Count > 0)
                {
                    throw new Exception(ResXml.SelectSingleNode("m:errorGroup/m:errorWarningDescription/m:freeText", xnMgr1).InnerText);
                }

                //### 03.CheckRules #####
                foreach (XmlNode FareComponent in ResXml.SelectNodes("m:mainGroup/m:pricingGroupLevelGroup/m:fareInfoGroup/m:fareComponentDetailsGroup", xnMgr1))
                {
                    string FcNumber = FareComponent.SelectSingleNode("m:fareComponentID/m:itemNumberDetails/m:number", xnMgr1).InnerText;
                    ResRule = amd.CheckRulesTariffRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03_", FcNumber), FcNumber);

                    xnMgr2 = new XmlNamespaceManager(ResRule.OwnerDocument.NameTable);
                    xnMgr2.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_CheckRules"));

                    if (ResRule.SelectNodes("m:errorInfo", xnMgr2).Count > 0)
                    {
                        throw new Exception(ResRule.SelectSingleNode("m:errorInfo/m:errorFreeText/m:freeText", xnMgr2).InnerText);
                    }

                    foreach (XmlNode FareRuleText in ResRule.SelectNodes("m:tariffInfo/m:fareRuleText/m:freeText", xnMgr2))
                    {
                        NewFreeText = FareRuleInfo.AppendChild(FreeText.CloneNode(false));
                        NewFreeText.InnerText = FareRuleText.InnerText.Trim();
                    }
                }

                FareRuleInfo.RemoveChild(FreeText);

                //### 04.세션종료 #####
                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"));

                return XmlDoc.DocumentElement;
            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0).ToErrors;
            }
        }

        //[WebMethod(Description = "Advance Purchase(사전발권) 조회")]
        public XmlElement CheckRuleAPPNRRS(int SNM, string PNR)
        {
            string GUID = cm.GetGUID;
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            try
            {
                //통합용
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.Load(mc.XmlFullPath("CheckRulesAPRS"));

                XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

                XmlNode FareRuleInfo = XmlDoc.SelectSingleNode("ResponseDetails/fareRuleInfo");
                XmlNode FreeText = FareRuleInfo.SelectSingleNode("freeText");
                XmlNode NewFreeText;

                //결과
                XmlElement ResXml;
                XmlElement ResRule;

                //네임스페이스
                XmlNamespaceManager xnMgr;
                XmlNamespaceManager xnMgr1;
                XmlNamespaceManager xnMgr2;

                //### 01.세션생성 #####
                XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

                SID = Session.SelectSingleNode("session/sessionId").InnerText;
                SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                //### 02.PNR조회(PNR_Retrieve) #####
                ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                //### 03.운임Pricing(Fare_PricePNRWithBookingClass) #####
                ResXml = amd.PricePNRWithBookingClassPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), ((ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo", xnMgr).Count > 0 && ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).InnerText : null), "", null);

                //오류 결과일 경우 예외 처리
                xnMgr1 = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr1.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassPricing"));

                if (ResXml.SelectNodes("m:applicationError", xnMgr1).Count > 0)
                {
                    throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgr1).InnerText);
                }

                //### 04.CheckRules #####
                foreach (XmlNode FareList in ResXml.SelectNodes("m:fareList", xnMgr1))
                {
                    string FcNumber = FareList.SelectSingleNode("m:fareReference[m:referenceType='TST']/m:uniqueReference", xnMgr1).InnerText;
                    ResRule = amd.CheckRulesAPRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04_", FcNumber), FcNumber);

                    xnMgr2 = new XmlNamespaceManager(ResRule.OwnerDocument.NameTable);
                    xnMgr2.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_CheckRules"));

                    if (ResRule.SelectNodes("m:errorInfo", xnMgr2).Count > 0)
                    {
                        throw new Exception(ResRule.SelectSingleNode("m:errorInfo/m:errorFreeText/m:freeText", xnMgr2).InnerText);
                    }

                    foreach (XmlNode FareRuleText in ResRule.SelectNodes("m:tariffInfo/m:fareRuleText/m:freeText", xnMgr2))
                    {
                        NewFreeText = FareRuleInfo.AppendChild(FreeText.CloneNode(false));
                        NewFreeText.InnerText = FareRuleText.InnerText.Trim();
                    }
                }

                FareRuleInfo.RemoveChild(FreeText);

                //### 04.세션종료 #####
                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05"));

                return XmlDoc.DocumentElement;
            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0).ToErrors;
            }
        }

        #endregion "CheckRuleAP(사전발권 조회)"

        #region "CheckRuleTariff(RuleID와 TariffID 조회)"

        /// <summary>
        /// 운임규정(Rule ID와 Tariff ID) 조회
		/// </summary>
		/// <param name="SNM">사이트 번호</param>
		/// <param name="PMID">프로모션 번호</param>
		/// <param name="INO">여정번호</param>
		/// <param name="DTD">출발일(YYYYMMDD)</param>
		/// <param name="DTT">출발시간(HHMM)</param>
		/// <param name="ARD">도착일(YYYYMMDD)</param>
		/// <param name="ART">도착시간(HHMM)</param>
		/// <param name="DLC">출발지</param>
		/// <param name="ALC">도착지</param>
		/// <param name="MCC">마케팅항공사</param>
		/// <param name="OCC">운항항공사</param>
		/// <param name="FLN">편명</param>
		/// <param name="RBD">좌석클래스</param>
		/// <param name="PTC">탑승객 타입 코드</param>
		/// <param name="NOP">탑승객 수</param>
		/// <returns></returns>
		[WebMethod(Description = "Rule ID와 Tariff ID 조회")]
		public XmlElement CheckRuleTariffRS(int SNM, string PMID, int[] INO, string[] DTD, string[] DTT, string[] ARD, string[] ART, string[] DLC, string[] ALC, string[] MCC, string[] OCC, string[] FLN, string[] RBD, string[] PTC, int[] NOP)
		{
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
			string SID = String.Empty;
			string SCT = String.Empty;
			int SQN = 0;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청10", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청11", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청12", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청13", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청14", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 11;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = PMID;
                sqlParam[8].Value = String.Join("^", INO);
                sqlParam[9].Value = String.Join("^", DTD);
                sqlParam[10].Value = String.Join("^", DTT);
                sqlParam[11].Value = String.Join("^", ARD);
                sqlParam[12].Value = String.Join("^", ART);
                sqlParam[13].Value = String.Join("^", DLC);
                sqlParam[14].Value = String.Join("^", ALC);
                sqlParam[15].Value = String.Join("^", MCC);
                sqlParam[16].Value = String.Join("^", OCC);
                sqlParam[17].Value = String.Join("^", FLN);
                sqlParam[18].Value = String.Join("^", RBD);
                sqlParam[19].Value = String.Join("^", PTC);
                sqlParam[20].Value = String.Join("^", NOP);

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

			try
			{
				//통합용
				XmlDocument XmlDoc = new XmlDocument();
				XmlDoc.Load(mc.XmlFullPath("CheckRulesTariffRS"));

				XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

				XmlNode ResponseDetails = XmlDoc.SelectSingleNode("ResponseDetails");
				XmlNode FlightDetails = ResponseDetails.SelectSingleNode("flightDetails");
				XmlNode NewFlightDetails;

				//결과
				XmlElement ResXml;
				XmlElement ResRule;

				//네임스페이스
				XmlNamespaceManager xnMgr1;
				XmlNamespaceManager xnMgr2;

				//### 01.세션생성 #####
				XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

				SID = Session.SelectSingleNode("session/sessionId").InnerText;
				SCT = Session.SelectSingleNode("session/securityToken").InnerText;
				SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

				//### 02.Pricing(Fare_InformativePricingWithoutPNR) #####
				ResXml = amd.InformativePricingWithoutPNRRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), "", INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, PTC, NOP);

				//오류 결과일 경우 예외 처리
				xnMgr1 = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
				xnMgr1.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_InformativePricingWithoutPNR"));

				if (ResXml.SelectNodes("m:errorGroup", xnMgr1).Count > 0)
				{
					throw new Exception(ResXml.SelectSingleNode("m:errorGroup/m:errorWarningDescription/m:freeText", xnMgr1).InnerText);
				}

				//### 03.CheckRules #####
				foreach (XmlNode FareComponent in ResXml.SelectNodes("m:mainGroup/m:pricingGroupLevelGroup/m:fareInfoGroup/m:fareComponentDetailsGroup", xnMgr1))
				{
					string FcNumber = FareComponent.SelectSingleNode("m:fareComponentID/m:itemNumberDetails/m:number", xnMgr1).InnerText;
					ResRule = amd.CheckRulesTariffRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03_", FcNumber), FcNumber);

					xnMgr2 = new XmlNamespaceManager(ResRule.OwnerDocument.NameTable);
					xnMgr2.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_CheckRules"));

					if (ResRule.SelectNodes("m:errorInfo", xnMgr2).Count > 0)
					{
						throw new Exception(ResRule.SelectSingleNode("m:errorInfo/m:errorFreeText/m:freeText", xnMgr2).InnerText);
					}

					foreach (XmlNode flightDetails in ResRule.SelectNodes("m:flightDetails", xnMgr2))
					{
						NewFlightDetails = ResponseDetails.AppendChild(FlightDetails.CloneNode(true));
						NewFlightDetails.Attributes.GetNamedItem("ref").InnerText = FcNumber;

						NewFlightDetails.SelectSingleNode("originDestination/origin").InnerText = flightDetails.SelectSingleNode("m:odiGrp/m:originDestination/m:origin", xnMgr2).InnerText;
						NewFlightDetails.SelectSingleNode("originDestination/destination").InnerText = flightDetails.SelectSingleNode("m:odiGrp/m:originDestination/m:destination", xnMgr2).InnerText;
						NewFlightDetails.SelectSingleNode("rule").Attributes.GetNamedItem("id").InnerText = (flightDetails.SelectNodes("m:travellerGrp/m:travellerIdentRef/m:referenceDetails[m:type='RU']", xnMgr2).Count > 0) ? flightDetails.SelectSingleNode("m:travellerGrp/m:travellerIdentRef/m:referenceDetails[m:type='RU']/m:value", xnMgr2).InnerText : "";
						NewFlightDetails.SelectSingleNode("tariff").Attributes.GetNamedItem("id").InnerText = (flightDetails.SelectNodes("m:travellerGrp/m:fareRulesDetails", xnMgr2).Count > 0) ? flightDetails.SelectSingleNode("m:travellerGrp/m:fareRulesDetails/m:tariffClassId", xnMgr2).InnerText : "";
					}
				}

				ResponseDetails.RemoveChild(FlightDetails);

				//### 04.세션종료 #####
				SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"));

				return XmlDoc.DocumentElement;
			}
			catch (Exception ex)
			{
				//### 세션종료 #####
				if (SQN > 0)
					amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 11, 0, 0).ToErrors;
			}
		}

		//[WebMethod(Description = "Rule ID와 Tariff ID 조회")]
		public XmlElement CheckRuleTariffPNRRS(int SNM, string PNR)
		{
			string GUID = cm.GetGUID;
			string SID = String.Empty;
			string SCT = String.Empty;
			int SQN = 0;

			try
			{
				//통합용
				XmlDocument XmlDoc = new XmlDocument();
				XmlDoc.Load(mc.XmlFullPath("CheckRulesTariffRS"));

				XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

				XmlNode ResponseDetails = XmlDoc.SelectSingleNode("ResponseDetails");
				XmlNode FlightDetails = ResponseDetails.SelectSingleNode("flightDetails");
				XmlNode NewFlightDetails;

				//결과
				XmlElement ResXml;
				XmlElement ResRule;

				//네임스페이스
				XmlNamespaceManager xnMgr;
				XmlNamespaceManager xnMgr1;
				XmlNamespaceManager xnMgr2;

				//### 01.세션생성 #####
				XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

				SID = Session.SelectSingleNode("session/sessionId").InnerText;
				SCT = Session.SelectSingleNode("session/securityToken").InnerText;
				SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

				//### 02.PNR조회(PNR_Retrieve) #####
				ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

				xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
				xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

				//### 03.운임Pricing(Fare_PricePNRWithBookingClass) #####
				ResXml = amd.PricePNRWithBookingClassPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), ((ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo", xnMgr).Count > 0 && ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).InnerText : null), "", null);

				//오류 결과일 경우 예외 처리
				xnMgr1 = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
				xnMgr1.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassPricing"));

                if (ResXml.SelectNodes("m:applicationError", xnMgr1).Count > 0)
				{
                    throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgr1).InnerText);
				}

				//### 04.CheckRules #####
				foreach (XmlNode FareList in ResXml.SelectNodes("m:fareList", xnMgr1))
				{
					string FcNumber = FareList.SelectSingleNode("m:fareReference[m:referenceType='TST']/m:uniqueReference", xnMgr1).InnerText;
					ResRule = amd.CheckRulesTariffRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04_", FcNumber), FcNumber);

					xnMgr2 = new XmlNamespaceManager(ResRule.OwnerDocument.NameTable);
					xnMgr2.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_CheckRules"));

					if (ResRule.SelectNodes("m:errorInfo", xnMgr2).Count > 0)
					{
						throw new Exception(ResRule.SelectSingleNode("m:errorInfo/m:errorFreeText/m:freeText", xnMgr2).InnerText);
					}

					foreach (XmlNode flightDetails in ResRule.SelectNodes("m:flightDetails", xnMgr2))
					{
						NewFlightDetails = ResponseDetails.AppendChild(FlightDetails.CloneNode(true));
						NewFlightDetails.Attributes.GetNamedItem("ref").InnerText = FcNumber;

						NewFlightDetails.SelectSingleNode("originDestination/origin").InnerText = flightDetails.SelectSingleNode("m:odiGrp/m:originDestination/m:origin", xnMgr2).InnerText;
						NewFlightDetails.SelectSingleNode("originDestination/destination").InnerText = flightDetails.SelectSingleNode("m:odiGrp/m:originDestination/m:destination", xnMgr2).InnerText;
						NewFlightDetails.SelectSingleNode("rule").Attributes.GetNamedItem("id").InnerText = (flightDetails.SelectNodes("m:travellerGrp/m:travellerIdentRef/m:referenceDetails[m:type='RU']", xnMgr2).Count > 0) ? flightDetails.SelectSingleNode("m:travellerGrp/m:travellerIdentRef/m:referenceDetails[m:type='RU']/m:value", xnMgr2).InnerText : "";
						NewFlightDetails.SelectSingleNode("tariff").Attributes.GetNamedItem("id").InnerText = (flightDetails.SelectNodes("m:travellerGrp/m:fareRulesDetails", xnMgr2).Count > 0) ? flightDetails.SelectSingleNode("m:travellerGrp/m:fareRulesDetails/m:tariffClassId", xnMgr2).InnerText : "";
					}
				}

				ResponseDetails.RemoveChild(FlightDetails);

				//### 04.세션종료 #####
				SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05"));

				return XmlDoc.DocumentElement;
			}
			catch (Exception ex)
			{
				//### 세션종료 #####
				if (SQN > 0)
					amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0).ToErrors;
			}
		}

		#endregion "CheckRuleTariff(RuleID와 TariffID 조회)"

		#region "DB이용한 운임규정 조회(실시간항공용)"

		//[WebMethod(Description = "운임규정 조회(실시간항공용)")]
		public XmlElement SearchRule1RS(int SNM, string PMID, string FareNo, string FareRuleFlag)
		{
			string GUID = cm.GetGUID;

			try
			{
				//### 01. 규정조회 #####
				XmlElement ResXml = amd.SearchRule2RS(SNM, FareNo, FareRuleFlag);
                cm.XmlFileSave(ResXml, mc.Name, "SearchRule1RS", "N", GUID);

				if (ResXml.SelectNodes("rule").Count.Equals(0))
				{
					throw new Exception("등록된 운임규정이 없습니다.");
				}

				//### 02. 통합모드 #####
				XmlElement XmlMode = ToModeSearchRule2RS(ResXml);
                cm.XmlFileSave(XmlMode, mc.Name, "ToModeSearchRule1RS", "N", GUID);

				//### 03.프로모션 #####
				if (cm.RequestInt(PMID) > 0)
					return UpdatePromotionInfo(cm.RequestInt(PMID), XmlMode);
				else
					return XmlMode;
			}
			catch (Exception ex)
			{
                return new MWSExceptionMode(ex, hcc, GUID, "AirService", MethodBase.GetCurrentMethod().Name, 0, 0, 0).ToErrors;
			}
		}

		/// <summary>
		/// SearchRule1RS를 통합용 XML구조로 치환
		/// </summary>
		/// <param name="ResXml">SearchRule1RS의 Data</param>
		/// <returns></returns>
		protected XmlElement ToModeSearchRule1RS(XmlElement ResXml)
		{
			XmlDocument XmlDoc = new XmlDocument();
			XmlDoc.Load(mc.XmlFullPath("SearchRuleRS"));

			XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

			XmlNode ResponseDetails = XmlDoc.SelectSingleNode("ResponseDetails");
			XmlNode Rule = ResponseDetails.SelectSingleNode("rule");
			XmlNode Item = Rule.SelectSingleNode("item");
			XmlNode NewItem;

			Rule.Attributes.GetNamedItem("ref").InnerText = "1";

			foreach (XmlNode RuleItem in ResXml.SelectNodes("rule[not(starts-with(RULE_ITEM_NM, 'TOPAS')) and not(starts-with(RULE_ITEM_NM, 'MODETOUR'))]"))
			{
				NewItem = Rule.AppendChild(Item.CloneNode(true));
				NewItem.Attributes.GetNamedItem("ref").InnerText = RuleItem.SelectSingleNode("RULE_NO").InnerText;
				NewItem.SelectSingleNode("name").InnerText = RuleItem.SelectSingleNode("RULE_ITEM_NM").InnerText.Trim();
				NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(RuleItem.SelectSingleNode("RULE_CONTENT").InnerText));
			}

			Rule.RemoveChild(Item);
			ResponseDetails.RemoveChild(ResponseDetails.SelectSingleNode("fareInfos"));

			return XmlDoc.DocumentElement;
		}

		#endregion "DB이용한 운임규정 조회(실시간항공용)"

		#region "DB이용한 운임규정 조회(할인항공용)"

		/// <summary>
		/// 운임규정 조회(할인항공용)
		/// </summary>
		/// <param name="SNM">사이트 번호</param>
		/// <param name="PMID">프로모션 번호</param>
		/// <param name="FareNo">FARE_NO의 값</param>
		/// <param name="FareRuleFlag">할인항공:H, 이벤트:E</param>
		/// <returns></returns>
		//[WebMethod(Description = "운임규정 조회(할인항공용)")]
		public XmlElement SearchRule2RS(int SNM, string PMID, string FareNo, string FareRuleFlag)
		{
			string GUID = cm.GetGUID;

			try
			{
				//### 01. 규정조회 #####
				XmlElement ResXml = amd.SearchRule2RS(SNM, FareNo, FareRuleFlag);
                cm.XmlFileSave(ResXml, mc.Name, "SearchRule2RS", "N", GUID);

				if (ResXml.SelectNodes("rule").Count.Equals(0))
				{
					throw new Exception("등록된 운임규정이 없습니다.");
				}

				//### 02. 통합모드 #####
				XmlElement XmlMode = ToModeSearchRule2RS(ResXml);
                cm.XmlFileSave(XmlMode, mc.Name, "ToModeSearchRule2RS", "N", GUID);

				//### 03.프로모션 #####
				if (cm.RequestInt(PMID) > 0)
					return UpdatePromotionInfo(cm.RequestInt(PMID), XmlMode);
				else
					return XmlMode;
			}
			catch (Exception ex)
			{
                return new MWSExceptionMode(ex, hcc, GUID, "AirService", MethodBase.GetCurrentMethod().Name, 0, 0, 0).ToErrors;
			}
		}

		/// <summary>
		/// SearchRule2RS를 통합용 XML구조로 치환
		/// </summary>
		/// <param name="ResXml">SearchRule2RS의 Data</param>
		/// <returns></returns>
		protected XmlElement ToModeSearchRule2RS(XmlElement ResXml)
		{
			XmlDocument XmlDoc = new XmlDocument();
			XmlDoc.Load(mc.XmlFullPath("SearchRuleRS"));

			XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

			XmlNode ResponseDetails = XmlDoc.SelectSingleNode("ResponseDetails");
			XmlNode Rule = ResponseDetails.SelectSingleNode("rule");
			XmlNode Item = Rule.SelectSingleNode("item");
			XmlNode NewItem;
			string ItemName = string.Empty;
			string ItemNumber = string.Empty;
			string ItemMessage = string.Empty;

			Rule.Attributes.GetNamedItem("ref").InnerText = "1";

			foreach (XmlNode RuleItem in ResXml.SelectNodes("rule[not(starts-with(RULE_ITEM_NM, 'TOPAS')) and not(starts-with(RULE_ITEM_NM, 'MODETOUR'))]"))
			{
				if (!String.IsNullOrWhiteSpace(ItemName) && !ItemName.Equals(RuleItem.SelectSingleNode("RULE_ITEM_NM").InnerText.Trim()))
				{
					NewItem = Rule.AppendChild(Item.CloneNode(true));
					NewItem.Attributes.GetNamedItem("ref").InnerText = ItemNumber;
					NewItem.SelectSingleNode("name").InnerText = ItemName;
					NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(ItemMessage));

					ItemMessage = "";
				}

				ItemName = RuleItem.SelectSingleNode("RULE_ITEM_NM").InnerText.Trim();
				ItemNumber = RuleItem.SelectSingleNode("RULE_NO").InnerText;
				ItemMessage += RuleItem.SelectSingleNode("RULE_CONTENT").InnerText;
			}

			if (!String.IsNullOrWhiteSpace(ItemName))
			{
				NewItem = Rule.AppendChild(Item.CloneNode(true));
				NewItem.Attributes.GetNamedItem("ref").InnerText = ItemNumber;
				NewItem.SelectSingleNode("name").InnerText = ItemName;
				NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(ItemMessage));
			}

			Rule.RemoveChild(Item);
			ResponseDetails.RemoveChild(ResponseDetails.SelectSingleNode("fareInfos"));

			return XmlDoc.DocumentElement;
		}

		#endregion "DB이용한 운임규정 조회(할인항공용)"

		#region "운임규정 조회(할인항공, 오픈마켓용)"

		/// <summary>
		/// 운임규정 조회(할인항공, 오픈마켓용)
		/// </summary>
		/// <param name="SNM">사이트 번호</param>
		/// <param name="PMID">프로모션 번호</param>
		/// <param name="FareNo">FARE_NO의 값</param>
		/// <param name="FareRuleFlag">할인항공:H, 이벤트:E</param>
		/// <returns></returns>
		[WebMethod(Description = "운임규정 조회(할인항공, 오픈마켓용)")]
		public XmlElement SearchRule3RS(int SNM, string PMID, string FareNo, string FareRuleFlag)
		{
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 37;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = PMID;
                sqlParam[8].Value = FareNo;
                sqlParam[9].Value = FareRuleFlag;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

			try
			{
				//### 01. 규정조회 #####
				XmlElement ResXml = amd.SearchRulesRS("", FareNo, FareRuleFlag);
                cm.XmlFileSave(ResXml, mc.Name, "SearchRule3RS", "N", GUID);

				if (ResXml.SelectNodes("data/tfrAaa_Controller_TAIFARRUL1110110330_RS/fareRule_Service_RS/RuleItem").Count.Equals(0))
				{
					throw new Exception("등록된 운임규정이 없습니다.");
				}

				//### 02. 통합모드 #####
				XmlElement XmlMode = ToModeSearchRule3RS(ResXml);
                cm.XmlFileSave(XmlMode, mc.Name, "ToModeSearchRule3RS", "N", GUID);

				//### 03.프로모션 #####
				if (cm.RequestInt(PMID) > 0)
					return UpdatePromotionInfo(cm.RequestInt(PMID), XmlMode);
				else
					return XmlMode;
			}
			catch (Exception ex)
			{
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 37, 0, 0).ToErrors;
			}
		}

		/// <summary>
		/// SearchRule3RS를 통합용 XML구조로 치환
		/// </summary>
		/// <param name="ResXml">SearchRule3RS의 Data</param>
		/// <returns></returns>
		protected XmlElement ToModeSearchRule3RS(XmlElement ResXml)
		{
			XmlDocument XmlDoc = new XmlDocument();
			XmlDoc.Load(mc.XmlFullPath("SearchRuleRS"));

			XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

			XmlNode ResponseDetails = XmlDoc.SelectSingleNode("ResponseDetails");
			XmlNode Rule = ResponseDetails.SelectSingleNode("rule");
			XmlNode Item = Rule.SelectSingleNode("item");
			XmlNode NewItem;
			
			Rule.Attributes.GetNamedItem("ref").InnerText = "1";

			foreach (XmlNode RuleItem in ResXml.SelectNodes("data/tfrAaa_Controller_TAIFARRUL1110110330_RS/fareRule_Service_RS/RuleItem[not(starts-with(ruleitemnm, 'TOPAS')) and not(starts-with(ruleitemnm, 'MODETOUR'))]"))
			{
				NewItem = Rule.AppendChild(Item.CloneNode(true));
				NewItem.Attributes.GetNamedItem("ref").InnerText = RuleItem.SelectSingleNode("ruleno").InnerText;
				NewItem.SelectSingleNode("name").InnerText = RuleItem.SelectSingleNode("ruleitemnm").InnerText;
				NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(RuleItem.SelectSingleNode("rulecontent").InnerText));
			}

			Rule.RemoveChild(Item);
			ResponseDetails.RemoveChild(ResponseDetails.SelectSingleNode("fareInfos"));

			return XmlDoc.DocumentElement;
		}

		#endregion "운임규정 조회(할인항공, 오픈마켓용)"

		#region "예약 운임규정 조회"

		/// <summary>
		/// 운임규정 조회(예약시 저장된 규정)
		/// </summary>
		/// <param name="OID">주문번호</param>
		/// <param name="PID">예약자번호(PTID)</param>
		/// <returns></returns>
		[WebMethod(Description = "운임규정 조회(예약시 저장된 규정)")]
		public XmlElement SearchBookingRuleRS(int OID, int PID)
		{
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 23;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
			{
				string ErrCode = string.Empty;
				string ErrMsg = string.Empty;
				string RuleXml = string.Empty;
				XmlDocument XmlDoc = new XmlDocument();

				using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
				{
					SqlCommand cmd = new SqlCommand();

					cmd.Connection = conn;
					cmd.CommandTimeout = 60;
					cmd.CommandType = CommandType.StoredProcedure;
					cmd.CommandText = "DBO.WSV_S_아이템예약_해외항공_요금규정조회";

					cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
					cmd.Parameters.Add("@예약자번호", SqlDbType.Int, 0);
					cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
					cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

					cmd.Parameters["@주문번호"].Value = OID;
					cmd.Parameters["@예약자번호"].Value = PID;
					cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
					cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

					try
					{
						conn.Open();

						RuleXml = cmd.ExecuteScalar().ToString();
						ErrCode = cmd.Parameters["@결과"].Value.ToString();
						ErrMsg = cmd.Parameters["@에러메시지"].Value.ToString();
					}
					catch (Exception ex)
					{
						ErrCode = "F";
						ErrMsg = ex.ToString();
					}
					finally
					{
						conn.Close();
					}
				}

			    if (ErrCode.Equals("S"))
			    {
			        XmlDoc.LoadXml(RuleXml);
			        return XmlDoc.DocumentElement;
			    }
			    else
			        throw new Exception(ErrMsg);
			}
			catch (Exception ex)
			{
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 23, OID, 0).ToErrors;
			}
		}

		#endregion "예약 운임규정 조회"

		#region "운임규정 데이타 캐싱"

		/// <summary>
		/// 운임규정 데이타 캐싱
		/// </summary>
		/// <param name="DLC">출발지 공항 코드</param>
		/// <param name="ALC">도착지 공항 코드</param>
		/// <param name="SAC">항공사 코드</param>
		/// <param name="DTD">출발일(YYYY-MM-DD)</param>
		/// <param name="ARD">귀국일(YYYY-MM-DD)</param>
		/// <param name="RTG">여정도시</param>
		/// <param name="CRR">여정항공사</param>
		/// <param name="OCR">여정운항항공사</param>
		/// <param name="CLS">여정클래스</param>
		/// <param name="FLT">여정비행편</param>
		/// <param name="Rule1">요금규정1</param>
		/// <param name="Rule2">요금규정2</param>
		/// <param name="Gubun">실패여부(Y:규정미조회, N:규정조회)</param>
		//[WebMethod(Description = "운임규정 데이타 캐싱")]
		protected void CheckRuleDB(string DLC, string ALC, string SAC, string DTD, string ARD, string RTG, string CRR, string OCR, string CLS, string FLT, XmlElement Rule1, XmlElement Rule2, string Gubun)
		{
			using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["NEWEAGLE"].ConnectionString))
			{
				SqlCommand cmd = new SqlCommand
				{
					Connection = conn,
					CommandTimeout = 60,
					CommandType = CommandType.StoredProcedure,
					CommandText = "DBO.WSV_T_아이템_항공_규정미등록"
				};

				cmd.Parameters.Add("@출발지", SqlDbType.Char, 3);
				cmd.Parameters.Add("@도착지", SqlDbType.Char, 3);
				cmd.Parameters.Add("@항공사", SqlDbType.Char, 2);
				cmd.Parameters.Add("@출발일", SqlDbType.VarChar, 10);
				cmd.Parameters.Add("@귀국일", SqlDbType.VarChar, 10);
				cmd.Parameters.Add("@여정도시", SqlDbType.VarChar, 100);
				cmd.Parameters.Add("@여정항공사", SqlDbType.VarChar, 100);
				cmd.Parameters.Add("@여정운항항공사", SqlDbType.VarChar, 100);
				cmd.Parameters.Add("@여정클래스", SqlDbType.VarChar, 100);
				cmd.Parameters.Add("@여정비행편", SqlDbType.VarChar, 100);
				cmd.Parameters.Add("@요금규정1", SqlDbType.Xml, -1);
				cmd.Parameters.Add("@요금규정2", SqlDbType.Xml, -1);
				cmd.Parameters.Add("@구분", SqlDbType.Char, 1);
				cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
				cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

				cmd.Parameters["@출발지"].Value = DLC;
				cmd.Parameters["@도착지"].Value = ALC;
				cmd.Parameters["@항공사"].Value = SAC;
				cmd.Parameters["@출발일"].Value = DTD;
				cmd.Parameters["@귀국일"].Value = ARD;
				cmd.Parameters["@여정도시"].Value = RTG;
				cmd.Parameters["@여정항공사"].Value = CRR;
				cmd.Parameters["@여정운항항공사"].Value = OCR;
				cmd.Parameters["@여정클래스"].Value = CLS;
				cmd.Parameters["@여정비행편"].Value = FLT;
				cmd.Parameters["@요금규정1"].Value = Rule1.OuterXml;
				cmd.Parameters["@요금규정2"].Value = Rule2.OuterXml;
				cmd.Parameters["@구분"].Value = Gubun;
				cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
				cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

				try
				{
					conn.Open();
					cmd.ExecuteNonQuery();
				}
				finally
				{
					conn.Close();
				}
			}
		}

		#endregion "운임규정 데이타 캐싱"

        #endregion "운임규정 조회"

        #region "무료수하물"

        #region "무료수하물(스케쥴 이용)"

        //[WebMethod(Description = "무료수하물 조회(스케쥴 이용)")]
        public XmlElement SearchBaggageTestRS()
        {
            int SNM = 2;
            int[] INO = new Int32[4] { 1, 1, 2, 2 };
            string[] DTD = new String[4] { "20160713", "20160713", "20160716", "20160717" };
            string[] DTT = new String[4] { "1510", "2125", "1850", "0100" };
            string[] ARD = new String[4] { "20160713", "20160713", "20160716", "20160717" };
            string[] ART = new String[4] { "1750", "2315", "2240", "0535" };
            string[] DLC = new String[4] { "ICN", "HKG", "BKK", "HKG" };
            string[] ALC = new String[4] { "HKG", "BKK", "HKG", "ICN" };
            string[] MCC = new String[4] { "CX", "CX", "CX", "CX" };
            string[] OCC = new String[4] { "CX", "CX", "CX", "CX" };
            string[] FLN = new String[4] { "411", "617", "702", "412" };
            string[] RBD = new String[4] { "V", "V", "H", "H" };
            int ADC = 1;
            int CHC = 1;
            int IFC = 1;

            //int[] INO = new Int32[2] { 1, 2 };
            //string[] DTD = new String[2] { "20160913", "20160916" };
            //string[] DTT = new String[2] { "1420", "0110" };
            //string[] ARD = new String[2] { "20160913", "20160916" };
            //string[] ART = new String[2] { "1930", "0825" };
            //string[] DLC = new String[2] { "ICN", "SIN" };
            //string[] ALC = new String[2] { "SIN", "ICN" };
            //string[] MCC = new String[2] { "KE", "KE" };
            //string[] OCC = new String[2] { "KE", "KE" };
            //string[] FLN = new String[2] { "643", "642" };
            //string[] RBD = new String[2] { "M", "M" };
            //int ADC = 1;
            //int CHC = 0;
            //int IFC = 0;

            return SearchBaggageRS(SNM, "WEBSERVICE", INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, ADC, CHC, IFC);
        }

        /// <summary>
        /// 무료수하물 조회(스케쥴 이용)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="INO">여정번호</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="DTT">출발시간(HHMM)</param>
        /// <param name="ARD">도착일(YYYYMMDD)</param>
        /// <param name="ART">도착시간(HHMM)</param>
        /// <param name="DLC">출발지</param>
        /// <param name="ALC">도착지</param>
        /// <param name="MCC">마케팅항공사</param>
        /// <param name="OCC">운항항공사</param>
        /// <param name="FLN">편명</param>
        /// <param name="RBD">좌석클래스</param>
        /// <param name="ADC">성인 탑승객 수</param>
        /// <param name="CHC">소아 탑승객 수</param>
        /// <param name="IFC">유아 탑승객 수</param>
        [WebMethod(Description = "무료수하물 조회(스케쥴 이용)")]
        public XmlElement SearchBaggageRS(int SNM, string RQT, int[] INO, string[] DTD, string[] DTT, string[] ARD, string[] ART, string[] DLC, string[] ALC, string[] MCC, string[] OCC, string[] FLN, string[] RBD, int ADC, int CHC, int IFC)
        {
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청10", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청11", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청12", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청13", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청14", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 478;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = RQT;
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = String.Join("^", INO);
                sqlParam[8].Value = String.Join("^", DTD);
                sqlParam[9].Value = String.Join("^", DTT);
                sqlParam[10].Value = String.Join("^", ARD);
                sqlParam[11].Value = String.Join("^", ART);
                sqlParam[12].Value = String.Join("^", DLC);
                sqlParam[13].Value = String.Join("^", ALC);
                sqlParam[14].Value = String.Join("^", MCC);
                sqlParam[15].Value = String.Join("^", OCC);
                sqlParam[16].Value = String.Join("^", FLN);
                sqlParam[17].Value = String.Join("^", RBD);
                sqlParam[18].Value = ADC;
                sqlParam[19].Value = CHC;
                sqlParam[20].Value = IFC;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //결과
                XmlElement ResXml = SearchAirQuoteTax(SNM, GUID, INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, ADC, CHC, IFC);
                
                //네임스페이스
                XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_InformativePricingWithoutPNR"));

                return ToModeSearchBaggageRS(INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, ADC, CHC, IFC, ResXml, xnMgr);
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 478, 0, 0).ToErrors;
            }
        }

        /// <summary>
        /// SearchBaggageRS를 통합용 XML구조로 치환
        /// </summary>
        /// <param name="INO">여정번호</param>
        /// <param name="DTD">출발일(YYYYMMDD)</param>
        /// <param name="DTT">출발시간(HHMM)</param>
        /// <param name="ARD">도착일(YYYYMMDD)</param>
        /// <param name="ART">도착시간(HHMM)</param>
        /// <param name="DLC">출발지</param>
        /// <param name="ALC">도착지</param>
        /// <param name="MCC">마케팅항공사</param>
        /// <param name="OCC">운항항공사</param>
        /// <param name="FLN">편명</param>
        /// <param name="RBD">좌석클래스</param>
        /// <param name="ADC">성인 탑승객 수</param>
        /// <param name="CHC">소아 탑승객 수</param>
        /// <param name="IFC">유아 탑승객 수</param>
        /// <param name="ResXml">SearchBaggageRS의 Data</param>
        /// <param name="xnMgr">XmlNamespaceManager</param>
        /// <returns></returns>
        public XmlElement ToModeSearchBaggageRS(int[] INO, string[] DTD, string[] DTT, string[] ARD, string[] ART, string[] DLC, string[] ALC, string[] MCC, string[] OCC, string[] FLN, string[] RBD, int ADC, int CHC, int IFC, XmlElement ResXml, XmlNamespaceManager xnMgr)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchBaggageRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
            XmlNode SegGroup = FlightInfo.SelectSingleNode("segGroup");
            XmlNode Seg = SegGroup.SelectSingleNode("seg");
            XmlNode Baggage = Seg.SelectSingleNode("baggage");
            XmlNode NewSegGroup = null;
            XmlNode NewSeg = null;
            XmlNode NewBaggage = null;
            int TmpIno = 0;
            int SegRef = 1;

            for (int i = 0; i < INO.Length; i++)
            {
                if (TmpIno != INO[i])
                {
                    TmpIno = INO[i];
                    SegRef = 1;
                    NewSegGroup = FlightInfo.AppendChild(SegGroup.CloneNode(false));
                    NewSegGroup.Attributes.GetNamedItem("ref").InnerText = TmpIno.ToString();
                }

                if (NewSegGroup != null)
                {
                    NewSeg = NewSegGroup.AppendChild(Seg.CloneNode(false));
                    NewSeg.Attributes.GetNamedItem("ref").InnerText = (SegRef++).ToString();
                    NewSeg.Attributes.GetNamedItem("dlc").InnerText = DLC[i];
                    NewSeg.Attributes.GetNamedItem("alc").InnerText = ALC[i];
                    NewSeg.Attributes.GetNamedItem("ddt").InnerText = cm.RequestDateTime(DTD[i] + DTT[i], "yyyy-MM-dd HH:mm");
                    NewSeg.Attributes.GetNamedItem("ardt").InnerText = cm.RequestDateTime(ARD[i] + ART[i], "yyyy-MM-dd HH:mm");
                    NewSeg.Attributes.GetNamedItem("mcc").InnerText = MCC[i];
                    NewSeg.Attributes.GetNamedItem("occ").InnerText = OCC[i];
                    NewSeg.Attributes.GetNamedItem("fln").InnerText = FLN[i];
                    NewSeg.Attributes.GetNamedItem("rbd").InnerText = RBD[i];

                    foreach (XmlNode SegmentLevelGroup in ResXml.SelectNodes(String.Format("m:mainGroup/m:pricingGroupLevelGroup/m:fareInfoGroup/m:segmentLevelGroup[m:segmentInformation/m:boardPointDetails/m:trueLocationId='{0}'][m:segmentInformation/m:offpointDetails/m:trueLocationId='{1}'][m:segmentInformation/m:flightIdentification/m:flightNumber='{2}']", DLC[i], ALC[i], FLN[i]), xnMgr))
                    {
                        NewBaggage = NewSeg.AppendChild(Baggage.CloneNode(false));
                        NewBaggage.Attributes.GetNamedItem("ptc").InnerText = Common.ChangePaxType1(SegmentLevelGroup.SelectSingleNode("m:ptcSegment/m:quantityDetails/m:unitQualifier", xnMgr).InnerText);

                        if (SegmentLevelGroup.SelectNodes("m:baggageAllowance/m:baggageDetails/m:freeAllowance", xnMgr).Count > 0)
                            NewBaggage.InnerText = Common.BaggageEmpty(String.Concat(SegmentLevelGroup.SelectSingleNode("m:baggageAllowance/m:baggageDetails/m:freeAllowance", xnMgr).InnerText, Common.BaggageUnitCode(SegmentLevelGroup.SelectSingleNode("m:baggageAllowance/m:baggageDetails/m:quantityCode", xnMgr).InnerText, "")));
                        else
                            NewBaggage.InnerText = "";
                    }
                }
            }

            FlightInfo.RemoveChild(SegGroup);

            return XmlDoc.DocumentElement;
        }

        #endregion "무료수하물(스케쥴 이용)"

        #region "무료수하물(PNR 이용)"

        /// <summary>
        /// 무료수하물 조회(PNR 이용)
        /// </summary>
        /// <param name="SNM"></param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="PNR"></param>
        /// <returns></returns>
        [WebMethod(Description = "무료수하물 조회(PNR 이용)")]
        public XmlElement SearchBaggagePNRRS(int SNM, string RQT, string PNR)
        {
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 479;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = RQT;
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = PNR;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //결과
                XmlElement ResXml;

                //네임스페이스
                XmlNamespaceManager xnMgr;

                //### 01.세션생성 #####
                XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

                SID = Session.SelectSingleNode("session/sessionId").InnerText;
                SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                //### 02.PNR조회(PNR_Retrieve) #####
                ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                //### 03.운임Pricing(Fare_PricePNRWithBookingClass) #####
                ResXml = amd.PricePNRWithBookingClassPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), ((ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo", xnMgr).Count > 0 && ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).InnerText : null), "", null);

                //오류 결과일 경우 예외 처리
                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassPricing"));

                if (ResXml.SelectNodes("m:applicationError", xnMgr).Count > 0)
                {
                    throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgr).InnerText);
                }

                //### 04.세션종료 #####
                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"));

                return ToModeSearchBaggagePNRRS(ResXml, xnMgr);
            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 479, 0, 0).ToErrors;
            }
        }

        protected XmlElement ToModeSearchBaggagePNRRS(XmlElement ResXml, XmlNamespaceManager xnMgr)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchBaggagePNRRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            XmlNode ResponseDetails = XmlDoc.SelectSingleNode("ResponseDetails");
            XmlNode FareList = ResponseDetails.SelectSingleNode("fareList");
            XmlNode PaxType = FareList.SelectSingleNode("paxType");
            XmlNode Seg = FareList.SelectSingleNode("seg");
            XmlNode NewFareList = null;
            XmlNode NewSeg = null;

            foreach (XmlNode TmpFareList in ResXml.SelectNodes("m:fareList", xnMgr))
            {
                NewFareList = ResponseDetails.AppendChild(FareList.CloneNode(false));
                NewFareList.AppendChild(PaxType.Clone()).InnerText = Common.ChangePaxType1(TmpFareList.SelectSingleNode("m:segmentInformation/m:fareQualifier/m:fareBasisDetails/m:discTktDesignator", xnMgr).InnerText);
                
                foreach (XmlNode FareComponentDetailsGroup in TmpFareList.SelectNodes("m:fareComponentDetailsGroup", xnMgr))
                {
                    NewSeg = NewFareList.AppendChild(Seg.CloneNode(false));
                    NewSeg.Attributes.GetNamedItem("ref").InnerText = FareComponentDetailsGroup.SelectSingleNode("m:couponDetailsGroup/m:productId/m:referenceDetails[m:type='ST']/m:value", xnMgr).InnerText;
                    NewSeg.Attributes.GetNamedItem("dlc").InnerText = FareComponentDetailsGroup.SelectSingleNode("m:marketFareComponent/m:boardPointDetails/m:trueLocationId", xnMgr).InnerText;
                    NewSeg.Attributes.GetNamedItem("alc").InnerText = FareComponentDetailsGroup.SelectSingleNode("m:marketFareComponent/m:offpointDetails/m:trueLocationId", xnMgr).InnerText;
                    
                    XmlNode SegmentInformation = TmpFareList.SelectSingleNode(String.Format("m:segmentInformation[m:segmentReference/m:refDetails[m:refQualifier='S']/m:refNumber={0}]", NewSeg.Attributes.GetNamedItem("ref").InnerText), xnMgr);

                    if (SegmentInformation.SelectSingleNode("m:bagAllowanceInformation/m:bagAllowanceDetails/m:baggageType", xnMgr).InnerText.Equals("W"))
                        NewSeg.Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty(String.Concat(SegmentInformation.SelectSingleNode("m:bagAllowanceInformation/m:bagAllowanceDetails/m:baggageWeight", xnMgr).InnerText, Common.BaggageUnitCode(SegmentInformation.SelectSingleNode("m:bagAllowanceInformation/m:bagAllowanceDetails/m:baggageType", xnMgr).InnerText, SegmentInformation.SelectSingleNode("m:bagAllowanceInformation/m:bagAllowanceDetails/m:measureUnit", xnMgr).InnerText)));
                    else
                        NewSeg.Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty(String.Concat(SegmentInformation.SelectSingleNode("m:bagAllowanceInformation/m:bagAllowanceDetails/m:baggageQuantity", xnMgr).InnerText, Common.BaggageUnitCode(SegmentInformation.SelectSingleNode("m:bagAllowanceInformation/m:bagAllowanceDetails/m:baggageType", xnMgr).InnerText, "")));
                }
            }

            ResponseDetails.RemoveChild(FareList);

            return XmlDoc.DocumentElement;
        }

        #endregion "무료수하물(PNR 이용)"

        #endregion "무료수하물"

        #region "비행 상세조회"

        /// <summary>
		/// 비행 상세조회
		/// </summary>
		/// <param name="SNM">사이트번호</param>
		/// <param name="DTD">출발일(YYYYMMDD)</param>
		/// <param name="DTT">출발시간(HHMM)</param>
		/// <param name="DLC">출발지</param>
		/// <param name="ALC">도착지</param>
		/// <param name="MCC">마케팅항공사</param>
		/// <param name="OCC">운항항공사</param>
		/// <param name="FLN">편명</param>
		/// <returns></returns>
		[WebMethod(Description = "비행 상세조회")]
		public XmlElement FlightInfoRS(int SNM, string DTD, string DTT, string DLC, string ALC, string MCC, string OCC, string FLN)
		{
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 14;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = DTD;
                sqlParam[8].Value = DTT;
                sqlParam[9].Value = DLC;
                sqlParam[10].Value = ALC;
                sqlParam[11].Value = MCC;
                sqlParam[12].Value = OCC;
                sqlParam[13].Value = FLN;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
			{
				XmlElement Session = amd.SessionCreate(SNM, String.Concat(GUID, "-01"));

				string SID = Session.SelectSingleNode("session/sessionId").InnerText;
				string SQN = Session.SelectSingleNode("session/sequenceNumber").InnerText;
				string SCT = Session.SelectSingleNode("session/securityToken").InnerText;

				XmlElement ResXml = amd.FlightInfoRS(SID, SQN, SCT, String.Concat(GUID, "-02"), DTD, DTT, DLC, ALC, MCC, OCC, FLN);

				amd.SessionClose(SID, SCT, String.Concat(GUID, "-03"));
                
				//오류 결과일 경우 예외 처리
				XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
				xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Air_FlightInfo"));

				if (ResXml.SelectNodes("m:responseError", xnMgr).Count > 0)
				{
					if (ResXml.SelectNodes("m:responseError/m:interactiveFreeText", xnMgr).Count > 0)
						throw new Exception(ResXml.SelectSingleNode("m:responseError/m:interactiveFreeText/m:freeText", xnMgr).InnerText);
					else
						throw new Exception(ResXml.SelectSingleNode("m:responseError/m:errorInfo/m:errorDetails/m:errorCode", xnMgr).InnerText);
				}

				return ToModeFlightInfoRS(ResXml, xnMgr);
			}
			catch (Exception ex)
			{
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 14, 0, 0).ToErrors;
			}
		}

		/// <summary>
		/// FlightInfoRS를 통합용 XML구조로 치환
		/// </summary>
		/// <param name="ResXml">FlightInfoRS의 Data</param>
		/// <returns></returns>
		protected XmlElement ToModeFlightInfoRS(XmlElement ResXml, XmlNamespaceManager xnMgr)
		{
			XmlDocument XmlDoc = new XmlDocument();
			XmlDoc.Load(mc.XmlFullPath("FlightInfoRS"));

			XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

			XmlNode General = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo/flightIndex/general");
			XmlNode SegmentGroup = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo/flightIndex/segGroup");
			XmlNode Segment = SegmentGroup.SelectSingleNode("seg");
			XmlNode NewSegment;

			XmlNode GeneralFlightInfo = ResXml.SelectSingleNode("m:flightScheduleDetails/m:generalFlightInfo", xnMgr);
			XmlNodeList BoardPointAndOffPointDetails = ResXml.SelectNodes("m:flightScheduleDetails/m:boardPointAndOffPointDetails", xnMgr);

			General.Attributes.GetNamedItem("dlc").InnerText = GeneralFlightInfo.SelectSingleNode("m:boardPointDetails/m:trueLocationId", xnMgr).InnerText;
			General.Attributes.GetNamedItem("alc").InnerText = GeneralFlightInfo.SelectSingleNode("m:offPointDetails/m:trueLocationId", xnMgr).InnerText;
			General.Attributes.GetNamedItem("mcc").InnerText = GeneralFlightInfo.SelectSingleNode("m:companyDetails/m:marketingCompany", xnMgr).InnerText;
			General.Attributes.GetNamedItem("occ").InnerText = (BoardPointAndOffPointDetails[0].SelectNodes("m:generalFlightInfo/m:companyDetails", xnMgr).Count > 0 && BoardPointAndOffPointDetails[0].SelectNodes("m:generalFlightInfo/m:companyDetails/m:operatingCompany", xnMgr).Count > 0) ? BoardPointAndOffPointDetails[0].SelectSingleNode("m:generalFlightInfo/m:companyDetails/m:operatingCompany", xnMgr).InnerText : GeneralFlightInfo.SelectSingleNode("m:companyDetails/m:marketingCompany", xnMgr).InnerText;
			General.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(GeneralFlightInfo.SelectSingleNode("m:productIdDetails/m:flightNumber", xnMgr).InnerText);
			General.Attributes.GetNamedItem("eqt").InnerText = BoardPointAndOffPointDetails[0].SelectSingleNode("m:additionalProductDetails/m:legDetails/m:equipment", xnMgr).InnerText;

			for (int i = 0; i < (BoardPointAndOffPointDetails.Count - 1); i++)
			{
				NewSegment = SegmentGroup.AppendChild(Segment.CloneNode(true));
				NewSegment.Attributes.GetNamedItem("dlc").InnerText = BoardPointAndOffPointDetails[i].SelectSingleNode("m:generalFlightInfo/m:boardPointDetails/m:trueLocationId", xnMgr).InnerText;
				NewSegment.Attributes.GetNamedItem("alc").InnerText = BoardPointAndOffPointDetails[(i + 1)].SelectSingleNode("m:generalFlightInfo/m:offPointDetails/m:trueLocationId", xnMgr).InnerText;
				NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(BoardPointAndOffPointDetails[i].SelectSingleNode("m:generalFlightInfo/m:flightDate/m:departureDate", xnMgr).InnerText, BoardPointAndOffPointDetails[i].SelectSingleNode("m:generalFlightInfo/m:flightDate/m:departureTime", xnMgr).InnerText);
				NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(BoardPointAndOffPointDetails[(i + 1)].SelectSingleNode("m:generalFlightInfo/m:flightDate/m:arrivalDate", xnMgr).InnerText, BoardPointAndOffPointDetails[(i + 1)].SelectSingleNode("m:generalFlightInfo/m:flightDate/m:arrivalTime", xnMgr).InnerText);
				NewSegment.Attributes.GetNamedItem("eft").InnerText = BoardPointAndOffPointDetails[i].SelectSingleNode("m:additionalProductDetails/m:legDetails/m:duration", xnMgr).InnerText;
				NewSegment.Attributes.GetNamedItem("gwt").InnerText = (BoardPointAndOffPointDetails[i].SelectNodes("m:additionalProductDetails/m:facilitiesInformation", xnMgr).Count > 0 && BoardPointAndOffPointDetails[i].SelectNodes("m:additionalProductDetails/m:facilitiesInformation/m:description", xnMgr).Count > 0) ? BoardPointAndOffPointDetails[i].SelectSingleNode("m:additionalProductDetails/m:facilitiesInformation/m:description", xnMgr).InnerText : "";
			}

			SegmentGroup.RemoveChild(Segment);

			return XmlDoc.DocumentElement;
		}

		#endregion "비행 상세조회"

		#region "예약"

        //[WebMethod(Description = "항공예약")]
        public string AddBookingRSTEST3()
        {
            string[] PTC = new String[3] { "ADT", "CHD", "INF" };
            string PaxTypeCode = "ADT";

            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("_Sabre"));

            XmlElement ResXml = XmlDoc.DocumentElement;

            //### 요금정보 저장 #####
            string[] BaseFare = new String[3];
            string[] BaseTax = new String[3];
            string[] BaseFsc = new String[3];

            BaseFare[0] = "";
            BaseFare[1] = "";
            BaseFare[2] = "";
            BaseTax[0] = "";
            BaseTax[1] = "";
            BaseTax[2] = "";
            BaseFsc[0] = "";
            BaseFsc[1] = "";
            BaseFsc[2] = "";

            XmlNodeList PaxDetailT = ResXml.SelectNodes("pax_detail_t");
            XmlNodeList ReplyIfT = ResXml.SelectNodes("reply_if_t");

            foreach (string ptc in PTC)
            {
                if (ptc.Equals(PaxTypeCode))
                {
                    for (int i = 0; i < PaxDetailT.Count; i++)
                    {
                        if (PaxDetailT[i].SelectSingleNode("id_code").InnerText.Equals(ptc))
                        {
                            BaseFare[0] = ReplyIfT[i].SelectSingleNode("disc_sales_fare").InnerText;
                            BaseTax[0] = ReplyIfT[i].SelectSingleNode("adt_tax").InnerText;
                            BaseFsc[0] = ReplyIfT[i].SelectSingleNode("adt_fuel").InnerText;
                            break;
                        }
                    }
                }
                else if (ptc.Equals("CHD"))
                {
                    for (int i = 0; i < PaxDetailT.Count; i++)
                    {
                        if (PaxDetailT[i].SelectSingleNode("id_code").InnerText.Equals(ptc))
                        {
                            BaseFare[1] = ReplyIfT[i].SelectSingleNode("chd_disc_fare").InnerText;
                            BaseTax[1] = ReplyIfT[i].SelectSingleNode("chd_tax").InnerText;
                            BaseFsc[1] = ReplyIfT[i].SelectSingleNode("chd_fuel").InnerText;
                            break;
                        }
                    }
                }
                else if (ptc.Equals("INF"))
                {
                    for (int i = 0; i < PaxDetailT.Count; i++)
                    {
                        if (PaxDetailT[i].SelectSingleNode("id_code").InnerText.Equals(ptc))
                        {
                            BaseFare[2] = ReplyIfT[i].SelectSingleNode("inf_disc_fare").InnerText;
                            BaseTax[2] = ReplyIfT[i].SelectSingleNode("inf_tax").InnerText;
                            BaseFsc[2] = ReplyIfT[i].SelectSingleNode("inf_fuel").InnerText;
                            break;
                        }
                    }
                }
            }

            return String.Format("*FARE/A{1}/C{2}/I{3}{0}*TAX/A{4}/C{5}/I{6}{0}*FSC/A{7}/C{8}/I{9}", Environment.NewLine, BaseFare[0], BaseFare[1], BaseFare[2], BaseTax[0], BaseTax[1], BaseTax[2], BaseFsc[0], BaseFsc[1], BaseFsc[2]);
        }

        //[WebMethod(Description = "항공예약")]
        public XmlElement AddBookingRSTEST2()
        {
            string GDS = String.Empty;
            string PNR = String.Empty;
            string CID = String.Empty;
            string STK = String.Empty;
            string SID = String.Empty;
            string SCT = String.Empty;

            string[] PTC = new String[1] { "ADT" };
            string PaxTypeCode = "ADT";

            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;

            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("_Sabre"));

            XmlElement ResXml = XmlDoc.DocumentElement;

            //### 요금정보 저장 #####
            string[] BaseFare = new String[3];
            string[] BaseTax = new String[3];
            string[] BaseFsc = new String[3];

            BaseFare[0] = "";
            BaseFare[1] = "";
            BaseFare[2] = "";
            BaseTax[0] = "";
            BaseTax[1] = "";
            BaseTax[2] = "";
            BaseFsc[0] = "";
            BaseFsc[1] = "";
            BaseFsc[2] = "";

            XmlNode ReplyIfT = ResXml.SelectSingleNode("reply_if_t");

            foreach (string ptc in PTC)
            {
                if (ptc.Equals(PaxTypeCode))
                {
                    BaseFare[0] = ReplyIfT.SelectSingleNode("disc_sales_fare").InnerText;
                    BaseTax[0] = ReplyIfT.SelectSingleNode("adt_tax").InnerText;
                    BaseFsc[0] = ReplyIfT.SelectSingleNode("adt_fuel").InnerText;
                }
                else if (ptc.Equals("CHD"))
                {
                    BaseFare[1] = ReplyIfT.SelectSingleNode("chd_disc_fare").InnerText;
                    BaseTax[1] = ReplyIfT.SelectSingleNode("chd_tax").InnerText;
                    BaseFsc[1] = ReplyIfT.SelectSingleNode("chd_fuel").InnerText;
                }
                else if (ptc.Equals("INF"))
                {
                    BaseFare[2] = ReplyIfT.SelectSingleNode("inf_disc_fare").InnerText;
                    BaseTax[2] = ReplyIfT.SelectSingleNode("inf_tax").InnerText;
                    BaseFsc[2] = ReplyIfT.SelectSingleNode("inf_fuel").InnerText;
                }
            }

            //### 03.세션생성 #####
            XmlElement Session = aas.SessionCreate();

            CID = Session.ChildNodes[0].InnerText;
            STK = Session.ChildNodes[1].InnerText;

            //### 04.예약조회 #####
            aas.AbacusCommand(CID, STK, String.Format("*{0}", ResXml.SelectSingleNode("pnr_common_data_t/pnr_addr1").InnerText), String.Concat(GUID, "-03"));

            //### 05.운임 #####
            aas.AbacusCommand(CID, STK, String.Format("9T*FARE/A{0}/C{1}/I{2}", BaseFare[0], BaseFare[1], BaseFare[2]), String.Concat(GUID, "-04"));
            aas.AbacusCommand(CID, STK, String.Format("9T*TAX/A{0}/C{1}/I{2}", BaseTax[0], BaseTax[1], BaseTax[2]), String.Concat(GUID, "-05"));
            aas.AbacusCommand(CID, STK, String.Format("9T*FSC/A{0}/C{1}/I{2}", BaseFsc[0], BaseFsc[1], BaseFsc[2]), String.Concat(GUID, "-06"));

            //### 04.farebasis #####
            if (!String.IsNullOrWhiteSpace(ReplyIfT.SelectSingleNode("air_fare_t/fare_basis").InnerText))
                aas.AbacusCommand(CID, STK, String.Format("9T*FAREBASIS/{0}", ReplyIfT.SelectSingleNode("air_fare_t/fare_basis").InnerText), String.Concat(GUID, "-07"));

            //### 05.마지막에 실행 #####
            aas.AbacusCommand(CID, STK, "6P", String.Concat(GUID, "-08"));
            aas.AbacusCommand(CID, STK, "E", String.Concat(GUID, "-09"));

            XmlElement BookXml = aas.AbacusCommand(CID, STK, String.Format("*{0}", ResXml.SelectSingleNode("pnr_common_data_t/pnr_addr1").InnerText), String.Concat(GUID, "-10"));

            //### 세션종료 #####
            aas.SessionClose(CID, STK);
            CID = "";
            STK = "";

            return BookXml;
        }

        //[WebMethod(Description = "항공예약")]
        public XmlElement AddBookingRSTEST(int[] PID, string[] PTC, string[] PTL, string[] PHN, string[] PSN, string[] PFN, string[] PBD, string[] PTN, string[] PMN, string[] PEA, string[] PMC, string[] PMT, string[] PMR, int RID, string RTL, string RHN, string RSN, string RFN, string RDB, string RGD, string RLF, string RTN, string RMN, string REA, string RMK, string RQT, string RQU, int SNM, int ANM, int AEN, string ROT, string OPN, string FXL, string SXL, string RXL, string DXL, string AKY, string ATSF, string FTX)
        {
            cm.StringFileSave(FXL, "TEST", "AddBookingRSTEST", "");
            
            //결과(항공사)
            XmlElement ResXml;

            //결과(모두투어)
            XmlElement ModeXml;

            //요금정보
            XmlDocument XmlFare = new XmlDocument();
            XmlFare.LoadXml(FXL);
            
            cm.XmlFileSave(XmlFare, "TEST", "AddBookingRSTEST", "N", "");
            return XmlFare.DocumentElement;

            if (XmlFare.SelectNodes("priceIndex/promotionInfo").Count > 0 && String.IsNullOrWhiteSpace(XmlFare.SelectSingleNode("priceIndex/promotionInfo/item/promotionId").InnerText) && XmlFare.SelectNodes("priceIndex/promotionInfo/item/partnerPromotions").Count.Equals(0))
                throw new Exception("프로모션 선택 정보가 없습니다.");

            //발권수수료(TASF) 미적용일 경우 금액 "0" 처리
            if (ATSF.Equals("N"))
            {
                if (XmlFare.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("sutf").InnerText.Equals("Y"))
                {
                    foreach (XmlNode PaxFare in XmlFare.SelectNodes("priceIndex/paxFareGroup/paxFare"))
                        PaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tasf").InnerText = "0";

                    XmlFare.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("tasf").InnerText = "0";
                }
            }

            //탑승객타입
            string PaxTypeCode = XmlFare.SelectSingleNode("priceIndex").Attributes.GetNamedItem("ptc").InnerText;

            //판매항공사
            string ValidatingCarrier = XmlFare.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("pvc").InnerText;

            //중국동방항공 오류로 임시 제한(2017-01-20,김경미과장)
            //if (ValidatingCarrier.Equals("MU"))
            //    throw new Exception("중국동방항공의 운임 미확정으로 예약이 불가능합니다.");

            //코드쉐어여부
            bool CodeShare = false;

            //항공사결합여부
            bool AirShare = false;

            int NumSeat = 0;
            int NumMeal = 0;
            XmlAttribute NewAttr;

            //좌석요청수 및 MEAL요청수
            foreach (string ptc in PTC)
            {
                if (ptc.Equals("CHD"))
                {
                    NumSeat++;
                    NumMeal++;
                }
                else if (ptc.Equals("INF"))
                    NumMeal++;
                else
                    NumSeat++;
            }

            //여정정보
            XmlDocument XmlSeg = new XmlDocument();
            XmlSeg.LoadXml(SXL);

            for (int n = 1; n <= XmlSeg.SelectNodes("itinerary/segGroup").Count; n++)
            {
                for (int m = 1; m <= XmlSeg.SelectNodes(String.Format("itinerary/segGroup[{0}]/seg", n)).Count; m++)
                {
                    NewAttr = XmlSeg.CreateAttribute("rbd");
                    NewAttr.Value = XmlFare.SelectSingleNode(String.Format(String.Format("priceIndex/paxFareGroup/paxFare[@ptc='{0}']/segFareGroup/segFare[@ref='{{0}}']/fare[{{1}}]/cabin", PaxTypeCode), n, m)).Attributes.GetNamedItem("rbd").InnerText;
                    XmlSeg.SelectSingleNode(String.Format("itinerary/segGroup[{0}]/seg[{1}]", n, m)).Attributes.Append(NewAttr);

                    NewAttr = XmlSeg.CreateAttribute("nos");
                    NewAttr.Value = NumSeat.ToString();
                    XmlSeg.SelectSingleNode(String.Format("itinerary/segGroup[{0}]/seg[{1}]", n, m)).Attributes.Append(NewAttr);

                    //코드쉐어
                    if (!String.IsNullOrWhiteSpace(XmlSeg.SelectSingleNode(String.Format("itinerary/segGroup[{0}]/seg[{1}]", n, m)).Attributes.GetNamedItem("occ").InnerText))
                    {
                        if (XmlSeg.SelectSingleNode(String.Format("itinerary/segGroup[{0}]/seg[{1}]", n, m)).Attributes.GetNamedItem("mcc").InnerText != XmlSeg.SelectSingleNode(String.Format("itinerary/segGroup[{0}]/seg[{1}]", n, m)).Attributes.GetNamedItem("occ").InnerText)
                            CodeShare = true;

                        if (XmlSeg.SelectSingleNode(String.Format("itinerary/segGroup[{0}]/seg[{1}]", n, m)).Attributes.GetNamedItem("mcc").InnerText != ValidatingCarrier)
                            AirShare = true;
                    }
                }
            }

            //출발일
            string DDT = XmlSeg.SelectSingleNode("itinerary/segGroup[1]/seg[1]").Attributes.GetNamedItem("ddt").InnerText;

            //요금GDS
            string FareGDS = (XmlFare.SelectSingleNode("priceIndex").Attributes.GetNamedItem("gds") != null && !String.IsNullOrWhiteSpace(XmlFare.SelectSingleNode("priceIndex").Attributes.GetNamedItem("gds").InnerText)) ? XmlFare.SelectSingleNode("priceIndex").Attributes.GetNamedItem("gds").InnerText : "Amadeus";

            //예약GDS지정(갈릴레오)
            string GDSType = (XmlFare.SelectNodes("priceIndex/fareMessage").Count > 0 && XmlFare.SelectNodes("priceIndex/fareMessage/gdsType").Count > 0) ? XmlFare.SelectSingleNode("priceIndex/fareMessage/gdsType").InnerText : "";

            //예약GDS
            string HostGDS = Common.AirlineBookingHost2(SNM, FareGDS, ROT, ValidatingCarrier, CodeShare, AirShare, GDSType);

            //발권마감일
            string LTD = XmlFare.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("ttl").InnerText;

            //좌석등급
            string CCD = XmlFare.SelectSingleNode("priceIndex/paxFareGroup/paxFare/segFareGroup/segFare/fare/cabin").Attributes.GetNamedItem("cabin").InnerText;

            //farebasis(Amadeus와 Abacus 예약시 Remark사항으로 저장,2016-06-22,김지영과장)
            string FareBasis = string.Empty;


            


            
            //Selected Itin
            XmlNodeList SegGroupList = XmlSeg.SelectNodes("itinerary/segGroup");
            string SelectedItin = string.Empty;
            string SelectedItinCls = string.Empty;
            string FSCLS = string.Empty;

            for (int n = 0; n < SegGroupList.Count; n++)
            {
                string[] AIF1 = SegGroupList[n].Attributes.GetNamedItem("aif").InnerText.Split('^');

                SelectedItin += String.Format("&sltdseghd{0}={1}", n, AIF1[0]);
                
                for (int m = 0; m < SegGroupList[n].SelectNodes("seg").Count; m++)
                {
                    string[] AIF2 = SegGroupList[n].SelectNodes("seg")[m].Attributes.GetNamedItem("aif").InnerText.Split('^');

                    SelectedItin += String.Format("&sltdseg{0}{1}={2}", n, m, AIF2[1]);
                    SelectedItin += String.Format("&sltdcmd{0}{1}={2}", n, m, AIF2[0]);
                    SelectedItinCls += String.Concat((String.IsNullOrWhiteSpace(SelectedItinCls) ? "" : "-"), SegGroupList[n].SelectNodes("seg")[m].Attributes.GetNamedItem("rbd").InnerText);
                }

                //SelectedItin += String.Format("&FS{0}CLS={1}", (n + 1), AIF1[1]);
                SelectedItinCls = "";
                FSCLS += String.Format("&FS{0}CLS={1}", (n + 1), AIF1[1]);
            }

            string CommonHeader = XmlFare.SelectNodes("priceIndex/fareMessage/CommonHeader").Count > 0 ? XmlFare.SelectSingleNode("priceIndex/fareMessage/CommonHeader").InnerText : "";
            string FARE_REC1 = XmlFare.SelectNodes("priceIndex/fareMessage/FARE_REC1").Count > 0 ? XmlFare.SelectSingleNode("priceIndex/fareMessage/FARE_REC1").InnerText : "";
            string FARE_REC2 = XmlFare.SelectNodes("priceIndex/fareMessage/FARE_REC2").Count > 0 ? XmlFare.SelectSingleNode("priceIndex/fareMessage/FARE_REC2").InnerText : "";
            string FARE_REC3 = XmlFare.SelectNodes("priceIndex/fareMessage/FARE_REC3").Count > 0 ? XmlFare.SelectSingleNode("priceIndex/fareMessage/FARE_REC3").InnerText : "";
            string GUID = cm.GetGUID;

            //return SelectedItin;
            
            //XmlElement SegHold = sas.SegHoldRS(CommonHeader, FARE_REC1, FARE_REC2, FARE_REC3, FSCLS, SelectedItin, GUID);

            //return sas.AirBookRS(SegHold.SelectSingleNode("prs_id").InnerText, "", PTC, PTL, PHN, PSN, PFN, PBD, PTN, PMN, PEA, RTN, RMN, REA, RMK, GUID);
        }

        //[WebMethod(Description = "항공예약")]
        public string AddBookingRSAKYTEST(int SNM)
        {
            string AOID = string.Empty;
            string[] AKYInfo = "||DEV".Split('|');
            
            //11번가 예약번호 발번
            if (SNM.Equals(4924) || SNM.Equals(4929))
            {
                AOID = mod.AirBookCode(SNM, "IA", "", "0", ((AKYInfo.Length > 2) ? AKYInfo[2] : ""));
            }
            //티몬 예약번호 발번
            else if (SNM.Equals(4925) || SNM.Equals(4926))
            {
                AOID = mod.AirBookCode(SNM, "IA", "TM", "", ((AKYInfo.Length > 2) ? AKYInfo[2] : ""));
            }
            //이베이(G마켓) 예약번호 발번
            else if (SNM.Equals(5020) || SNM.Equals(5119))
            {
                AOID = mod.AirBookCode(SNM, "IA", "", "", ((AKYInfo.Length > 2) ? AKYInfo[2] : ""));
            }
            //이베이(옥션) 예약번호 발번
            else if (SNM.Equals(5161) || SNM.Equals(5163))
            {
                AOID = mod.AirBookCode(SNM, "IA", "", "", ((AKYInfo.Length > 2) ? AKYInfo[2] : ""));
            }
            //이베이(G9) 예약번호 발번
            else if (SNM.Equals(5162) || SNM.Equals(5164))
            {
                AOID = mod.AirBookCode(SNM, "IA", "", "", ((AKYInfo.Length > 2) ? AKYInfo[2] : ""));
            }
            //네이버 예약번호 발번
            else if (SNM.Equals(4638))
            {
                AOID = mod.AirBookCode(SNM, "IA", "", "", ((AKYInfo.Length > 2) ? AKYInfo[2] : ""));
            }

            return AOID;
        }

		/// <summary>
		/// 항공예약
		/// </summary>
		/// <param name="PID">탑승객 PTID</param>
		/// <param name="PTC">탑승객 타입 코드 (ADT/CHD/INF/STU/LBR..)</param>
		/// <param name="PTL">탑승객 타이틀 (MR/MRS/MS/MSTR/MISS)</param>
		/// <param name="PHN">탑승객 한글이름</param>
		/// <param name="PSN">탑승객 영문성 (SurName)</param>
		/// <param name="PFN">탑승객 영문이름 (First Name)</param>
		/// <param name="PBD">탑승객 생년월일 (YYYYMMDD) (소아,유아일 경우 필수)</param>
		/// <param name="PTN">탑승객 전화번호</param>
		/// <param name="PMN">탑승객 휴대폰</param>
		/// <param name="PEA">탑승객 이메일주소</param>
        /// <param name="PMC">탑승객 회원구분 (01:정회원, 02:웹회원, 03:투어마일리지회원)</param>
        /// <param name="PMT">탑승객 투어마일리지 카드번호</param>
        /// <param name="PMR">탑승객 투어마일리지 적립 요청여부</param>
		/// <param name="RID">예약자 PTID</param>
		/// <param name="RTL">예약자 타이틀 (MR/MS)</param>
		/// <param name="RHN">예약자 한글이름</param>
		/// <param name="RSN">예약자 영문성 (SurName)</param>
		/// <param name="RFN">예약자 영문이름 (First Name)</param>
		/// <param name="RDB">예약자 생년월일(YYYY-MM-DD)</param>
		/// <param name="RGD">예약자 성별(M:남성, F:여성)</param>
		/// <param name="RLF">예약자 내/외국인 여부(L:내국인, F:외국인)</param>
		/// <param name="RTN">예약자 전화번호</param>
		/// <param name="RMN">예약자 휴대폰</param>
		/// <param name="REA">예약자 이메일주소</param>
		/// <param name="RMK">추가요청사항</param>
		/// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
		/// <param name="RQU">요청URL</param>
		/// <param name="SNM">사이트번호</param>
		/// <param name="ANM">거래처번호</param>
		/// <param name="AEN">거래처직원번호</param>
        /// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
        /// <param name="OPN">오픈여부(YN)</param>
		/// <param name="FXL">요금조회 결과 중 선택된 <priceIndex>~</priceIndex> XmlNode(segGroup는 제외)</param>
		/// <param name="SXL">선택한 여정을 <itinerary>~<itinerary>노드에 삽입한 XML</param>
		/// <param name="RXL">요금규정 <rules>~</rules> XML</param>
		/// <param name="DXL">할인항공일 경우 선택된 <fare>~</fare> XML</param>
        /// <param name="AKY">제휴정보(NV|회원번호|접속경로)</param>
        /// <param name="ATSF">발권수수료(TASF) 적용 여부(Y:적용, N:미적용)</param>
        /// <param name="COOKIE">Header Cookie</param>
        /// <param name="FTX">free text(PIP=Y^PIIP=Y)(개인정보제공여부^고유식별정보제공여부)</param>
		/// <returns></returns>
		[WebMethod(Description = "항공예약")]
        public XmlElement AddBookingRS(int[] PID, string[] PTC, string[] PTL, string[] PHN, string[] PSN, string[] PFN, string[] PBD, string[] PTN, string[] PMN, string[] PEA, string[] PMC, string[] PMT, string[] PMR, int RID, string RTL, string RHN, string RSN, string RFN, string RDB, string RGD, string RLF, string RTN, string RMN, string REA, string RMK, string RQT, string RQU, int SNM, int ANM, int AEN, string ROT, string OPN, string FXL, string SXL, string RXL, string DXL, string AKY, string ATSF, string COOKIE, string FTX)
		{
            int ServiceNumber = 2;
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청10", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청11", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청12", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청13", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청14", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청15", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청16", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청17", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청18", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청19", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청20", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청21", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청22", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청23", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청24", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청25", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청26", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청27", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청28", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청29", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청30", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청31", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청32", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청33", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청34", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청41", SqlDbType.VarChar, -1),
                        new SqlParameter("@요청42", SqlDbType.VarChar, -1),
                        new SqlParameter("@요청43", SqlDbType.VarChar, -1),
                        new SqlParameter("@요청44", SqlDbType.VarChar, -1)
                    };

                sqlParam[0].Value = ServiceNumber;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = RQT;
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = String.Join("^", PID);
                sqlParam[8].Value = String.Join("^", PTC);
                sqlParam[9].Value = String.Join("^", PTL);
                sqlParam[10].Value = String.Join("^", PHN);
                sqlParam[11].Value = String.Join("^", PSN);
                sqlParam[12].Value = String.Join("^", PFN);
                sqlParam[13].Value = String.Join("^", PBD);
                sqlParam[14].Value = String.Join("^", PTN);
                sqlParam[15].Value = String.Join("^", PMN);
                sqlParam[16].Value = String.Join("^", PEA);
                sqlParam[17].Value = String.Join("^", PMC);
                sqlParam[18].Value = String.Join("^", PMT);
                sqlParam[19].Value = String.Join("^", PMR);
                sqlParam[20].Value = RID;
                sqlParam[21].Value = RTL;
                sqlParam[22].Value = RHN;
                sqlParam[23].Value = RSN;
                sqlParam[24].Value = RFN;
                sqlParam[25].Value = RDB;
                sqlParam[26].Value = RGD;
                sqlParam[27].Value = RLF;
                sqlParam[28].Value = RTN;
                sqlParam[29].Value = RMN;
                sqlParam[30].Value = REA;
                sqlParam[31].Value = RMK;
                sqlParam[32].Value = RQU;
                sqlParam[33].Value = ANM;
                sqlParam[34].Value = AEN;
                sqlParam[35].Value = ROT;
                sqlParam[36].Value = OPN;
                sqlParam[37].Value = AKY;
                sqlParam[38].Value = ATSF;
                sqlParam[39].Value = COOKIE;
                sqlParam[40].Value = FTX;
                sqlParam[41].Value = FXL;
                sqlParam[42].Value = SXL;
                sqlParam[43].Value = RXL;
                sqlParam[44].Value = DXL;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            //유효성 체크
            try
            {
                string VaFXL = FXL.ToUpper();
                string VaSXL = SXL.ToUpper();
                string VaRXL = RXL.ToUpper();
                string VaDXL = DXL.ToUpper();

                if (VaFXL.IndexOf("?XML") != -1 || VaFXL.IndexOf("!DOCTYPE") != -1)
                    throw new Exception("올바르지 않은 정보입니다.");

                if (VaSXL.IndexOf("?XML") != -1 || VaSXL.IndexOf("!DOCTYPE") != -1)
                    throw new Exception("올바르지 않은 정보입니다.");

                if (VaRXL.IndexOf("?XML") != -1 || VaRXL.IndexOf("!DOCTYPE") != -1)
                    throw new Exception("올바르지 않은 정보입니다.");

                if (VaDXL.IndexOf("?XML") != -1 || VaDXL.IndexOf("!DOCTYPE") != -1)
                    throw new Exception("올바르지 않은 정보입니다.");

                //국내여정인 경우 제외(2018-07-20,박주영부서장)
                //국내여정 체크 로직 삭제(2018-0724,김지영매니저)
                //XmlDocument XmlSeg = new XmlDocument();
                //XmlSeg.LoadXml(SXL);

                //bool KoreaTrip = false;

                //foreach (XmlNode Seg in XmlSeg.SelectNodes("itinerary/segGroup/seg"))
                //{
                //    if (Common.KoreaOfAirport(Seg.Attributes.GetNamedItem("dlc").InnerText) && Common.KoreaOfAirport(Seg.Attributes.GetNamedItem("alc").InnerText))
                //    {
                //        KoreaTrip = true;
                //        break;
                //    }
                //}
                
                //if (KoreaTrip)
                //    throw new Exception("요청하신 서비스는 해외 전용으로 국내선 구간이 포함된 경우에는 예약할 수 없습니다.");
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, 0, 0).ToErrors;
            }

			string GDS = String.Empty;
			string PNR = String.Empty;
			string CID = String.Empty;
			string STK = String.Empty;
			string SID = String.Empty;
			string SCT = String.Empty;
            int SQN = 0;
            int OID = 0; //주문번호
            string AOID = String.Empty; //제휴사주문번호
            string PIP = String.Empty;  //개인정보제공여부
            string PIIP = String.Empty; //고유식별정보제공여부
            string[] AKYInfo = AKY.Split('|');

            //예약자 영문성/이름이 소문자일 경우 대문자로 변경
            RSN = RSN.ToUpper();
            RFN = RFN.ToUpper();

            try
            {
                //11번가 예약번호 발번
                if (SNM.Equals(4924) || SNM.Equals(4929))
                {
                    AOID = mod.AirBookCode(SNM, "IA", "", AKYInfo[1], ((AKYInfo.Length > 2) ? AKYInfo[2] : ""));
                    
                    if (String.IsNullOrWhiteSpace(AOID) || !cm.IsInteger(AOID))
                        throw new Exception("11번가 예약번호 생성이 실패하였습니다.");
                }
                //티몬 예약번호 발번
                else if (SNM.Equals(4925) || SNM.Equals(4926))
                {
                    //회원번호 누락
                    if (String.IsNullOrWhiteSpace(AKYInfo[1]))
                        throw new Exception("티켓몬스터 회원정보가 없습니다.");

                    AOID = mod.AirBookCode(SNM, "IA", "TM", "", ((AKYInfo.Length > 2) ? AKYInfo[2] : ""));
                    
                    if (String.IsNullOrWhiteSpace(AOID))
                        throw new Exception("티켓몬스터 예약번호 생성이 실패하였습니다.");
                }
                //이베이(G마켓) 예약번호 발번
                else if (SNM.Equals(5020) || SNM.Equals(5119))
                {
                    AOID = mod.AirBookCode(SNM, "IA", "", "", ((AKYInfo.Length > 2) ? AKYInfo[2] : ""));

                    if (String.IsNullOrWhiteSpace(AOID))
                        throw new Exception("이베이(G마켓) 예약번호 생성이 실패하였습니다.");
                }
                //이베이(옥션) 예약번호 발번
                else if (SNM.Equals(5161) || SNM.Equals(5163))
                {
                    AOID = mod.AirBookCode(SNM, "IA", "", "", ((AKYInfo.Length > 2) ? AKYInfo[2] : ""));

                    if (String.IsNullOrWhiteSpace(AOID))
                        throw new Exception("이베이(옥션) 예약번호 생성이 실패하였습니다.");
                }
                //이베이(G9) 예약번호 발번
                else if (SNM.Equals(5162) || SNM.Equals(5164))
                {
                    AOID = mod.AirBookCode(SNM, "IA", "", "", ((AKYInfo.Length > 2) ? AKYInfo[2] : ""));

                    if (String.IsNullOrWhiteSpace(AOID))
                        throw new Exception("이베이(G9) 예약번호 생성이 실패하였습니다.");
                }
                //네이버 예약번호 발번
                else if (SNM.Equals(4638))
                {
                    AOID = mod.AirBookCode(SNM, "IA", "", "", ((AKYInfo.Length > 2) ? AKYInfo[2] : ""));

                    if (String.IsNullOrWhiteSpace(AOID))
                        throw new Exception("네이버 예약번호 생성이 실패하였습니다.");
                }

                if (!String.IsNullOrWhiteSpace(FTX))
                {
                    foreach (string FTXInfo in FTX.Split('^'))
                    {
                        if (FTXInfo.StartsWith("PIP="))
                            PIP = FTXInfo.Split('=')[1];
                        else if (FTXInfo.StartsWith("PIIP="))
                            PIIP = FTXInfo.Split('=')[1];
                    }
                }
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, 0, 0).ToErrors;
            }

			try
			{
				//결과(항공사)
				XmlElement ResXml;

				//결과(모두투어)
				XmlElement ModeXml;

				//네임스페이스
				XmlNamespaceManager xnMgr;
                XmlNamespaceManager xnMgr1 = null;
                XmlNamespaceManager xnMgr2 = null;

				//세션
				XmlElement Session;

                //요금정보
                XmlDocument XmlFare = new XmlDocument();
                XmlFare.LoadXml(FXL);

                if (XmlFare.SelectNodes("priceIndex/promotionInfo").Count > 0 && XmlFare.SelectNodes("priceIndex/promotionInfo/item").Count > 0 && String.IsNullOrWhiteSpace(XmlFare.SelectSingleNode("priceIndex/promotionInfo/item/promotionId").InnerText))
                    throw new Exception("프로모션 선택 정보가 없습니다.");

                //발권수수료(TASF) 미적용일 경우 금액 "0" 처리
                if (ATSF.Equals("N"))
                {
                    if (XmlFare.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("sutf").InnerText.Equals("Y"))
                    {
                        foreach (XmlNode PaxFare in XmlFare.SelectNodes("priceIndex/paxFareGroup/paxFare"))
                            PaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tasf").InnerText = "0";

                        XmlFare.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("tasf").InnerText = "0";
                    }
                }

                //탑승객타입
                string PaxTypeCode = XmlFare.SelectSingleNode("priceIndex").Attributes.GetNamedItem("ptc").InnerText;
                string PaxTypeCode2 = (PaxTypeCode.Equals("CHD") || PaxTypeCode.Equals("INF")) ? PaxTypeCode : "ADT";

                //PaxType이 'ADT'가 아닌 경우 탑승객 타입 맞춤(2019-04-25)
                if (PaxTypeCode != "ADT")
                {
                    for (int i = 0; i < PTC.Length; i++)
                    {
                        if (PTC[i].Trim().Equals("ADT"))
                            PTC[i] = PaxTypeCode;
                    }
                }

                //판매항공사
                string ValidatingCarrier = XmlFare.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("pvc").InnerText;

                //중국동방항공 오류로 임시 제한(2017-01-20,김경미과장)
                //if (ValidatingCarrier.Equals("MU"))
                //    throw new Exception("중국동방항공의 운임 미확정으로 예약이 불가능합니다.");

                //코드쉐어여부
                bool CodeShare = false;

                //항공사결합여부
                bool AirShare = false;

                //여정중 아시아나(OZ) 포함 여부
                bool OZSeg = false;

                int NumSeat = 0;
                int NumMeal = 0;
                XmlAttribute NewAttr;

                //좌석요청수 및 MEAL요청수
                foreach (string ptc in PTC)
                {
                    if (ptc.Equals("CHD"))
                    {
                        NumSeat++;
                        NumMeal++;
                    }
                    else if (ptc.Equals("INF"))
                        NumMeal++;
                    else
                        NumSeat++;
                }

                //여정정보
                XmlDocument XmlSeg = new XmlDocument();
                XmlSeg.LoadXml(SXL);

                for (int n = 1; n <= XmlSeg.SelectNodes("itinerary/segGroup").Count; n++)
                {
                    for (int m = 1; m <= XmlSeg.SelectNodes(String.Format("itinerary/segGroup[{0}]/seg", n)).Count; m++)
                    {
                        NewAttr = XmlSeg.CreateAttribute("rbd");
                        NewAttr.Value = XmlFare.SelectSingleNode(String.Format(String.Format("priceIndex/paxFareGroup/paxFare[@ptc='{0}' or @ptc='{1}']/segFareGroup/segFare[@ref='{{0}}']/fare[{{1}}]/cabin", PaxTypeCode, PaxTypeCode2), n, m)).Attributes.GetNamedItem("rbd").InnerText;
                        XmlSeg.SelectSingleNode(String.Format("itinerary/segGroup[{0}]/seg[{1}]", n, m)).Attributes.Append(NewAttr);

                        NewAttr = XmlSeg.CreateAttribute("nos");
                        NewAttr.Value = NumSeat.ToString();
                        XmlSeg.SelectSingleNode(String.Format("itinerary/segGroup[{0}]/seg[{1}]", n, m)).Attributes.Append(NewAttr);

                        //코드쉐어
                        if (!String.IsNullOrWhiteSpace(XmlSeg.SelectSingleNode(String.Format("itinerary/segGroup[{0}]/seg[{1}]", n, m)).Attributes.GetNamedItem("occ").InnerText))
                        {
                            if (XmlSeg.SelectSingleNode(String.Format("itinerary/segGroup[{0}]/seg[{1}]", n, m)).Attributes.GetNamedItem("mcc").InnerText != XmlSeg.SelectSingleNode(String.Format("itinerary/segGroup[{0}]/seg[{1}]", n, m)).Attributes.GetNamedItem("occ").InnerText)
                                CodeShare = true;

                            if (XmlSeg.SelectSingleNode(String.Format("itinerary/segGroup[{0}]/seg[{1}]", n, m)).Attributes.GetNamedItem("mcc").InnerText != ValidatingCarrier)
                                AirShare = true;
                        }

                        //여정중 아시아나(OZ) 포함 여부
                        if (XmlSeg.SelectSingleNode(String.Format("itinerary/segGroup[{0}]/seg[{1}]", n, m)).Attributes.GetNamedItem("mcc").InnerText.Equals("OZ"))
                            OZSeg = true;
                    }
                }

                //출발일
                string DDT = XmlSeg.SelectSingleNode("itinerary/segGroup[1]/seg[1]").Attributes.GetNamedItem("ddt").InnerText;

				//요금GDS
                string FareGDS = (XmlFare.SelectSingleNode("priceIndex").Attributes.GetNamedItem("gds") != null && !String.IsNullOrWhiteSpace(XmlFare.SelectSingleNode("priceIndex").Attributes.GetNamedItem("gds").InnerText)) ? XmlFare.SelectSingleNode("priceIndex").Attributes.GetNamedItem("gds").InnerText : "Amadeus";

                //예약GDS지정(갈릴레오)
                string GDSType = (XmlFare.SelectNodes("priceIndex/fareMessage").Count > 0 && XmlFare.SelectNodes("priceIndex/fareMessage/gdsType").Count > 0) ? XmlFare.SelectSingleNode("priceIndex/fareMessage/gdsType").InnerText : "";

                //예약GDS
                string HostGDS = Common.AirlineBookingHost2(SNM, FareGDS, ROT, ValidatingCarrier, CodeShare, AirShare, GDSType);
                
                //발권마감일
				string LTD = XmlFare.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("ttl").InnerText;

                //당일발권여부
                bool DayTicket = DateTime.Now.ToString("yyyy-MM-dd").Equals(LTD) ? true : false;

                //좌석등급
                string CCD = XmlFare.SelectSingleNode("priceIndex/paxFareGroup/paxFare/segFareGroup/segFare/fare/cabin").Attributes.GetNamedItem("cabin").InnerText;
                
                //탑승객 정보(첫번째 탑승객의 전화번호/휴대폰/이메일정보에 예약자의 정보를 입력한다.)
                XmlElement PaxInfo = PaxInfoSave(PID, PTC, PTL, PHN, PSN, PFN, PBD, PTN, PMN, PEA, PMC, PMT, PMR, RTN, RMN, REA, String.Concat(GUID, "-02"));

                //중복예약 체크
                if (CheckSameBooking(ValidatingCarrier, ROT, SXL, PaxInfo))
                    throw new Exception("중복 예약 요청입니다.");

                //프로모션TL
                string PromTL = "";

                if (XmlFare.SelectNodes("priceIndex/promotionInfo").Count > 0 && XmlFare.SelectNodes("priceIndex/promotionInfo/item").Count > 0 && !String.IsNullOrWhiteSpace(XmlFare.SelectSingleNode("priceIndex/promotionInfo/item/promotionId").InnerText))
                {
                    if (XmlFare.SelectNodes("priceIndex/promotionInfo/item/promotions").Count > 0)
                        PromTL = XmlFare.SelectSingleNode(String.Format("priceIndex/promotionInfo/item/promotions/promotion[@promotionId='{0}']", XmlFare.SelectSingleNode("priceIndex/promotionInfo/item/promotionId").InnerText)).Attributes.GetNamedItem("promotionTL").InnerText;
                    else
                        PromTL = XmlFare.SelectSingleNode("priceIndex/promotionInfo/item/promotionTL").InnerText;
                }

                //farebasis(Amadeus와 Abacus 예약시 Remark사항으로 저장,2016-06-22,김지영과장)
                string FareBasis = string.Empty;

                if (FareGDS.Equals("Amadeus"))
                {
                    foreach (XmlNode Fare in XmlFare.SelectNodes("priceIndex/paxFareGroup/paxFare/segFareGroup/segFare/fare/fare"))
                        FareBasis += String.Concat((String.IsNullOrWhiteSpace(FareBasis) ? "" : "/"), Fare.Attributes.GetNamedItem("basis").InnerText);

                    //24시간 발권 체크(Amadeus는 예약진행 중 체크로직 포함됨)
                    if (!HostGDS.Equals("Amadeus"))
                    {
                        try
                        {
                            //발권마감일(LTD)이 명일이라면 24시간 이내 발권 조건 여부 판단하여 TL 업데이트(2016-07-21,김지영과장)
                            if (!String.IsNullOrWhiteSpace(LTD) && LTD.Equals(DateTime.Now.AddDays(1).ToString("yyyy-MM-dd")))
                            {
                                int SegCount = XmlSeg.SelectNodes("itinerary/segGroup/seg").Count;
                                int SegGroupIdx = 1;
                                int SegIdx = 0;
                                int[] INO = new Int32[SegCount];
                                string[] DTD = new String[SegCount];
                                string[] DTT = new String[SegCount];
                                string[] ARD = new String[SegCount];
                                string[] ART = new String[SegCount];
                                string[] DLC = new String[SegCount];
                                string[] ALC = new String[SegCount];
                                string[] MCC = new String[SegCount];
                                string[] OCC = new String[SegCount];
                                string[] FLN = new String[SegCount];
                                string[] RBD = new String[SegCount];
                                string[] crtPTC = new String[1] { "ADT" };
                                int[] crtNOP = new Int32[1] { 1 };

                                foreach (XmlNode SegGroup in XmlSeg.SelectNodes("itinerary/segGroup"))
                                {
                                    foreach (XmlNode Seg in SegGroup.SelectNodes("seg"))
                                    {
                                        INO[SegIdx] = SegGroupIdx;
                                        DTD[SegIdx] = Seg.Attributes.GetNamedItem("ddt").InnerText.Substring(0, 10);
                                        DTT[SegIdx] = Seg.Attributes.GetNamedItem("ddt").InnerText.Substring(11, 5);
                                        ARD[SegIdx] = Seg.Attributes.GetNamedItem("ardt").InnerText.Substring(0, 10);
                                        ART[SegIdx] = Seg.Attributes.GetNamedItem("ardt").InnerText.Substring(11, 5);
                                        DLC[SegIdx] = Seg.Attributes.GetNamedItem("dlc").InnerText;
                                        ALC[SegIdx] = Seg.Attributes.GetNamedItem("alc").InnerText;
                                        MCC[SegIdx] = Seg.Attributes.GetNamedItem("mcc").InnerText;
                                        OCC[SegIdx] = Seg.Attributes.GetNamedItem("occ").InnerText;
                                        FLN[SegIdx] = Seg.Attributes.GetNamedItem("fln").InnerText;
                                        RBD[SegIdx] = Seg.Attributes.GetNamedItem("rbd").InnerText;

                                        SegIdx++;
                                    }

                                    SegGroupIdx++;
                                }

                                //24시간 발권일 경우 예약 시간대별로 TL 설정(2016-09-22,정성하과장)
                                if (CheckRuleTicketing24(SNM, INO, DTD, DTT, ARD, ART, DLC, ALC, MCC, OCC, FLN, RBD, crtPTC, crtNOP, String.Concat(GUID, "-TKT24")))
                                    LTD = cm.TL24(SNM);
                            }
                        }
                        catch (Exception) { }
                    }
                }

                //예약자 정보 저장
                BookingManInfoSave(RID, RTL, RHN, RSN, RFN, RDB, RGD, RLF, RTN, RMN, REA, RQT, RQU, SNM, ANM, AEN, String.Concat(GUID, "-01"));

                //예약자번호 확인
                RID = (RID.Equals(0)) ? BookingMan(RHN, RDB, RGD, RLF, RTN, RMN, REA) : RID;

                //모두닷컴(항공)과 모두닷컴(모바일) 예약중 비즈니스석/일등석 예약은 모두닷컴(항공_VIP) 거래처로 변경(2016-03-28,김승미과장)
                //모두닷컴(항공_VIP) 거래처 사용 중지(2018-01-15,김경미차장)
                //if (SNM.Equals(2) || SNM.Equals(3915))
                //{
                //    if (CCD.Equals("C") || CCD.Equals("F"))
                //        ANM = 2338487;
                //}

				//GDS별 항공예약 및 통합모드 생성
                if (HostGDS.Equals("Galileo"))
                {
                    #region "Galileo 예약생성"

                    GDS = "Galileo";

                    try
                    {
                        int CHC = PaxInfo.SelectNodes("pax[type='CHD']").Count;
                        int IFC = PaxInfo.SelectNodes("pax[type='INF']").Count;
                        int ADC = PTC.Length - (CHC + IFC);
                        int ReqIdx = (XmlFare.SelectNodes("priceIndex/fareMessage/reqIdx").Count > 0) ? Convert.ToInt32(XmlFare.SelectSingleNode("priceIndex/fareMessage/reqIdx").InnerText) : 0;
                        string ResID = RID.ToString();
                        string ResName = String.Format("{0}/{1}", RSN, RFN);
                        string ResTel = RTN;
                        string ResHp = RMN;
                        string ResEmail = REA;
                        string ResEmpID = "";
                        string ResEmpName = "";
                        string SiteCode = SNM.ToString();
                        string PartnerCode = ANM.ToString();
                        string SiteType = RQT;
                        string BtoBInd = "N";
                        string BtoBAgentCode = "";
                        string BtoBAgentName = "";
                        string BtoBTktEmpID = "";
                        string BtoBTktEmpName = "";
                        string StrPaxInfo = string.Empty;
                        string FareLocation = (XmlFare.SelectNodes("priceIndex/fareMessage/fareLocation").Count > 0) ? XmlFare.SelectSingleNode("priceIndex/fareMessage/fareLocation").InnerText : "";

                        foreach (XmlNode TmpPax in PaxInfo.SelectNodes("pax"))
                        {
                            if (!String.IsNullOrWhiteSpace(StrPaxInfo))
                                StrPaxInfo += ",";

                            StrPaxInfo += String.Format("{0}^{1}^{2}^{3}", TmpPax.SelectSingleNode("engName").InnerText, TmpPax.SelectSingleNode("type").InnerText, Common.ConvertToOnlyNumber(TmpPax.SelectSingleNode("birthday").InnerText), (TmpPax.SelectSingleNode("title").InnerText.Equals("MR") || TmpPax.SelectSingleNode("title").InnerText.Equals("MSTR")) ? "M" : "F");
                        }

                        //ResInfoCreate를 실행하지 않고 예약시
                        if (ReqIdx.Equals(0))
                            ReqIdx = Convert.ToInt32(AddBookingResInfoCreateRS(ROT, OPN, PTC, XmlFare.DocumentElement, XmlSeg.DocumentElement, String.Concat(GUID, "-02")).SelectSingleNode("ReqIdx").InnerText);
                        
                        //### 02.항공편예약(ResProcessRS) #####
                        ResXml = gas.ResProcessRS(ReqIdx, ResID, ResName, ResTel, ResHp, ResEmail, ResEmpID, ResEmpName, SiteCode, PartnerCode, SiteType, BtoBInd, BtoBAgentCode, BtoBAgentName, BtoBTktEmpID, BtoBTktEmpName, StrPaxInfo, Common.TelInfo(SNM, ANM), ADC, CHC, IFC, String.Concat(GUID, "-03"));

                        //오류 결과일 경우 예외 처리
                        if (!ResXml.SelectSingleNode("ResultErrorNo").InnerText.Equals("0"))
                            throw new Exception(ResXml.SelectSingleNode("ResultMsg").InnerText);

                        PNR = ResXml.SelectSingleNode("ReservationData/PnrAddress").InnerText;

                        //LTD(발권마감일(LTD)이 명일이라면 24시간 이내 발권 조건 여부 판단하여 TL 업데이트(2016-07-26,김지영과장))
                        //호스트 운임의 발권일 필드 추가에 따른 로직 추가(2019-01-10)
                        if (ResXml.SelectNodes("ReservationData/LastTicketDate").Count > 0 && !String.IsNullOrWhiteSpace(ResXml.SelectSingleNode("ReservationData/LastTicketDate").InnerText))
                            LTD = ResXml.SelectSingleNode("ReservationData/LastTicketDate").InnerText;
                        else
                            LTD = (XmlFare.SelectNodes("priceIndex/fareMessage/ticketLimitDate").Count > 0) ? XmlFare.SelectSingleNode("priceIndex/fareMessage/ticketLimitDate").InnerText : LTD;

                        //텍스 및 유류할증료를 실데이타로 변경(갈릴레오는 캐싱데이타이기 때문에 예약 후 텍스와 유류할증료를 업데이트 해 준다)
                        if (FareGDS.Equals("Galileo"))
                        {
                            int TotalTax = 0;
                            int TotalFsc = 0;
                            int PaxNum = 0;

                            foreach (XmlNode PaxFare in XmlFare.SelectNodes("priceIndex/paxFareGroup/paxFare"))
                            {
                                XmlNode PaxFareInfo = ResXml.SelectSingleNode(String.Format("PaxFareInfo[PaxType='{0}']", PaxFare.Attributes.GetNamedItem("ptc").InnerText));

                                if (PaxFareInfo != null)
                                {
                                    PaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tax").InnerText = PaxFareInfo.SelectSingleNode("TaxAmt").InnerText;
                                    PaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fsc").InnerText = PaxFareInfo.SelectSingleNode("QchargeAmt").InnerText;
                                }

                                PaxNum = PaxFare.SelectNodes("traveler/ref").Count;
                                TotalTax += (Convert.ToInt32(PaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tax").InnerText) * PaxNum);
                                TotalFsc += (Convert.ToInt32(PaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fsc").InnerText) * PaxNum);
                            }

                            XmlFare.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("tax").InnerText = TotalTax.ToString();
                            XmlFare.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("fsc").InnerText = TotalFsc.ToString();
                        }

                        //아마데우스 운임일 경우 Remark사항으로 운임정보 저장
                        if (FareGDS.Equals("Amadeus"))
                        {
                            //### 03.요금 #####
                            string[] BaseFare = new String[3];

                            BaseFare[0] = "";
                            BaseFare[1] = "";
                            BaseFare[2] = "";

                            foreach (string ptc in PTC)
                            {
                                if (ptc.Equals(PaxTypeCode))
                                    BaseFare[0] = XmlFare.SelectSingleNode(String.Format("priceIndex/paxFareGroup/paxFare[@ptc='{0}']/amount", PaxTypeCode)).Attributes.GetNamedItem("disFare").InnerText;
                                else if (ptc.Equals("CHD"))
                                    BaseFare[1] = XmlFare.SelectSingleNode("priceIndex/paxFareGroup/paxFare[@ptc='CHD']/amount").Attributes.GetNamedItem("disFare").InnerText;
                                else if (ptc.Equals("INF"))
                                    BaseFare[2] = XmlFare.SelectSingleNode("priceIndex/paxFareGroup/paxFare[@ptc='INF']/amount").Attributes.GetNamedItem("disFare").InnerText;
                            }

                            gas.RemarksAddRS("0", PNR, "0", String.Format("FARE/A{0}/C{1}/I{2}", BaseFare[0], BaseFare[1], BaseFare[2]), String.Concat(GUID, "-04"));

                            //### 04.farebasis #####
                            if (!String.IsNullOrWhiteSpace(FareBasis))
                                gas.RemarksAddRS("0", PNR, "0", String.Format("FAREBASIS/{0}", FareBasis), String.Concat(GUID, "-05"));
                        }

                        //### 05.통합모드 생성 #####
                        ModeXml = ToModeSearchBookingGalileo(ResXml);
                        cm.XmlFileSave(ModeXml, mc.Name, "ToModeSearchBookingGalileo", "N", String.Concat(GUID, "-19"));

                        XmlNode BookingInfo2 = ModeXml.SelectSingleNode("bookingInfo");

                        BookingInfo2.SelectSingleNode("gds").InnerText = GDS;
                        BookingInfo2.SelectSingleNode("bookingTL").InnerText = cm.BookingTL(SNM, ValidatingCarrier, BookingInfo2.SelectSingleNode("bookingTL").Attributes.GetNamedItem("ttl").InnerText, LTD, PromTL, DDT, DayTicket, FareLocation);
                    }
                    catch (Exception ex)
                    {
                        //예약취소(PNR만 취소)
                        if (!String.IsNullOrWhiteSpace(PNR))
                        {
                            string StrPaxInfo = string.Empty;

                            foreach (XmlNode TmpPax in PaxInfo.SelectNodes("pax"))
                            {
                                if (!String.IsNullOrWhiteSpace(StrPaxInfo))
                                    StrPaxInfo += "^^";

                                StrPaxInfo += TmpPax.SelectSingleNode("engName").InnerText;
                            }

                            CancelBookingGalileo(String.Concat(GUID, "-C"), PNR, "0", "WEBSERVICE", StrPaxInfo, DateTime.Now.ToString("yyyyMMdd"));
                        }

                        throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0);
                    }

                    #endregion "Galileo 예약생성"
                }
                else if (HostGDS.Equals("Sabre"))
                {
                    #region "Sabre 예약생성"

                    GDS = "Abacus";

                    try
                    {
                        string PrsId = string.Empty;

                        //이베이를 통한 예약일 경우 SEGHOLD한 상태로 넘어오기 때문에 체크
                        if (XmlFare.SelectNodes("priceIndex/fareMessage/prsId").Count > 0 && !String.IsNullOrWhiteSpace(XmlFare.SelectSingleNode("priceIndex/fareMessage/prsId").InnerText))
                        {
                            PrsId = XmlFare.SelectSingleNode("priceIndex/fareMessage/prsId").InnerText;
                        }
                        else
                        {
                            XmlNodeList SegGroupList = XmlSeg.SelectNodes("itinerary/segGroup");
                            string SelectedItin = string.Empty;
                            string SelectedItinCls = string.Empty;
                            string FSCLS = string.Empty;

                            for (int n = 0; n < SegGroupList.Count; n++)
                            {
                                string[] AIF1 = SegGroupList[n].Attributes.GetNamedItem("aif").InnerText.Split('^');

                                SelectedItin += String.Format("&sltdseghd{0}={1}", n, AIF1[0]);

                                for (int m = 0; m < SegGroupList[n].SelectNodes("seg").Count; m++)
                                {
                                    string[] AIF2 = SegGroupList[n].SelectNodes("seg")[m].Attributes.GetNamedItem("aif").InnerText.Split('^');

                                    SelectedItin += String.Format("&sltdseg{0}{1}={2}", n, m, AIF2[1]);
                                    SelectedItin += String.Format("&sltdcmd{0}{1}={2}", n, m, AIF2[0]);
                                    SelectedItinCls += String.Concat((String.IsNullOrWhiteSpace(SelectedItinCls) ? "" : "-"), SegGroupList[n].SelectNodes("seg")[m].Attributes.GetNamedItem("rbd").InnerText);
                                }

                                SelectedItinCls = "";
                                FSCLS += String.Format("&FS{0}CLS={1}", (n + 1), AIF1[1]);
                            }
                            
                            string CommonHeader = XmlFare.SelectNodes("priceIndex/fareMessage/CommonHeader").Count > 0 ? XmlFare.SelectSingleNode("priceIndex/fareMessage/CommonHeader").InnerText : "";
                            string FARE_REC1 = XmlFare.SelectNodes("priceIndex/fareMessage/FARE_REC1").Count > 0 ? XmlFare.SelectSingleNode("priceIndex/fareMessage/FARE_REC1").InnerText : "";
                            string FARE_REC2 = XmlFare.SelectNodes("priceIndex/fareMessage/FARE_REC2").Count > 0 ? XmlFare.SelectSingleNode("priceIndex/fareMessage/FARE_REC2").InnerText : "";
                            string FARE_REC3 = XmlFare.SelectNodes("priceIndex/fareMessage/FARE_REC3").Count > 0 ? XmlFare.SelectSingleNode("priceIndex/fareMessage/FARE_REC3").InnerText : "";

                            //### 01.예약 전처리 #####
                            PrsId = sas.SegHoldRS(CommonHeader, FARE_REC1, FARE_REC2, FARE_REC3, FSCLS, SelectedItin, String.Concat(GUID, "-01")).SelectSingleNode("prs_id").InnerText;
                        }

                        //### 02.예약생성 #####
                        ResXml = sas.AirBookRS(PrsId, "", PTC, PTL, PHN, PSN, PFN, PBD, PTN, PMN, PEA, RTN, RMN, REA, RMK, String.Concat(GUID, "-02"));

                        //에러
                        if (ResXml.SelectSingleNode("error_no").InnerText != "0")
                        {
                            //이베이의 경우 세그홀딩을 랜딩페이지에서 하기 때문에 다시 세그홀딩 시도
                            if (XmlFare.SelectNodes("priceIndex/fareMessage/prsId").Count > 0 && !String.IsNullOrWhiteSpace(XmlFare.SelectSingleNode("priceIndex/fareMessage/prsId").InnerText))
                            {
                                //### 01.예약 전처리 #####
                                PrsId = sas.SegHoldBFMRS(XmlFare.SelectSingleNode("priceIndex/fareMessage/segHold").InnerText, String.Concat(GUID, "-01R")).SelectSingleNode("prs_id").InnerText;
                                
                                //### 02.예약생성 #####
                                ResXml = sas.AirBookRS(PrsId, "", PTC, PTL, PHN, PSN, PFN, PBD, PTN, PMN, PEA, RTN, RMN, REA, RMK, String.Concat(GUID, "-02R"));

                                //에러
                                if (ResXml.SelectSingleNode("error_no").InnerText != "0")
                                    throw new Exception(ResXml.SelectSingleNode("error_desc").InnerText);
                            }
                        }

                        //### 요금정보 저장 #####
                        string[] BaseFare = new String[3];
                        string[] BaseTax = new String[3];
                        string[] BaseFsc = new String[3];
                        double SabreTax = 0;
                        double SabreFuel = 0;
                        double SabreQChrg = 0;

                        BaseFare[0] = "";
                        BaseFare[1] = "";
                        BaseFare[2] = "";
                        BaseTax[0] = "";
                        BaseTax[1] = "";
                        BaseTax[2] = "";
                        BaseFsc[0] = "";
                        BaseFsc[1] = "";
                        BaseFsc[2] = "";

                        XmlNodeList PaxDetailT = ResXml.SelectNodes("pax_detail_t");
                        XmlNodeList ReplyIfT = ResXml.SelectNodes("reply_if_t");

                        foreach (string ptc in PTC)
                        {
                            if (ptc.Equals("CHD"))
                            {
                                for (int i = 0; i < PaxDetailT.Count; i++)
                                {
                                    if (PaxDetailT[i].SelectSingleNode("id_code").InnerText.Equals(ptc))
                                    {
                                        SabreTax = Convert.ToDouble(ReplyIfT[i].SelectSingleNode("chd_tax").InnerText);
                                        SabreFuel = Convert.ToDouble(ReplyIfT[i].SelectSingleNode("chd_fuel").InnerText);
                                        SabreQChrg = Convert.ToDouble(ReplyIfT[i].SelectSingleNode("chd_qchrg").InnerText);
                                        
                                        BaseFare[1] = ReplyIfT[i].SelectSingleNode("chd_disc_fare").InnerText.Split('/')[0];
                                        //BaseTax[1] = (SabreTax - SabreFuel - SabreQChrg).ToString();
                                        BaseTax[1] = (SabreTax - SabreFuel).ToString();
                                        BaseFsc[1] = ReplyIfT[i].SelectSingleNode("chd_fuel").InnerText;
                                        break;
                                    }
                                }
                            }
                            else if (ptc.Equals("INF"))
                            {
                                for (int i = 0; i < PaxDetailT.Count; i++)
                                {
                                    if (PaxDetailT[i].SelectSingleNode("id_code").InnerText.Equals(ptc))
                                    {
                                        SabreTax = Convert.ToDouble(ReplyIfT[i].SelectSingleNode("inf_tax").InnerText);
                                        SabreFuel = Convert.ToDouble(ReplyIfT[i].SelectSingleNode("inf_fuel").InnerText);
                                        SabreQChrg = Convert.ToDouble(ReplyIfT[i].SelectSingleNode("inf_qchrg").InnerText);
                                        
                                        BaseFare[2] = ReplyIfT[i].SelectSingleNode("inf_disc_fare").InnerText.Split('/')[0];
                                        //BaseTax[2] = (SabreTax - SabreFuel - SabreQChrg).ToString();
                                        BaseTax[2] = (SabreTax - SabreFuel).ToString();
                                        BaseFsc[2] = ReplyIfT[i].SelectSingleNode("inf_fuel").InnerText;
                                        break;
                                    }
                                }
                            }
                            else
                            {
                                for (int i = 0; i < PaxDetailT.Count; i++)
                                {
                                    if (PaxDetailT[i].SelectSingleNode("id_code").InnerText.Equals(ptc))
                                    {
                                        SabreTax = Convert.ToDouble(ReplyIfT[i].SelectSingleNode("adt_tax").InnerText);
                                        SabreFuel = Convert.ToDouble(ReplyIfT[i].SelectSingleNode("adt_fuel").InnerText);
                                        SabreQChrg = Convert.ToDouble(ReplyIfT[i].SelectSingleNode("adt_qchrg").InnerText);
                                        
                                        BaseFare[0] = ReplyIfT[i].SelectSingleNode("disc_sales_fare").InnerText.Split('/')[0];
                                        //BaseTax[0] = (SabreTax - SabreFuel - SabreQChrg).ToString();
                                        BaseTax[0] = (SabreTax - SabreFuel).ToString();
                                        BaseFsc[0] = ReplyIfT[i].SelectSingleNode("adt_fuel").InnerText;
                                        break;
                                    }
                                }
                            }
                        }

                        //### 03.세션생성 #####
                        Session = aas.SessionCreate();

                        CID = Session.ChildNodes[0].InnerText;
                        STK = Session.ChildNodes[1].InnerText;

                        //### 04.예약조회 #####
                        aas.AbacusCommand(CID, STK, String.Format("*{0}", ResXml.SelectSingleNode("pnr_common_data_t/pnr_addr1").InnerText), String.Concat(GUID, "-03"));

                        //### 05.운임 #####
                        aas.AbacusCommand(CID, STK, String.Format("9T*FARE/A{0}/C{1}/I{2}", BaseFare[0], BaseFare[1], BaseFare[2]), String.Concat(GUID, "-04"));
                        aas.AbacusCommand(CID, STK, String.Format("9T*TAX/A{0}/C{1}/I{2}", BaseTax[0], BaseTax[1], BaseTax[2]), String.Concat(GUID, "-05"));
                        aas.AbacusCommand(CID, STK, String.Format("9T*FSC/A{0}/C{1}/I{2}", BaseFsc[0], BaseFsc[1], BaseFsc[2]), String.Concat(GUID, "-06"));

                        //### 04.farebasis #####
                        if (!String.IsNullOrWhiteSpace(ReplyIfT[0].SelectSingleNode("air_fare_t/fare_basis").InnerText))
                            aas.AbacusCommand(CID, STK, String.Format("9T*FAREBASIS/{0}", ReplyIfT[0].SelectSingleNode("air_fare_t/fare_basis").InnerText), String.Concat(GUID, "-07"));

                        //### 05.마지막에 실행 #####
                        aas.AbacusCommand(CID, STK, "6P", String.Concat(GUID, "-08"));
                        aas.AbacusCommand(CID, STK, "E", String.Concat(GUID, "-09"));

                        //### 세션종료 #####
                        aas.SessionClose(CID, STK);
                        CID = "";
                        STK = "";

                        //### 06.요금XML 업데이트 #####
                        int SummaryTax = 0;
                        int SummaryFsc = 0;

                        foreach (XmlNode PaxFare in XmlFare.SelectNodes("priceIndex/paxFareGroup/paxFare"))
                        {
                            int PaxTax = 0;
                            int PaxFsc = 0;
                            int PaxCount = PaxFare.SelectNodes("traveler/ref").Count;
                            
                            if (PaxFare.Attributes.GetNamedItem("ptc").InnerText.Equals("CHD"))
                            {
                                PaxTax = cm.RequestInt(BaseTax[1]);
                                PaxFsc = cm.RequestInt(BaseFsc[1]);
                            }
                            else if (PaxFare.Attributes.GetNamedItem("ptc").InnerText.Equals("INF"))
                            {
                                PaxTax = cm.RequestInt(BaseTax[2]);
                                PaxFsc = cm.RequestInt(BaseFsc[2]);
                            }
                            else
                            {
                                PaxTax = cm.RequestInt(BaseTax[0]);
                                PaxFsc = cm.RequestInt(BaseFsc[0]);
                            }

                            PaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tax").InnerText = PaxTax.ToString();
                            PaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fsc").InnerText = PaxFsc.ToString();

                            SummaryTax += (PaxTax * PaxCount);
                            SummaryFsc += (PaxFsc * PaxCount);
                        }

                        XmlFare.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("tax").InnerText = SummaryTax.ToString();
                        XmlFare.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("fsc").InnerText = SummaryFsc.ToString();
                        XmlFare.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("price").InnerText = (Convert.ToInt32(XmlFare.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("disFare").InnerText) + Convert.ToInt32(XmlFare.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("tasf").InnerText) + SummaryTax + SummaryFsc).ToString();
                        XmlFare.SelectSingleNode("priceIndex").Attributes.GetNamedItem("mode").InnerText = (ResXml.SelectNodes("pnr_common_data_t/bfm_bking").Count > 0 && ResXml.SelectSingleNode("pnr_common_data_t/bfm_bking").InnerText.Equals("Y")) ? "BFM" : "FMS";

                        //### 07.통합모드 생성 #####
                        ModeXml = ToModeSearchBookingSabre(ResXml);
                        cm.XmlFileSave(ModeXml, mc.Name, "ToModeSearchBookingSabre", "N", String.Concat(GUID, "-10"));

                        XmlNode BookingInfo2 = ModeXml.SelectSingleNode("bookingInfo");

                        BookingInfo2.SelectSingleNode("gds").InnerText = ResXml.SelectSingleNode("pnr_common_data_t/sell_frm").InnerText.StartsWith("M") ? "Amadeus" : GDS;
                        BookingInfo2.SelectSingleNode("bookingTL").InnerText = cm.BookingTL(SNM, ValidatingCarrier, BookingInfo2.SelectSingleNode("bookingTL").Attributes.GetNamedItem("ttl").InnerText, LTD, PromTL, DDT, DayTicket, "");
                    }
                    catch (Exception ex)
                    {
                        //예약취소(PNR만 취소)
                        if (!String.IsNullOrWhiteSpace(PNR))
                            CancelBookingAbacus(String.Concat(GUID, "-C"), PNR);

                        throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0);
                    }

                    #endregion "Sabre 예약생성"
                }
                else if (HostGDS.Equals("Abacus"))
                {
                    #region "Abacus 예약생성"

                    GDS = "Abacus";

                    try
                    {
                        //갈릴레오 운임인 경우 LTD(발권마감일(LTD)이 명일이라면 24시간 이내 발권 조건 여부 판단하여 TL 업데이트(2016-07-26,김지영과장))
                        if (FareGDS.Equals("Galileo"))
                            LTD = (XmlFare.SelectNodes("priceIndex/fareMessage/ticketLimitDate").Count > 0) ? XmlFare.SelectSingleNode("priceIndex/fareMessage/ticketLimitDate").InnerText : LTD;
                        
                        //### 01.세션생성 #####
                        Session = aas.SessionCreate();

                        CID = Session.ChildNodes[0].InnerText;
                        STK = Session.ChildNodes[1].InnerText;

                        //### 02.항공편예약 #####
                        ResXml = aas.AbacusAirBookRS(CID, STK, String.Concat(GUID, "-02"), XmlSeg.DocumentElement);

                        if (ResXml.GetElementsByTagName("Errors").Count > 0)
                            throw new Exception("선택하신 여정중 전체 또는 일부 구간에 대해서는 예약이 불가능합니다. 다른 여정을 선택하시기 바랍니다.");

                        //### 03.탑승자정보 #####
                        aas.AbacusTravelItineraryAddInfoRS(CID, STK, String.Concat(GUID, "-03"), PTC, PTL, PSN, PFN, PBD, PTN, PMN, PEA);

                        //### 04.소아나 유아의 경우 생년월일 입력 #####
                        aas.AbacusSpecialServiceRS(CID, STK, String.Concat(GUID, "-04"), ValidatingCarrier, PTC, PTL, PSN, PFN, PBD);

                        //### 05.ARNK(비항공구간) #####
                        bool Arnk = false;
                        XmlNodeList Segs = XmlSeg.SelectNodes("itinerary/segGroup/seg");

                        for (int i = 1; i < Segs.Count; i++)
                        {
                            if (Segs[i].Attributes.GetNamedItem("dlc").InnerText != Segs[(i - 1)].Attributes.GetNamedItem("alc").InnerText)
                            {
                                Arnk = true;
                                break;
                            }
                        }

                        if (Arnk)
                            aas.AbacusArunkRS(CID, STK, String.Concat(GUID, "-05"));

                        //### 06.모두투어 전화번호 #####
                        if (SNM != 68)
                        {
                            aas.AbacusCommand(CID, STK, String.Concat("9T*", Common.TelInfo(SNM, ANM)), String.Concat(GUID, "-06"));
                        }

                        //### 07.예약자명 #####
                        aas.AbacusCommand(CID, STK, String.Format("9H*{0} {1}/{2}", RTL, RSN, RFN), String.Concat(GUID, "-07"));

                        //### 08.예약자 전화번호 #####
                        if (!String.IsNullOrEmpty(RTN.Trim())) { aas.AbacusCommand(CID, STK, String.Format("9H*{0}", RTN), String.Concat(GUID, "-08")); }
                        if (!String.IsNullOrEmpty(RMN.Trim())) { aas.AbacusCommand(CID, STK, String.Format("9M*{0}", RMN), String.Concat(GUID, "-09")); }

                        //### 09.예약자 이메일 #####
                        if (!String.IsNullOrEmpty(REA.Trim())) { aas.AbacusCommand(CID, STK, String.Format("9E*{0}", REA.Replace("@", "//")), String.Concat(GUID, "-10")); }

                        //### 10.탑승자 연락처(OSI) #####
                        if (OZSeg)
                        {
                            for (int i = 0; i < PMN.Length; i++)
                            {
                                if (!String.IsNullOrWhiteSpace(PMN[i])) { aas.AbacusCommand(CID, STK, String.Format("3OSI OZ CTCM 82{0}", PMN[i].Trim().Replace("-", " ").Substring(1)), String.Concat(GUID, "-11-", (i + 1))); }
                            }
                        }

                        //### 11.요금 #####
                        string[] BaseFare = new String[3];

                        BaseFare[0] = "";
                        BaseFare[1] = "";
                        BaseFare[2] = "";

                        foreach (string ptc in PTC)
                        {
                            if (ptc.Equals(PaxTypeCode))
                                BaseFare[0] = XmlFare.SelectSingleNode(String.Format("priceIndex/paxFareGroup/paxFare[@ptc='{0}']/amount", PaxTypeCode)).Attributes.GetNamedItem("disFare").InnerText;
                            else if (ptc.Equals("CHD"))
                                BaseFare[1] = XmlFare.SelectSingleNode("priceIndex/paxFareGroup/paxFare[@ptc='CHD']/amount").Attributes.GetNamedItem("disFare").InnerText;
                            else if (ptc.Equals("INF"))
                                BaseFare[2] = XmlFare.SelectSingleNode("priceIndex/paxFareGroup/paxFare[@ptc='INF']/amount").Attributes.GetNamedItem("disFare").InnerText;
                        }

                        aas.AbacusCommand(CID, STK, String.Format("9T*FARE/A{0}/C{1}/I{2}", BaseFare[0], BaseFare[1], BaseFare[2]), String.Concat(GUID, "-12"));

                        //### 12.farebasis #####
                        if (!String.IsNullOrWhiteSpace(FareBasis))
                            aas.AbacusCommand(CID, STK, String.Format("9T*FAREBASIS/{0}", FareBasis), String.Concat(GUID, "-13"));

                        //### 13.마지막에 실행 #####
                        aas.AbacusCommand(CID, STK, "*A", String.Concat(GUID, "-14"));

                        //### 14.일괄예약 종료 #####
                        ResXml = aas.AbacusEndTransactionRS(CID, STK, String.Concat(GUID, "-15"));

                        //### 15.한번 더 실행 #####
                        if (ResXml.GetElementsByTagName("Errors").Count > 0)
                        {
                            if (ResXml.GetElementsByTagName("Message")[0].InnerText.Trim().Equals("VERIFY ORDER OF ITINERARY SEGMENTS - MODIFY OR END TRANSACTION"))
                            {
                                ResXml = aas.AbacusEndTransaction2RS(CID, STK, String.Concat(GUID, "-16"));
                            }
                            else if (ResXml.GetElementsByTagName("Message")[0].InnerText.Trim().Equals("PREVIOUS ENTRY IN PROGRESS, PLEASE WAIT"))
                            {
                                System.Threading.Thread.Sleep(3000);
                                ResXml = aas.AbacusEndTransaction2RS(CID, STK, String.Concat(GUID, "-16"));
                            }
                            else
                                throw new Exception(ResXml.GetElementsByTagName("Message")[0].InnerText.Trim());
                        }

                        //### 16.예약조회 #####
                        if (ResXml.GetElementsByTagName("Errors").Count.Equals(0))
                        {
                            PNR = ResXml.GetElementsByTagName("UniqueID")[0].Attributes[0].InnerText;

                            //예약내용
                            ResXml = aas.TravelItineraryReadRS(CID, STK, PNR, String.Concat(GUID, "-17"));

                            xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            xnMgr.AddNamespace("stl", AbacusConfig.NamespaceURL("TravelItineraryRead_stl"));
                            xnMgr.AddNamespace("tir310", AbacusConfig.NamespaceURL("TravelItineraryRead_tir310"));

                            //오류시
                            if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
                            {
                                if (ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText.Trim().Equals("NAK3 - UPDATED PNR CURRENTLY IN AAA - FINISH OR IGNORE"))
                                {
                                    aas.AbacusCommand(CID, STK, "E", String.Concat(GUID, "-18"));
                                    ResXml = aas.TravelItineraryReadRS(CID, STK, PNR, String.Concat(GUID, "-19"));

                                    //오류시
                                    if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
                                        throw new Exception(ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText);
                                }
                                else
                                    throw new Exception(ResXml.GetElementsByTagName("Message")[0].InnerText.Trim());
                            }
                        }
                        else
                            throw new Exception(ResXml.GetElementsByTagName("Message")[0].InnerText.Trim());

                        //### 17.세션종료 #####
                        aas.SessionClose(CID, STK);
                        CID = "";
                        STK = "";

                        //### 17.통합모드 생성 #####
                        ModeXml = ToModeSearchBookingAbacus_TravelItineraryRead(ResXml, xnMgr);
                        cm.XmlFileSave(ModeXml, mc.Name, "ToModeSearchBookingAbacus", "N", String.Concat(GUID, "-20"));

                        XmlNode BookingInfo2 = ModeXml.SelectSingleNode("bookingInfo");

                        BookingInfo2.SelectSingleNode("gds").InnerText = GDS;
                        BookingInfo2.SelectSingleNode("bookingTL").InnerText = cm.BookingTL(SNM, ValidatingCarrier, BookingInfo2.SelectSingleNode("bookingTL").Attributes.GetNamedItem("ttl").InnerText, LTD, PromTL, DDT, DayTicket, "");
                    }
                    catch (Exception ex)
                    {
                        //### 세션종료 #####
                        if (!String.IsNullOrWhiteSpace(CID))
                            aas.SessionClose(CID, STK);

                        //예약취소(PNR만 취소)
                        if (!String.IsNullOrWhiteSpace(PNR))
                            CancelBookingAbacus(String.Concat(GUID, "-C"), PNR);

                        throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0);
                    }

                    #endregion "Abacus 예약생성"
                }
                else if (HostGDS.Equals("Amadeus"))
                {
                    #region "Amadeus 예약생성"

                    GDS = "Amadeus";

                    try
                    {
                        //### 01.세션생성 #####
                        Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

                        SID = Session.SelectSingleNode("session/sessionId").InnerText;
                        SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                        SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                        //### 02.항공편예약(Air_SellFromRecommendation) #####
                        ResXml = amd.SellFromRecommendationRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), OPN, XmlSeg.DocumentElement);

                        //Seg Holding 실패시
                        xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                        xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Air_SellFromRecommendation"));

                        if (ResXml.SelectNodes("m:errorAtMessageLevel", xnMgr).Count > 0)
                        {
                            if (ResXml.SelectSingleNode("m:errorAtMessageLevel/m:errorSegment/m:errorDetails/m:errorCode", xnMgr).InnerText.Equals("288"))
                                throw new Exception("선택하신 여정중 전체 또는 일부 구간에 대해서는 예약이 불가능합니다. 다른 여정을 선택하시기 바랍니다.");
                            else
                                throw new Exception(String.Format("여정 등록 중 오류가 발생했습니다({0}).", (ResXml.SelectNodes("m:errorAtMessageLevel/m:interactiveFreeText", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:errorAtMessageLevel/m:interactiveFreeText/m:freeText", xnMgr).InnerText : ""));
                        }
                        else
                        {
                            XmlElement SellFromRecommendation = ResXml;

                            //### 03.예약정보(이름,연락처,탑승자정보)(PNR_AddMultiElements) #####
                            ResXml = amd.AddMultiElementsRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), PTC, PTL, PHN, PSN, PFN, PBD, PTN, PMN, PEA, RTN, RMN, REA, "", RQT, SNM, ANM, OPN, ValidatingCarrier, XmlSeg.DocumentElement);

                            //### 04.기내식(KE 국제선의 경우 유/소아 기내식 필수)(PNR_AddMultiElements) #####
                            if (ValidatingCarrier.Equals("KE") && NumMeal > 0)
                            {
                                string PTNum = "";
                                string PTMeal = "";

                                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                                foreach (XmlNode TravellerInfo in ResXml.SelectNodes("m:travellerInfo[m:passengerData/m:travellerInformation/m:passenger/m:type='CHD']", xnMgr))
                                {
                                    PTNum = String.Concat(PTNum, TravellerInfo.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText, ",");
                                    PTMeal = String.Concat(PTMeal, "CHML", ",");
                                }

                                foreach (XmlNode TravellerInfo in ResXml.SelectNodes("m:travellerInfo[m:passengerData/m:travellerInformation/m:passenger/m:type='INF']", xnMgr))
                                {
                                    PTNum = String.Concat(PTNum, TravellerInfo.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText, ",");
                                    PTMeal = String.Concat(PTMeal, "BBML", ",");
                                }

                                ResXml = amd.AddMultiElementsMEALRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"), PTNum.Split(','), PTMeal.Split(','));
                            }

                            //### 05.운임Pricing(Fare_PricePNRWithBookingClass) #####
                            ResXml = amd.PricePNRWithBookingClassPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05"), ValidatingCarrier, "", XmlFare.SelectSingleNode("priceIndex/paxFareGroup"));

                            //### 06.TST생성(Ticket_CreateTSTFromPricing) #####
                            amd.CreateTSTFromPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06"), ResXml, "Fare_PricePNRWithBookingClassPricing");

                            //### 07.CheckRules(CheckRulesTariffRS) #####
                            string RuleID = "";
                            string TariffID = "";

                            //발권마감일(LTD)이 명일이라면 24시간 이내 발권 조건 여부 판단하여 TL 업데이트(2016-07-21,김지영과장)
                            bool TicketingCheck = (!String.IsNullOrWhiteSpace(LTD) && LTD.Equals(DateTime.Now.AddDays(1).ToString("yyyy-MM-dd"))) ? true : false;
                            bool Ticketing = false;

                            try
                            {
                                //오류 결과일 경우 중지
                                xnMgr1 = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                                xnMgr1.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassPricing"));

                                if (ResXml.SelectNodes("m:applicationError", xnMgr1).Count.Equals(0))
                                {
                                    foreach (XmlNode FareList in ResXml.SelectNodes("m:fareList", xnMgr1))
                                    {
                                        string FcNumber = FareList.SelectSingleNode("m:fareReference[m:referenceType='TST']/m:uniqueReference", xnMgr1).InnerText;
                                        XmlElement ResRule = amd.CheckRulesTariffRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-07_", FcNumber), FcNumber);

                                        xnMgr2 = new XmlNamespaceManager(ResRule.OwnerDocument.NameTable);
                                        xnMgr2.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_CheckRules"));

                                        if (ResRule.SelectNodes("m:errorInfo", xnMgr2).Count.Equals(0))
                                        {
                                            foreach (XmlNode flightDetails in ResRule.SelectNodes("m:flightDetails", xnMgr2))
                                            {
                                                if (flightDetails.SelectNodes("m:travellerGrp/m:travellerIdentRef/m:referenceDetails[m:type='RU']", xnMgr2).Count > 0)
                                                {
                                                    if (!String.IsNullOrWhiteSpace(RuleID))
                                                        RuleID = String.Concat(RuleID, ", ");

                                                    RuleID = String.Concat(RuleID, flightDetails.SelectSingleNode("m:travellerGrp/m:travellerIdentRef/m:referenceDetails[m:type='RU']/m:value", xnMgr2).InnerText);
                                                }

                                                if (flightDetails.SelectNodes("m:travellerGrp/m:fareRulesDetails", xnMgr2).Count > 0)
                                                {
                                                    if (!String.IsNullOrWhiteSpace(TariffID))
                                                        TariffID = String.Concat(TariffID, ", ");

                                                    TariffID = String.Concat(TariffID, flightDetails.SelectSingleNode("m:travellerGrp/m:fareRulesDetails/m:tariffClassId", xnMgr2).InnerText);
                                                }
                                            }

                                            if (TicketingCheck && !Ticketing)
                                            {
                                                if (ResRule.SelectNodes("m:tariffInfo/m:fareRuleText[contains(m:freeText, 'TICKETING MUST BE COMPLETED WITHIN 24 HOURS')]", xnMgr2).Count > 0 || ResRule.SelectNodes("m:tariffInfo/m:fareRuleText[contains(m:freeText, 'TICKETING MUST BE COMPLETED WITHIN 1 DAY')]", xnMgr2).Count > 0)
                                                    Ticketing = true;
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    //오류발생시 무조건 24시간 발권으로 처리(2016-08-25,김지영과장)
                                    if (TicketingCheck)
                                        Ticketing = true;
                                }

                                //24시간 발권일 경우 예약 시간대별로 TL 설정(2016-09-22,정성하과장)
                                if (Ticketing)
                                    LTD = cm.TL24(SNM);
                            }
                            catch (Exception) { }

                            //### 08.PNR저장(PNR_AddMultiElements) #####
                            ResXml = amd.AddMultiElementsActionsRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-08"), "10");

                            ////### 08-1.WARNING 발생시 PNR저장(PNR_AddMultiElements) 한 번 더 실행 #####
                            //xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            //xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                            //if (ResXml.SelectNodes("m:generalErrorInfo", xnMgr).Count > 0)
                            //{
                            //    if (ResXml.SelectNodes("m:generalErrorInfo/m:messageErrorText/m:text[starts-with(.,'WARNING')]", xnMgr).Count > 0)
                            //    {
                            //        ResXml = amd.AddMultiElementsActionsRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-081"), "10");
                            //    }
                            //}

                            //### 09.PNR조회(PNR_Retrieve) #####
                            xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                            if (ResXml.SelectNodes("m:pnrHeader/m:reservationInfo/m:reservation[m:companyId='1A']/m:controlNumber", xnMgr).Count.Equals(0))
                            {
                                throw new Exception("선택하신 여정중 전체 또는 일부 구간에 대해서는 예약이 불가능합니다. 다른 여정을 선택하시기 바랍니다.");
                            }

                            PNR = ResXml.SelectSingleNode("m:pnrHeader/m:reservationInfo/m:reservation[m:companyId='1A']/m:controlNumber", xnMgr).InnerText;
                            ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-09"), PNR);

                            xnMgr2 = new XmlNamespaceManager(SellFromRecommendation.OwnerDocument.NameTable);
                            xnMgr2.AddNamespace("m", AmadeusConfig.NamespaceURL("Air_SellFromRecommendation"));

                            //### 10.여정 그룹 생성 #####
                            int seg = 1;
                            bool AddSegGroup = false;
                            XmlNode SegmentGroupingInfo;
                            XmlNode GroupingCode;
                            XmlNode MarriageDetail;
                            XmlNode TatooNum;

                            if (ResXml.SelectNodes("m:segmentGroupingInfo", xnMgr).Count.Equals(0))
                            {
                                SegmentGroupingInfo = ResXml.OwnerDocument.CreateElement("segmentGroupingInfo", xnMgr.DefaultNamespace);
                                GroupingCode = ResXml.OwnerDocument.CreateElement("groupingCode", xnMgr.DefaultNamespace);
                                MarriageDetail = ResXml.OwnerDocument.CreateElement("marriageDetail", xnMgr.DefaultNamespace);
                                TatooNum = ResXml.OwnerDocument.CreateElement("tatooNum", xnMgr.DefaultNamespace);

                                SegmentGroupingInfo.AppendChild(GroupingCode);
                                SegmentGroupingInfo.AppendChild(MarriageDetail.AppendChild(TatooNum));

                                ResXml.InsertAfter(SegmentGroupingInfo, ResXml.SelectSingleNode("m:originDestinationDetails", xnMgr));
                                AddSegGroup = true;
                            }
                            else
                            {
                                SegmentGroupingInfo = ResXml.SelectSingleNode("m:segmentGroupingInfo", xnMgr);
                                GroupingCode = ResXml.SelectSingleNode("m:segmentGroupingInfo/m:groupingCode", xnMgr);
                                MarriageDetail = ResXml.SelectSingleNode("m:segmentGroupingInfo/m:marriageDetail", xnMgr);
                                TatooNum = ResXml.SelectSingleNode("m:segmentGroupingInfo/m:marriageDetail/m:tatooNum", xnMgr);
                            }

                            XmlNode NewSegmentGroupingInfo = ResXml.InsertBefore(SegmentGroupingInfo.CloneNode(false), SegmentGroupingInfo);
                            XmlNode NewMarriageDetail;

                            NewSegmentGroupingInfo.AppendChild(GroupingCode.CloneNode(false)).InnerText = "MODE";

                            foreach (XmlNode ItineraryDetails in SellFromRecommendation.SelectNodes("m:itineraryDetails", xnMgr2))
                            {
                                NewMarriageDetail = NewSegmentGroupingInfo.AppendChild(MarriageDetail.CloneNode(false));

                                foreach (XmlNode SegmentInformation in ItineraryDetails.SelectNodes("m:segmentInformation", xnMgr2))
                                {
                                    NewMarriageDetail.AppendChild(TatooNum.CloneNode(false)).InnerText = (seg++).ToString();
                                }
                            }

                            if (AddSegGroup)
                                ResXml.RemoveChild(SegmentGroupingInfo);

                            cm.XmlFileSave(ResXml, mc.Name, "RetrieveRS", "Y", String.Concat(GUID, "-10"));

                            try
                            {
                                //### 11.탑승객 연락처 및 이메일(Command_CrypticRS) #####
                                //CI항공인 경우 탑승객 연락처 및 이메일주소를 APN 항목으로 추가 입력(2016-08-25,김승미차장)
                                if (ValidatingCarrier.Equals("CI"))
                                {
                                    for (int i = 0; i < PID.Length; i++)
                                    {
                                        if (!String.IsNullOrWhiteSpace(PMN[i]))
                                            amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-11_M", i), String.Format("APN-M+82{0}/EN/P1", PMN[i].Trim().Replace("-", " ").Substring(1)));
                                        
                                        if (!String.IsNullOrWhiteSpace(PEA[i]))
                                            amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-11_E", i), String.Format("APN-E+{0}/EN/P1", PEA[i].Trim()));
                                    }
                                }

                                //네이버예약일 경우 이스타항공은 요금정보 미등록(2018-02-12,김경미차장)
                                if (!(SNM.Equals(4638) && ValidatingCarrier.Equals("ZE")))
                                {
                                    //### 12.요금정보(Command_CrypticRS) #####
                                    string FareString = "";
                                    foreach (XmlNode PaxFare in XmlFare.SelectNodes("priceIndex/paxFareGroup/paxFare"))
                                    {
                                        if (!String.IsNullOrWhiteSpace(FareString))
                                            FareString += "/";

                                        FareString += String.Concat(PaxFare.Attributes.GetNamedItem("ptc").InnerText, PaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("disFare").InnerText);
                                    }

                                    if (!String.IsNullOrWhiteSpace(FareString))
                                        amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-12_1"), String.Concat("RM FARE: ", FareString));

                                    if (!String.IsNullOrWhiteSpace(RuleID) || !String.IsNullOrWhiteSpace(TariffID))
                                    {
                                        RuleID = String.Concat("RULEID: ", RuleID);
                                        TariffID = String.Concat("TARIFFID: ", TariffID);

                                        amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-12_2"), String.Format("RM {0} / {1}", RuleID, TariffID));
                                    }

                                    if (!String.IsNullOrWhiteSpace(FareBasis))
                                        amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-12_3"), String.Concat("RM FAREBASIS: ", FareBasis));

                                    if (!String.IsNullOrWhiteSpace(FareString) || !String.IsNullOrWhiteSpace(RuleID) || !String.IsNullOrWhiteSpace(TariffID))
                                        amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-12_4"), "ET");
                                }
                            }
                            catch (Exception) { }
                        }

                        //### 13.세션종료 #####
                        SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-13"));

                        //### 14.통합모드 생성 #####
                        ModeXml = ToModeSearchBookingAmadeus(SNM, ROT, ResXml, xnMgr);
                        cm.XmlFileSave(ModeXml, mc.Name, "ToModeSearchBookingAmadeus", "Y", String.Concat(GUID, "-14"));

                        XmlNode BookingInfo2 = ModeXml.SelectSingleNode("bookingInfo");

                        BookingInfo2.SelectSingleNode("gds").InnerText = GDS;
                        BookingInfo2.SelectSingleNode("bookingTL").InnerText = cm.BookingTL(SNM, ValidatingCarrier, BookingInfo2.SelectSingleNode("bookingTL").Attributes.GetNamedItem("ttl").InnerText, LTD, PromTL, DDT, DayTicket, "");
                    }
                    catch (Exception ex)
                    {
                        //### 세션종료 #####
                        if (SQN > 0)
                            amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-EX"));

                        //예약취소(PNR만 취소)
                        if (!String.IsNullOrWhiteSpace(PNR))
                            CancelBookingAmadeus(String.Concat(GUID, "-C"), SNM, PNR, 0);

                        throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0);
                    }

                    #endregion "Amadeus 예약생성"
                }
                else
                    throw new Exception("GDS 정보가 불확실 합니다.");

                //통합모드 내용 추가
				XmlNode BookingInfo = ModeXml.SelectSingleNode("bookingInfo");
				XmlNode Attn = ModeXml.SelectSingleNode("attn");
				XmlNode Agent = ModeXml.SelectSingleNode("agent");

				BookingInfo.SelectSingleNode("agentBookingNo").InnerText = GUID;
                BookingInfo.SelectSingleNode("allianceBookingNo").InnerText = AOID;
				BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("code").InnerText = BookingStatus(ModeXml.SelectSingleNode("flightInfo"));
				BookingInfo.SelectSingleNode("bookingAirline").Attributes.GetNamedItem("code").InnerText = ValidatingCarrier;

				Attn.Attributes.GetNamedItem("rid").InnerText = RID.ToString();
				Attn.Attributes.GetNamedItem("rhn").InnerText = RHN;
				Attn.Attributes.GetNamedItem("rea").InnerText = REA;
				Attn.Attributes.GetNamedItem("rtn").InnerText = RTN;
				Attn.Attributes.GetNamedItem("rmn").InnerText = RMN;
				Attn.SelectSingleNode("terminal").InnerText = RQT;

				if (!String.IsNullOrWhiteSpace(RMK))
					Attn.SelectSingleNode("remark").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(RMK));

				Agent.Attributes.GetNamedItem("snm").InnerText = SNM.ToString();
				Agent.Attributes.GetNamedItem("anm").InnerText = ANM.ToString();
				Agent.Attributes.GetNamedItem("aen").InnerText = AEN.ToString();

                if (!BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("code").InnerText.Equals("HK"))
                {
                    //네이버 예약시 PNR 생성 후 HK가 아니라면 PNR 취소 후 에러 리턴(2016-09-26,정성하과장)
                    if (SNM.Equals(4638))
                    {
                        //티웨이항공(TW)은 예약시 바로 확정처리되지 않아 예외 처리(2017-02-06,김지영과장)
                        //이스타항공(ZE)은 예약시 바로 확정처리되지 않아 예외 처리(2018-02-14,김경미차장)
                        //중국국제항공(CA)은 예약시 바로 확정처리되지 않아 예외 처리(2018-08-14,김지영팀장)
                        if (!BookingInfo.SelectSingleNode("bookingAirline").Attributes.GetNamedItem("code").InnerText.Equals("TW") && !BookingInfo.SelectSingleNode("bookingAirline").Attributes.GetNamedItem("code").InnerText.Equals("ZE") && !BookingInfo.SelectSingleNode("bookingAirline").Attributes.GetNamedItem("code").InnerText.Equals("CA"))
                            throw new Exception("예약 가능한 항공편이 없습니다.");
                    }

                    //11번가 예약시 PNR 생성 후 HK가 아니라면 PNR 취소 후 에러 리턴(2017-03-20,정성하과장)
                    //취소로직 삭제(2017-05-29,박주영차장)
                    //else if (SNM.Equals(4924) || SNM.Equals(4929))
                    //    throw new Exception("예약 가능한 항공편이 없습니다.");

                    //더페이 예약시 PNR 생성 후 HK가 아니라면 PNR 취소 후 에러 리턴(2018-01-16,김덕열과장)
                    else if (SNM.Equals(5025))
                        throw new Exception("예약 가능한 항공편이 없습니다.");
                }

                //DB저장
                string[] AddBookingResult = AddBookingDB(RID, ANM, SNM, AEN, RMK, XmlFare.OuterXml, SXL, RXL, DXL, RQT, RQU, ROT, OPN, AKY, AOID, PIP, PIIP, PaxInfo, ResXml, ModeXml, BookingInfo, GUID);

                //주문번호
                OID = Convert.ToInt32(BookingInfo.SelectSingleNode("modeBookingNo").InnerText);

                //주문자 정보 저장
                BookingMan2(OID, RHN, RSN, RFN, RDB, RTN, RMN, REA, GUID);

                try
                {
                    //직판 예약대리점 자동 분배
                    if (HostGDS != "Galileo")
                    {
                        string QueueInfo = AddBookingResult[0].Trim();
                        
                        if (!String.IsNullOrWhiteSpace(QueueInfo) && QueueInfo.Length > 10)
                        {
                            string[] QueueInfos = QueueInfo.Split('|');

                            if (HostGDS.Equals("Abacus"))
                            {
                                //자동큐잉
                                if (!String.IsNullOrWhiteSpace(QueueInfos[2]))
                                    AbacusQTransfer(PNR, QueueInfos[2], String.Concat(GUID, "_Q"));
                            }
                            else if (HostGDS.Equals("Amadeus"))
                            {
                                //자동큐잉 + 거래처 연락처 등록
                                if (!String.IsNullOrWhiteSpace(QueueInfos[0]) && !String.IsNullOrWhiteSpace(QueueInfos[3]))
                                    AmadeusQTransferAddTel(SNM, PNR, QueueInfos[0], String.Concat(GUID, "_Q"), QueueInfos[3]);
                                else
                                {
                                    //자동큐잉
                                    if (!String.IsNullOrWhiteSpace(QueueInfos[0]))
                                        AmadeusQTransfer(SNM, PNR, QueueInfos[0], String.Concat(GUID, "_Q"));
                                }
                            }
                        }
                    }

                    //모두닷컴(항공) 및 모두닷컴(항공_VIP) 예약인 경우 거래처직원 연락처 추가 등록(2016-08-25,김지영과장)
                    if ((SNM.Equals(2) || SNM.Equals(3915)) && HostGDS.Equals("Amadeus"))
                    {
                        if (!String.IsNullOrWhiteSpace(AddBookingResult[1]))
                        {
                            string[] AgentInfo = AddBookingResult[1].Trim().Split('^');
                            
                            if (AgentInfo.Length > 5 && !String.IsNullOrWhiteSpace(AgentInfo[4]))
                            {
                                //### 01.세션생성 #####
                                Session = amd.Authenticate(SNM, String.Concat(GUID, "-AgentInfo-01"));

                                SID = Session.SelectSingleNode("session/sessionId").InnerText;
                                SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                                SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                                amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-AgentInfo-02"), String.Format("AP-{0} MODETOUR", AgentInfo[4]));
                                amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-AgentInfo-03"), "ET");

                                //### 13.세션종료 #####
                                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-AgentInfo-04"));
                            }
                        }
                    }
                }
                finally { }

                //제휴사 예약정보 전송
                if (!String.IsNullOrWhiteSpace(AOID))
                {
                    //11번가(4924,4929), 티몬(4925,4926), 이베이(5020,5119)(5161,5163)(5162,5164), 네이버(4638)
                    if (SNM.Equals(4924) || SNM.Equals(4929) || SNM.Equals(4925) || SNM.Equals(4926) || SNM.Equals(5020) || SNM.Equals(5119) || SNM.Equals(5161) || SNM.Equals(5163) || SNM.Equals(5162) || SNM.Equals(5164) || SNM.Equals(4638))
                        mod.AirBookEx(SNM, OID, 0, RID, RID, RQT, COOKIE);
                }

                //최종 RESPONSE XML 저장
                cm.XmlFileSave(ModeXml, mc.Name, "ToModeSearchBooking", "N", String.Concat(GUID, "-99"));

				return ModeXml;
			}
			catch (Exception ex)
			{
				//예약취소
				if (!String.IsNullOrWhiteSpace(PNR))
				{
					if (String.Compare(GDS, "Abacus", true).Equals(0))
						CancelBookingAbacus(String.Concat(GUID, "-C"), PNR);
					else if (String.Compare(GDS, "Galileo", true).Equals(0))
                    {
                        if (!ex.Message.StartsWith("이미 동일한 내용으로 예약이 존재합니다."))
                        {
                            string PaxName = string.Empty;

                            for (int i = 0; i < PSN.Length; i++)
                            {
                                if (!String.IsNullOrWhiteSpace(PaxName))
                                    PaxName += "^^";

                                PaxName += String.Format("{0}/{1}", PSN[i], PFN[i]);
                            }

                            CancelBookingGalileo(String.Concat(GUID, "-C"), PNR, "0", "", PaxName, DateTime.Now.ToString("yyyyMMdd"));
                        }
                    }
                    else
						CancelBookingAmadeus(String.Concat(GUID, "-C"), SNM, PNR, 0);
				}

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, 0, 0).ToErrors;
			}
		}

        public bool CheckSameBooking(string ValidatingCarrier, string ROT, string SXL, XmlElement PaxInfo)
        {
            bool SameBook = false;

            try
            {
                using (SqlCommand cmd = new SqlCommand())
                {
                    using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
                    {
                        cmd.Connection = conn;
                        cmd.CommandTimeout = 10;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "DBO.WSV_S_아이템예약_해외항공_중복예약체크";

                        cmd.Parameters.Add("@품목코드", SqlDbType.Char, 2);
                        cmd.Parameters.Add("@항공", SqlDbType.Char, 2);
                        cmd.Parameters.Add("@구간", SqlDbType.Char, 2);
                        cmd.Parameters.Add("@여정", SqlDbType.Xml, -1);
                        cmd.Parameters.Add("@탑승자", SqlDbType.Xml, -1);
                        cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                        cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                        cmd.Parameters["@품목코드"].Value = "IA";
                        cmd.Parameters["@항공"].Value = ValidatingCarrier;
                        cmd.Parameters["@구간"].Value = ROT;
                        cmd.Parameters["@여정"].Value = SXL;
                        cmd.Parameters["@탑승자"].Value = PaxInfo.OuterXml;
                        cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                        cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                        try
                        {
                            conn.Open();
                            cmd.ExecuteNonQuery();

                            if (cmd.Parameters["@결과"].Value.ToString().Equals("F"))
                            {
                                SameBook = true;
                                //throw new Exception(cmd.Parameters["@에러메시지"].Value.ToString());
                            }
                        }
                        catch (Exception ex)
                        {
                            throw new Exception(ex.ToString());
                        }
                        finally
                        {
                            conn.Close();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }

            return SameBook;
        }

        public string[] AddBookingDB(int RID, int ANM, int SNM, int AEN, string RMK, string FXL, string SXL, string RXL, string DXL, string RQT, string RQU, string ROT, string OPN, string AKY, string AOID, string PIP, string PIIP, XmlElement PaxInfo, XmlElement ResXml, XmlElement ModeXml, XmlNode BookingInfo, string GUID)
        {
            string[] AddBookingResult = new String[2] { "", "" };
            
			try
			{
				XmlDocument XmlTmp = new XmlDocument();
				string Xml = string.Empty;

				Xml += "<AddBookingDBRQ>";
				Xml += String.Format("<RID>{0}</RID>", RID);
				Xml += String.Format("<ANM>{0}</ANM>", ANM);
				Xml += String.Format("<SNM>{0}</SNM>", SNM);
				Xml += String.Format("<AEN>{0}</AEN>", AEN);
				Xml += String.Format("<RMK><![CDATA[{0}]]></RMK>", RMK.Replace("[", "(").Replace("]", ")"));
                Xml += String.Format("<FXL><![CDATA[{0}]]></FXL>", FXL.Replace("<![CDATA[", "<!(CDATA(").Replace("]]>", "))>"));
				Xml += String.Format("<SXL><![CDATA[{0}]]></SXL>", SXL);
				Xml += String.Format("<RXL><![CDATA[{0}]]></RXL>", RXL.Replace("<![CDATA[", "<!(CDATA(").Replace("]]>", "))>"));
				Xml += String.Format("<DXL><![CDATA[{0}]]></DXL>", DXL.Replace("<![CDATA[", "<!(CDATA(").Replace("]]>", "))>"));
				Xml += String.Format("<RQT><![CDATA[{0}]]></RQT>", RQT);
				Xml += String.Format("<RQU><![CDATA[{0}]]></RQU>", RQU);
                Xml += String.Format("<ROT><![CDATA[{0}]]></ROT>", ROT);
                Xml += String.Format("<OPN><![CDATA[{0}]]></OPN>", OPN);
                Xml += String.Format("<AKY><![CDATA[{0}]]></AKY>", AKY);
                Xml += String.Format("<AOID><![CDATA[{0}]]></AOID>", AOID);
                Xml += String.Format("<PIP><![CDATA[{0}]]></PIP>", PIP);
                Xml += String.Format("<PIIP><![CDATA[{0}]]></PIIP>", PIIP);
				Xml += String.Format("<PaxInfo><![CDATA[{0}]]></PaxInfo>", PaxInfo.OuterXml.Replace("<![CDATA[", "<!(CDATA(").Replace("]]>", "))>"));
				Xml += String.Format("<ResXml><![CDATA[{0}]]></ResXml>", ResXml.OuterXml.Replace("<![CDATA[", "<!(CDATA(").Replace("]]>", "))>"));
				Xml += String.Format("<ModeXml><![CDATA[{0}]]></ModeXml>", ModeXml.OuterXml.Replace("<![CDATA[", "<!(CDATA(").Replace("]]>", "))>"));
                Xml += "</AddBookingDBRQ>";

				XmlTmp.LoadXml(Xml);
                cm.XmlFileSave(XmlTmp, mc.Name, "AddBookingDBDataRQ", "N", GUID);
			}
			finally { }

			try
			{
				using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
				{
					SqlCommand cmd = new SqlCommand
					{
						Connection = conn,
						CommandTimeout = 60,
						CommandType = CommandType.StoredProcedure,
						CommandText = "DBO.WSV_T_아이템예약_해외항공"
					};

					cmd.Parameters.Add("@품목코드", SqlDbType.Char, 2);
					cmd.Parameters.Add("@예약자번호", SqlDbType.Int, 0);
					cmd.Parameters.Add("@거래처번호", SqlDbType.Int, 0);
					cmd.Parameters.Add("@사이트번호", SqlDbType.Int, 0);
					cmd.Parameters.Add("@거래처직원번호", SqlDbType.Int, 0);
					cmd.Parameters.Add("@추가요청사항", SqlDbType.NVarChar, 2000);
					//cmd.Parameters.Add("@예약종류", SqlDbType.Char, 2);
					cmd.Parameters.Add("@예약", SqlDbType.Xml, -1);
					cmd.Parameters.Add("@요금", SqlDbType.Xml, -1);
					cmd.Parameters.Add("@여정", SqlDbType.Xml, -1);
					cmd.Parameters.Add("@탑승자", SqlDbType.Xml, -1);
					cmd.Parameters.Add("@요금규정", SqlDbType.Xml, -1);
					cmd.Parameters.Add("@MODEXML", SqlDbType.Xml, -1);
					cmd.Parameters.Add("@요청단말기", SqlDbType.VarChar, 20);
					cmd.Parameters.Add("@요청URL", SqlDbType.VarChar, 1000);
                    cmd.Parameters.Add("@구간", SqlDbType.Char, 2);
                    cmd.Parameters.Add("@오픈여부", SqlDbType.Char, 1);
                    cmd.Parameters.Add("@제휴정보", SqlDbType.VarChar, 100);
                    cmd.Parameters.Add("@제휴사주문번호", SqlDbType.VarChar, 100);
                    cmd.Parameters.Add("@개인정보제공여부", SqlDbType.Char, 1);
                    cmd.Parameters.Add("@고유식별정보제공여부", SqlDbType.Char, 1);
                    cmd.Parameters.Add("@할인금액", SqlDbType.Int, 0);
					cmd.Parameters.Add("@수수료", SqlDbType.Int, 0);
					cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                    cmd.Parameters.Add("@큐잉정보", SqlDbType.VarChar, 200);
                    cmd.Parameters.Add("@거래처직원정보", SqlDbType.VarChar, 300);
					cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
					cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

					cmd.Parameters["@품목코드"].Value = "IA";
					cmd.Parameters["@예약자번호"].Value = RID;
					cmd.Parameters["@거래처번호"].Value = ANM;
					cmd.Parameters["@사이트번호"].Value = SNM;
					cmd.Parameters["@거래처직원번호"].Value = AEN;
					cmd.Parameters["@추가요청사항"].Value = RMK.Replace("'", "''");
					//cmd.Parameters["@예약종류"].Value = "07";
					cmd.Parameters["@예약"].Value = (ResXml != null) ? ResXml.OuterXml : Convert.DBNull;
					cmd.Parameters["@요금"].Value = (!String.IsNullOrWhiteSpace(FXL)) ? FXL : Convert.DBNull;
					cmd.Parameters["@여정"].Value = (!String.IsNullOrWhiteSpace(SXL)) ? SXL : Convert.DBNull;
					cmd.Parameters["@탑승자"].Value = (PaxInfo != null) ? PaxInfo.OuterXml : Convert.DBNull;
					cmd.Parameters["@요금규정"].Value = (!String.IsNullOrWhiteSpace(RXL)) ? RXL : Convert.DBNull;
					cmd.Parameters["@MODEXML"].Value = (ModeXml != null) ? ModeXml.OuterXml : Convert.DBNull;
					cmd.Parameters["@요청단말기"].Value = RQT;
					cmd.Parameters["@요청URL"].Value = RQU;
                    cmd.Parameters["@구간"].Value = ROT;
                    cmd.Parameters["@오픈여부"].Value = OPN;
                    cmd.Parameters["@제휴정보"].Value = AKY;
                    cmd.Parameters["@제휴사주문번호"].Value = (!String.IsNullOrWhiteSpace(AOID)) ? AOID : Convert.DBNull;
                    cmd.Parameters["@개인정보제공여부"].Value = (!String.IsNullOrWhiteSpace(PIP)) ? PIP : Convert.DBNull;
                    cmd.Parameters["@고유식별정보제공여부"].Value = (!String.IsNullOrWhiteSpace(PIIP)) ? PIIP : Convert.DBNull;
                    cmd.Parameters["@할인금액"].Value = 0;
					cmd.Parameters["@수수료"].Value = 0;
					cmd.Parameters["@주문번호"].Direction = ParameterDirection.Output;
                    cmd.Parameters["@큐잉정보"].Direction = ParameterDirection.Output;
                    cmd.Parameters["@거래처직원정보"].Direction = ParameterDirection.Output;
					cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
					cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

					try
					{
						conn.Open();
						cmd.ExecuteNonQuery();

						if (Convert.ToInt32(cmd.Parameters["@주문번호"].Value) > 0)
						{
							//XmlDocument XmlBook = new XmlDocument();
							//XmlBook.Load(mc.XmlFullPath("AddBookingRS"));

							//XmlBook.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;
							//XmlBook.SelectSingleNode("ResponseDetails/bookingInfo/bookingNo").InnerText = cmd.Parameters["@주문번호"].Value.ToString();
							//XmlBook.SelectSingleNode("ResponseDetails/bookingInfo/reserveByNo").InnerText = RID.ToString();
							//XmlBook.SelectSingleNode("ResponseDetails/bookingInfo/bookingCreationDate").InnerText = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                            //cm.XmlFileSave(XmlBook, "AddBookingRS", "AddBookingRS", "N", GUID);

							//return XmlDoc.DocumentElement;

							BookingInfo.SelectSingleNode("modeBookingNo").InnerText = cmd.Parameters["@주문번호"].Value.ToString();
							BookingInfo.SelectSingleNode("bookingCreationDate").InnerText = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

                            AddBookingResult[0] = cmd.Parameters["@큐잉정보"].Value.ToString();
                            AddBookingResult[1] = cmd.Parameters["@거래처직원정보"].Value.ToString();

                            XmlDocument XmlResult = new XmlDocument();
                            XmlResult.LoadXml(String.Format("<AddBookingDBRS><큐잉정보><![CDATA[{0}]]></큐잉정보><거래처직원정보><![CDATA[{1}]]></거래처직원정보></AddBookingDBRS>", AddBookingResult[0], AddBookingResult[1]));
                            cm.XmlFileSave(XmlResult, mc.Name, "AddBookingDBDataRS", "N", GUID);
						}
						else
						{
							throw new Exception(cmd.Parameters["@에러메시지"].Value.ToString());
						}
					}
					catch (Exception ex)
					{
                        throw new Exception(ex.ToString());
					}
					finally
					{
						conn.Close();
					}
				}
			}
			catch (Exception ex)
			{
                throw new Exception(ex.ToString());
			}

            return AddBookingResult;
		}

		//[WebMethod(Description = "예약시 문제발생하면 예약자 정보를 알 수 없어 예약자 정보를 먼저 저장한다.")]
		protected void BookingManInfoSave(int RID, string RTL, string RHN, string RSN, string RFN, string RDB, string RGD, string RLF, string RTN, string RMN, string REA, string RQT, string RQU, int SNM, int ANM, int AEN, string GUID)
		{
			try
			{
				XmlDocument XmlTmp = new XmlDocument();
				string Xml = string.Empty;

				Xml += "<BookingManInfoSave>";
				Xml += String.Format("<RID>{0}</RID>", RID);
				Xml += String.Format("<RTL>{0}</RTL>", RTL);
				Xml += String.Format("<RHN>{0}</RHN>", RHN);
				Xml += String.Format("<RSN>{0}</RSN>", RSN);
				Xml += String.Format("<RFN>{0}</RFN>", RFN);
				Xml += String.Format("<RDB>{0}</RDB>", RDB);
				Xml += String.Format("<RGD>{0}</RGD>", RGD);
				Xml += String.Format("<RLF>{0}</RLF>", RLF);
				Xml += String.Format("<RTN>{0}</RTN>", RTN);
				Xml += String.Format("<RMN>{0}</RMN>", RMN);
				Xml += String.Format("<REA>{0}</REA>", REA);
				Xml += String.Format("<RQT>{0}</RQT>", RQT);
				Xml += String.Format("<RQU>{0}</RQU>", RQU);
				Xml += String.Format("<SNM>{0}</SNM>", SNM);
				Xml += String.Format("<ANM>{0}</ANM>", ANM);
				Xml += String.Format("<AEN>{0}</AEN>", AEN);
				Xml += "</BookingManInfoSave>";

				XmlTmp.LoadXml(Xml);
                cm.XmlFileSave(XmlTmp, mc.Name, "BookingManInfoSave", "N", GUID);
			}
            finally { }
		}

		//[WebMethod(Description = "탑승자 정보 저장")]
        protected XmlElement PaxInfoSave(int[] PID, string[] PTC, string[] PTL, string[] PHN, string[] PSN, string[] PFN, string[] PBD, string[] PTN, string[] PMN, string[] PEA, string[] PMC, string[] PMT, string[] PMR, string RTN, string RMN, string REA, string GUID)
		{
            try
            {
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.Load(mc.XmlFullPath("PassengerRQ"));

                XmlNode Paxs = XmlDoc.SelectSingleNode("paxs");
                XmlNode Pax = Paxs.SelectSingleNode("pax");
                XmlNode NewPax;
                bool PaxError = false;

                for (int i = 0; i < PID.Length; i++)
                {
                    NewPax = Paxs.AppendChild(Pax.Clone());
                    NewPax.SelectSingleNode("no").InnerText = (i + 1).ToString();
                    NewPax.SelectSingleNode("ptid").InnerText = PID[i].ToString();
                    NewPax.SelectSingleNode("korName").InnerText = PHN[i].Replace(" ", "");
                    NewPax.SelectSingleNode("engName").InnerText = String.Concat(PSN[i].Replace(" ", ""), "/", PFN[i].Replace(" ", "")).ToUpper();
                    NewPax.SelectSingleNode("type").InnerText = PTC[i].Trim();
                    NewPax.SelectSingleNode("title").InnerText = PTL[i].Trim();
                    NewPax.SelectSingleNode("birthday").InnerText = PBD[i].Trim();
                    NewPax.SelectSingleNode("tel").InnerText = (i.Equals(0) && String.IsNullOrWhiteSpace(PTN[i])) ? RTN : PTN[i].Trim();
                    NewPax.SelectSingleNode("hp").InnerText = (i.Equals(0) && String.IsNullOrWhiteSpace(PMN[i])) ? RMN : PMN[i].Trim();
                    NewPax.SelectSingleNode("email").InnerText = (i.Equals(0) && String.IsNullOrWhiteSpace(PEA[i])) ? REA : PEA[i].Trim();
                    NewPax.SelectSingleNode("memberClass").InnerText = PMC[i].Trim();
                    NewPax.SelectSingleNode("mileageNumber").InnerText = PMT[i].Trim().ToUpper();
                    NewPax.SelectSingleNode("mileageRequest").InnerText = PMR[i].Trim().ToUpper();

                    if (String.IsNullOrWhiteSpace(PSN[i]) || String.IsNullOrWhiteSpace(PFN[i]) || String.IsNullOrWhiteSpace(PTC[i]) || String.IsNullOrWhiteSpace(PTL[i]))
                        PaxError = true;
                }

                Paxs.RemoveChild(Pax);

                cm.XmlFileSave(XmlDoc, mc.Name, "PaxInfo", "N", GUID);

                //탑승객 정보 누락
                if (PaxError)
                    throw new Exception("탑승객 정보 중 일부가 누락되었습니다.");

                return XmlDoc.DocumentElement;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }
		}

		//[WebMethod(Description = "예약자 정보 저장")]
		protected int BookingMan(string RHN, string RDB, string RGD, string RLF, string RTN, string RMN, string REA)
		{
			int PTID = 0;
			string JuminChk = string.Empty;

			if (RLF.Equals("F"))
			{
				switch (RDB.Substring(0, 2))
				{
					case "19":
						JuminChk = (RGD.Equals("F")) ? "6" : "5";
						break;
					case "20":
						JuminChk = (RGD.Equals("F")) ? "8" : "7";
						break;
				}
			}
			else
			{
				switch (RDB.Substring(0, 2))
				{
					case "19":
						JuminChk = (RGD.Equals("F")) ? "2" : "1";
						break;
					case "20":
						JuminChk = (RGD.Equals("F")) ? "4" : "3";
						break;
				}
			}

			string conStr = ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString;
			SqlConnection conn = new SqlConnection(conStr);
			SqlCommand cmd = new SqlCommand();

			cmd.Connection = conn;
			cmd.CommandTimeout = 10;
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "DBO.WSV_T_예약자등록";

			cmd.Parameters.Add("@예약자명", SqlDbType.VarChar, 50);
			cmd.Parameters.Add("@주민번호", SqlDbType.VarChar, 13);
			cmd.Parameters.Add("@전화번호", SqlDbType.VarChar, 20);
			cmd.Parameters.Add("@휴대폰", SqlDbType.VarChar, 20);
			cmd.Parameters.Add("@이메일", SqlDbType.VarChar, 50);
			cmd.Parameters.Add("@PTID", SqlDbType.Int, 0);

			cmd.Parameters["@예약자명"].Value = RHN;
			cmd.Parameters["@주민번호"].Value = String.Concat(cm.RequestDateTime(RDB, "yyMMdd"), JuminChk);
			cmd.Parameters["@전화번호"].Value = RTN;
			cmd.Parameters["@휴대폰"].Value = RMN;
			cmd.Parameters["@이메일"].Value = REA;
			cmd.Parameters["@PTID"].Direction = ParameterDirection.Output;

			try
			{
				conn.Open();
				cmd.ExecuteNonQuery();

				PTID = Convert.ToInt32(cmd.Parameters["@PTID"].Value);
			}
			finally { conn.Close(); }

			return PTID;
		}

        //[WebMethod(Description = "주문자 정보 저장")]
        protected void BookingMan2(int OID, string RHN, string RSN, string RFN, string RDB, string RTN, string RMN, string REA, string GUID)
        {
            try
            {
                string conStr = ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString;
                SqlConnection conn = new SqlConnection(conStr);
                SqlCommand cmd = new SqlCommand();

                cmd.Connection = conn;
                cmd.CommandTimeout = 10;
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "DBO.WSV_T_주문_예약자";

                cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                cmd.Parameters.Add("@예약자명", SqlDbType.NVarChar, 300);
                cmd.Parameters.Add("@영문성", SqlDbType.VarChar, 30);
                cmd.Parameters.Add("@영문이름", SqlDbType.VarChar, 30);
                cmd.Parameters.Add("@생년월일", SqlDbType.Date, 0);
                cmd.Parameters.Add("@휴대폰", SqlDbType.VarChar, 15);
                cmd.Parameters.Add("@전화번호", SqlDbType.VarChar, 30);
                cmd.Parameters.Add("@이메일", SqlDbType.NVarChar, 50);
                cmd.Parameters.Add("@주소1", SqlDbType.NVarChar, 200);
                cmd.Parameters.Add("@주소2", SqlDbType.NVarChar, 200);
                cmd.Parameters.Add("@우편번호", SqlDbType.VarChar, 20);
                cmd.Parameters.Add("@제휴사회원ID", SqlDbType.VarChar, 30);
                cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                cmd.Parameters["@주문번호"].Value = OID;
                cmd.Parameters["@예약자명"].Value = String.IsNullOrWhiteSpace(RHN) ? Convert.DBNull : RHN;
                cmd.Parameters["@영문성"].Value = String.IsNullOrWhiteSpace(RSN) ? Convert.DBNull : RSN;
                cmd.Parameters["@영문이름"].Value = String.IsNullOrWhiteSpace(RFN) ? Convert.DBNull : RFN;
                cmd.Parameters["@생년월일"].Value = String.IsNullOrWhiteSpace(RDB) ? Convert.DBNull : cm.RequestDateTime(RDB, "yyyy-MM-dd");
                cmd.Parameters["@휴대폰"].Value = String.IsNullOrWhiteSpace(RMN) ? Convert.DBNull : RMN;
                cmd.Parameters["@전화번호"].Value = String.IsNullOrWhiteSpace(RTN) ? Convert.DBNull : RTN;
                cmd.Parameters["@이메일"].Value = String.IsNullOrWhiteSpace(REA) ? Convert.DBNull : REA;
                cmd.Parameters["@주소1"].Value = Convert.DBNull;
                cmd.Parameters["@주소2"].Value = Convert.DBNull;
                cmd.Parameters["@우편번호"].Value = Convert.DBNull;
                cmd.Parameters["@제휴사회원ID"].Value = Convert.DBNull;
                cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    new MWSExceptionMode(ex, hcc, GUID, "AirService", MethodBase.GetCurrentMethod().Name, 2, OID, 0);
                }
                finally { conn.Close(); }
            }
            catch (Exception) { }
        }

		#endregion "예약"

		#region "예약조회"

		/// <summary>
		/// 예약상세조회(DB)
		/// </summary>
		/// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RIP">요청자IP</param>
		/// <returns></returns>
		//[WebMethod(Description = "예약상세조회(DB)")]
		public XmlElement SearchBookingDB(int OID, int PID, string RIP)
		{
			XmlDocument XmlDoc = new XmlDocument();

			using (SqlCommand cmd = new SqlCommand())
			{
				using (SqlDataAdapter adp = new SqlDataAdapter(cmd))
				{
					using (DataSet ds = new DataSet("bookingInfo"))
					{
						cmd.Connection = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString);
						cmd.CommandTimeout = 60;
						cmd.CommandType = CommandType.StoredProcedure;
						cmd.CommandText = "DBO.WSV_S_아이템예약_해외항공_예약조회_상세";

						cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
						cmd.Parameters.Add("@예약자번호", SqlDbType.Int, 0);
                        cmd.Parameters.Add("@요청자IP", SqlDbType.VarChar, 30);

						cmd.Parameters["@주문번호"].Value = OID;
						cmd.Parameters["@예약자번호"].Value = PID;
                        cmd.Parameters["@요청자IP"].Value = String.IsNullOrWhiteSpace(RIP) ? Convert.DBNull : RIP;

						adp.Fill(ds, "item");

						XmlDoc.LoadXml(ds.GetXml());
						ds.Clear();
					}
				}
			}

			return XmlDoc.DocumentElement;
		}

		/// <summary>
		/// 예약조회
		/// </summary>
		/// <param name="OID">모두투어 주문번호</param>
		/// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RIP">요청자IP</param>
		/// <returns></returns>
		[WebMethod(Description = "예약조회")]
        public XmlElement SearchBookingRS(int OID, int PID, string RIP)
		{
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 22;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
			{
				//DB에 저장된 예약정보
				XmlElement XmlDBBooking = SearchBookingDB(OID, PID, RIP);

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                    return SearchBooking(cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), OID, PID, LogGUID, XmlDBBooking);
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
			}
			catch (Exception ex)
			{
				ex.Data.Clear();
				ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("RIP", RIP);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 22, OID, 0).ToErrors;
			}
		}

        /// <summary>
        /// 예약조회
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">모두투어 주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RIP">요청자IP</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "예약조회")]
        public XmlElement SearchBooking2RS(int SNM, int OID, int PID, string RIP, string RQT)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 689;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                return SearchBooking(SNM, OID, PID, LogGUID, SearchBookingDB(OID, PID, RIP));
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("SNM", SNM);
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("RIP", RIP);
                ex.Data.Add("RQT", RQT);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 689, OID, 0).ToErrors;
            }
        }

        /// <summary>
        /// 예약조회
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">모두투어 주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="GUID">고유번호</param>
        /// <param name="XmlDBBooking">DB에 저장된 예약정보</param>
        /// <returns></returns>
        public XmlElement SearchBooking(int SNM, int OID, int PID, string GUID, XmlElement XmlDBBooking)
        {
            try
            {
                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
                    string GDSType = XmlDBBooking.SelectSingleNode("item3/GDS구분").InnerText;
                    int BookSiteNum = cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2);
                    bool BookCancel = XmlDBBooking.SelectSingleNode("item/취소").InnerText.Equals("Y") ? true : false;
                    string DBLogData = "N";

                    //### 04.통합모드 생성 #####
                    XmlElement ModeXml = null;

                    //취소된 예약인 경우 DB에 저장된 정보로 출력
                    if (BookCancel)
                    {
                        ModeXml = ModeSearchBookingCancelPNR(BookSiteNum, GDS, XmlDBBooking.SelectSingleNode("item3/여정구분").InnerText, XmlDBBooking.SelectSingleNode("item3/예약XML").InnerText, GUID);
                        DBLogData = "Y";
                    }
                    //이베이(G마켓,옥션,G9)는 여행기간이 지난 경우 DB에 저장된 정보로 출력(2018-10-18)
                    //11번가는 여행기간이 지난 경우 DB에 저장된 정보로 출력(2019-01-11)
                    //모두닷컴(2,3915)은 여행기간이 지난 경우 DB에 저장된 정보로 출력(2019-09-23)
                    else if ((SNM.Equals(2) || SNM.Equals(3915) || SNM.Equals(5020) || SNM.Equals(5119) || SNM.Equals(5161) || SNM.Equals(5163) || SNM.Equals(5162) || SNM.Equals(5164) || SNM.Equals(4924) || SNM.Equals(4929)) && cm.DateDiff("d", DateTime.Now.ToString("yyyy-MM-dd"), XmlDBBooking.SelectSingleNode("item3/서비스E").InnerText) < 0)
                    {
                        ModeXml = ModeSearchBookingPastPNR(BookSiteNum, GDS, XmlDBBooking.SelectSingleNode("item3/여정구분").InnerText, XmlDBBooking.SelectSingleNode("item3/예약XML").InnerText, GUID);
                        DBLogData = "Y";
                    }
                    else
                    {
                        ModeXml = ModeSearchBookingPNR(BookSiteNum, GDS, XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText, XmlDBBooking.SelectSingleNode("item3/여정구분").InnerText, GUID);

                        //이베이 예약 중 Abacus(Sabre) 예약일 경우
                        //if ((SNM.Equals(5020) || SNM.Equals(5119) || SNM.Equals(5161) || SNM.Equals(5163) || SNM.Equals(5162) || SNM.Equals(5164)) && String.Compare(GDS, "Abacus", true).Equals(0))
                        //{
                        //    //QA를 위한 임시(옥션,G9는 예약시 정보로 스케쥴 출력)
                        //    if (ModeXml.SelectSingleNode("flightInfo").HasChildNodes && (SNM.Equals(5161) || SNM.Equals(5163) || SNM.Equals(5162) || SNM.Equals(5164)))
                        //    {
                        //        XmlDocument XmlSabre = new XmlDocument();
                        //        XmlSabre.LoadXml(XmlDBBooking.SelectSingleNode("item3/예약XML").InnerText);

                        //        XmlElement SabreBook = null;

                        //        if (XmlSabre.SelectNodes("prs_output").Count > 0)
                        //        {
                        //            SabreBook = ToModeSearchBookingSabre(XmlSabre.DocumentElement);
                        //        }
                        //        else
                        //        {
                        //            XmlNamespaceManager xnMgr = new XmlNamespaceManager(XmlSabre.NameTable);
                        //            xnMgr.AddNamespace("stl", AbacusConfig.NamespaceURL("TravelItineraryRead_stl"));
                        //            xnMgr.AddNamespace("tir310", AbacusConfig.NamespaceURL("TravelItineraryRead_tir310"));

                        //            SabreBook = ToModeSearchBookingAbacus(XmlSabre.DocumentElement, xnMgr);
                        //        }

                        //        ModeXml.ReplaceChild(ModeXml.OwnerDocument.ImportNode(SabreBook.SelectSingleNode("flightInfo"), true), ModeXml.SelectSingleNode("flightInfo"));
                        //    }
                        //    else
                        //    {
                        //        //이베이(G마켓[5020,5119],옥션[5161,5163],G9[5162,5164])는 여정 그루핑
                        //        if (ModeXml.SelectSingleNode("flightInfo").HasChildNodes)
                        //            ModeXml = SearchBookingSegGrouping(ModeXml, XmlDBBooking.SelectSingleNode("item3/상품XML").InnerText);
                        //    }
                        //}
                    }

                    XmlNode BookingInfo = ModeXml.SelectSingleNode("bookingInfo");
                    XmlNode FlightInfo = ModeXml.SelectSingleNode("flightInfo");
                    XmlNode TravellerInfo = ModeXml.SelectSingleNode("travellerInfo");
                    XmlNode SupplementaryService = ModeXml.SelectSingleNode("supplementaryService");
                    XmlNode FareInfo = ModeXml.SelectSingleNode("fareInfo");
                    XmlNode Attn = ModeXml.SelectSingleNode("attn");
                    XmlNode Agent = ModeXml.SelectSingleNode("agent");
                    XmlNode PaymentInfo = ModeXml.SelectSingleNode("paymentInfo");
                    XmlNode PaymentReqInfo = ModeXml.SelectSingleNode("paymentReqInfo");

                    //상태
                    string Status = (BookCancel) ? "XX" : BookingStatus(ModeXml.SelectSingleNode("flightInfo"));

                    //상태변경(DB)
                    BookingStatusDB(OID, Status);

                    XmlDocument FareXml = new XmlDocument();
                    FareXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                    BookingInfo.SelectSingleNode("gds").InnerText = GDS;
                    BookingInfo.SelectSingleNode("bookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;
                    BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = XmlDBBooking.SelectSingleNode("item3/GDS주문번호").InnerText;
                    BookingInfo.SelectSingleNode("modeBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item/예약번호").InnerText;
                    BookingInfo.SelectSingleNode("agentBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/주문아이템코드").InnerText;
                    BookingInfo.SelectSingleNode("allianceBookingNo").Attributes.GetNamedItem("pip").InnerText = XmlDBBooking.SelectSingleNode("item3/개인정보제공여부").InnerText;
                    BookingInfo.SelectSingleNode("allianceBookingNo").Attributes.GetNamedItem("piip").InnerText = XmlDBBooking.SelectSingleNode("item3/고유식별정보제공여부").InnerText;
                    BookingInfo.SelectSingleNode("allianceBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/제휴사주문번호").InnerText;
                    BookingInfo.SelectSingleNode("bookingCreationDate").InnerText = XmlDBBooking.SelectSingleNode("item/예약일").InnerText;
                    BookingInfo.SelectSingleNode("bookingCancelDate").InnerText = XmlDBBooking.SelectSingleNode("item/취소일").InnerText;
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("code").InnerText = Status;
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("passport").InnerText = (XmlDBBooking.SelectNodes("item4[취소여부='N']").Count > 0 && XmlDBBooking.SelectNodes("item4[여권번호='' and 취소여부='N']").Count.Equals(0)) ? "Y" : "N";
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("apis").InnerText = XmlDBBooking.SelectSingleNode("item3/아피스입력여부").InnerText;
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("issue").InnerText = XmlDBBooking.SelectSingleNode("item3/발권완료여부").InnerText;
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("esta").InnerText = (XmlDBBooking.SelectNodes("item14/ESTA").Count > 0) ? XmlDBBooking.SelectSingleNode("item14/ESTA").InnerText : "N";
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("eta").InnerText = (XmlDBBooking.SelectNodes("item14/ETA").Count > 0) ? XmlDBBooking.SelectSingleNode("item14/ETA").InnerText : "N";
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("usa").InnerText = (XmlDBBooking.SelectNodes("item14/USA").Count > 0) ? XmlDBBooking.SelectSingleNode("item14/USA").InnerText : "N";
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("refund").InnerText = (XmlDBBooking.SelectNodes("item16/환불상태").Count > 0) ? (XmlDBBooking.SelectSingleNode("item16/환불상태").InnerText.Equals("전체환불") ? "W" : (XmlDBBooking.SelectSingleNode("item16/환불상태").InnerText.Equals("부분환불") ? "P" : "")) : "";
                    BookingInfo.SelectSingleNode("bookingStatus").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(Common.BookingStatusText(Status)));
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("db").InnerText = DBLogData;
                    BookingInfo.SelectSingleNode("bookingAirline").Attributes.GetNamedItem("code").InnerText = XmlDBBooking.SelectSingleNode("item3/마케팅항공사").InnerText;
                    BookingInfo.SelectSingleNode("bookingAirline").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(XmlDBBooking.SelectSingleNode("item3/마케팅항공사명").InnerText));
                    BookingInfo.SelectSingleNode("bookingRtg").Attributes.GetNamedItem("type").InnerText = XmlDBBooking.SelectSingleNode("item3/여정구분").InnerText;
                    BookingInfo.SelectSingleNode("bookingRuleId").Attributes.GetNamedItem("proof").InnerText = XmlDBBooking.SelectSingleNode("item3/증빙필요여부").InnerText;
                    //BookingInfo.SelectSingleNode("bookingRuleId").InnerText = XmlDBBooking.SelectSingleNode("item3/룰번호").InnerText;
                    BookingInfo.SelectSingleNode("bookingTL").Attributes.GetNamedItem("ttl").InnerText = XmlDBBooking.SelectSingleNode("item3/항공사TL").InnerText;
                    BookingInfo.SelectSingleNode("bookingTL").InnerText = cm.RequestDateTime(XmlDBBooking.SelectSingleNode("item3/TL").InnerText, "yyyy-MM-dd HH:mm");
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("price").InnerText = XmlDBBooking.SelectSingleNode("item/총판매가").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("subPrice").InnerText = XmlDBBooking.SelectSingleNode("item/총판매가2").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("fare").InnerText = XmlDBBooking.SelectSingleNode("item/총항공료").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("tax").InnerText = XmlDBBooking.SelectSingleNode("item/총텍스").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("fsc").InnerText = XmlDBBooking.SelectSingleNode("item/총유류할증료").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("disPartner").InnerText = XmlDBBooking.SelectSingleNode("item/총제휴할인금액").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("supplementaryService").InnerText = "0";
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("tasf").InnerText = XmlDBBooking.SelectSingleNode("item/총발권수수료").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("tau").InnerText = XmlDBBooking.SelectSingleNode("item3/TaxAutoUpdate").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("taud").InnerText = XmlDBBooking.SelectSingleNode("item3/TaxAutoUpdateDate").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("pcs").InnerText = XmlDBBooking.SelectSingleNode("item/유료상담서비스").InnerText;

                    if (FareXml.SelectNodes("priceIndex").Count > 0 && FareXml.SelectNodes("priceIndex/paxFareGroup/paxFare/segFareGroup").Count > 0)
                    {
                        BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText = Common.ServiceClass(FareXml.SelectSingleNode("priceIndex/paxFareGroup/paxFare/segFareGroup/segFare/fare/cabin").Attributes.GetNamedItem("cabin").InnerText);
                        BookingInfo.SelectSingleNode("bookingClass").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(Common.ServiceClassText(GDSType, BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText = FareXml.SelectSingleNode("priceIndex").Attributes.GetNamedItem("ptc").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("card").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드사").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("sign").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드표기").InnerText;
                        BookingInfo.SelectSingleNode("paxType").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(Common.PaxTypeText(BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText = FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("mas").InnerText;
                        if (!String.IsNullOrWhiteSpace(BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText))
                            BookingInfo.SelectSingleNode("expiryDate").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(cm.ExpiryDateText(BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ucf").InnerText = FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("ucf").InnerText;
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ntf").InnerText = FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("ntf").InnerText;
                    }
                    else if (FareXml.SelectNodes("Table").Count > 0)
                    {
                        BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText = Common.ServiceClass(FareXml.SelectSingleNode("Table/SVC_CLASS").InnerText);
                        BookingInfo.SelectSingleNode("bookingClass").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(Common.ServiceClassText(GDSType, BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText = FareXml.SelectSingleNode("Table/PAX_TYPE").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("card").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드사").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("sign").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드표기").InnerText;
                        BookingInfo.SelectSingleNode("paxType").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(Common.PaxTypeText(BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText = FareXml.SelectSingleNode("Table/MAX_STAY").InnerText;
                        if (!String.IsNullOrWhiteSpace(BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText))
                            BookingInfo.SelectSingleNode("expiryDate").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(cm.ExpiryDateText(BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ucf").InnerText = "N";
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ntf").InnerText = "Y";
                    }

                    //성인,소아 중 한 명이라도 텍스가 0이하라면 미확정 요금 처리(2018-10-16,김경미매니저)
                    if (XmlDBBooking.SelectNodes("item4[구분!='INF' and TAX <= 0]").Count > 0)
                    {
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ucf").InnerText = "Y";
                    }

                    //캐나다 ETA 비자 신청 여부 추가 체크(경유지가 캐나다인 경우 ETA 비자 신청 가능)
                    //경유지 체크시 PC/모바일 페이지에서 문제가 있어 도착지만 체크하는 것으로 변경(2018-01-08,조수지)
                    //if (XmlDBBooking.SelectNodes("item14/ETA").Count > 0 && XmlDBBooking.SelectSingleNode("item14/ETA").InnerText.Equals("N") && Convert.ToInt32(XmlDBBooking.SelectSingleNode("item14/STERM").InnerText) >= 30)
                    //{
                    //    foreach (XmlNode SEG in ModeXml.SelectNodes("flightInfo/segGroup/seg"))
                    //    {
                    //        if (Common.CanadaOfAirport(SEG.Attributes.GetNamedItem("alc").InnerText))
                    //        {
                    //            BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("eta").InnerText = "Y";
                    //            break;
                    //        }
                    //    }
                    //}

                    string AirportList = string.Empty; //공항(도시) 한글명 조회용
                    string AirlineList = string.Empty; //항공사 한글명 조회용

                    //상세스케쥴 정보(비행시간, 대기시간+기착지대기시간)
                    foreach (XmlNode SegGroup in FlightInfo.SelectNodes("segGroup"))
                    {
                        int TotalEFT = 0;
                        int TotalEWT = 0;
                        int SegmentRef = 1;
                        string PrevARDT = string.Empty;

                        foreach (XmlNode Seg in SegGroup.SelectNodes("seg"))
                        {
                            if (Seg.SelectNodes("seg").Count > 0)
                            {
                                if (!String.IsNullOrWhiteSpace(Seg.SelectSingleNode("seg[2]").Attributes.GetNamedItem("gwt").InnerText))
                                {
                                    //TotalEWT += cm.ChangeMinutes(Seg.SelectSingleNode("seg[2]").Attributes.GetNamedItem("gwt").InnerText);
                                    Seg.Attributes.GetNamedItem("gwt").InnerText = Seg.SelectSingleNode("seg[2]").Attributes.GetNamedItem("gwt").InnerText;
                                }
                                else
                                {
                                    //TotalEWT += cm.ChangeMinutes(Seg.SelectSingleNode("seg[1]").Attributes.GetNamedItem("gwt").InnerText);
                                    Seg.Attributes.GetNamedItem("gwt").InnerText = Seg.SelectSingleNode("seg[1]").Attributes.GetNamedItem("gwt").InnerText;
                                }

                                AirportList += String.Concat(Seg.SelectSingleNode("seg[1]").Attributes.GetNamedItem("alc").InnerText, ",");
                            }

                            //경유지 대기시간
                            if (SegmentRef > 1)
                                Seg.Attributes.GetNamedItem("ett").InnerText = cm.CalWaitingTime(PrevARDT, Seg.Attributes.GetNamedItem("ddt").InnerText);

                            TotalEFT += cm.ChangeMinutes(Seg.Attributes.GetNamedItem("eft").InnerText);
                            TotalEWT += cm.ChangeMinutes(Seg.Attributes.GetNamedItem("ewt").InnerText);
                            AirportList += String.Concat(Seg.Attributes.GetNamedItem("dlc").InnerText, ",");
                            AirportList += String.Concat(Seg.Attributes.GetNamedItem("alc").InnerText, ",");
                            AirlineList += String.Concat(Seg.Attributes.GetNamedItem("mcc").InnerText, ",");
                            AirlineList += String.Concat(Seg.Attributes.GetNamedItem("occ").InnerText, ",");

                            PrevARDT = Seg.Attributes.GetNamedItem("ardt").InnerText;
                            SegmentRef++;
                        }

                        SegGroup.Attributes.GetNamedItem("jrt").InnerText = cm.ChangeTime(TotalEFT + TotalEWT);
                        SegGroup.Attributes.GetNamedItem("eft").InnerText = cm.ChangeTime(TotalEFT);
                        SegGroup.Attributes.GetNamedItem("ewt").InnerText = TotalEWT.Equals(0) ? SegGroup.Attributes.GetNamedItem("ewt").InnerText : cm.ChangeTime(TotalEWT);
                    }

                    //공항(도시) 한글명
                    DataView dvAirport = Common.GetCityAirportName("A", AirportList).Tables[0].DefaultView;
                    DataView dvAirline = Common.GetAirlineName(AirlineList).Tables[0].DefaultView;

                    foreach (XmlNode Seg in FlightInfo.SelectNodes("segGroup/seg"))
                    {
                        dvAirport.RowFilter = String.Format("코드='{0}'", Seg.Attributes.GetNamedItem("dlc").InnerText);
                        Seg.Attributes.GetNamedItem("dlcn").InnerText = dvAirport[0]["한글명"].ToString();
                        Seg.Attributes.GetNamedItem("duc").InnerText = dvAirport[0]["국가코드"].ToString();

                        dvAirport.RowFilter = String.Format("코드='{0}'", Seg.Attributes.GetNamedItem("alc").InnerText);
                        Seg.Attributes.GetNamedItem("alcn").InnerText = dvAirport[0]["한글명"].ToString();
                        Seg.Attributes.GetNamedItem("auc").InnerText = dvAirport[0]["국가코드"].ToString();

                        dvAirline.RowFilter = String.Format("항공사='{0}'", Seg.Attributes.GetNamedItem("mcc").InnerText);
                        Seg.Attributes.GetNamedItem("mccn").InnerText = dvAirline[0]["한글명"].ToString();

                        dvAirline.RowFilter = String.Format("항공사='{0}'", Seg.Attributes.GetNamedItem("occ").InnerText);
                        Seg.Attributes.GetNamedItem("occn").InnerText = dvAirline[0]["한글명"].ToString();

                        foreach (XmlNode Seg2 in Seg.SelectNodes("seg"))
                        {
                            dvAirport.RowFilter = String.Format("코드='{0}'", Seg2.Attributes.GetNamedItem("dlc").InnerText);
                            Seg2.Attributes.GetNamedItem("dlcn").InnerText = dvAirport[0]["한글명"].ToString();
                            //Seg2.Attributes.GetNamedItem("duc").InnerText = dvAirport[0]["국가코드"].ToString();

                            dvAirport.RowFilter = String.Format("코드='{0}'", Seg2.Attributes.GetNamedItem("alc").InnerText);
                            Seg2.Attributes.GetNamedItem("alcn").InnerText = dvAirport[0]["한글명"].ToString();
                            //Seg2.Attributes.GetNamedItem("auc").InnerText = dvAirport[0]["국가코드"].ToString();
                        }
                    }

                    //무료수하물 정보(운임규정에 저장되어 있는 무료수하물 정보로 출력)
                    XmlDocument RuleXml = new XmlDocument();
                    RuleXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/규정XML").InnerText);

                    if (RuleXml.SelectNodes("ResponseDetails/baggageInfo").Count > 0)
                    {
                        //갈릴레오처럼 PNR운임 자체가 없는 경우
                        if (!FareInfo.HasChildNodes)
                        {
                            XmlDocument XmlDoc = new XmlDocument();
                            XmlDoc.Load(mc.XmlFullPath("SearchBookingRS"));

                            XmlNode TmpFare = XmlDoc.SelectSingleNode("ResponseDetails/fareInfo/fare");
                            XmlNode TmpFareSeg;
                            XmlNode NewFare;
                            XmlNode NewFareSeg;
                            int SegRef = 1;

                            foreach (XmlNode TmpPtc in RuleXml.SelectNodes("ResponseDetails/baggageInfo/flightInfo/segGroup[1]/seg[1]/baggage"))
                            {
                                NewFare = FareInfo.AppendChild(ModeXml.OwnerDocument.ImportNode(TmpFare.CloneNode(true), true));
                                NewFare.Attributes.GetNamedItem("ptc").InnerText = TmpPtc.Attributes.GetNamedItem("ptc").InnerText;

                                TmpFareSeg = NewFare.SelectSingleNode("seg");
                                SegRef = 1;

                                //foreach (XmlNode TmpBaggage in RuleXml.SelectNodes(String.Format("ResponseDetails/baggageInfo/flightInfo/segGroup/seg/baggage[@ptc='{0}']", TmpPtc.Attributes.GetNamedItem("ptc").InnerText)))
                                //{
                                //    NewFareSeg = NewFare.AppendChild(TmpFareSeg.CloneNode(false));
                                //    NewFareSeg.Attributes.GetNamedItem("ref").InnerText = (SegRef++).ToString();
                                //    NewFareSeg.Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty(TmpBaggage.InnerText);
                                //}

                                foreach (XmlNode TmpSeg in RuleXml.SelectNodes("ResponseDetails/baggageInfo/flightInfo/segGroup/seg"))
                                {
                                    NewFareSeg = NewFare.AppendChild(TmpFareSeg.CloneNode(false));
                                    NewFareSeg.Attributes.GetNamedItem("ref").InnerText = (SegRef++).ToString();

                                    if (TmpSeg.SelectNodes(String.Format("baggage[@ptc='{0}']", TmpPtc.Attributes.GetNamedItem("ptc").InnerText)).Count > 0)
                                        NewFareSeg.Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty(TmpSeg.SelectSingleNode(String.Format("baggage[@ptc='{0}']", TmpPtc.Attributes.GetNamedItem("ptc").InnerText)).InnerText);
                                    else
                                        NewFareSeg.Attributes.GetNamedItem("baggage").InnerText = "";
                                }
                            }
                        }
                        //애바카스처럼 PNR운임만 존재하고 무료수하물 정보가 없는 경우
                        else if (!FareInfo.SelectSingleNode("fare").HasChildNodes)
                        {
                            XmlNode NewSeg;
                            XmlAttribute NewSegRef;
                            XmlAttribute NewSegBaggage;
                            int SegRef = 1;

                            foreach (XmlNode TmpFare in FareInfo.SelectNodes("fare"))
                            {
                                SegRef = 1;
                                //foreach (XmlNode TmpBaggage in RuleXml.SelectNodes(String.Format("ResponseDetails/baggageInfo/flightInfo/segGroup/seg/baggage[@ptc='{0}']", TmpFare.Attributes.GetNamedItem("ptc").InnerText)))
                                //{
                                //    NewSeg = TmpFare.AppendChild(ModeXml.OwnerDocument.CreateElement("seg"));
                                //    NewSegRef = ModeXml.OwnerDocument.CreateAttribute("ref");
                                //    NewSegBaggage = ModeXml.OwnerDocument.CreateAttribute("baggage");

                                //    NewSegRef.InnerText = (SegRef++).ToString();
                                //    NewSegBaggage.InnerText = Common.BaggageEmpty(TmpBaggage.InnerText);

                                //    NewSeg.Attributes.Append(NewSegRef);
                                //    NewSeg.Attributes.Append(NewSegBaggage);
                                //}

                                foreach (XmlNode TmpSeg in RuleXml.SelectNodes("ResponseDetails/baggageInfo/flightInfo/segGroup/seg"))
                                {
                                    NewSeg = TmpFare.AppendChild(ModeXml.OwnerDocument.CreateElement("seg"));
                                    NewSegRef = ModeXml.OwnerDocument.CreateAttribute("ref");
                                    NewSegBaggage = ModeXml.OwnerDocument.CreateAttribute("baggage");

                                    NewSegRef.InnerText = (SegRef++).ToString();

                                    if (TmpSeg.SelectNodes(String.Format("baggage[@ptc='{0}']", TmpFare.Attributes.GetNamedItem("ptc").InnerText)).Count > 0)
                                        NewSegBaggage.InnerText = Common.BaggageEmpty(TmpSeg.SelectSingleNode(String.Format("baggage[@ptc='{0}']", TmpFare.Attributes.GetNamedItem("ptc").InnerText)).InnerText);
                                    else
                                        NewSegBaggage.InnerText = "";

                                    NewSeg.Attributes.Append(NewSegRef);
                                    NewSeg.Attributes.Append(NewSegBaggage);
                                }
                            }
                        }
                    }

                    //프로모션 정보
                    if (!String.IsNullOrEmpty(XmlDBBooking.SelectSingleNode("item3/요금조건").InnerText))
                    {
                        //BookingInfo.SelectSingleNode("paxType").RemoveChild(BookingInfo.SelectSingleNode("paxType").FirstChild);
                        BookingInfo.SelectSingleNode("paxType").InnerText = "";
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText = XmlDBBooking.SelectSingleNode("item3/요금조건").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("card").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드사").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("sign").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드표기").InnerText;
                        BookingInfo.SelectSingleNode("paxType").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(Common.PaxTypeText(XmlDBBooking.SelectSingleNode("item3/요금조건명").InnerText)));
                    }

                    //탑승객 정보 재정의(DB Data로 출력)
                    XmlNode PaxData = TravellerInfo.SelectSingleNode("paxData");
                    XmlNode SelNode;
                    XmlNode NewPaxData;
                    int index = 1;

                    //모두닷컴(2,3915)은 취소자도 출력(2019-09-09)
                    foreach (XmlNode PaxInfo in XmlDBBooking.SelectNodes(("/2/3915/".IndexOf(SNM.ToString()) != -1) ? "item4" : String.Format("item4[취소여부='{0}']", BookCancel ? "Y" : "N")))
                    {
                        //환불된 탑승객은 취소로 리턴
                        string RefundPax = "N";
                        
                        if (TravellerInfo.SelectNodes(String.Format("paxData[pax/@psn='{0}' and pax/@pfn='{1}']", Common.ChangeSurname(PaxInfo.SelectSingleNode("영문성").InnerText), PaxInfo.SelectSingleNode("영문이름").InnerText)).Count > 0)
                            NewPaxData = TravellerInfo.SelectSingleNode(String.Format("paxData[pax/@psn='{0}' and pax/@pfn='{1}']", Common.ChangeSurname(PaxInfo.SelectSingleNode("영문성").InnerText), PaxInfo.SelectSingleNode("영문이름").InnerText));
                        else
                        {
                            NewPaxData = TravellerInfo.AppendChild(PaxData.CloneNode(true));

                            //DB에서 불러오지 않는 데이타는 공백 처리
                            SelNode = NewPaxData.SelectSingleNode("ticket");
                            SelNode.Attributes.GetNamedItem("number").InnerText = "";

                            SelNode = NewPaxData.SelectSingleNode("membership");
                            SelNode.Attributes.GetNamedItem("carrier").InnerText = "";
                            SelNode.Attributes.GetNamedItem("number").InnerText = "";

                            //PNR에 없는 탑승객은 환불(취소)로 처리
                            RefundPax = "Y";
                        }

                        SelNode = NewPaxData.SelectSingleNode("pax");
                        SelNode.Attributes.GetNamedItem("ref").InnerText = (index++).ToString();
                        SelNode.Attributes.GetNamedItem("nsi").InnerText = PaxInfo.SelectSingleNode("판매명세번호").InnerText;
                        SelNode.Attributes.GetNamedItem("pid").InnerText = PaxInfo.SelectSingleNode("회원번호").InnerText;
                        SelNode.Attributes.GetNamedItem("phn").InnerText = PaxInfo.SelectSingleNode("한글이름").InnerText;
                        SelNode.Attributes.GetNamedItem("psn").InnerText = PaxInfo.SelectSingleNode("영문성").InnerText;
                        SelNode.Attributes.GetNamedItem("pfn").InnerText = PaxInfo.SelectSingleNode("영문이름").InnerText;
                        SelNode.Attributes.GetNamedItem("ptc").InnerText = PaxInfo.SelectSingleNode("구분").InnerText;
                        SelNode.Attributes.GetNamedItem("ptl").InnerText = Common.GetPaxTitle(PaxInfo.SelectSingleNode("구분").InnerText, PaxInfo.SelectSingleNode("성별").InnerText);
                        SelNode.Attributes.GetNamedItem("pbd").InnerText = PaxInfo.SelectSingleNode("생년월일").InnerText;
                        SelNode.Attributes.GetNamedItem("pea").InnerText = PaxInfo.SelectSingleNode("이메일주소").InnerText;
                        SelNode.Attributes.GetNamedItem("ptn").InnerText = PaxInfo.SelectSingleNode("전화번호").InnerText;
                        SelNode.Attributes.GetNamedItem("pmn").InnerText = PaxInfo.SelectSingleNode("휴대폰번호").InnerText;
                        SelNode.Attributes.GetNamedItem("cancel").InnerText = RefundPax.Equals("Y") ? "Y" : PaxInfo.SelectSingleNode("취소여부").InnerText;

                        SelNode = NewPaxData.SelectSingleNode("fare");
                        SelNode.Attributes.GetNamedItem("price").InnerText = PaxInfo.SelectSingleNode("총요금").InnerText;
                        SelNode.Attributes.GetNamedItem("subPrice").InnerText = PaxInfo.SelectSingleNode("총요금2").InnerText;
                        SelNode.Attributes.GetNamedItem("fare").InnerText = PaxInfo.SelectSingleNode("항공료").InnerText;
                        SelNode.Attributes.GetNamedItem("tax").InnerText = PaxInfo.SelectSingleNode("TAX").InnerText;
                        SelNode.Attributes.GetNamedItem("fsc").InnerText = PaxInfo.SelectSingleNode("유류할증료").InnerText;
                        SelNode.Attributes.GetNamedItem("disPartner").InnerText = (Convert.ToInt32(PaxInfo.SelectSingleNode("파트너할인요금").InnerText) + Convert.ToInt32(PaxInfo.SelectSingleNode("제휴아이템할인요금").InnerText)).ToString();
                        SelNode.Attributes.GetNamedItem("tasf").InnerText = PaxInfo.SelectSingleNode("발권수수료").InnerText;
                        SelNode.Attributes.GetNamedItem("tourMileage").InnerText = PaxInfo.SelectSingleNode("투어마일리지").InnerText;

                        //임시(Q마켓 QA를 위해서)
                        //if (OID.Equals(34881374))
                        //{
                        //    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("disPartner").InnerText = "3000"; //①취소되지 않은 아이템할인금액(총)

                        //    if ("/신동우/".IndexOf(PaxInfo.SelectSingleNode("한글이름").InnerText) != -1) //②취소된 탑승객명
                        //    {
                        //        SelNode.Attributes.GetNamedItem("disPartner").InnerText = "0";
                        //    }
                        //}

                        SelNode = NewPaxData.SelectSingleNode("payment");
                        SelNode.Attributes.GetNamedItem("gross").InnerText = PaxInfo.SelectSingleNode("총결제금액").InnerText;
                        SelNode.Attributes.GetNamedItem("card").InnerText = PaxInfo.SelectSingleNode("카드결제금액").InnerText;
                        SelNode.Attributes.GetNamedItem("bank").InnerText = PaxInfo.SelectSingleNode("계좌이체금액").InnerText;
                        SelNode.Attributes.GetNamedItem("balance").InnerText = PaxInfo.SelectSingleNode("미결제금액").InnerText;
                        SelNode.Attributes.GetNamedItem("date").InnerText = PaxInfo.SelectSingleNode("결제일").InnerText;

                        SelNode = NewPaxData.SelectSingleNode("passport");
                        SelNode.Attributes.GetNamedItem("id").InnerText = PaxInfo.SelectSingleNode("여권번호").InnerText;
                        SelNode.Attributes.GetNamedItem("expireDate").InnerText = PaxInfo.SelectSingleNode("여권만료일").InnerText;
                        SelNode.Attributes.GetNamedItem("issueCountry").InnerText = PaxInfo.SelectSingleNode("여권발행국코드").InnerText;
                        SelNode.Attributes.GetNamedItem("holderNationality").InnerText = PaxInfo.SelectSingleNode("여권국적코드").InnerText;
                        SelNode.Attributes.GetNamedItem("writeDate").InnerText = PaxInfo.SelectSingleNode("여권정보등록일").InnerText;

                        SelNode = NewPaxData.SelectSingleNode("tourMileage");
                        SelNode.Attributes.GetNamedItem("memberClass").InnerText = PaxInfo.SelectSingleNode("회원구분").InnerText;
                        SelNode.Attributes.GetNamedItem("cardNumber").InnerText = PaxInfo.SelectSingleNode("마일리지카드번호").InnerText;
                        SelNode.Attributes.GetNamedItem("request").InnerText = PaxInfo.SelectSingleNode("마일리지적립여부").InnerText;
                        SelNode.Attributes.GetNamedItem("mileage").InnerText = PaxInfo.SelectSingleNode("투어마일리지").InnerText;

                        SelNode = NewPaxData.SelectSingleNode("refund");
                        SelNode.Attributes.GetNamedItem("cancelCode").InnerText = PaxInfo.SelectSingleNode("취소사유코드").InnerText;
                        SelNode.Attributes.GetNamedItem("cancelDesc").InnerText = PaxInfo.SelectSingleNode("취소사유").InnerText;
                        SelNode.Attributes.GetNamedItem("stateCode").InnerText = PaxInfo.SelectSingleNode("취소진행상태코드").InnerText;
                        SelNode.Attributes.GetNamedItem("stateDesc").InnerText = PaxInfo.SelectSingleNode("취소진행상태").InnerText;
                    }

                    //부가서비스
                    if (XmlDBBooking.SelectNodes("item11").Count > 0)
                    {
                        XmlAttribute NewServiceAttr = null;
                        int SupplementaryServiceSum = 0;

                        foreach (XmlNode TmpItem11 in XmlDBBooking.SelectNodes("item11"))
                        {
                            XmlDocument ServiceXml = new XmlDocument();
                            ServiceXml.LoadXml(TmpItem11.SelectSingleNode("상품XML").InnerText.Replace("&lt;", "<").Replace("&gt;", ">").Replace("<eventMessage>", "<eventMessage><![CDATA[").Replace("</eventMessage>", "]]></eventMessage>").Replace("<summary>", "<summary><![CDATA[").Replace("</summary>", "]]></summary>").Replace("<description>", "<description><![CDATA[").Replace("</description>", "]]></description>"));

                            NewServiceAttr = ServiceXml.CreateAttribute("ibn");
                            NewServiceAttr.InnerText = TmpItem11.SelectSingleNode("주문아이템번호").InnerText;
                            ServiceXml.FirstChild.Attributes.Append(NewServiceAttr);

                            NewServiceAttr = ServiceXml.CreateAttribute("status");
                            NewServiceAttr.InnerText = TmpItem11.SelectSingleNode("예약상황").InnerText;
                            ServiceXml.FirstChild.Attributes.Append(NewServiceAttr);

                            NewServiceAttr = ServiceXml.CreateAttribute("quantity");
                            NewServiceAttr.InnerText = TmpItem11.SelectSingleNode("수량").InnerText;
                            ServiceXml.SelectSingleNode("service/price").Attributes.Append(NewServiceAttr);

                            NewServiceAttr = ServiceXml.CreateAttribute("sellingPrice");
                            NewServiceAttr.InnerText = TmpItem11.SelectSingleNode("요금").InnerText;
                            ServiceXml.SelectSingleNode("service/price").Attributes.Append(NewServiceAttr);

                            SupplementaryService.AppendChild(ModeXml.OwnerDocument.ImportNode(ServiceXml.FirstChild, true));

                            SupplementaryServiceSum += Convert.ToInt32(TmpItem11.SelectSingleNode("요금").InnerText);
                        }

                        //부가서비스 핫라인 설정
                        if (SupplementaryService.HasChildNodes)
                        {
                            if ("1334421,1608843,2048015,".IndexOf(XmlDBBooking.SelectSingleNode("item/발권부서번호").InnerText) != -1)
                            {
                                XmlNode HotLine = ModeXml.OwnerDocument.CreateElement("hotLine");
                                XmlNode Department = ModeXml.OwnerDocument.CreateElement("department");
                                XmlNode Incharge = ModeXml.OwnerDocument.CreateElement("incharge");
                                XmlNode Hp = ModeXml.OwnerDocument.CreateElement("hp");
                                XmlNode Email = ModeXml.OwnerDocument.CreateElement("email");

                                switch (XmlDBBooking.SelectSingleNode("item/발권부서번호").InnerText)
                                {
                                    case "1334421":
                                        Department.InnerText = "항공판매사업1부";
                                        Incharge.InnerText = "박지혜";
                                        Hp.InnerText = "010-3895-2699";
                                        Email.InnerText = "iamninja@modetour.com";
                                        break;
                                    case "1608843":
                                        Department.InnerText = "항공판매사업2부";
                                        Incharge.InnerText = "정성하";
                                        Hp.InnerText = "010-8618-4046";
                                        Email.InnerText = "petra722@modetour.com";
                                        break;
                                    case "2048015":
                                        Department.InnerText = "항공판매사업3부";
                                        Incharge.InnerText = "송인혁";
                                        Hp.InnerText = "010-3300-3355";
                                        Email.InnerText = "inhyuk@modetour.com";
                                        break;
                                }

                                HotLine.AppendChild(Department);
                                HotLine.AppendChild(Incharge);
                                HotLine.AppendChild(Hp);
                                HotLine.AppendChild(Email);
                                SupplementaryService.InsertAfter(HotLine, SupplementaryService.LastChild);
                            }
                        }

                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("supplementaryService").InnerText = SupplementaryServiceSum.ToString();
                    }

                    //예약자정보
                    Attn.Attributes.GetNamedItem("rid").InnerText = XmlDBBooking.SelectSingleNode("item1/예약자번호").InnerText;
                    Attn.Attributes.GetNamedItem("rtl").InnerText = XmlDBBooking.SelectSingleNode("item1/타이틀").InnerText;
                    Attn.Attributes.GetNamedItem("rhn").InnerText = XmlDBBooking.SelectSingleNode("item1/예약자명").InnerText;
                    Attn.Attributes.GetNamedItem("rdb").InnerText = XmlDBBooking.SelectSingleNode("item1/생년월일").InnerText;
                    Attn.Attributes.GetNamedItem("rea").InnerText = XmlDBBooking.SelectSingleNode("item1/이메일").InnerText;
                    Attn.Attributes.GetNamedItem("rtn").InnerText = (String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item1/회사전화").InnerText)) ? XmlDBBooking.SelectSingleNode("item1/집전화").InnerText : XmlDBBooking.SelectSingleNode("item1/회사전화").InnerText;
                    Attn.Attributes.GetNamedItem("rmn").InnerText = XmlDBBooking.SelectSingleNode("item1/휴대폰").InnerText;
                    Attn.SelectSingleNode("terminal").InnerText = (XmlDBBooking.SelectNodes("item3/요청단말기").Count > 0) ? XmlDBBooking.SelectSingleNode("item3/요청단말기").InnerText : "";
                    Attn.SelectSingleNode("localTel").InnerText = XmlDBBooking.SelectSingleNode("item3/현지연락처").InnerText;
                    Attn.SelectSingleNode("localZipcode").InnerText = XmlDBBooking.SelectSingleNode("item3/현지우편번호").InnerText;
                    Attn.SelectSingleNode("partnerMemberID").InnerText = XmlDBBooking.SelectSingleNode("item1/제휴예약자ID").InnerText;

                    if (!String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item3/현지주소").InnerText))
                        Attn.SelectSingleNode("localAddress").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(XmlDBBooking.SelectSingleNode("item3/현지주소").InnerText));

                    if (!String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item3/예약자요청사항").InnerText))
                        Attn.SelectSingleNode("remark").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(XmlDBBooking.SelectSingleNode("item3/예약자요청사항").InnerText));

                    //담당여행사정보
                    Agent.Attributes.GetNamedItem("snm").InnerText = XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText;
                    Agent.Attributes.GetNamedItem("anm").InnerText = XmlDBBooking.SelectSingleNode("item2/거래처번호").InnerText;
                    Agent.Attributes.GetNamedItem("aen").InnerText = XmlDBBooking.SelectSingleNode("item2/거래처직원번호").InnerText;
                    Agent.SelectSingleNode("company").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(XmlDBBooking.SelectSingleNode("item2/거래처명").InnerText));
                    Agent.SelectSingleNode("name").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(XmlDBBooking.SelectSingleNode("item2/거래처직원명").InnerText));
                    Agent.SelectSingleNode("email").InnerText = XmlDBBooking.SelectSingleNode("item2/이메일").InnerText;
                    Agent.SelectSingleNode("tel").InnerText = (String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item2/회사전화").InnerText)) ? XmlDBBooking.SelectSingleNode("item2/휴대폰").InnerText : XmlDBBooking.SelectSingleNode("item2/회사전화").InnerText;
                    Agent.SelectSingleNode("fax").InnerText = XmlDBBooking.SelectSingleNode("item2/팩스").InnerText;
                    Agent.SelectSingleNode("share").Attributes.GetNamedItem("anm").InnerText = XmlDBBooking.SelectSingleNode("item2/제휴거래처번호").InnerText;

                    if (!String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item2/제휴거래처명").InnerText))
                        Agent.SelectSingleNode("share").AppendChild((XmlCDataSection)ModeXml.OwnerDocument.CreateCDataSection(XmlDBBooking.SelectSingleNode("item2/제휴거래처명").InnerText));

                    //결제요청정보
                    XmlNode ReqCards = PaymentReqInfo.SelectSingleNode("cards");
                    XmlNode ReqCard = ReqCards.SelectSingleNode("card");
                    XmlNode NewReqCard;

                    XmlNode ReqBanks = PaymentReqInfo.SelectSingleNode("banks");
                    XmlNode ReqBank = ReqBanks.SelectSingleNode("bank");
                    XmlNode NewReqBank;

                    foreach (XmlNode PayReqData in XmlDBBooking.SelectNodes("item13"))
                    {
                        if (PayReqData.SelectSingleNode("카드결제여부").InnerText.Equals("Y"))
                        {
                            NewReqCard = ReqCards.AppendChild(ReqCard.CloneNode(true));
                            NewReqCard.Attributes.GetNamedItem("nsi").InnerText = PayReqData.SelectSingleNode("판매명세번호").InnerText;
                            NewReqCard.Attributes.GetNamedItem("gross").InnerText = PayReqData.SelectSingleNode("카드결제금액").InnerText;
                            NewReqCard.Attributes.GetNamedItem("cardName").InnerText = PayReqData.SelectSingleNode("카드종류").InnerText;
                            NewReqCard.Attributes.GetNamedItem("cardNumber").InnerText = PayReqData.SelectSingleNode("카드번호").InnerText;
                            NewReqCard.Attributes.GetNamedItem("holder").InnerText = PayReqData.SelectSingleNode("소유자명").InnerText;
                            NewReqCard.Attributes.GetNamedItem("validThru").InnerText = PayReqData.SelectSingleNode("유효기간").InnerText;
                            NewReqCard.Attributes.GetNamedItem("installment").InnerText = PayReqData.SelectSingleNode("할부기간").InnerText;
                            NewReqCard.Attributes.GetNamedItem("date").InnerText = PayReqData.SelectSingleNode("카드결제요청일").InnerText;
                        }

                        if (PayReqData.SelectSingleNode("계좌이체여부").InnerText.Equals("Y"))
                        {
                            NewReqBank = ReqBanks.AppendChild(ReqBank.CloneNode(true));
                            NewReqBank.Attributes.GetNamedItem("nsi").InnerText = PayReqData.SelectSingleNode("판매명세번호").InnerText;
                            NewReqBank.Attributes.GetNamedItem("gross").InnerText = PayReqData.SelectSingleNode("계좌이체금액").InnerText;
                            NewReqBank.Attributes.GetNamedItem("bankName").InnerText = PayReqData.SelectSingleNode("은행").InnerText;
                            NewReqBank.Attributes.GetNamedItem("accountNumber").InnerText = PayReqData.SelectSingleNode("계좌번호").InnerText;
                            NewReqBank.Attributes.GetNamedItem("holder").InnerText = PayReqData.SelectSingleNode("예금주").InnerText;
                            NewReqBank.Attributes.GetNamedItem("date").InnerText = PayReqData.SelectSingleNode("계좌이체요청일").InnerText;
                        }
                    }

                    ReqCards.RemoveChild(ReqCard);
                    ReqBanks.RemoveChild(ReqBank);

                    //결제정보
                    PaymentInfo.SelectSingleNode("gross").InnerText = XmlDBBooking.SelectSingleNode("item5/수납액").InnerText;
                    PaymentInfo.SelectSingleNode("gross").Attributes.GetNamedItem("date").InnerText = XmlDBBooking.SelectSingleNode("item3/고객발권요청일").InnerText;

                    //신용카드
                    XmlNode Cards = PaymentInfo.SelectSingleNode("cards");
                    XmlNode Card = Cards.SelectSingleNode("card");
                    XmlNode NewCard;

                    foreach (XmlNode CardData in XmlDBBooking.SelectNodes("item6"))
                    {
                        NewCard = Cards.AppendChild(Card.CloneNode(true));
                        NewCard.Attributes.GetNamedItem("nsi").InnerText = CardData.SelectSingleNode("판매명세번호").InnerText;
                        NewCard.Attributes.GetNamedItem("gross").InnerText = CardData.SelectSingleNode("수납액").InnerText;
                        NewCard.Attributes.GetNamedItem("date").InnerText = CardData.SelectSingleNode("수납일").InnerText;
                        NewCard.Attributes.GetNamedItem("installment").InnerText = CardData.SelectSingleNode("할부").InnerText;
                        NewCard.Attributes.GetNamedItem("cardName").InnerText = CardData.SelectSingleNode("카드사명").InnerText;
                        NewCard.Attributes.GetNamedItem("approvalNumber").InnerText = CardData.SelectSingleNode("승인번호").InnerText;
                        NewCard.Attributes.GetNamedItem("transactionNumber").InnerText = CardData.SelectSingleNode("거래번호").InnerText;
                    }

                    Cards.RemoveChild(Card);

                    //계좌이체
                    XmlNode Banks = PaymentInfo.SelectSingleNode("banks");
                    XmlNode Bank = Banks.SelectSingleNode("bank");
                    XmlNode NewBank;

                    foreach (XmlNode BankData in XmlDBBooking.SelectNodes("item7"))
                    {
                        NewBank = Banks.AppendChild(Bank.CloneNode(true));
                        NewBank.Attributes.GetNamedItem("nsi").InnerText = BankData.SelectSingleNode("판매명세번호").InnerText;
                        NewBank.Attributes.GetNamedItem("gross").InnerText = BankData.SelectSingleNode("수납액").InnerText;
                        NewBank.Attributes.GetNamedItem("date").InnerText = BankData.SelectSingleNode("수납일").InnerText;
                        NewBank.Attributes.GetNamedItem("remitter").InnerText = BankData.SelectSingleNode("송금자").InnerText;
                        NewBank.Attributes.GetNamedItem("bankName").InnerText = BankData.SelectSingleNode("은행명").InnerText;
                    }

                    Banks.RemoveChild(Bank);

                    //상품권
                    XmlNode GiftCertificates = PaymentInfo.SelectSingleNode("giftCertificates");
                    XmlNode GiftCertificate = GiftCertificates.SelectSingleNode("giftCertificate");
                    XmlNode NewGiftCertificate;

                    foreach (XmlNode GiftCertificateData in XmlDBBooking.SelectNodes("item8"))
                    {
                        NewGiftCertificate = GiftCertificates.AppendChild(GiftCertificate.CloneNode(true));
                        NewGiftCertificate.Attributes.GetNamedItem("nsi").InnerText = GiftCertificateData.SelectSingleNode("판매명세번호").InnerText;
                        NewGiftCertificate.Attributes.GetNamedItem("gross").InnerText = GiftCertificateData.SelectSingleNode("수납액").InnerText;
                        NewGiftCertificate.Attributes.GetNamedItem("date").InnerText = GiftCertificateData.SelectSingleNode("수납일").InnerText;
                    }

                    GiftCertificates.RemoveChild(GiftCertificate);

                    //투어마일리지
                    XmlNode TourMileages = PaymentInfo.SelectSingleNode("tourMileages");
                    XmlNode TourMileage = TourMileages.SelectSingleNode("tourMileage");
                    XmlNode NewTourMileages;

                    foreach (XmlNode TourMileagesData in XmlDBBooking.SelectNodes("item15"))
                    {
                        NewTourMileages = TourMileages.AppendChild(TourMileage.CloneNode(true));
                        NewTourMileages.Attributes.GetNamedItem("nsi").InnerText = TourMileagesData.SelectSingleNode("판매명세번호").InnerText;
                        NewTourMileages.Attributes.GetNamedItem("gross").InnerText = TourMileagesData.SelectSingleNode("수납액").InnerText;
                        NewTourMileages.Attributes.GetNamedItem("date").InnerText = TourMileagesData.SelectSingleNode("수납일").InnerText;
                    }

                    TourMileages.RemoveChild(TourMileage);

                    //할인쿠폰
                    XmlNode Coupons = PaymentInfo.SelectSingleNode("coupons");
                    XmlNode Coupon = Coupons.SelectSingleNode("coupon");
                    XmlNode NewCoupon;

                    foreach (XmlNode CouponData in XmlDBBooking.SelectNodes("item12[결제수단='CP']"))
                    {
                        NewCoupon = Coupons.AppendChild(Coupon.CloneNode(true));
                        NewCoupon.Attributes.GetNamedItem("nsi").InnerText = CouponData.SelectSingleNode("판매명세번호").InnerText;
                        NewCoupon.Attributes.GetNamedItem("number").InnerText = CouponData.SelectSingleNode("쿠폰번호").InnerText;
                        NewCoupon.Attributes.GetNamedItem("gross").InnerText = CouponData.SelectSingleNode("수납액").InnerText;
                        NewCoupon.Attributes.GetNamedItem("date").InnerText = CouponData.SelectSingleNode("수납일").InnerText;
                    }

                    Coupons.RemoveChild(Coupon);

                    //기타결제수단
                    XmlNode Etcs = PaymentInfo.SelectSingleNode("etcs");
                    XmlNode Etc = Etcs.SelectSingleNode("etc");
                    XmlNode NewEtc;

                    foreach (XmlNode EtcData in XmlDBBooking.SelectNodes("item12[결제수단!='CP']"))
                    {
                        NewEtc = Etcs.AppendChild(Etc.CloneNode(true));
                        NewEtc.Attributes.GetNamedItem("nsi").InnerText = EtcData.SelectSingleNode("판매명세번호").InnerText;
                        NewEtc.Attributes.GetNamedItem("item").InnerText = EtcData.SelectSingleNode("쿠폰번호").InnerText;
                        NewEtc.Attributes.GetNamedItem("gross").InnerText = EtcData.SelectSingleNode("수납액").InnerText;
                        NewEtc.Attributes.GetNamedItem("date").InnerText = EtcData.SelectSingleNode("수납일").InnerText;
                    }

                    Etcs.RemoveChild(Etc);

                    //가상계좌번호
                    if (XmlDBBooking.SelectNodes("item9").Count > 0)
                    {
                        PaymentInfo.SelectSingleNode("virtualAccountNumber/bank").InnerText = XmlDBBooking.SelectSingleNode("item9/은행명").InnerText;
                        PaymentInfo.SelectSingleNode("virtualAccountNumber/accountNumber").InnerText = XmlDBBooking.SelectSingleNode("item9/계좌번호").InnerText;
                        PaymentInfo.SelectSingleNode("virtualAccountNumber/holder").InnerText = XmlDBBooking.SelectSingleNode("item9/예금주").InnerText;
                    }

                    //현금영수증정보
                    PaymentInfo.SelectSingleNode("cashReceipt").InnerText = XmlDBBooking.SelectSingleNode("item3/현금영수증요청정보").InnerText;

                    return ModeXml;
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }
        }

        /// <summary>
        /// 여정 정보를 예약 정보와 비교하여 그루핑
        /// </summary>
        /// <param name="ModeXml">통합용 XML</param>
        /// <returns></returns>
        public XmlElement SearchBookingSegGrouping(XmlElement ModeXml, string itinerary)
        {
            try
            {
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.LoadXml(itinerary);

                XmlNode Itinerary = XmlDoc.SelectSingleNode("itinerary");
                XmlNode FlightInfo = ModeXml.SelectSingleNode("flightInfo");
                XmlNodeList OSegs = FlightInfo.SelectNodes("segGroup/seg");
                bool Success = true;
                int i = 0;
                int g = 1;

                foreach (XmlNode SegGroup in Itinerary.SelectNodes("segGroup"))
                {
                    int s = 1;

                    foreach (XmlNode Seg in SegGroup.SelectNodes("seg"))
                    {
                        if (Seg.Attributes.GetNamedItem("dlc").InnerText.Equals(OSegs[i].Attributes.GetNamedItem("dlc").InnerText))
                        {
                            if (Seg.Attributes.GetNamedItem("alc").InnerText.Equals(OSegs[i].Attributes.GetNamedItem("alc").InnerText))
                            {
                                if (Seg.Attributes.GetNamedItem("ddt").InnerText.Equals(OSegs[i].Attributes.GetNamedItem("ddt").InnerText))
                                {
                                    if (Seg.Attributes.GetNamedItem("mcc").InnerText.Equals(OSegs[i].Attributes.GetNamedItem("mcc").InnerText))
                                    {
                                        if (Seg.Attributes.GetNamedItem("occ").InnerText.Equals(OSegs[i].Attributes.GetNamedItem("occ").InnerText))
                                        {
                                            if (Convert.ToInt32(Seg.Attributes.GetNamedItem("fln").InnerText).Equals(Convert.ToInt32(OSegs[i].Attributes.GetNamedItem("fln").InnerText)))
                                            {
                                                SegGroup.ReplaceChild(XmlDoc.ImportNode(OSegs[i], true), Seg);
                                                Itinerary.SelectNodes("segGroup/seg")[i].Attributes.GetNamedItem("ref").InnerText = (s++).ToString();

                                                SegGroup.Attributes.Append((XmlAttribute)XmlDoc.CreateAttribute("jrt"));
                                                SegGroup.Attributes.GetNamedItem("ref").InnerText = g.ToString();
                                                SegGroup.Attributes.RemoveNamedItem("nosp");
                                                SegGroup.Attributes.RemoveNamedItem("cds");
                                                SegGroup.Attributes.RemoveNamedItem("mjc");
                                                SegGroup.Attributes.RemoveNamedItem("aif");
                                            }
                                            else
                                            {
                                                Success = false;
                                                break;
                                            }
                                        }
                                        else
                                        {
                                            Success = false;
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        Success = false;
                                        break;
                                    }
                                }
                                else
                                {
                                    Success = false;
                                    break;
                                }
                            }
                            else
                            {
                                Success = false;
                                break;
                            }
                        }
                        else
                        {
                            Success = false;
                            break;
                        }

                        i++;
                    }

                    g++;
                }

                if (Success)
                {
                    FlightInfo.RemoveAll();

                    foreach (XmlNode SegGroup in Itinerary.SelectNodes("segGroup"))
                    {
                        string ArrDate = string.Empty;

                        //대기시간을 계산하여 추가
                        foreach (XmlNode Seg in SegGroup.SelectNodes("seg"))
                        {
                            Seg.Attributes.GetNamedItem("ewt").InnerText = String.IsNullOrWhiteSpace(ArrDate) ? "" : cm.ElapseFlyingTime(ArrDate, Seg.Attributes.GetNamedItem("ddt").InnerText);
                            ArrDate = Seg.Attributes.GetNamedItem("ardt").InnerText;
                        }

                        FlightInfo.AppendChild(ModeXml.OwnerDocument.ImportNode(SegGroup, true));
                    }
                }
            }
            catch (Exception) { }

            return ModeXml;
        }

        /// <summary>
        /// 예약조회(저장된 정보이용)
        /// </summary>
        /// <param name="OID">모두투어 주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RIP">요청자IP</param>
        /// <returns></returns>
        [WebMethod(Description = "예약조회(저장된 정보이용)")]
        public XmlElement SearchStoredBookingRS(int OID, int PID, string RIP)
        {
            int ServiceNumber = 549;
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = ServiceNumber;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
			{
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, RIP);

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
				{
                    XmlDocument FareXml = new XmlDocument();
                    FareXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                    XmlDocument XmlDoc = new XmlDocument();
                    XmlDoc.LoadXml(XmlDBBooking.SelectSingleNode("item3/MODEXML").InnerText);

                    XmlNode ResponseDetails = XmlDoc.SelectSingleNode("ResponseDetails");
                    XmlNode BookingInfo = ResponseDetails.SelectSingleNode("bookingInfo");

                    BookingInfo.SelectSingleNode("bookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;
                    BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = XmlDBBooking.SelectSingleNode("item3/GDS주문번호").InnerText;
                    BookingInfo.SelectSingleNode("modeBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item/예약번호").InnerText;
                    BookingInfo.SelectSingleNode("agentBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/주문아이템코드").InnerText;
                    BookingInfo.SelectSingleNode("allianceBookingNo").Attributes.GetNamedItem("pip").InnerText = XmlDBBooking.SelectSingleNode("item3/개인정보제공여부").InnerText;
                    BookingInfo.SelectSingleNode("allianceBookingNo").Attributes.GetNamedItem("piip").InnerText = XmlDBBooking.SelectSingleNode("item3/고유식별정보제공여부").InnerText;
                    BookingInfo.SelectSingleNode("allianceBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/제휴사주문번호").InnerText;
                    BookingInfo.SelectSingleNode("bookingCreationDate").InnerText = XmlDBBooking.SelectSingleNode("item/예약일").InnerText;
                    BookingInfo.SelectSingleNode("bookingCancelDate").InnerText = XmlDBBooking.SelectSingleNode("item/취소일").InnerText;
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("passport").InnerText = (XmlDBBooking.SelectNodes("item4[취소여부='N']").Count > 0 && XmlDBBooking.SelectNodes("item4[여권번호='' and 취소여부='N']").Count.Equals(0)) ? "Y" : "N";
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("apis").InnerText = XmlDBBooking.SelectSingleNode("item3/아피스입력여부").InnerText;
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("issue").InnerText = XmlDBBooking.SelectSingleNode("item3/발권완료여부").InnerText;
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("esta").InnerText = (XmlDBBooking.SelectNodes("item14/ESTA").Count > 0) ? XmlDBBooking.SelectSingleNode("item14/ESTA").InnerText : "N";
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("eta").InnerText = (XmlDBBooking.SelectNodes("item14/ETA").Count > 0) ? XmlDBBooking.SelectSingleNode("item14/ETA").InnerText : "N";
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("usa").InnerText = (XmlDBBooking.SelectNodes("item14/USA").Count > 0) ? XmlDBBooking.SelectSingleNode("item14/USA").InnerText : "N";
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("refund").InnerText = (XmlDBBooking.SelectNodes("item16/환불상태").Count > 0) ? (XmlDBBooking.SelectSingleNode("item16/환불상태").InnerText.Equals("전체환불") ? "W" : (XmlDBBooking.SelectSingleNode("item16/환불상태").InnerText.Equals("부분환불") ? "P" : "")) : "";
                    BookingInfo.SelectSingleNode("bookingStatus").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(Common.BookingStatusText(BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("code").InnerText)));
                    BookingInfo.SelectSingleNode("bookingAirline").Attributes.GetNamedItem("code").InnerText = XmlDBBooking.SelectSingleNode("item3/마케팅항공사").InnerText;
                    BookingInfo.SelectSingleNode("bookingAirline").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(XmlDBBooking.SelectSingleNode("item3/마케팅항공사명").InnerText));
                    BookingInfo.SelectSingleNode("bookingRtg").Attributes.GetNamedItem("type").InnerText = XmlDBBooking.SelectSingleNode("item3/여정구분").InnerText;
                    BookingInfo.SelectSingleNode("bookingRuleId").Attributes.GetNamedItem("proof").InnerText = XmlDBBooking.SelectSingleNode("item3/증빙필요여부").InnerText;
                    BookingInfo.SelectSingleNode("bookingTL").Attributes.GetNamedItem("ttl").InnerText = XmlDBBooking.SelectSingleNode("item3/항공사TL").InnerText;
                    BookingInfo.SelectSingleNode("bookingTL").InnerText = cm.RequestDateTime(XmlDBBooking.SelectSingleNode("item3/TL").InnerText, "yyyy-MM-dd HH:mm");
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("price").InnerText = XmlDBBooking.SelectSingleNode("item/총판매가").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("subPrice").InnerText = XmlDBBooking.SelectSingleNode("item/총판매가2").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("fare").InnerText = XmlDBBooking.SelectSingleNode("item/총항공료").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("tax").InnerText = XmlDBBooking.SelectSingleNode("item/총텍스").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("fsc").InnerText = XmlDBBooking.SelectSingleNode("item/총유류할증료").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("disPartner").InnerText = XmlDBBooking.SelectSingleNode("item/총제휴할인금액").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("supplementaryService").InnerText = "0";
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("tasf").InnerText = XmlDBBooking.SelectSingleNode("item/총발권수수료").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("tau").InnerText = XmlDBBooking.SelectSingleNode("item3/TaxAutoUpdate").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("taud").InnerText = XmlDBBooking.SelectSingleNode("item3/TaxAutoUpdateDate").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("pcs").InnerText = XmlDBBooking.SelectSingleNode("item/유료상담서비스").InnerText;
                    
                    if (FareXml.SelectNodes("priceIndex").Count > 0 && FareXml.SelectNodes("priceIndex/paxFareGroup/paxFare/segFareGroup").Count > 0)
                    {
                        BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText = Common.ServiceClass(FareXml.SelectSingleNode("priceIndex/paxFareGroup/paxFare/segFareGroup/segFare/fare/cabin").Attributes.GetNamedItem("cabin").InnerText);
                        BookingInfo.SelectSingleNode("bookingClass").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(Common.ServiceClassText(XmlDBBooking.SelectSingleNode("item3/GDS구분").InnerText, BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText = FareXml.SelectSingleNode("priceIndex").Attributes.GetNamedItem("ptc").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("card").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드사").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("sign").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드표기").InnerText;
                        BookingInfo.SelectSingleNode("paxType").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(Common.PaxTypeText(BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText = FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("mas").InnerText;
                        if (!String.IsNullOrWhiteSpace(BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText))
                            BookingInfo.SelectSingleNode("expiryDate").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(cm.ExpiryDateText(BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ucf").InnerText = FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("ucf").InnerText;
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ntf").InnerText = FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("ntf").InnerText;
                    }
                    else if (FareXml.SelectNodes("Table").Count > 0)
                    {
                        BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText = Common.ServiceClass(FareXml.SelectSingleNode("Table/SVC_CLASS").InnerText);
                        BookingInfo.SelectSingleNode("bookingClass").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(Common.ServiceClassText(XmlDBBooking.SelectSingleNode("item3/GDS구분").InnerText, BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText = FareXml.SelectSingleNode("Table/PAX_TYPE").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("card").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드사").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("sign").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드표기").InnerText;
                        BookingInfo.SelectSingleNode("paxType").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(Common.PaxTypeText(BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText = FareXml.SelectSingleNode("Table/MAX_STAY").InnerText;
                        if (!String.IsNullOrWhiteSpace(BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText))
                            BookingInfo.SelectSingleNode("expiryDate").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(cm.ExpiryDateText(BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ucf").InnerText = "N";
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ntf").InnerText = "Y";
                    }

                    //성인,소아 중 한 명이라도 텍스가 0이하라면 미확정 요금 처리(2018-10-16,김경미매니저)
                    if (XmlDBBooking.SelectNodes("item4[구분!='INF' and TAX <= 0]").Count > 0)
                    {
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ucf").InnerText = "Y";
                    }

                    ResponseDetails.RemoveChild(ResponseDetails.SelectSingleNode("paymentReqInfo"));
                    ResponseDetails.RemoveChild(ResponseDetails.SelectSingleNode("paymentInfo"));

                    return XmlDoc.DocumentElement;
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, OID, 0).ToErrors;
            }
        }

        /// <summary>
        /// 예약조회(저장된 정보이용)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">모두투어 주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RIP">요청자IP</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "예약조회(저장된 정보이용)")]
        public XmlElement SearchStoredBooking2RS(int SNM, int OID, int PID, string RIP, string RQT)
        {
            int ServiceNumber = 662;
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = ServiceNumber;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, RIP);

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    XmlDocument FareXml = new XmlDocument();
                    FareXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                    XmlDocument ItinXml = new XmlDocument();
                    ItinXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/상품XML").InnerText.Replace("itinerary", "flightInfo"));

                    XmlDocument XmlDoc = new XmlDocument();
                    XmlDoc.LoadXml(XmlDBBooking.SelectSingleNode("item3/MODEXML").InnerText);

                    XmlNode ResponseDetails = XmlDoc.SelectSingleNode("ResponseDetails");
                    XmlNode BookingInfo = ResponseDetails.SelectSingleNode("bookingInfo");
                    XmlNode TravellerInfo = ResponseDetails.SelectSingleNode("travellerInfo");

                    BookingInfo.SelectSingleNode("bookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;
                    BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = XmlDBBooking.SelectSingleNode("item3/GDS주문번호").InnerText;
                    BookingInfo.SelectSingleNode("modeBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item/예약번호").InnerText;
                    BookingInfo.SelectSingleNode("agentBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/주문아이템코드").InnerText;
                    BookingInfo.SelectSingleNode("allianceBookingNo").Attributes.GetNamedItem("pip").InnerText = XmlDBBooking.SelectSingleNode("item3/개인정보제공여부").InnerText;
                    BookingInfo.SelectSingleNode("allianceBookingNo").Attributes.GetNamedItem("piip").InnerText = XmlDBBooking.SelectSingleNode("item3/고유식별정보제공여부").InnerText;
                    BookingInfo.SelectSingleNode("allianceBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/제휴사주문번호").InnerText;
                    BookingInfo.SelectSingleNode("bookingCreationDate").InnerText = XmlDBBooking.SelectSingleNode("item/예약일").InnerText;
                    BookingInfo.SelectSingleNode("bookingCancelDate").InnerText = XmlDBBooking.SelectSingleNode("item/취소일").InnerText;
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("passport").InnerText = (XmlDBBooking.SelectNodes("item4[취소여부='N']").Count > 0 && XmlDBBooking.SelectNodes("item4[여권번호='' and 취소여부='N']").Count.Equals(0)) ? "Y" : "N";
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("apis").InnerText = XmlDBBooking.SelectSingleNode("item3/아피스입력여부").InnerText;
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("issue").InnerText = XmlDBBooking.SelectSingleNode("item3/발권완료여부").InnerText;
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("esta").InnerText = (XmlDBBooking.SelectNodes("item14/ESTA").Count > 0) ? XmlDBBooking.SelectSingleNode("item14/ESTA").InnerText : "N";
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("eta").InnerText = (XmlDBBooking.SelectNodes("item14/ETA").Count > 0) ? XmlDBBooking.SelectSingleNode("item14/ETA").InnerText : "N";
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("usa").InnerText = (XmlDBBooking.SelectNodes("item14/USA").Count > 0) ? XmlDBBooking.SelectSingleNode("item14/USA").InnerText : "N";
                    BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("refund").InnerText = (XmlDBBooking.SelectNodes("item16/환불상태").Count > 0) ? (XmlDBBooking.SelectSingleNode("item16/환불상태").InnerText.Equals("전체환불") ? "W" : (XmlDBBooking.SelectSingleNode("item16/환불상태").InnerText.Equals("부분환불") ? "P" : "")) : "";
                    BookingInfo.SelectSingleNode("bookingStatus").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(Common.BookingStatusText(BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("code").InnerText)));
                    BookingInfo.SelectSingleNode("bookingAirline").Attributes.GetNamedItem("code").InnerText = XmlDBBooking.SelectSingleNode("item3/마케팅항공사").InnerText;
                    BookingInfo.SelectSingleNode("bookingAirline").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(XmlDBBooking.SelectSingleNode("item3/마케팅항공사명").InnerText));
                    BookingInfo.SelectSingleNode("bookingRtg").Attributes.GetNamedItem("type").InnerText = XmlDBBooking.SelectSingleNode("item3/여정구분").InnerText;
                    BookingInfo.SelectSingleNode("bookingRuleId").Attributes.GetNamedItem("proof").InnerText = XmlDBBooking.SelectSingleNode("item3/증빙필요여부").InnerText;
                    BookingInfo.SelectSingleNode("bookingTL").Attributes.GetNamedItem("ttl").InnerText = XmlDBBooking.SelectSingleNode("item3/항공사TL").InnerText;
                    BookingInfo.SelectSingleNode("bookingTL").InnerText = cm.RequestDateTime(XmlDBBooking.SelectSingleNode("item3/TL").InnerText, "yyyy-MM-dd HH:mm");
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("price").InnerText = XmlDBBooking.SelectSingleNode("item/총판매가").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("subPrice").InnerText = XmlDBBooking.SelectSingleNode("item/총판매가2").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("fare").InnerText = XmlDBBooking.SelectSingleNode("item/총항공료").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("tax").InnerText = XmlDBBooking.SelectSingleNode("item/총텍스").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("fsc").InnerText = XmlDBBooking.SelectSingleNode("item/총유류할증료").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("disPartner").InnerText = XmlDBBooking.SelectSingleNode("item/총제휴할인금액").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("supplementaryService").InnerText = "0";
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("tasf").InnerText = XmlDBBooking.SelectSingleNode("item/총발권수수료").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("tau").InnerText = XmlDBBooking.SelectSingleNode("item3/TaxAutoUpdate").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("taud").InnerText = XmlDBBooking.SelectSingleNode("item3/TaxAutoUpdateDate").InnerText;
                    BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("pcs").InnerText = XmlDBBooking.SelectSingleNode("item/유료상담서비스").InnerText;

                    if (FareXml.SelectNodes("priceIndex").Count > 0 && FareXml.SelectNodes("priceIndex/paxFareGroup/paxFare/segFareGroup").Count > 0)
                    {
                        BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText = Common.ServiceClass(FareXml.SelectSingleNode("priceIndex/paxFareGroup/paxFare/segFareGroup/segFare/fare/cabin").Attributes.GetNamedItem("cabin").InnerText);
                        BookingInfo.SelectSingleNode("bookingClass").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(Common.ServiceClassText(XmlDBBooking.SelectSingleNode("item3/GDS구분").InnerText, BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText = FareXml.SelectSingleNode("priceIndex").Attributes.GetNamedItem("ptc").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("card").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드사").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("sign").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드표기").InnerText;
                        BookingInfo.SelectSingleNode("paxType").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(Common.PaxTypeText(BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText = FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("mas").InnerText;
                        if (!String.IsNullOrWhiteSpace(BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText))
                            BookingInfo.SelectSingleNode("expiryDate").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(cm.ExpiryDateText(BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ucf").InnerText = FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("ucf").InnerText;
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ntf").InnerText = FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("ntf").InnerText;
                    }
                    else if (FareXml.SelectNodes("Table").Count > 0)
                    {
                        BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText = Common.ServiceClass(FareXml.SelectSingleNode("Table/SVC_CLASS").InnerText);
                        BookingInfo.SelectSingleNode("bookingClass").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(Common.ServiceClassText(XmlDBBooking.SelectSingleNode("item3/GDS구분").InnerText, BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText = FareXml.SelectSingleNode("Table/PAX_TYPE").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("card").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드사").InnerText;
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("sign").InnerText = XmlDBBooking.SelectSingleNode("item3/프로모션카드표기").InnerText;
                        BookingInfo.SelectSingleNode("paxType").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(Common.PaxTypeText(BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText = FareXml.SelectSingleNode("Table/MAX_STAY").InnerText;
                        if (!String.IsNullOrWhiteSpace(BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText))
                            BookingInfo.SelectSingleNode("expiryDate").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(cm.ExpiryDateText(BookingInfo.SelectSingleNode("expiryDate").Attributes.GetNamedItem("code").InnerText)));
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ucf").InnerText = "N";
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ntf").InnerText = "Y";
                    }

                    //성인,소아 중 한 명이라도 텍스가 0이하라면 미확정 요금 처리(2018-10-16,김경미매니저)
                    if (XmlDBBooking.SelectNodes("item4[구분!='INF' and TAX <= 0]").Count > 0)
                    {
                        BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ucf").InnerText = "Y";
                    }

                    //프로모션 정보
                    if (!String.IsNullOrEmpty(XmlDBBooking.SelectSingleNode("item3/요금조건").InnerText))
                    {
                        BookingInfo.SelectSingleNode("paxType").InnerText = "";
                        BookingInfo.SelectSingleNode("paxType").Attributes.GetNamedItem("code").InnerText = XmlDBBooking.SelectSingleNode("item3/요금조건").InnerText;
                        BookingInfo.SelectSingleNode("paxType").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(Common.PaxTypeText(XmlDBBooking.SelectSingleNode("item3/요금조건명").InnerText)));
                    }

                    //여정정보
                    if (ItinXml.SelectNodes("flightInfo").Count > 0)
                    {
                        ResponseDetails.RemoveChild(ResponseDetails.SelectSingleNode("flightInfo"));
                        ResponseDetails.InsertAfter(XmlDoc.ImportNode(ItinXml.FirstChild, true), BookingInfo);
                    }

                    ResponseDetails.RemoveChild(ResponseDetails.SelectSingleNode("paymentReqInfo"));
                    ResponseDetails.RemoveChild(ResponseDetails.SelectSingleNode("paymentInfo"));

                    //탑승객 정보
                    XmlNode PaxData = TravellerInfo.SelectSingleNode("paxData");
                    XmlNode SelNode;
                    XmlNode NewPaxData;
                    int index = 1;

                    foreach (XmlNode PaxInfo in XmlDBBooking.SelectNodes("item4"))
                    {
                        if (TravellerInfo.SelectNodes(String.Format("paxData[pax/@psn='{0}' and pax/@pfn='{1}']", Common.ChangeSurname(PaxInfo.SelectSingleNode("영문성").InnerText), PaxInfo.SelectSingleNode("영문이름").InnerText)).Count > 0)
                            NewPaxData = TravellerInfo.SelectSingleNode(String.Format("paxData[pax/@psn='{0}' and pax/@pfn='{1}']", Common.ChangeSurname(PaxInfo.SelectSingleNode("영문성").InnerText), PaxInfo.SelectSingleNode("영문이름").InnerText));
                        else
                        {
                            NewPaxData = TravellerInfo.AppendChild(PaxData.CloneNode(true));

                            //DB에서 불러오지 않는 데이타는 공백 처리
                            SelNode = NewPaxData.SelectSingleNode("ticket");
                            SelNode.Attributes.GetNamedItem("number").InnerText = "";

                            SelNode = NewPaxData.SelectSingleNode("membership");
                            SelNode.Attributes.GetNamedItem("carrier").InnerText = "";
                            SelNode.Attributes.GetNamedItem("number").InnerText = "";
                        }

                        SelNode = NewPaxData.SelectSingleNode("pax");
                        SelNode.Attributes.GetNamedItem("ref").InnerText = (index++).ToString();
                        SelNode.Attributes.GetNamedItem("nsi").InnerText = PaxInfo.SelectSingleNode("판매명세번호").InnerText;
                        SelNode.Attributes.GetNamedItem("pid").InnerText = PaxInfo.SelectSingleNode("회원번호").InnerText;
                        SelNode.Attributes.GetNamedItem("phn").InnerText = PaxInfo.SelectSingleNode("한글이름").InnerText;
                        SelNode.Attributes.GetNamedItem("psn").InnerText = PaxInfo.SelectSingleNode("영문성").InnerText;
                        SelNode.Attributes.GetNamedItem("pfn").InnerText = PaxInfo.SelectSingleNode("영문이름").InnerText;
                        SelNode.Attributes.GetNamedItem("ptc").InnerText = PaxInfo.SelectSingleNode("구분").InnerText;
                        SelNode.Attributes.GetNamedItem("ptl").InnerText = Common.GetPaxTitle(PaxInfo.SelectSingleNode("구분").InnerText, PaxInfo.SelectSingleNode("성별").InnerText);
                        SelNode.Attributes.GetNamedItem("pbd").InnerText = PaxInfo.SelectSingleNode("생년월일").InnerText;
                        SelNode.Attributes.GetNamedItem("pea").InnerText = PaxInfo.SelectSingleNode("이메일주소").InnerText;
                        SelNode.Attributes.GetNamedItem("ptn").InnerText = PaxInfo.SelectSingleNode("전화번호").InnerText;
                        SelNode.Attributes.GetNamedItem("pmn").InnerText = PaxInfo.SelectSingleNode("휴대폰번호").InnerText;
                        SelNode.Attributes.GetNamedItem("cancel").InnerText = PaxInfo.SelectSingleNode("취소여부").InnerText;

                        SelNode = NewPaxData.SelectSingleNode("fare");
                        SelNode.Attributes.GetNamedItem("price").InnerText = PaxInfo.SelectSingleNode("총요금").InnerText;
                        SelNode.Attributes.GetNamedItem("subPrice").InnerText = PaxInfo.SelectSingleNode("총요금2").InnerText;
                        SelNode.Attributes.GetNamedItem("fare").InnerText = PaxInfo.SelectSingleNode("항공료").InnerText;
                        SelNode.Attributes.GetNamedItem("tax").InnerText = PaxInfo.SelectSingleNode("TAX").InnerText;
                        SelNode.Attributes.GetNamedItem("fsc").InnerText = PaxInfo.SelectSingleNode("유류할증료").InnerText;
                        SelNode.Attributes.GetNamedItem("disPartner").InnerText = (Convert.ToInt32(PaxInfo.SelectSingleNode("파트너할인요금").InnerText) + Convert.ToInt32(PaxInfo.SelectSingleNode("제휴아이템할인요금").InnerText)).ToString();
                        SelNode.Attributes.GetNamedItem("tasf").InnerText = PaxInfo.SelectSingleNode("발권수수료").InnerText;
                        SelNode.Attributes.GetNamedItem("tourMileage").InnerText = PaxInfo.SelectSingleNode("투어마일리지").InnerText;

                        SelNode = NewPaxData.SelectSingleNode("payment");
                        SelNode.Attributes.GetNamedItem("gross").InnerText = PaxInfo.SelectSingleNode("총결제금액").InnerText;
                        SelNode.Attributes.GetNamedItem("card").InnerText = PaxInfo.SelectSingleNode("카드결제금액").InnerText;
                        SelNode.Attributes.GetNamedItem("bank").InnerText = PaxInfo.SelectSingleNode("계좌이체금액").InnerText;
                        SelNode.Attributes.GetNamedItem("balance").InnerText = PaxInfo.SelectSingleNode("미결제금액").InnerText;
                        SelNode.Attributes.GetNamedItem("date").InnerText = PaxInfo.SelectSingleNode("결제일").InnerText;

                        SelNode = NewPaxData.SelectSingleNode("passport");
                        SelNode.Attributes.GetNamedItem("id").InnerText = PaxInfo.SelectSingleNode("여권번호").InnerText;
                        SelNode.Attributes.GetNamedItem("expireDate").InnerText = PaxInfo.SelectSingleNode("여권만료일").InnerText;
                        SelNode.Attributes.GetNamedItem("issueCountry").InnerText = PaxInfo.SelectSingleNode("여권발행국코드").InnerText;
                        SelNode.Attributes.GetNamedItem("holderNationality").InnerText = PaxInfo.SelectSingleNode("여권국적코드").InnerText;
                        SelNode.Attributes.GetNamedItem("writeDate").InnerText = PaxInfo.SelectSingleNode("여권정보등록일").InnerText;

                        SelNode = NewPaxData.SelectSingleNode("tourMileage");
                        SelNode.Attributes.GetNamedItem("memberClass").InnerText = PaxInfo.SelectSingleNode("회원구분").InnerText;
                        SelNode.Attributes.GetNamedItem("cardNumber").InnerText = PaxInfo.SelectSingleNode("마일리지카드번호").InnerText;
                        SelNode.Attributes.GetNamedItem("request").InnerText = PaxInfo.SelectSingleNode("마일리지적립여부").InnerText;
                        SelNode.Attributes.GetNamedItem("mileage").InnerText = PaxInfo.SelectSingleNode("투어마일리지").InnerText;
                    }

                    return XmlDoc.DocumentElement;
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, OID, 0).ToErrors;
            }
        }

		/// <summary>
		/// 예약조회(PNR 이용)
		/// </summary>
		/// <param name="SNM">사이트번호</param>
		/// <param name="GDS">GDS코드</param>
		/// <param name="PNR">PNR</param>
        /// <param name="GUID">고유번호</param>
		/// <returns></returns>
        public XmlElement SearchBookingPNR(int SNM, string GDS, string PNR, string GUID)
		{
			XmlElement Session;
			XmlElement ResXml;

			if (String.Compare(GDS, "Amadeus", true).Equals(0) || String.Compare(GDS, "Topas", true).Equals(0))
			{
				string SID = String.Empty;
				string SCT = String.Empty;
				int SQN = 0;
				
				try
				{
					//### 01.세션생성 #####
					Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

					SID = Session.SelectSingleNode("session/sessionId").InnerText;
					SCT = Session.SelectSingleNode("session/securityToken").InnerText;
					SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

					//### 02.PNR조회(PNR_Retrieve) #####
					ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

					//### 03.운임Pricing(Fare_PricePNRWithBookingClass) #####
					//ResXml = amd.PricePNRWithBookingClassRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), "");

					//### 04.세션종료 #####
					SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"));
				}
				catch (Exception ex)
				{
					//### 세션종료 #####
					if (SQN > 0)
						amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                    throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0);
				}
			}
            else if (String.Compare(GDS, "Abacus_TravelItineraryRead", true).Equals(0))
            {
                string CID = String.Empty;
                string STK = String.Empty;

                try
                {
                    //### 01.세션생성 #####
                    Session = aas.SessionCreate();
                    CID = Session.ChildNodes[0].InnerText;
                    STK = Session.ChildNodes[1].InnerText;

                    //### 02.PNR조회(PNR_Retrieve) #####
                    ResXml = aas.TravelItineraryReadRS(CID, STK, PNR, String.Concat(GUID, "-02"));

                    XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                    xnMgr.AddNamespace("stl", AbacusConfig.NamespaceURL("TravelItineraryRead_stl"));

                    //오류시
                    if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
                    {
                        if (ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText.Trim().Equals("NAK3 - UPDATED PNR CURRENTLY IN AAA - FINISH OR IGNORE"))
                        {
                            aas.AbacusCommand(CID, STK, "E", String.Concat(GUID, "-03"));
                            ResXml = aas.TravelItineraryReadRS(CID, STK, PNR, String.Concat(GUID, "-03"));

                            //오류시
                            if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
                                throw new Exception(ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText);
                        }
                        else
                            throw new Exception(ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText);
                    }

                    //### 03.세션종료 #####
                    aas.SessionClose(CID, STK);
                    CID = "";
                    STK = "";
                }
                catch (Exception ex)
                {
                    //### 세션종료 #####
                    if (!String.IsNullOrWhiteSpace(CID))
                        aas.SessionClose(CID, STK);

                    throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0);
                }
            }
            else if (String.Compare(GDS, "Abacus", true).Equals(0))
            {
                string CID = String.Empty;
                string STK = String.Empty;

                try
                {
                    //### 01.세션생성 #####
                    Session = aas.SessionCreate();
                    CID = Session.ChildNodes[0].InnerText;
                    STK = Session.ChildNodes[1].InnerText;

                    //### 02.PNR조회(PNR_Retrieve) #####
                    ResXml = aas.GetReservationRS(CID, STK, PNR, String.Concat(GUID, "-02"));

                    XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                    xnMgr.AddNamespace("stl19", AbacusConfig.NamespaceURL("GetReservation_stl19"));
                    xnMgr.AddNamespace("or114", AbacusConfig.NamespaceURL("GetReservation_or114"));

                    //오류시
                    if (ResXml.SelectNodes("stl19:Errors", xnMgr).Count > 0)
                    {
                        if (ResXml.SelectSingleNode("stl19:Errors/stl19:Error/stl19:Message", xnMgr).InnerText.Trim().Equals("NAK3 - UPDATED PNR CURRENTLY IN AAA - FINISH OR IGNORE"))
                        {
                            aas.AbacusCommand(CID, STK, "E", String.Concat(GUID, "-03"));
                            ResXml = aas.GetReservationRS(CID, STK, PNR, String.Concat(GUID, "-03"));

                            //오류시
                            if (ResXml.SelectNodes("stl19:Errors", xnMgr).Count > 0)
                                throw new Exception(ResXml.SelectSingleNode("stl19:Errors/stl19:Error/stl19:Message", xnMgr).InnerText);
                        }
                        else
                            throw new Exception(ResXml.SelectSingleNode("stl19:Errors/stl19:Error/stl19:Message", xnMgr).InnerText);
                    }

                    //### 03.세션종료 #####
                    aas.SessionClose(CID, STK);
                    CID = "";
                    STK = "";
                }
                catch (Exception ex)
                {
                    //### 세션종료 #####
                    if (!String.IsNullOrWhiteSpace(CID))
                        aas.SessionClose(CID, STK);

                    throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0);
                }
            }
            else if (String.Compare(GDS, "Galileo", true).Equals(0))
            {
                try
                {
                    //### 01.PNR조회(PNR_Retrieve) #####
                    ResXml = gas.PnrInfoDisplayRS("0", PNR, "G", GUID);

                    //오류시
                    if (!ResXml.SelectSingleNode("ResultErrorNo").InnerText.Equals("0"))
                        throw new Exception(ResXml.SelectSingleNode("ResultMsg").InnerText);
                }
                catch (Exception ex)
                {
                    throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0);
                }
            }
			else
				throw new Exception("GDS 정보가 없습니다.");

			return ResXml;
		}

		/// <summary>
		/// 예약조회(PNR 이용) - 통합용 구조로 리턴
		/// </summary>
		/// <param name="SNM">사이트번호</param>
		/// <param name="GDS">GDS코드</param>
		/// <param name="PNR">PNR</param>
        /// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
        /// <param name="GUID">고유번호</param>
		/// <returns></returns>
		public XmlElement ModeSearchBookingPNR(int SNM, string GDS, string PNR, string ROT, string GUID)
		{
			return ToModeSearchBookingPNR(SNM, GDS, ROT, SearchBookingPNR(SNM, GDS, PNR, GUID));
		}

        /// <summary>
        /// 예약조회(DB 예약정보 이용) - 여행기간이 지난 예약
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="GDS">GDS코드</param>
        /// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
        /// <param name="BookXml">DB에 저장되어 있는 예약XML</param>
        /// <param name="GUID">고유번호</param>
        /// <returns></returns>
        public XmlElement ModeSearchBookingPastPNR(int SNM, string GDS, string ROT, string BookXml, string GUID)
        {
            XmlDocument XmlBook = new XmlDocument();
            XmlBook.LoadXml(BookXml);

            if (XmlBook.SelectNodes("prs_output").Count > 0)
                GDS = "Sabre";

            return ToModeSearchBookingPNR(SNM, GDS, ROT, XmlBook.DocumentElement);
        }

        /// <summary>
        /// 예약조회(DB 예약정보 이용) - 취소된 예약
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="GDS">GDS코드</param>
        /// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
        /// <param name="BookXml">DB에 저장되어 있는 예약XML</param>
        /// <param name="GUID">고유번호</param>
        /// <returns></returns>
        public XmlElement ModeSearchBookingCancelPNR(int SNM, string GDS, string ROT, string BookXml, string GUID)
        {
            XmlDocument XmlBook = new XmlDocument();
            XmlBook.LoadXml(BookXml);
            
            //Sabre의 경우 XML 구조가 Abacus와 달라 구분해 준다
            if (XmlBook.FirstChild.Name.Equals("prs_output"))
                GDS = "Sabre";

            XmlElement ModeXml = ToModeSearchBookingPNR(SNM, GDS, ROT, XmlBook.DocumentElement);

            //여정의 상태값 취소 처리
            foreach (XmlNode Seg in ModeXml.SelectNodes("flightInfo/segGroup/seg"))
            {
                Seg.Attributes.GetNamedItem("rsco").InnerText = "XX";
                Seg.Attributes.GetNamedItem("rsc").InnerText = "XX";
            }

            return ModeXml;
        }

        /// <summary>
        /// PNR 조회 결과를 통합용 구조로 변경
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="GDS">GDS코드</param>
        /// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
        /// <param name="ResXml">PNR 조회 결과</param>
        /// <returns></returns>
        public XmlElement ToModeSearchBookingPNR(int SNM, string GDS, string ROT, XmlElement ResXml)
        {
            if (String.Compare(GDS, "Amadeus", true).Equals(0) || String.Compare(GDS, "Topas", true).Equals(0))
            {
                XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                //오류 결과일 경우 예외 처리
                if (ResXml.SelectNodes("m:applicationError/m:errorText", xnMgr).Count > 0)
                    throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorText/m:errorFreeText", xnMgr).InnerText);

                return ToModeSearchBookingAmadeus(SNM, ROT, ResXml, xnMgr);
            }
            else if (String.Compare(GDS, "Abacus", true).Equals(0))
            {
                if (ResXml.Attributes.GetNamedItem("Version").InnerText.Equals("3.10.0"))
                {
                    XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                    xnMgr.AddNamespace("stl", AbacusConfig.NamespaceURL("TravelItineraryRead_stl"));
                    xnMgr.AddNamespace("tir310", AbacusConfig.NamespaceURL("TravelItineraryRead_tir310"));

                    //오류 결과일 경우 예외 처리
                    if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
                        throw new Exception(ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText);

                    return ToModeSearchBookingAbacus_TravelItineraryRead(ResXml, xnMgr);
                }
                else
                {
                    XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                    xnMgr.AddNamespace("stl19", AbacusConfig.NamespaceURL("GetReservation_stl19"));
                    xnMgr.AddNamespace("or114", AbacusConfig.NamespaceURL("GetReservation_or114"));

                    //오류 결과일 경우 예외 처리
                    if (ResXml.SelectNodes("stl19:Errors", xnMgr).Count > 0)
                        throw new Exception(ResXml.SelectSingleNode("stl19:Errors/stl19:Error/stl19:Message", xnMgr).InnerText);

                    return ToModeSearchBookingAbacus(ResXml, xnMgr);
                }
            }
            else if (String.Compare(GDS, "Sabre", true).Equals(0))
            {
                //오류 결과일 경우 예외 처리
                if (ResXml.SelectSingleNode("error_no").InnerText != "0")
                    throw new Exception(ResXml.SelectSingleNode("error_desc").InnerText);

                return ToModeSearchBookingSabre(ResXml);
            }
            else if (String.Compare(GDS, "Galileo", true).Equals(0))
            {
                //오류 결과일 경우 예외 처리
                if (!ResXml.SelectSingleNode("ResultErrorNo").InnerText.Equals("0"))
                    throw new Exception(ResXml.SelectSingleNode("ResultMsg").InnerText);
                
                return ToModeSearchBookingGalileo(ResXml);
            }
            else
                throw new Exception("GDS 정보가 없습니다.");
        }

		/// <summary>
		/// SearchBookingRS를 통합용 XML구조로 치환
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)</param>
		/// <param name="ResXml">SearchBookingRS의 Data</param>
		/// <returns></returns>
        protected XmlElement ToModeSearchBookingAmadeus(int SNM, string ROT, XmlElement ResXml, XmlNamespaceManager xnMgr)
		{
			XmlDocument XmlDoc = new XmlDocument();
			XmlDoc.Load(mc.XmlFullPath("SearchBookingRS"));
			
			XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

			//기본정보
			XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");
			BookingInfo.SelectSingleNode("bookingNo").InnerText = ResXml.SelectSingleNode("m:pnrHeader/m:reservationInfo/m:reservation[m:companyId='KE']/m:controlNumber", xnMgr).InnerText;
			BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = ResXml.SelectSingleNode("m:pnrHeader/m:reservationInfo/m:reservation[m:companyId='1A']/m:controlNumber", xnMgr).InnerText;
			//BookingInfo.SelectSingleNode("bookingTL").Attributes.GetNamedItem("ttl").InnerText = (ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv/m:ticketElement/m:ticket[m:indicator='TL']", xnMgr).Count > 0) ? cm.ConvertToDateTime(ResXml.SelectSingleNode("m:dataElementsMaster/m:dataElementsIndiv/m:ticketElement/m:ticket[m:indicator='TL']/m:date", xnMgr).InnerText, (ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv/m:ticketElement/m:ticket[m:indicator='TL']/m:time", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:dataElementsMaster/m:dataElementsIndiv/m:ticketElement/m:ticket[m:indicator='TL']/m:time", xnMgr).InnerText : "2200") : "";
            BookingInfo.SelectSingleNode("bookingTL").Attributes.GetNamedItem("ttl").InnerText = SelectATLBase(0, 0, "Amadeus", "N", ResXml);

			//여정
			XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
			XmlNode SegmentGroup = FlightInfo.SelectSingleNode("segGroup");
			XmlNode Segment = SegmentGroup.SelectSingleNode("seg");
			XmlNode StopSegment = Segment.SelectSingleNode("seg");
			XmlNode NewSegmentGroup = null;
			XmlNode NewSegment;
			XmlNode NewStopSegment1;
            XmlNode NewStopSegment2;
			int idx = 1;

			//예약시 여정그룹 정보를 저장한 내용을 이용할 경우
			if (ResXml.SelectNodes("m:segmentGroupingInfo[m:groupingCode='MODE']", xnMgr).Count > 0)
			{
				foreach (XmlNode MarriageDetail in ResXml.SelectNodes("m:segmentGroupingInfo[m:groupingCode='MODE']/m:marriageDetail", xnMgr))
				{
					NewSegmentGroup = FlightInfo.AppendChild(SegmentGroup.CloneNode(false));
					NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = (idx++).ToString();

					foreach (XmlNode TatooNum in MarriageDetail.SelectNodes("m:tatooNum", xnMgr))
					{
						XmlNode ItineraryInfo = ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:travelProduct/m:productDetails/m:identification!='ARNK']", xnMgr)[cm.RequestInt(TatooNum.InnerText) - 1];

						NewSegment = NewSegmentGroup.AppendChild(Segment.CloneNode(false));
						NewSegment.Attributes.GetNamedItem("ref").InnerText = TatooNum.InnerText;
						NewSegment.Attributes.GetNamedItem("dlc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("alc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("ddt").InnerText = (ItineraryInfo.SelectNodes("m:travelProduct/m:product/m:depDate", xnMgr).Count > 0) ? cm.ConvertToDateTime(ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:depDate", xnMgr).InnerText, ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:depTime", xnMgr).InnerText) : "";
						NewSegment.Attributes.GetNamedItem("ardt").InnerText = (ItineraryInfo.SelectNodes("m:travelProduct/m:product/m:arrDate", xnMgr).Count > 0) ? cm.ConvertToDateTime(ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:arrDate", xnMgr).InnerText, ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:arrTime", xnMgr).InnerText) : "";
						NewSegment.Attributes.GetNamedItem("mcc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:companyDetail/m:identification", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("occ").InnerText = (ItineraryInfo.SelectNodes("m:legInfo/m:legTravelProduct/m:companyDetails/m:operatingCompany", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:legInfo/m:legTravelProduct/m:companyDetails/m:operatingCompany", xnMgr).InnerText : NewSegment.Attributes.GetNamedItem("mcc").InnerText;
						NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(ItineraryInfo.SelectSingleNode("m:travelProduct/m:productDetails/m:identification", xnMgr).InnerText);
						NewSegment.Attributes.GetNamedItem("eqt").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:equipment", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:equipment", xnMgr).InnerText : "";
						NewSegment.Attributes.GetNamedItem("stn").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:numOfStops", xnMgr).Count > 0) ? cm.RequestInt(ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:numOfStops", xnMgr).InnerText).ToString() : "";
						NewSegment.Attributes.GetNamedItem("etc").InnerText = (ItineraryInfo.SelectNodes("m:travelProduct/m:typeDetail/m:detail", xnMgr).Count > 0) ? ((ItineraryInfo.SelectSingleNode("m:travelProduct/m:typeDetail/m:detail", xnMgr).InnerText.Equals("ET")) ? "Y" : "N") : "";
						NewSegment.Attributes.GetNamedItem("rbd").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:productDetails/m:classOfService", xnMgr).InnerText;
						//NewSegment.Attributes.GetNamedItem("rsco").InnerText = (ItineraryInfo.SelectNodes("m:relatedProduct/m:status", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:relatedProduct/m:status", xnMgr).InnerText : "";
                        NewSegment.Attributes.GetNamedItem("rsco").InnerText = ItineraryStatus(ItineraryInfo, xnMgr);
						NewSegment.Attributes.GetNamedItem("rsc").InnerText = Common.BookingStatusCode(NewSegment.Attributes.GetNamedItem("rsco").InnerText);
						NewSegment.Attributes.GetNamedItem("eft").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:duration", xnMgr).Count > 0) ? cm.ConvertToDateTime(ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:duration", xnMgr).InnerText) : "";
                        NewSegment.Attributes.GetNamedItem("pnr").InnerText = (ItineraryInfo.SelectNodes("m:itineraryReservationInfo", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:itineraryReservationInfo/m:reservation/m:controlNumber", xnMgr).InnerText : "";
                        NewSegment.Attributes.GetNamedItem("dtc").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:departureInformation", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:flightDetail/m:departureInformation/m:departTerminal", xnMgr).InnerText : "";
                        NewSegment.Attributes.GetNamedItem("atc").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:arrivalStationInfo", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:flightDetail/m:arrivalStationInfo/m:terminal", xnMgr).InnerText : "";

						if (NewSegment.Attributes.GetNamedItem("stn").InnerText.Equals("1"))
						{
							XmlNode StopDetails1 = ItineraryInfo.SelectSingleNode("m:legInfo[1]", xnMgr);
							XmlNode StopDetails2 = ItineraryInfo.SelectSingleNode("m:legInfo[2]", xnMgr);

							NewStopSegment1 = NewSegment.AppendChild(StopSegment.CloneNode(false));
							NewStopSegment1.Attributes.GetNamedItem("dlc").InnerText = StopDetails1.SelectSingleNode("m:legTravelProduct/m:boardPointDetails/m:trueLocationId", xnMgr).InnerText;
							NewStopSegment1.Attributes.GetNamedItem("alc").InnerText = StopDetails1.SelectSingleNode("m:legTravelProduct/m:offpointDetails/m:trueLocationId", xnMgr).InnerText;
							NewStopSegment1.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(StopDetails1.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureDate", xnMgr).InnerText, StopDetails1.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureTime", xnMgr).InnerText);
							NewStopSegment1.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(StopDetails1.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalDate", xnMgr).InnerText, StopDetails1.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalTime", xnMgr).InnerText);
                            NewStopSegment1.Attributes.GetNamedItem("eft").InnerText = "";
                            NewStopSegment1.Attributes.GetNamedItem("gwt").InnerText = "";

							NewStopSegment2 = NewSegment.AppendChild(StopSegment.CloneNode(false));
							NewStopSegment2.Attributes.GetNamedItem("dlc").InnerText = StopDetails2.SelectSingleNode("m:legTravelProduct/m:boardPointDetails/m:trueLocationId", xnMgr).InnerText;
							NewStopSegment2.Attributes.GetNamedItem("alc").InnerText = StopDetails2.SelectSingleNode("m:legTravelProduct/m:offpointDetails/m:trueLocationId", xnMgr).InnerText;
							NewStopSegment2.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(StopDetails2.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureDate", xnMgr).InnerText, StopDetails2.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureTime", xnMgr).InnerText);
							NewStopSegment2.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(StopDetails2.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalDate", xnMgr).InnerText, StopDetails2.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalTime", xnMgr).InnerText);
                            NewStopSegment2.Attributes.GetNamedItem("eft").InnerText = "";
                            NewStopSegment2.Attributes.GetNamedItem("gwt").InnerText = cm.CalWaitingTime(NewStopSegment1.Attributes.GetNamedItem("ardt").InnerText, NewStopSegment2.Attributes.GetNamedItem("ddt").InnerText);
						}
					}
				}

				//오픈여정 별도 추가
				if (ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR' and m:travelProduct/m:productDetails/m:identification='OPEN']", xnMgr).Count > 0)
				{
					NewSegmentGroup = FlightInfo.AppendChild(SegmentGroup.CloneNode(false));
					NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = (idx++).ToString();

					foreach (XmlNode ItineraryInfo in ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR' and m:travelProduct/m:productDetails/m:identification='OPEN']", xnMgr))
					{
						NewSegment = NewSegmentGroup.AppendChild(Segment.CloneNode(false));
						NewSegment.Attributes.GetNamedItem("ref").InnerText = ItineraryInfo.SelectSingleNode("m:elementManagementItinerary/m:reference[m:qualifier='ST']/m:number", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("dlc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("alc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("ddt").InnerText = "";
						NewSegment.Attributes.GetNamedItem("ardt").InnerText = "";
						NewSegment.Attributes.GetNamedItem("mcc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:companyDetail/m:identification", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("occ").InnerText = "";
						NewSegment.Attributes.GetNamedItem("fln").InnerText = "";
						NewSegment.Attributes.GetNamedItem("eqt").InnerText = "";
						NewSegment.Attributes.GetNamedItem("stn").InnerText = "0";
						NewSegment.Attributes.GetNamedItem("etc").InnerText = "";
						NewSegment.Attributes.GetNamedItem("rbd").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:productDetails/m:classOfService", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("rsco").InnerText = "QQ";
						NewSegment.Attributes.GetNamedItem("rsc").InnerText = "QQ";
						NewSegment.Attributes.GetNamedItem("eft").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("pnr").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("dtc").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("atc").InnerText = "";
					}
				}
			}
			else
			{
				//Retrieve의 결과중 그루핑 정보를 이용할 경우(오프라인 수정시 SEG그룹 정보가 삭제되는 경우가 있어 사용하지 않는다.)
                //11번가(4924,4929)의 경우 여정 그루핑 처리(2017-01-23,정성하과장)
                //티몬(4925,4926)의 경우 여정 그루핑 처리(2017-09-01,박주영차장)
                //이베이(5020,5119,5161,5163,5162,5164)의 경우 여정 그루핑 처리(2018-02-05,고재영)
                //오프라인(67)의 경우 여정 그루핑 처리(2019-04-10,고재영)
                if (SNM.Equals(2) || SNM.Equals(3915) || SNM.Equals(4924) || SNM.Equals(4929) || SNM.Equals(4925) || SNM.Equals(4926) || SNM.Equals(5020) || SNM.Equals(5119) || SNM.Equals(5161) || SNM.Equals(5163) || SNM.Equals(5162) || SNM.Equals(5164) || SNM.Equals(67))
				{
                    int ItineraryInfoStep = 0;
                    int SegmentGroupingInfoStep1 = 0;
                    int SegmentGroupingInfoStep2 = 999;
                    int SegGroupStep = 1;
                    bool SegGroupYN = false;
                    string ArrDate = string.Empty;

                    string[] ArrSegmentGroupingInfo = new String[ResXml.SelectNodes("m:segmentGroupingInfo[m:groupingCode='CNX']", xnMgr).Count];

                    foreach (XmlNode SegmentGroupingInfo in ResXml.SelectNodes("m:segmentGroupingInfo[m:groupingCode='CNX']", xnMgr))
                    {
                        foreach (XmlNode TatooNum in SegmentGroupingInfo.SelectNodes("m:marriageDetail/m:tatooNum", xnMgr))
                            ArrSegmentGroupingInfo[SegmentGroupingInfoStep1] += String.Concat(TatooNum.InnerText, "/");

                        SegmentGroupingInfoStep1++;
                    }

                    SegmentGroupingInfoStep1 = 0;

                    foreach (XmlNode ItineraryInfo in ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR' and m:travelProduct/m:boardpointDetail]", xnMgr))
                    {
                        string TatooNum = ItineraryInfo.SelectSingleNode("m:elementManagementItinerary/m:reference[m:qualifier='ST']/m:number", xnMgr).InnerText;

                        ItineraryInfoStep++;
                        SegGroupYN = false;

                        for (int i = 0; i < ArrSegmentGroupingInfo.Length; i++)
                        {
                            if (ArrSegmentGroupingInfo[i].IndexOf(String.Concat(TatooNum, "/")) != -1)
                            {
                                SegmentGroupingInfoStep1 = i;
                                SegGroupYN = true;
                                break;
                            }
                        }

                        if (SegGroupYN && !SegmentGroupingInfoStep2.Equals(SegmentGroupingInfoStep1))
                        {
                            NewSegmentGroup = FlightInfo.AppendChild(SegmentGroup.CloneNode(false));
                            NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = (SegGroupStep++).ToString();

                            SegmentGroupingInfoStep2 = SegmentGroupingInfoStep1;
                            ArrDate = string.Empty;
                        }
                        else if (!SegGroupYN || ItineraryInfoStep.Equals(1))
                        {
                            NewSegmentGroup = FlightInfo.AppendChild(SegmentGroup.CloneNode(false));
                            NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = (SegGroupStep++).ToString();
                            ArrDate = string.Empty;
                        }

                        NewSegment = NewSegmentGroup.AppendChild(Segment.CloneNode(false));
                        NewSegment.Attributes.GetNamedItem("ref").InnerText = TatooNum;
                        NewSegment.Attributes.GetNamedItem("dlc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("alc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("ddt").InnerText = (ItineraryInfo.SelectNodes("m:travelProduct/m:product/m:depDate", xnMgr).Count > 0) ? ((ItineraryInfo.SelectNodes("m:travelProduct/m:product/m:depTime", xnMgr).Count > 0) ? cm.ConvertToDateTime(ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:depDate", xnMgr).InnerText, ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:depTime", xnMgr).InnerText) : cm.RequestDateTime(ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:depDate", xnMgr).InnerText)) : "";
                        NewSegment.Attributes.GetNamedItem("ardt").InnerText = (ItineraryInfo.SelectNodes("m:travelProduct/m:product/m:arrDate", xnMgr).Count > 0) ? cm.ConvertToDateTime(ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:arrDate", xnMgr).InnerText, ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:arrTime", xnMgr).InnerText) : "";
                        NewSegment.Attributes.GetNamedItem("mcc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:companyDetail/m:identification", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("occ").InnerText = (ItineraryInfo.SelectNodes("m:legInfo/m:legTravelProduct/m:companyDetails/m:operatingCompany", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:legInfo/m:legTravelProduct/m:companyDetails/m:operatingCompany", xnMgr).InnerText : NewSegment.Attributes.GetNamedItem("mcc").InnerText;
                        NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(ItineraryInfo.SelectSingleNode("m:travelProduct/m:productDetails/m:identification", xnMgr).InnerText);
                        NewSegment.Attributes.GetNamedItem("eqt").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:equipment", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:equipment", xnMgr).InnerText : "";
                        NewSegment.Attributes.GetNamedItem("stn").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:numOfStops", xnMgr).Count > 0) ? cm.RequestInt(ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:numOfStops", xnMgr).InnerText).ToString() : "";
                        NewSegment.Attributes.GetNamedItem("etc").InnerText = (ItineraryInfo.SelectNodes("m:travelProduct/m:typeDetail/m:detail", xnMgr).Count > 0) ? ((ItineraryInfo.SelectSingleNode("m:travelProduct/m:typeDetail/m:detail", xnMgr).InnerText.Equals("ET")) ? "Y" : "N") : "";
                        NewSegment.Attributes.GetNamedItem("rbd").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:productDetails/m:classOfService", xnMgr).InnerText;
                        //NewSegment.Attributes.GetNamedItem("rsco").InnerText = (ItineraryInfo.SelectNodes("m:relatedProduct/m:status", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:relatedProduct/m:status", xnMgr).InnerText : (ItineraryInfo.SelectSingleNode("m:travelProduct/m:productDetails/m:identification", xnMgr).InnerText.Equals("OPEN") ? "QQ" : "");
                        NewSegment.Attributes.GetNamedItem("rsco").InnerText = ItineraryStatus(ItineraryInfo, xnMgr);
                        NewSegment.Attributes.GetNamedItem("rsc").InnerText = Common.BookingStatusCode(NewSegment.Attributes.GetNamedItem("rsco").InnerText);
                        NewSegment.Attributes.GetNamedItem("eft").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:duration", xnMgr).Count > 0) ? cm.ConvertToDateTime(ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:duration", xnMgr).InnerText) : "";
                        NewSegment.Attributes.GetNamedItem("ewt").InnerText = String.IsNullOrWhiteSpace(ArrDate) ? "" : cm.ElapseFlyingTime(ArrDate, NewSegment.Attributes.GetNamedItem("ddt").InnerText);
                        NewSegment.Attributes.GetNamedItem("pnr").InnerText = (ItineraryInfo.SelectNodes("m:itineraryReservationInfo", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:itineraryReservationInfo/m:reservation/m:controlNumber", xnMgr).InnerText : "";
                        NewSegment.Attributes.GetNamedItem("dtc").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:departureInformation", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:flightDetail/m:departureInformation/m:departTerminal", xnMgr).InnerText : "";
                        NewSegment.Attributes.GetNamedItem("atc").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:arrivalStationInfo", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:flightDetail/m:arrivalStationInfo/m:terminal", xnMgr).InnerText : "";

                        if (NewSegment.Attributes.GetNamedItem("stn").InnerText.Equals("1") && ItineraryInfo.SelectNodes("m:legInfo", xnMgr).Count > 0)
                        {
                            XmlElement FlightInfoXml = null;

                            //**제휴사 예약 후 모두닷컴 조회가 가능하기 때문에 전체 오픈(2018-04-05)
                            //모두닷컴(모바일) 및 이베이의 경우 기착지에 대한 상세정보 출력을 위해서 비행상세정보 조회
                            if (SNM.Equals(2) || SNM.Equals(3915) || SNM.Equals(5020) || SNM.Equals(5119) || SNM.Equals(5161) || SNM.Equals(5163) || SNM.Equals(5162) || SNM.Equals(5164))
                            {
                                FlightInfoXml = FlightInfoRS(SNM, NewSegment.Attributes.GetNamedItem("ddt").InnerText, "", NewSegment.Attributes.GetNamedItem("dlc").InnerText, NewSegment.Attributes.GetNamedItem("alc").InnerText, NewSegment.Attributes.GetNamedItem("mcc").InnerText, NewSegment.Attributes.GetNamedItem("occ").InnerText, NewSegment.Attributes.GetNamedItem("fln").InnerText);
                            }

                            if (FlightInfoXml != null && FlightInfoXml.SelectNodes("flightInfo").Count > 0)
                            {
                                int TotalEFT = 0;
                                int TotalGWT = 0;
                                
                                foreach (XmlNode LegInfo in FlightInfoXml.SelectNodes("flightInfo/flightIndex/segGroup/seg"))
                                {
                                    TotalEFT += cm.ChangeMinutes(LegInfo.Attributes.GetNamedItem("eft").InnerText);
                                    TotalGWT += cm.ChangeMinutes(LegInfo.Attributes.GetNamedItem("gwt").InnerText);
                                    
                                    NewSegment.AppendChild(XmlDoc.ImportNode(LegInfo, true));
                                }

                                NewSegment.Attributes.GetNamedItem("eft").InnerText = cm.ChangeTime(TotalEFT);
                                NewSegment.Attributes.GetNamedItem("ewt").InnerText = TotalGWT.Equals(0) ? "" : cm.ChangeTime(TotalGWT);
                            }
                            else
                            {
                                XmlNode StopDetails1 = ItineraryInfo.SelectSingleNode("m:legInfo[1]", xnMgr);
                                XmlNode StopDetails2 = ItineraryInfo.SelectSingleNode("m:legInfo[2]", xnMgr);

                                NewStopSegment1 = NewSegment.AppendChild(StopSegment.CloneNode(false));
                                NewStopSegment1.Attributes.GetNamedItem("dlc").InnerText = StopDetails1.SelectSingleNode("m:legTravelProduct/m:boardPointDetails/m:trueLocationId", xnMgr).InnerText;
                                NewStopSegment1.Attributes.GetNamedItem("alc").InnerText = StopDetails1.SelectSingleNode("m:legTravelProduct/m:offpointDetails/m:trueLocationId", xnMgr).InnerText;
                                NewStopSegment1.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(StopDetails1.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureDate", xnMgr).InnerText, StopDetails1.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureTime", xnMgr).InnerText);
                                NewStopSegment1.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(StopDetails1.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalDate", xnMgr).InnerText, StopDetails1.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalTime", xnMgr).InnerText);
                                NewStopSegment1.Attributes.GetNamedItem("eft").InnerText = "";
                                NewStopSegment1.Attributes.GetNamedItem("gwt").InnerText = "";

                                NewStopSegment2 = NewSegment.AppendChild(StopSegment.CloneNode(false));
                                NewStopSegment2.Attributes.GetNamedItem("dlc").InnerText = StopDetails2.SelectSingleNode("m:legTravelProduct/m:boardPointDetails/m:trueLocationId", xnMgr).InnerText;
                                NewStopSegment2.Attributes.GetNamedItem("alc").InnerText = StopDetails2.SelectSingleNode("m:legTravelProduct/m:offpointDetails/m:trueLocationId", xnMgr).InnerText;
                                NewStopSegment2.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(StopDetails2.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureDate", xnMgr).InnerText, StopDetails2.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureTime", xnMgr).InnerText);
                                NewStopSegment2.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(StopDetails2.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalDate", xnMgr).InnerText, StopDetails2.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalTime", xnMgr).InnerText);
                                NewStopSegment2.Attributes.GetNamedItem("eft").InnerText = "";
                                NewStopSegment2.Attributes.GetNamedItem("gwt").InnerText = cm.CalWaitingTime(NewStopSegment1.Attributes.GetNamedItem("ardt").InnerText, NewStopSegment2.Attributes.GetNamedItem("ddt").InnerText);
                            }
                        }

                        //도착시간(대기시간을 계산하기 위해 저장)
                        ArrDate = NewSegment.Attributes.GetNamedItem("ardt").InnerText;
                    }
				}
				else
				{
					foreach (XmlNode ItineraryInfo in ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR' and m:travelProduct/m:boardpointDetail]", xnMgr))
					{
						NewSegmentGroup = FlightInfo.AppendChild(SegmentGroup.CloneNode(false));
						NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = (idx++).ToString();

						NewSegment = NewSegmentGroup.AppendChild(Segment.CloneNode(false));
						NewSegment.Attributes.GetNamedItem("ref").InnerText = "1";
						NewSegment.Attributes.GetNamedItem("dlc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("alc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("ddt").InnerText = (ItineraryInfo.SelectNodes("m:travelProduct/m:product/m:depDate", xnMgr).Count > 0) ? ((ItineraryInfo.SelectNodes("m:travelProduct/m:product/m:depTime", xnMgr).Count > 0) ? cm.ConvertToDateTime(ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:depDate", xnMgr).InnerText, ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:depTime", xnMgr).InnerText) : cm.RequestDateTime(ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:depDate", xnMgr).InnerText)) : "";
						NewSegment.Attributes.GetNamedItem("ardt").InnerText = (ItineraryInfo.SelectNodes("m:travelProduct/m:product/m:arrDate", xnMgr).Count > 0) ? cm.ConvertToDateTime(ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:arrDate", xnMgr).InnerText, ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:arrTime", xnMgr).InnerText) : "";
						NewSegment.Attributes.GetNamedItem("mcc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:companyDetail/m:identification", xnMgr).InnerText;
						NewSegment.Attributes.GetNamedItem("occ").InnerText = (ItineraryInfo.SelectNodes("m:legInfo/m:legTravelProduct/m:companyDetails/m:operatingCompany", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:legInfo/m:legTravelProduct/m:companyDetails/m:operatingCompany", xnMgr).InnerText : NewSegment.Attributes.GetNamedItem("mcc").InnerText;
						NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(ItineraryInfo.SelectSingleNode("m:travelProduct/m:productDetails/m:identification", xnMgr).InnerText);
						NewSegment.Attributes.GetNamedItem("eqt").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:equipment", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:equipment", xnMgr).InnerText : "";
						NewSegment.Attributes.GetNamedItem("stn").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:numOfStops", xnMgr).Count > 0) ? cm.RequestInt(ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:numOfStops", xnMgr).InnerText).ToString() : "";
						NewSegment.Attributes.GetNamedItem("etc").InnerText = (ItineraryInfo.SelectNodes("m:travelProduct/m:typeDetail/m:detail", xnMgr).Count > 0) ? ((ItineraryInfo.SelectSingleNode("m:travelProduct/m:typeDetail/m:detail", xnMgr).InnerText.Equals("ET")) ? "Y" : "N") : "";
						NewSegment.Attributes.GetNamedItem("rbd").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:productDetails/m:classOfService", xnMgr).InnerText;
						//NewSegment.Attributes.GetNamedItem("rsco").InnerText = (ItineraryInfo.SelectNodes("m:relatedProduct/m:status", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:relatedProduct/m:status", xnMgr).InnerText : (ItineraryInfo.SelectSingleNode("m:travelProduct/m:productDetails/m:identification", xnMgr).InnerText.Equals("OPEN") ? "QQ" : "");
                        NewSegment.Attributes.GetNamedItem("rsco").InnerText = ItineraryStatus(ItineraryInfo, xnMgr);
						NewSegment.Attributes.GetNamedItem("rsc").InnerText = Common.BookingStatusCode(NewSegment.Attributes.GetNamedItem("rsco").InnerText);
						NewSegment.Attributes.GetNamedItem("eft").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:duration", xnMgr).Count > 0) ? cm.ConvertToDateTime(ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:duration", xnMgr).InnerText) : "";
                        NewSegment.Attributes.GetNamedItem("pnr").InnerText = (ItineraryInfo.SelectNodes("m:itineraryReservationInfo", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:itineraryReservationInfo/m:reservation/m:controlNumber", xnMgr).InnerText : "";
                        NewSegment.Attributes.GetNamedItem("dtc").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:departureInformation", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:flightDetail/m:departureInformation/m:departTerminal", xnMgr).InnerText : "";
                        NewSegment.Attributes.GetNamedItem("atc").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:arrivalStationInfo", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:flightDetail/m:arrivalStationInfo/m:terminal", xnMgr).InnerText : "";

						if (NewSegment.Attributes.GetNamedItem("stn").InnerText.Equals("1") && ItineraryInfo.SelectNodes("m:legInfo", xnMgr).Count > 0)
						{
							XmlNode StopDetails1 = ItineraryInfo.SelectSingleNode("m:legInfo[1]", xnMgr);
							XmlNode StopDetails2 = ItineraryInfo.SelectSingleNode("m:legInfo[2]", xnMgr);

							NewStopSegment1 = NewSegment.AppendChild(StopSegment.CloneNode(false));
							NewStopSegment1.Attributes.GetNamedItem("dlc").InnerText = StopDetails1.SelectSingleNode("m:legTravelProduct/m:boardPointDetails/m:trueLocationId", xnMgr).InnerText;
							NewStopSegment1.Attributes.GetNamedItem("alc").InnerText = StopDetails1.SelectSingleNode("m:legTravelProduct/m:offpointDetails/m:trueLocationId", xnMgr).InnerText;
							NewStopSegment1.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(StopDetails1.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureDate", xnMgr).InnerText, StopDetails1.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureTime", xnMgr).InnerText);
							NewStopSegment1.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(StopDetails1.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalDate", xnMgr).InnerText, StopDetails1.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalTime", xnMgr).InnerText);
                            NewStopSegment1.Attributes.GetNamedItem("eft").InnerText = "";
                            NewStopSegment1.Attributes.GetNamedItem("gwt").InnerText = "";

							NewStopSegment2 = NewSegment.AppendChild(StopSegment.CloneNode(false));
							NewStopSegment2.Attributes.GetNamedItem("dlc").InnerText = StopDetails2.SelectSingleNode("m:legTravelProduct/m:boardPointDetails/m:trueLocationId", xnMgr).InnerText;
							NewStopSegment2.Attributes.GetNamedItem("alc").InnerText = StopDetails2.SelectSingleNode("m:legTravelProduct/m:offpointDetails/m:trueLocationId", xnMgr).InnerText;
							NewStopSegment2.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(StopDetails2.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureDate", xnMgr).InnerText, StopDetails2.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureTime", xnMgr).InnerText);
							NewStopSegment2.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(StopDetails2.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalDate", xnMgr).InnerText, StopDetails2.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalTime", xnMgr).InnerText);
                            NewStopSegment2.Attributes.GetNamedItem("eft").InnerText = "";
                            NewStopSegment2.Attributes.GetNamedItem("gwt").InnerText = cm.CalWaitingTime(NewStopSegment1.Attributes.GetNamedItem("ardt").InnerText, NewStopSegment2.Attributes.GetNamedItem("ddt").InnerText);
						}
					}
                }

                //오픈여정 별도 추가
                if (ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR' and m:travelProduct/m:productDetails/m:identification='OPEN']", xnMgr).Count > 0)
                {
                    NewSegmentGroup = FlightInfo.AppendChild(SegmentGroup.CloneNode(false));
                    NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = (idx++).ToString();

                    foreach (XmlNode ItineraryInfo in ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:travelProduct/m:productDetails/m:identification='OPEN']", xnMgr))
                    {
                        NewSegment = NewSegmentGroup.AppendChild(Segment.CloneNode(false));
                        NewSegment.Attributes.GetNamedItem("ref").InnerText = ItineraryInfo.SelectSingleNode("m:elementManagementItinerary/m:reference[m:qualifier='ST']/m:number", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("dlc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("alc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("ddt").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("ardt").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("mcc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:companyDetail/m:identification", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("occ").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("fln").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("eqt").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("stn").InnerText = "0";
                        NewSegment.Attributes.GetNamedItem("etc").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("rbd").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:productDetails/m:classOfService", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("rsco").InnerText = "QQ";
                        NewSegment.Attributes.GetNamedItem("rsc").InnerText = "QQ";
                        NewSegment.Attributes.GetNamedItem("eft").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("pnr").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("dtc").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("atc").InnerText = "";
                    }
                }
			}

			FlightInfo.RemoveChild(SegmentGroup);

			//탑승객+요금
			XmlNode TravellerInfo = XmlDoc.SelectSingleNode("ResponseDetails/travellerInfo");
			XmlNode PaxData = TravellerInfo.SelectSingleNode("paxData");
			XmlNode Pax;
			XmlNode Passport;
			XmlNode NewPaxData;
			XmlNode PassengerData;

			XmlNode FareInfo = XmlDoc.SelectSingleNode("ResponseDetails/fareInfo");
			XmlNode Fare = FareInfo.SelectSingleNode("fare");
            XmlNode Seg = Fare.SelectSingleNode("seg");
			XmlNode TstData;
			XmlNode NewFare;
            XmlNode NewSeg;

			bool FareInfoADT = false;
			bool FareInfoCHD = false;
			bool FareInfoINF = false;

			string PTNum = string.Empty;
			string[] TmpPaxName;
			double SumTax = 0;
			double SumFsc = 0;

			idx = 1;

            //성인
            foreach (XmlNode Traveller in ResXml.SelectNodes("m:travellerInfo[m:elementManagementPassenger/m:segmentName='NM'][m:passengerData/m:travellerInformation/m:passenger/m:type!='CHD' or not(m:passengerData/m:travellerInformation/m:passenger/m:type)]", xnMgr))
			{
				PTNum = Traveller.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText;
                PassengerData = Traveller.SelectSingleNode("m:passengerData/m:travellerInformation/m:passenger[not(m:type) or (m:type!='CHD' and m:type!='INF')]", xnMgr);
					
				NewPaxData = TravellerInfo.AppendChild(PaxData.CloneNode(true));
                TmpPaxName = cm.SplitPaxType(PassengerData.SelectSingleNode("m:firstName", xnMgr).InnerText.Replace(" ", ""), false);
					
				Pax = NewPaxData.SelectSingleNode("pax");
                Pax.Attributes.GetNamedItem("ref").InnerText = (idx++).ToString(); //Traveller.SelectSingleNode("m:elementManagementPassenger/m:lineNumber", xnMgr).InnerText;
				Pax.Attributes.GetNamedItem("phn").InnerText = "";
				Pax.Attributes.GetNamedItem("psn").InnerText = Traveller.SelectSingleNode("m:passengerData/m:travellerInformation/m:traveller/m:surname", xnMgr).InnerText;
				Pax.Attributes.GetNamedItem("pfn").InnerText = TmpPaxName[1];
                Pax.Attributes.GetNamedItem("ptc").InnerText = (PassengerData.SelectNodes("m:type", xnMgr).Count > 0) ? PassengerData.SelectSingleNode("m:type", xnMgr).InnerText : "ADT";
				Pax.Attributes.GetNamedItem("ptl").InnerText = TmpPaxName[0];
				Pax.Attributes.GetNamedItem("pbd").InnerText = "";
				Pax.Attributes.GetNamedItem("gni").InnerText = "";

				//여권정보
                int DocCount = ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:serviceRequest/m:ssr/m:type='DOCS'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr).Count;
                if (DocCount > 0)
				{
                    string[] StrDocInfo = ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:serviceRequest/m:ssr/m:type='DOCS'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}'][last()]/m:serviceRequest/m:ssr/m:freeText", PTNum), xnMgr).InnerText.Split('/');

					if (StrDocInfo[7].Equals(Pax.Attributes.GetNamedItem("psn").InnerText) && StrDocInfo[8].Equals(Pax.Attributes.GetNamedItem("pfn").InnerText))
					{
						Passport = NewPaxData.SelectSingleNode("passport");
						Passport.Attributes.GetNamedItem("id").InnerText = StrDocInfo[2];
						Passport.Attributes.GetNamedItem("expireDate").InnerText = cm.ConvertToDateTime(StrDocInfo[6]);
						Passport.Attributes.GetNamedItem("issueCountry").InnerText = StrDocInfo[1];
						Passport.Attributes.GetNamedItem("holderNationality").InnerText = StrDocInfo[3];
						Passport.Attributes.GetNamedItem("writeDate").InnerText = "";

						Pax.Attributes.GetNamedItem("pbd").InnerText = cm.ConvertToBirthDate(StrDocInfo[4]);
					}
				}

				//티켓정보
                if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA' or m:elementManagementData/m:segmentName='FHE'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext[starts-with(., 'PAX')]", PTNum), xnMgr).Count > 0)
				{
                    NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText = Common.SplitAmadeusTicketNumber(ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA' or m:elementManagementData/m:segmentName='FHE'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext[starts-with(., 'PAX')]", PTNum), xnMgr).InnerText);
				}

                //항공사 마일리지 회원정보
                if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:frequentFlyerInformationGroup][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr).Count > 0)
                {
                    NewPaxData.SelectSingleNode("membership").Attributes.GetNamedItem("carrier").InnerText = ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:frequentFlyerInformationGroup/m:frequentTravellerInfo/m:frequentTraveler/m:company", PTNum), xnMgr).InnerText;
                    NewPaxData.SelectSingleNode("membership").Attributes.GetNamedItem("number").InnerText = ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:frequentFlyerInformationGroup/m:frequentTravellerInfo/m:frequentTraveler/m:membershipNumber", PTNum), xnMgr).InnerText;
                }

				//요금
				if (!FareInfoADT && ResXml.SelectNodes("m:tstData", xnMgr).Count > 0)
				{
                    TstData = ResXml.SelectSingleNode(String.Format("m:tstData[m:tstFreetext[m:freetextDetail/m:type='41']/m:longFreetext='PAX' and m:referenceForTstData/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr);
					SumTax = 0;
					SumFsc = 0;

                    if (TstData != null)
                    {
                        foreach (XmlNode TaxFields in TstData.SelectNodes("m:fareData/m:taxFields", xnMgr))
                        {
                            if (TaxFields.SelectSingleNode("m:taxCountryCode", xnMgr).InnerText.Equals("YR") || TaxFields.SelectSingleNode("m:taxCountryCode", xnMgr).InnerText.Equals("YQ"))
                                SumFsc += cm.RequestDouble(TaxFields.SelectSingleNode("m:taxAmount", xnMgr).InnerText);
                            else
                                SumTax += cm.RequestDouble(TaxFields.SelectSingleNode("m:taxAmount", xnMgr).InnerText);
                        }

                        NewFare = FareInfo.AppendChild(Fare.CloneNode(false));
                        NewFare.Attributes.GetNamedItem("ptc").InnerText = Pax.Attributes.GetNamedItem("ptc").InnerText;
                        NewFare.Attributes.GetNamedItem("amount").InnerText = TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='T']/m:amount", xnMgr).InnerText;
                        NewFare.Attributes.GetNamedItem("fare").InnerText = (TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:currencyCode", xnMgr).InnerText != "KRW" && TstData.SelectNodes("m:fareData/m:monetaryInfo[m:qualifier='E']", xnMgr).Count > 0) ? TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='E']/m:amount", xnMgr).InnerText : TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:amount", xnMgr).InnerText;
                        NewFare.Attributes.GetNamedItem("disFare").InnerText = NewFare.Attributes.GetNamedItem("fare").InnerText;
                        NewFare.Attributes.GetNamedItem("tax").InnerText = SumTax.ToString();
                        NewFare.Attributes.GetNamedItem("fsc").InnerText = SumFsc.ToString();
                        NewFare.Attributes.GetNamedItem("price").InnerText = (cm.RequestInt(NewFare.Attributes.GetNamedItem("disFare").InnerText) + cm.RequestInt(NewFare.Attributes.GetNamedItem("tax").InnerText) + cm.RequestInt(NewFare.Attributes.GetNamedItem("fsc").InnerText)).ToString();
                        NewFare.Attributes.GetNamedItem("basis").InnerText = (TstData.SelectNodes("m:fareBasisInfo/m:fareElement/m:fareBasis", xnMgr).Count > 0) ? TstData.SelectSingleNode("m:fareBasisInfo/m:fareElement/m:fareBasis", xnMgr).InnerText : "";
                        NewFare.Attributes.GetNamedItem("tkd").InnerText = (TstData.SelectNodes("m:fareBasisInfo/m:fareElement/m:ticketDesignator", xnMgr).Count > 0) ? TstData.SelectSingleNode("m:fareBasisInfo/m:fareElement/m:ticketDesignator", xnMgr).InnerText : "";

                        if (TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr).Count > 0)
                        {
                            for (int b = 0; b < TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr).Count; b++)
                            {
                                NewSeg = NewFare.AppendChild(Seg.CloneNode(false));
                                NewSeg.Attributes.GetNamedItem("ref").InnerText = TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST' and m:number != '0']", xnMgr)[b].SelectSingleNode("m:number", xnMgr).InnerText;
                                NewSeg.Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty((TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr)[b].SelectNodes("m:baggageAllowance", xnMgr).Count > 0) ? TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr)[b].SelectSingleNode("m:baggageAllowance", xnMgr).InnerText : "");
                            }
                        }

                        FareInfoADT = true;
                    }
				}
			}

            //소아
			foreach (XmlNode Traveller in ResXml.SelectNodes("m:travellerInfo[m:passengerData/m:travellerInformation/m:passenger/m:type='CHD']", xnMgr))
			{
				PTNum = Traveller.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText;
					
				NewPaxData = TravellerInfo.AppendChild(PaxData.CloneNode(true));
                TmpPaxName = cm.SplitPaxType(Traveller.SelectSingleNode("m:passengerData/m:travellerInformation/m:passenger/m:firstName", xnMgr).InnerText.Replace(" ", ""), false);

				Pax = NewPaxData.SelectSingleNode("pax");
                Pax.Attributes.GetNamedItem("ref").InnerText = (idx++).ToString(); //Traveller.SelectSingleNode("m:elementManagementPassenger/m:lineNumber", xnMgr).InnerText;
				Pax.Attributes.GetNamedItem("phn").InnerText = "";
				Pax.Attributes.GetNamedItem("psn").InnerText = Traveller.SelectSingleNode("m:passengerData/m:travellerInformation/m:traveller/m:surname", xnMgr).InnerText;
				Pax.Attributes.GetNamedItem("pfn").InnerText = TmpPaxName[1];
				Pax.Attributes.GetNamedItem("ptc").InnerText = "CHD";
				Pax.Attributes.GetNamedItem("ptl").InnerText = TmpPaxName[0];
				Pax.Attributes.GetNamedItem("pbd").InnerText = (Traveller.SelectNodes("m:passengerData/m:dateOfBirth", xnMgr).Count > 0) ? cm.ConvertToBirthDate(Traveller.SelectSingleNode("m:passengerData/m:dateOfBirth/m:dateAndTimeDetails[m:qualifier='706']/m:date", xnMgr).InnerText) : "";
				Pax.Attributes.GetNamedItem("gni").InnerText = "";

				//여권정보
				if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:serviceRequest/m:ssr/m:type='DOCS'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr).Count > 0)
				{
					string[] StrDocInfo = ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:serviceRequest/m:ssr/m:type='DOCS'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:serviceRequest/m:ssr/m:freeText", PTNum), xnMgr).InnerText.Split('/');

					if (StrDocInfo[7].Equals(Pax.Attributes.GetNamedItem("psn").InnerText) && StrDocInfo[8].Equals(Pax.Attributes.GetNamedItem("pfn").InnerText))
					{
						Passport = NewPaxData.SelectSingleNode("passport");
						Passport.Attributes.GetNamedItem("id").InnerText = StrDocInfo[2];
						Passport.Attributes.GetNamedItem("expireDate").InnerText = cm.ConvertToDateTime(StrDocInfo[6]);
						Passport.Attributes.GetNamedItem("issueCountry").InnerText = StrDocInfo[1];
						Passport.Attributes.GetNamedItem("holderNationality").InnerText = StrDocInfo[3];
						Passport.Attributes.GetNamedItem("writeDate").InnerText = "";

						Pax.Attributes.GetNamedItem("pbd").InnerText = cm.ConvertToBirthDate(StrDocInfo[4]);
					}
				}

				//티켓정보
                if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext[starts-with(., 'PAX')]", PTNum), xnMgr).Count > 0)
				{
                    NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText = Common.SplitAmadeusTicketNumber(ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext[starts-with(., 'PAX')]", PTNum), xnMgr).InnerText);
                }

                //항공사 마일리지 회원정보
                if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:frequentFlyerInformationGroup][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr).Count > 0)
                {
                    NewPaxData.SelectSingleNode("membership").Attributes.GetNamedItem("carrier").InnerText = ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:frequentFlyerInformationGroup/m:frequentTravellerInfo/m:frequentTraveler/m:company", PTNum), xnMgr).InnerText;
                    NewPaxData.SelectSingleNode("membership").Attributes.GetNamedItem("number").InnerText = ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:frequentFlyerInformationGroup/m:frequentTravellerInfo/m:frequentTraveler/m:membershipNumber", PTNum), xnMgr).InnerText;
                }

				//요금
				if (!FareInfoCHD && ResXml.SelectNodes("m:tstData", xnMgr).Count > 0)
				{
                    TstData = ResXml.SelectSingleNode(String.Format("m:tstData[m:tstFreetext[m:freetextDetail/m:type='41']/m:longFreetext='PAX' and m:referenceForTstData/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr);
					SumTax = 0;
					SumFsc = 0;

                    if (TstData != null)
                    {
                        foreach (XmlNode TaxFields in TstData.SelectNodes("m:fareData/m:taxFields", xnMgr))
                        {
                            if (TaxFields.SelectSingleNode("m:taxCountryCode", xnMgr).InnerText.Equals("YR") || TaxFields.SelectSingleNode("m:taxCountryCode", xnMgr).InnerText.Equals("YQ"))
                                SumFsc += cm.RequestDouble(TaxFields.SelectSingleNode("m:taxAmount", xnMgr).InnerText);
                            else
                                SumTax += cm.RequestDouble(TaxFields.SelectSingleNode("m:taxAmount", xnMgr).InnerText);
                        }

                        NewFare = FareInfo.AppendChild(Fare.CloneNode(false));
                        NewFare.Attributes.GetNamedItem("ptc").InnerText = "CHD";
                        NewFare.Attributes.GetNamedItem("amount").InnerText = TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='T']/m:amount", xnMgr).InnerText;
                        NewFare.Attributes.GetNamedItem("fare").InnerText = (TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:currencyCode", xnMgr).InnerText != "KRW" && TstData.SelectNodes("m:fareData/m:monetaryInfo[m:qualifier='E']", xnMgr).Count > 0) ? TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='E']/m:amount", xnMgr).InnerText : TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:amount", xnMgr).InnerText;
                        NewFare.Attributes.GetNamedItem("disFare").InnerText = NewFare.Attributes.GetNamedItem("fare").InnerText;
                        NewFare.Attributes.GetNamedItem("tax").InnerText = SumTax.ToString();
                        NewFare.Attributes.GetNamedItem("fsc").InnerText = SumFsc.ToString();
                        NewFare.Attributes.GetNamedItem("price").InnerText = (cm.RequestInt(NewFare.Attributes.GetNamedItem("disFare").InnerText) + cm.RequestInt(NewFare.Attributes.GetNamedItem("tax").InnerText) + cm.RequestInt(NewFare.Attributes.GetNamedItem("fsc").InnerText)).ToString();
                        NewFare.Attributes.GetNamedItem("basis").InnerText = (TstData.SelectNodes("m:fareBasisInfo/m:fareElement/m:fareBasis", xnMgr).Count > 0) ? TstData.SelectSingleNode("m:fareBasisInfo/m:fareElement/m:fareBasis", xnMgr).InnerText : "";
                        NewFare.Attributes.GetNamedItem("tkd").InnerText = (TstData.SelectNodes("m:fareBasisInfo/m:fareElement/m:ticketDesignator", xnMgr).Count > 0) ? TstData.SelectSingleNode("m:fareBasisInfo/m:fareElement/m:ticketDesignator", xnMgr).InnerText : "";

                        if (TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr).Count > 0)
                        {
                            for (int b = 0; b < TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr).Count; b++)
                            {
                                NewSeg = NewFare.AppendChild(Seg.CloneNode(false));
                                NewSeg.Attributes.GetNamedItem("ref").InnerText = TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST' and m:number != '0']", xnMgr)[b].SelectSingleNode("m:number", xnMgr).InnerText;
                                NewSeg.Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty((TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr)[b].SelectNodes("m:baggageAllowance", xnMgr).Count > 0) ? TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr)[b].SelectSingleNode("m:baggageAllowance", xnMgr).InnerText : "");
                            }
                        }

                        FareInfoCHD = true;
                    }
				}
			}

            //유아
			foreach (XmlNode Traveller in ResXml.SelectNodes("m:travellerInfo[m:passengerData/m:travellerInformation/m:passenger/m:type='INF']", xnMgr))
			{
				PTNum = Traveller.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText;
				PassengerData = Traveller.SelectSingleNode("m:passengerData[m:travellerInformation/m:passenger/m:type='INF']", xnMgr);
				
				NewPaxData = TravellerInfo.AppendChild(PaxData.CloneNode(true));
                TmpPaxName = cm.SplitPaxType(PassengerData.SelectSingleNode("m:travellerInformation/m:passenger[m:type='INF']/m:firstName", xnMgr).InnerText.Replace(" ", ""), true);

				Pax = NewPaxData.SelectSingleNode("pax");
				//Pax.Attributes.GetNamedItem("ref").InnerText = (idx + cm.RequestInt(Traveller.SelectSingleNode("m:passengerData/m:travellerInformation/m:passenger[m:type='ADT' or not(m:type)]/m:infantIndicator", xnMgr).InnerText)).ToString();
                Pax.Attributes.GetNamedItem("ref").InnerText = (idx++).ToString(); //(idx + cm.RequestInt(Traveller.SelectSingleNode("m:passengerData/m:travellerInformation/m:passenger/m:infantIndicator", xnMgr).InnerText)).ToString();
				Pax.Attributes.GetNamedItem("phn").InnerText = "";
				Pax.Attributes.GetNamedItem("psn").InnerText = (PassengerData.SelectNodes("m:travellerInformation/m:traveller", xnMgr).Count > 0) ? PassengerData.SelectSingleNode("m:travellerInformation/m:traveller/m:surname", xnMgr).InnerText : Traveller.SelectSingleNode("m:passengerData/m:travellerInformation/m:traveller/m:surname", xnMgr).InnerText;
				Pax.Attributes.GetNamedItem("pfn").InnerText = TmpPaxName[1];
				Pax.Attributes.GetNamedItem("ptc").InnerText = "INF";
				Pax.Attributes.GetNamedItem("ptl").InnerText = TmpPaxName[0];
				Pax.Attributes.GetNamedItem("pbd").InnerText = (Traveller.SelectNodes("m:passengerData/m:dateOfBirth", xnMgr).Count > 0) ? cm.ConvertToBirthDate(PassengerData.SelectSingleNode("m:dateOfBirth/m:dateAndTimeDetails[m:qualifier='706']/m:date", xnMgr).InnerText) : "";
				Pax.Attributes.GetNamedItem("gni").InnerText = Traveller.SelectSingleNode("m:elementManagementPassenger/m:lineNumber", xnMgr).InnerText;

				//여권정보
                int DocCount = ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:serviceRequest/m:ssr/m:type='DOCS'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr).Count;
                if (DocCount > 0)
				{
					string[] StrDocInfo = ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:serviceRequest/m:ssr/m:type='DOCS'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}'][last()]/m:serviceRequest/m:ssr/m:freeText", PTNum), xnMgr).InnerText.Split('/');

					if (StrDocInfo[7].Equals(Pax.Attributes.GetNamedItem("psn").InnerText) && StrDocInfo[8].Equals(Pax.Attributes.GetNamedItem("pfn").InnerText))
					{
						Passport = NewPaxData.SelectSingleNode("passport");
						Passport.Attributes.GetNamedItem("id").InnerText = StrDocInfo[2];
						Passport.Attributes.GetNamedItem("expireDate").InnerText = cm.ConvertToDateTime(StrDocInfo[6]);
						Passport.Attributes.GetNamedItem("issueCountry").InnerText = StrDocInfo[1];
						Passport.Attributes.GetNamedItem("holderNationality").InnerText = StrDocInfo[3];
						Passport.Attributes.GetNamedItem("writeDate").InnerText = "";

						Pax.Attributes.GetNamedItem("pbd").InnerText = cm.ConvertToBirthDate(StrDocInfo[4]);
					}
				}

				//티켓정보
                if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA' or m:elementManagementData/m:segmentName='FHE'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext[starts-with(., 'INF')]", PTNum), xnMgr).Count > 0)
				{
                    NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText = Common.SplitAmadeusTicketNumber(ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA' or m:elementManagementData/m:segmentName='FHE'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext[starts-with(., 'INF')]", PTNum), xnMgr).InnerText);
                }

                //항공사 마일리지 회원정보
                if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:frequentFlyerInformationGroup][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr).Count > 0)
                {
                    NewPaxData.SelectSingleNode("membership").Attributes.GetNamedItem("carrier").InnerText = ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:frequentFlyerInformationGroup/m:frequentTravellerInfo/m:frequentTraveler/m:company", PTNum), xnMgr).InnerText;
                    NewPaxData.SelectSingleNode("membership").Attributes.GetNamedItem("number").InnerText = ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:frequentFlyerInformationGroup/m:frequentTravellerInfo/m:frequentTraveler/m:membershipNumber", PTNum), xnMgr).InnerText;
                }

				//요금
				if (!FareInfoINF && ResXml.SelectNodes("m:tstData", xnMgr).Count > 0)
				{
                    TstData = ResXml.SelectSingleNode(String.Format("m:tstData[m:tstFreetext[m:freetextDetail/m:type='41']/m:longFreetext='INF' and m:referenceForTstData/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr);
					SumTax = 0;
					SumFsc = 0;

                    if (TstData != null)
                    {
                        foreach (XmlNode TaxFields in TstData.SelectNodes("m:fareData/m:taxFields", xnMgr))
                        {
                            if (TaxFields.SelectSingleNode("m:taxCountryCode", xnMgr).InnerText.Equals("YR") || TaxFields.SelectSingleNode("m:taxCountryCode", xnMgr).InnerText.Equals("YQ"))
                                SumFsc += cm.RequestDouble(TaxFields.SelectSingleNode("m:taxAmount", xnMgr).InnerText);
                            else
                                SumTax += cm.RequestDouble(TaxFields.SelectSingleNode("m:taxAmount", xnMgr).InnerText);
                        }

                        NewFare = FareInfo.AppendChild(Fare.CloneNode(false));
                        NewFare.Attributes.GetNamedItem("ptc").InnerText = "INF";
                        NewFare.Attributes.GetNamedItem("amount").InnerText = TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='T']/m:amount", xnMgr).InnerText;
                        NewFare.Attributes.GetNamedItem("fare").InnerText = (TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:currencyCode", xnMgr).InnerText != "KRW" && TstData.SelectNodes("m:fareData/m:monetaryInfo[m:qualifier='E']", xnMgr).Count > 0) ? TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='E']/m:amount", xnMgr).InnerText : TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:amount", xnMgr).InnerText;
                        NewFare.Attributes.GetNamedItem("disFare").InnerText = NewFare.Attributes.GetNamedItem("fare").InnerText;
                        NewFare.Attributes.GetNamedItem("tax").InnerText = SumTax.ToString();
                        NewFare.Attributes.GetNamedItem("fsc").InnerText = SumFsc.ToString();
                        NewFare.Attributes.GetNamedItem("price").InnerText = (cm.RequestInt(NewFare.Attributes.GetNamedItem("disFare").InnerText) + cm.RequestInt(NewFare.Attributes.GetNamedItem("tax").InnerText) + cm.RequestInt(NewFare.Attributes.GetNamedItem("fsc").InnerText)).ToString();
                        NewFare.Attributes.GetNamedItem("basis").InnerText = (TstData.SelectNodes("m:fareBasisInfo/m:fareElement/m:fareBasis", xnMgr).Count > 0) ? TstData.SelectSingleNode("m:fareBasisInfo/m:fareElement/m:fareBasis", xnMgr).InnerText : "";
                        NewFare.Attributes.GetNamedItem("tkd").InnerText = (TstData.SelectNodes("m:fareBasisInfo/m:fareElement/m:ticketDesignator", xnMgr).Count > 0) ? TstData.SelectSingleNode("m:fareBasisInfo/m:fareElement/m:ticketDesignator", xnMgr).InnerText : "";

                        if (TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr).Count > 0)
                        {
                            for (int b = 0; b < TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr).Count; b++)
                            {
                                NewSeg = NewFare.AppendChild(Seg.CloneNode(false));
                                NewSeg.Attributes.GetNamedItem("ref").InnerText = TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST' and m:number != '0']", xnMgr)[b].SelectSingleNode("m:number", xnMgr).InnerText;
                                NewSeg.Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty((TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr)[b].SelectNodes("m:baggageAllowance", xnMgr).Count > 0) ? TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr)[b].SelectSingleNode("m:baggageAllowance", xnMgr).InnerText : "");
                            }
                        }

                        FareInfoINF = true;
                    }
				}
			}

			TravellerInfo.RemoveChild(PaxData);
			FareInfo.RemoveChild(Fare);

			return XmlDoc.DocumentElement;
		}

		/// <summary>
		/// SearchBookingRS를 통합용 XML구조로 치환
		/// </summary>
		/// <param name="ResXml">SearchBookingRS의 Data</param>
		/// <returns></returns>
        protected XmlElement ToModeSearchBookingAbacus_TravelItineraryRead(XmlElement ResXml, XmlNamespaceManager xnMgr)
		{
            XmlNode TravelItinerary = ResXml.SelectSingleNode("tir310:TravelItinerary", xnMgr);
			
			XmlDocument XmlDoc = new XmlDocument();
			XmlDoc.Load(mc.XmlFullPath("SearchBookingRS"));

			XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

			//기본정보
			XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");
            BookingInfo.SelectSingleNode("bookingNo").InnerText = TravelItinerary.SelectSingleNode("tir310:ItineraryRef", xnMgr).Attributes.GetNamedItem("ID").InnerText;
			BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = BookingInfo.SelectSingleNode("bookingNo").InnerText;
            //BookingInfo.SelectSingleNode("bookingTL").Attributes.GetNamedItem("ttl").InnerText = (TravelItinerary.SelectNodes("tir310:SpecialServiceInfo/tir310:Service[@SSRType='ADTK']/tir310:Text[starts-with(.,'PLS TKT')]", xnMgr).Count > 0) ? cm.AbacusTL(TravelItinerary.SelectSingleNode("tir310:SpecialServiceInfo/tir310:Service[@SSRType='ADTK']/tir310:Text[starts-with(.,'PLS TKT')]", xnMgr).InnerText) : "";
            BookingInfo.SelectSingleNode("bookingTL").Attributes.GetNamedItem("ttl").InnerText = SelectATLBase(0, 0, "Abacus", "N", ResXml);
            
			//여정
			XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
			XmlNode SegmentGroup = FlightInfo.SelectSingleNode("segGroup");
			XmlNode Segment = SegmentGroup.SelectSingleNode("seg");
            XmlNode StopSegment = Segment.SelectSingleNode("seg");
			XmlNode NewSegmentGroup = null;
			XmlNode NewSegment = null;
            XmlNode NewStopSegment = null;
            int idx = 1;
            int tatoo = 1;

            if (TravelItinerary.SelectNodes("tir310:ItineraryInfo", xnMgr).Count > 0 && TravelItinerary.SelectNodes("tir310:ItineraryInfo/tir310:ReservationItems", xnMgr).Count > 0 && TravelItinerary.SelectNodes("tir310:ItineraryInfo/tir310:ReservationItems/tir310:Item[tir310:FlightSegment]", xnMgr).Count > 0)
            {
                if (TravelItinerary.SelectNodes("tir310:ItineraryInfo/tir310:ReservationItems/tir310:Item/tir310:FlightSegment/tir310:MarriageGrp", xnMgr).Count > 0)
                {
                    string Group = "001";
                    string Sequence = string.Empty;

                    //세그그룹 하나 생성하고 시작
                    NewSegmentGroup = FlightInfo.AppendChild(SegmentGroup.CloneNode(false));
                    NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = (idx++).ToString();

                    foreach (XmlNode ItemNode in TravelItinerary.SelectNodes("tir310:ItineraryInfo/tir310:ReservationItems/tir310:Item[tir310:FlightSegment]", xnMgr))
                    {
                        //SegGroup
                        if (ItemNode.SelectNodes("tir310:FlightSegment/tir310:MarriageGrp", xnMgr).Count > 0 && Group != ItemNode.SelectSingleNode("tir310:FlightSegment/tir310:MarriageGrp", xnMgr).Attributes.GetNamedItem("Group").InnerText)
                        {
                            //이전 SegGroup에 세그정보가 없다면 삭제
                            if (!NewSegmentGroup.HasChildNodes)
                                FlightInfo.RemoveChild(NewSegmentGroup);

                            //SegGroup 추가
                            NewSegmentGroup = FlightInfo.AppendChild(SegmentGroup.CloneNode(false));
                            NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = (idx++).ToString();

                            Group = ItemNode.SelectSingleNode("tir310:FlightSegment/tir310:MarriageGrp", xnMgr).Attributes.GetNamedItem("Group").InnerText;
                            tatoo = 1;
                        }

                        NewSegment = NewSegmentGroup.AppendChild(Segment.CloneNode(false));
                        NewSegment.Attributes.GetNamedItem("ref").InnerText = (tatoo++).ToString();

                        //기착여부
                        int STN = ItemNode.SelectNodes("tir310:FlightSegment", xnMgr).Count;

                        if (STN.Equals(1))
                        {
                            XmlNode FlightSegment = ItemNode.SelectSingleNode("tir310:FlightSegment", xnMgr);
                            
                            if (FlightSegment.Attributes.GetNamedItem("FlightNumber").InnerText.Equals("OPEN"))
                            {
                                NewSegment.Attributes.GetNamedItem("dlc").InnerText = FlightSegment.SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                                NewSegment.Attributes.GetNamedItem("alc").InnerText = FlightSegment.SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                                NewSegment.Attributes.GetNamedItem("ddt").InnerText = "";
                                NewSegment.Attributes.GetNamedItem("ardt").InnerText = "";
                                NewSegment.Attributes.GetNamedItem("mcc").InnerText = ((XmlAttribute)FlightSegment.SelectSingleNode("tir310:MarketingAirline", xnMgr).Attributes.GetNamedItem("Code") != null) ? FlightSegment.SelectSingleNode("tir310:MarketingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText : "";
                                NewSegment.Attributes.GetNamedItem("occ").InnerText = "";
                                NewSegment.Attributes.GetNamedItem("fln").InnerText = "";
                                NewSegment.Attributes.GetNamedItem("eqt").InnerText = "";
                                NewSegment.Attributes.GetNamedItem("stn").InnerText = "0";
                                NewSegment.Attributes.GetNamedItem("etc").InnerText = "";
                                NewSegment.Attributes.GetNamedItem("rbd").InnerText = FlightSegment.Attributes.GetNamedItem("ResBookDesigCode").InnerText;
                                NewSegment.Attributes.GetNamedItem("rsco").InnerText = "QQ";
                                NewSegment.Attributes.GetNamedItem("rsc").InnerText = "QQ";
                                NewSegment.Attributes.GetNamedItem("eft").InnerText = "";
                                NewSegment.Attributes.GetNamedItem("pnr").InnerText = "";
                            }
                            else
                            {
                                NewSegment.Attributes.GetNamedItem("dlc").InnerText = FlightSegment.SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                                NewSegment.Attributes.GetNamedItem("alc").InnerText = FlightSegment.SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                                NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(FlightSegment.Attributes.GetNamedItem("DepartureDateTime").InnerText);
                                NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToAbacusDateTime(FlightSegment.Attributes.GetNamedItem("ArrivalDateTime").InnerText, FlightSegment.Attributes.GetNamedItem("DepartureDateTime").InnerText);
                                NewSegment.Attributes.GetNamedItem("mcc").InnerText = FlightSegment.SelectSingleNode("tir310:MarketingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText;
                                NewSegment.Attributes.GetNamedItem("occ").InnerText = (FlightSegment.SelectNodes("tir310:DisclosureCarrier", xnMgr).Count > 0 && FlightSegment.SelectSingleNode("tir310:DisclosureCarrier", xnMgr).Attributes.GetNamedItem("DOT").InnerText.Equals("true")) ? "" : ((FlightSegment.SelectNodes("tir310:OperatingAirlinePricing", xnMgr).Count > 0 && (XmlAttribute)FlightSegment.SelectSingleNode("tir310:OperatingAirlinePricing", xnMgr).Attributes.GetNamedItem("Code") != null) ? FlightSegment.SelectSingleNode("tir310:OperatingAirlinePricing", xnMgr).Attributes.GetNamedItem("Code").InnerText : ((FlightSegment.SelectNodes("tir310:OperatingAirline", xnMgr).Count > 0 && (XmlAttribute)FlightSegment.SelectSingleNode("tir310:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code") != null) ? FlightSegment.SelectSingleNode("tir310:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText : NewSegment.Attributes.GetNamedItem("mcc").InnerText));
                                NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(FlightSegment.Attributes.GetNamedItem("FlightNumber").InnerText);
                                NewSegment.Attributes.GetNamedItem("eqt").InnerText = (FlightSegment.SelectNodes("tir310:Equipment", xnMgr).Count > 0) ? FlightSegment.SelectSingleNode("tir310:Equipment", xnMgr).Attributes.GetNamedItem("AirEquipType").InnerText : "";
                                NewSegment.Attributes.GetNamedItem("stn").InnerText = ((XmlAttribute)FlightSegment.Attributes.GetNamedItem("StopQuantity") != null) ? cm.RequestInt(FlightSegment.Attributes.GetNamedItem("StopQuantity").InnerText).ToString() : "";
                                NewSegment.Attributes.GetNamedItem("etc").InnerText = (FlightSegment.Attributes.GetNamedItem("eTicket").InnerText.Equals("true")) ? "Y" : "N";
                                NewSegment.Attributes.GetNamedItem("rbd").InnerText = FlightSegment.Attributes.GetNamedItem("ResBookDesigCode").InnerText;
                                NewSegment.Attributes.GetNamedItem("rsco").InnerText = FlightSegment.Attributes.GetNamedItem("Status").InnerText;
                                NewSegment.Attributes.GetNamedItem("rsc").InnerText = Common.BookingStatusCode(FlightSegment.Attributes.GetNamedItem("Status").InnerText);
                                NewSegment.Attributes.GetNamedItem("eft").InnerText = ((XmlAttribute)FlightSegment.Attributes.GetNamedItem("ElapsedTime") != null) ? cm.ConvertToDateTime(FlightSegment.Attributes.GetNamedItem("ElapsedTime").InnerText) : "";
                                NewSegment.Attributes.GetNamedItem("pnr").InnerText = (FlightSegment.SelectNodes("tir310:SupplierRef", xnMgr).Count > 0) ? ((FlightSegment.SelectSingleNode("tir310:SupplierRef", xnMgr).Attributes.GetNamedItem("ID").InnerText.IndexOf('*') != -1) ? FlightSegment.SelectSingleNode("tir310:SupplierRef", xnMgr).Attributes.GetNamedItem("ID").InnerText.Split('*')[1] : FlightSegment.SelectSingleNode("tir310:SupplierRef", xnMgr).Attributes.GetNamedItem("ID").InnerText) : "";
                            }
                        }
                        else
                        {
                            XmlNode FlightSegmentA = ItemNode.SelectNodes("tir310:FlightSegment", xnMgr)[0];
                            XmlNode FlightSegmentB = ItemNode.SelectNodes("tir310:FlightSegment", xnMgr)[(STN - 1)];
                            string ARDT = string.Empty;
                            string EFT = string.Empty;
                            string GWT = string.Empty;
                            
                            NewSegment.Attributes.GetNamedItem("dlc").InnerText = FlightSegmentA.SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                            NewSegment.Attributes.GetNamedItem("alc").InnerText = FlightSegmentB.SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                            NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(FlightSegmentA.Attributes.GetNamedItem("DepartureDateTime").InnerText);
                            NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToAbacusDateTime(FlightSegmentB.Attributes.GetNamedItem("ArrivalDateTime").InnerText, FlightSegmentB.Attributes.GetNamedItem("DepartureDateTime").InnerText);
                            NewSegment.Attributes.GetNamedItem("mcc").InnerText = FlightSegmentA.SelectSingleNode("tir310:MarketingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText;
                            NewSegment.Attributes.GetNamedItem("occ").InnerText = (FlightSegmentA.SelectNodes("tir310:DisclosureCarrier", xnMgr).Count > 0 && FlightSegmentA.SelectSingleNode("tir310:DisclosureCarrier", xnMgr).Attributes.GetNamedItem("DOT").InnerText.Equals("true")) ? "" : ((FlightSegmentA.SelectNodes("tir310:OperatingAirlinePricing", xnMgr).Count > 0 && (XmlAttribute)FlightSegmentA.SelectSingleNode("tir310:OperatingAirlinePricing", xnMgr).Attributes.GetNamedItem("Code") != null) ? FlightSegmentA.SelectSingleNode("tir310:OperatingAirlinePricing", xnMgr).Attributes.GetNamedItem("Code").InnerText : ((FlightSegmentA.SelectNodes("tir310:OperatingAirline", xnMgr).Count > 0 && (XmlAttribute)FlightSegmentA.SelectSingleNode("tir310:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code") != null) ? FlightSegmentA.SelectSingleNode("tir310:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText : NewSegment.Attributes.GetNamedItem("mcc").InnerText));
                            NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(FlightSegmentA.Attributes.GetNamedItem("FlightNumber").InnerText);
                            NewSegment.Attributes.GetNamedItem("eqt").InnerText = (FlightSegmentA.SelectNodes("tir310:Equipment", xnMgr).Count > 0) ? FlightSegmentA.SelectSingleNode("tir310:Equipment", xnMgr).Attributes.GetNamedItem("AirEquipType").InnerText : "";
                            NewSegment.Attributes.GetNamedItem("stn").InnerText = STN.ToString();
                            NewSegment.Attributes.GetNamedItem("etc").InnerText = (FlightSegmentA.Attributes.GetNamedItem("eTicket").InnerText.Equals("true")) ? "Y" : "N";
                            NewSegment.Attributes.GetNamedItem("rbd").InnerText = FlightSegmentA.Attributes.GetNamedItem("ResBookDesigCode").InnerText;
                            NewSegment.Attributes.GetNamedItem("rsco").InnerText = FlightSegmentA.Attributes.GetNamedItem("Status").InnerText;
                            NewSegment.Attributes.GetNamedItem("rsc").InnerText = Common.BookingStatusCode(FlightSegmentA.Attributes.GetNamedItem("Status").InnerText);
                            NewSegment.Attributes.GetNamedItem("pnr").InnerText = (FlightSegmentA.SelectNodes("tir310:SupplierRef", xnMgr).Count > 0) ? ((FlightSegmentA.SelectSingleNode("tir310:SupplierRef", xnMgr).Attributes.GetNamedItem("ID").InnerText.IndexOf('*') != -1) ? FlightSegmentA.SelectSingleNode("tir310:SupplierRef", xnMgr).Attributes.GetNamedItem("ID").InnerText.Split('*')[1] : FlightSegmentA.SelectSingleNode("tir310:SupplierRef", xnMgr).Attributes.GetNamedItem("ID").InnerText) : "";
                            
                            foreach (XmlNode FlightLeg in ItemNode.SelectNodes("tir310:FlightSegment", xnMgr))
                            {
                                NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                                NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = FlightLeg.SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                                NewStopSegment.Attributes.GetNamedItem("alc").InnerText = FlightLeg.SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                                NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(FlightLeg.Attributes.GetNamedItem("DepartureDateTime").InnerText);
                                NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToAbacusDateTime(FlightLeg.Attributes.GetNamedItem("ArrivalDateTime").InnerText, FlightLeg.Attributes.GetNamedItem("DepartureDateTime").InnerText);
                                NewStopSegment.Attributes.GetNamedItem("eft").InnerText = ((XmlAttribute)FlightLeg.Attributes.GetNamedItem("ElapsedTime") != null) ? cm.ConvertToDateTime(FlightLeg.Attributes.GetNamedItem("ElapsedTime").InnerText) : "";
                                NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = String.IsNullOrWhiteSpace(ARDT) ? "" : cm.ElapseFlyingTime(ARDT, NewStopSegment.Attributes.GetNamedItem("ddt").InnerText);

                                ARDT = NewStopSegment.Attributes.GetNamedItem("ardt").InnerText;

                                if (!String.IsNullOrWhiteSpace(NewStopSegment.Attributes.GetNamedItem("eft").InnerText))
                                    EFT = cm.SumTime(NewStopSegment.Attributes.GetNamedItem("eft").InnerText, EFT);

                                if (!String.IsNullOrWhiteSpace(NewStopSegment.Attributes.GetNamedItem("gwt").InnerText))
                                    GWT = cm.SumTime(NewStopSegment.Attributes.GetNamedItem("gwt").InnerText, GWT);
                            }

                            NewSegment.Attributes.GetNamedItem("eft").InnerText = cm.ConvertToDateTime(EFT);
                            NewSegment.Attributes.GetNamedItem("ewt").InnerText = cm.ConvertToDateTime(GWT);
                        }
                    }
                }
                else
                {
                    foreach (XmlNode ItemNode in TravelItinerary.SelectNodes("tir310:ItineraryInfo/tir310:ReservationItems/tir310:Item[tir310:FlightSegment]", xnMgr))
                    {
                        tatoo = 1;
                        
                        //if (idx.Equals(1) || ((XmlAttribute)ItemNode.SelectNodes("tir310:FlightSegment", xnMgr)[1].Attributes.GetNamedItem("ConnectionInd") != null && ItemNode.SelectNodes("tir310:FlightSegment", xnMgr)[1].Attributes.GetNamedItem("ConnectionInd").InnerText.Equals("I")))
                        //{
                            NewSegmentGroup = FlightInfo.AppendChild(SegmentGroup.CloneNode(false));
                            NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = (idx++).ToString();
                        //}
                        
                        foreach (XmlNode AirNode in ItemNode.SelectNodes("tir310:FlightSegment", xnMgr))
                        {
                            NewSegment = NewSegmentGroup.AppendChild(Segment.CloneNode(false));
                            NewSegment.Attributes.GetNamedItem("ref").InnerText = (tatoo++).ToString();

                            if (AirNode.Attributes.GetNamedItem("FlightNumber").InnerText.Equals("OPEN"))
                            {
                                NewSegment.Attributes.GetNamedItem("dlc").InnerText = AirNode.SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                                NewSegment.Attributes.GetNamedItem("alc").InnerText = AirNode.SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                                NewSegment.Attributes.GetNamedItem("ddt").InnerText = "";
                                NewSegment.Attributes.GetNamedItem("ardt").InnerText = "";
                                NewSegment.Attributes.GetNamedItem("mcc").InnerText = ((XmlAttribute)AirNode.SelectSingleNode("tir310:MarketingAirline", xnMgr).Attributes.GetNamedItem("Code") != null) ? AirNode.SelectSingleNode("tir310:MarketingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText : "";
                                NewSegment.Attributes.GetNamedItem("occ").InnerText = "";
                                NewSegment.Attributes.GetNamedItem("fln").InnerText = "";
                                NewSegment.Attributes.GetNamedItem("eqt").InnerText = "";
                                NewSegment.Attributes.GetNamedItem("stn").InnerText = "0";
                                NewSegment.Attributes.GetNamedItem("etc").InnerText = "";
                                NewSegment.Attributes.GetNamedItem("rbd").InnerText = AirNode.Attributes.GetNamedItem("ResBookDesigCode").InnerText;
                                NewSegment.Attributes.GetNamedItem("rsco").InnerText = "QQ";
                                NewSegment.Attributes.GetNamedItem("rsc").InnerText = "QQ";
                                NewSegment.Attributes.GetNamedItem("eft").InnerText = "";
                                NewSegment.Attributes.GetNamedItem("pnr").InnerText = "";
                            }
                            else
                            {
                                NewSegment.Attributes.GetNamedItem("dlc").InnerText = AirNode.SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                                NewSegment.Attributes.GetNamedItem("alc").InnerText = AirNode.SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                                NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(AirNode.Attributes.GetNamedItem("DepartureDateTime").InnerText);
                                NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToAbacusDateTime(AirNode.Attributes.GetNamedItem("ArrivalDateTime").InnerText, AirNode.Attributes.GetNamedItem("DepartureDateTime").InnerText);
                                NewSegment.Attributes.GetNamedItem("mcc").InnerText = AirNode.SelectSingleNode("tir310:MarketingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText;
                                NewSegment.Attributes.GetNamedItem("occ").InnerText = (AirNode.SelectNodes("tir310:DisclosureCarrier", xnMgr).Count > 0 && AirNode.SelectSingleNode("tir310:DisclosureCarrier", xnMgr).Attributes.GetNamedItem("DOT").InnerText.Equals("true")) ? "" : ((AirNode.SelectNodes("tir310:OperatingAirlinePricing", xnMgr).Count > 0 && (XmlAttribute)AirNode.SelectSingleNode("tir310:OperatingAirlinePricing", xnMgr).Attributes.GetNamedItem("Code") != null) ? AirNode.SelectSingleNode("tir310:OperatingAirlinePricing", xnMgr).Attributes.GetNamedItem("Code").InnerText : ((AirNode.SelectNodes("tir310:OperatingAirline", xnMgr).Count > 0 && (XmlAttribute)AirNode.SelectSingleNode("tir310:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code") != null) ? AirNode.SelectSingleNode("tir310:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText : NewSegment.Attributes.GetNamedItem("mcc").InnerText));
                                NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(AirNode.Attributes.GetNamedItem("FlightNumber").InnerText);
                                NewSegment.Attributes.GetNamedItem("eqt").InnerText = (AirNode.SelectNodes("tir310:Equipment", xnMgr).Count > 0) ? AirNode.SelectSingleNode("tir310:Equipment", xnMgr).Attributes.GetNamedItem("AirEquipType").InnerText : "";
                                NewSegment.Attributes.GetNamedItem("stn").InnerText = ((XmlAttribute)AirNode.Attributes.GetNamedItem("StopQuantity") != null) ? cm.RequestInt(AirNode.Attributes.GetNamedItem("StopQuantity").InnerText).ToString() : "";
                                NewSegment.Attributes.GetNamedItem("etc").InnerText = (AirNode.Attributes.GetNamedItem("eTicket").InnerText.Equals("true")) ? "Y" : "N";
                                NewSegment.Attributes.GetNamedItem("rbd").InnerText = AirNode.Attributes.GetNamedItem("ResBookDesigCode").InnerText;
                                NewSegment.Attributes.GetNamedItem("rsco").InnerText = AirNode.Attributes.GetNamedItem("Status").InnerText;
                                NewSegment.Attributes.GetNamedItem("rsc").InnerText = Common.BookingStatusCode(AirNode.Attributes.GetNamedItem("Status").InnerText);
                                NewSegment.Attributes.GetNamedItem("eft").InnerText = ((XmlAttribute)AirNode.Attributes.GetNamedItem("ElapsedTime") != null) ? cm.ConvertToDateTime(AirNode.Attributes.GetNamedItem("ElapsedTime").InnerText) : "";
                                NewSegment.Attributes.GetNamedItem("pnr").InnerText = (AirNode.SelectNodes("tir310:SupplierRef", xnMgr).Count > 0) ? ((AirNode.SelectSingleNode("tir310:SupplierRef", xnMgr).Attributes.GetNamedItem("ID").InnerText.IndexOf('*') != -1) ? AirNode.SelectSingleNode("tir310:SupplierRef", xnMgr).Attributes.GetNamedItem("ID").InnerText.Split('*')[1] : AirNode.SelectSingleNode("tir310:SupplierRef", xnMgr).Attributes.GetNamedItem("ID").InnerText) : "";
                            }
                        }
                    }
                }
            }

            FlightInfo.RemoveChild(SegmentGroup);

            //탑승객
            XmlNode TravellerInfo = XmlDoc.SelectSingleNode("ResponseDetails/travellerInfo");
            XmlNode PaxData = TravellerInfo.SelectSingleNode("paxData");
            XmlNode Pax;
            XmlNode Passport;
            XmlNode NewPaxData;
            string[] TmpPaxName;
            idx = 1;

            foreach (XmlNode PersonNameNode in TravelItinerary.SelectNodes("tir310:CustomerInfo/tir310:PersonName[tir310:GivenName]", xnMgr))
            {
                string NameNumber = PersonNameNode.Attributes.GetNamedItem("NameNumber").InnerText;
                bool Infant = PersonNameNode.Attributes.GetNamedItem("PassengerType").InnerText.Equals("INF") ? true : false;

                NewPaxData = TravellerInfo.AppendChild(PaxData.CloneNode(true));
                TmpPaxName = cm.SplitPaxType(PersonNameNode.SelectSingleNode("tir310:GivenName", xnMgr).InnerText.Trim(), Infant);

                Pax = NewPaxData.SelectSingleNode("pax");
                Pax.Attributes.GetNamedItem("ref").InnerText = (idx++).ToString();
                Pax.Attributes.GetNamedItem("phn").InnerText = "";
                Pax.Attributes.GetNamedItem("psn").InnerText = PersonNameNode.SelectSingleNode("tir310:Surname", xnMgr).InnerText;
                Pax.Attributes.GetNamedItem("pfn").InnerText = TmpPaxName[1].Trim();
                Pax.Attributes.GetNamedItem("ptc").InnerText = (String.IsNullOrWhiteSpace(TmpPaxName[2])) ? (PersonNameNode.Attributes.GetNamedItem("PassengerType").InnerText.StartsWith("C") ? "CHD" : PersonNameNode.Attributes.GetNamedItem("PassengerType").InnerText) : TmpPaxName[2].Trim();
                Pax.Attributes.GetNamedItem("ptl").InnerText = TmpPaxName[0].Trim();
                Pax.Attributes.GetNamedItem("pbd").InnerText = "";
                Pax.Attributes.GetNamedItem("gni").InnerText = "";

                //여권정보
                foreach (XmlNode Service in TravelItinerary.SelectNodes(String.Format("tir310:SpecialServiceInfo/tir310:Service[@SSR_Code='SSR' and @SSR_Type='DOCS' and tir310:PersonName/@NameNumber='{0}']", NameNumber), xnMgr))
                {
                    string[] StrDocInfo = Service.SelectSingleNode("tir310:Text", xnMgr).InnerText.Split('/');

                    if (StrDocInfo.Length > 9)
                    {
                        Passport = NewPaxData.SelectSingleNode("passport");
                        Passport.Attributes.GetNamedItem("id").InnerText = StrDocInfo[3];
                        Passport.Attributes.GetNamedItem("expireDate").InnerText = cm.ConvertToDateTime(StrDocInfo[7]);
                        Passport.Attributes.GetNamedItem("issueCountry").InnerText = StrDocInfo[2];
                        Passport.Attributes.GetNamedItem("holderNationality").InnerText = StrDocInfo[4];
                        Passport.Attributes.GetNamedItem("writeDate").InnerText = "";

                        Pax.Attributes.GetNamedItem("pbd").InnerText = cm.ConvertToBirthDate(StrDocInfo[5]);
                    }
                }

                //티켓정보
                if (TravelItinerary.SelectNodes("tir310:SpecialServiceInfo", xnMgr).Count > 0 && TravelItinerary.SelectNodes("tir310:SpecialServiceInfo[tir310:Service/@SSR_Code='SSR' and tir310:Service/@SSR_Type='TKNE']", xnMgr).Count > 0)
                {
                    if (Infant)
                    {
                        foreach (XmlNode NameService in TravelItinerary.SelectNodes(String.Format("tir310:SpecialServiceInfo/tir310:Service[@SSR_Code='SSR'and @SSR_Type='INFT']"), xnMgr))
                        {
                            if (NameService.SelectSingleNode("tir310:Text", xnMgr).InnerText.IndexOf(String.Format("/{0}/{1}/", PersonNameNode.SelectSingleNode("tir310:Surname", xnMgr).InnerText, PersonNameNode.SelectSingleNode("tir310:GivenName", xnMgr).InnerText)) != -1)
                            {
                                NameNumber = NameService.SelectSingleNode("tir310:PersonName", xnMgr).Attributes.GetNamedItem("NameNumber").InnerText;
                                break;
                            }
                        }
                    }

                    foreach (XmlNode TicketInfoService in TravelItinerary.SelectNodes(String.Format("tir310:SpecialServiceInfo/tir310:Service[@SSR_Code='SSR'and @SSR_Type='TKNE' and tir310:PersonName/@NameNumber='{0}']", NameNumber), xnMgr))
                    {
                        string TicketNumber = Common.SplitAbacusTicketNumber(TicketInfoService.SelectSingleNode("tir310:Text", xnMgr).InnerText);
                        bool TicketVoid = Common.AbacusVoidTicket(TravelItinerary.SelectNodes("tir310:ItineraryInfo/tir310:Ticketing[starts-with(@eTicketNumber, 'TV')]", xnMgr), TicketNumber.Replace("INF", ""));

                        if (Infant)
                        {
                            if (TicketNumber.StartsWith("INF"))
                            {
                                TicketNumber = TicketNumber.Replace("INF", "");

                                if (!TicketVoid && NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText.IndexOf(TicketNumber).Equals(-1))
                                {
                                    if (!String.IsNullOrWhiteSpace(NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText))
                                        NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText += "/";

                                    NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText += TicketNumber;
                                }
                            }
                        }
                        else
                        {
                            if (!TicketNumber.StartsWith("INF"))
                            {
                                if (!TicketVoid && NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText.IndexOf(TicketNumber).Equals(-1))
                                {
                                    if (!String.IsNullOrWhiteSpace(NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText))
                                        NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText += "/";

                                    NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText += TicketNumber;
                                }
                            }
                        }
                    }
                }

                //항공사 마일리지 회원정보
                if (TravelItinerary.SelectNodes("tir310:CustomerInfo/tir310:CustLoyalty", xnMgr).Count > 0)
                {
                    if (TravelItinerary.SelectNodes(String.Format("tir310:CustomerInfo/tir310:CustLoyalty[@NameNumber='{0}']", NameNumber), xnMgr).Count > 0)
                    {
                        NewPaxData.SelectSingleNode("membership").Attributes.GetNamedItem("carrier").InnerText = TravelItinerary.SelectSingleNode(String.Format("tir310:CustomerInfo/tir310:CustLoyalty[@NameNumber='{0}']", NameNumber), xnMgr).Attributes.GetNamedItem("TravelingCarrierCode").InnerText;
                        NewPaxData.SelectSingleNode("membership").Attributes.GetNamedItem("number").InnerText = TravelItinerary.SelectSingleNode(String.Format("tir310:CustomerInfo/tir310:CustLoyalty[@NameNumber='{0}']", NameNumber), xnMgr).Attributes.GetNamedItem("MembershipID").InnerText;
                    }
                }
            }

            TravellerInfo.RemoveChild(PaxData);

            //요금
            XmlNode FareInfo = XmlDoc.SelectSingleNode("ResponseDetails/fareInfo");
            XmlNode Fare = FareInfo.SelectSingleNode("fare");
            XmlNode NewFare;

            string StrFareInfo = string.Empty;
            string StrFscInfo = string.Empty;
            string StrTaxInfo = string.Empty;

            foreach (XmlNode Telephone in TravelItinerary.SelectNodes("tir310:CustomerInfo/tir310:ContactNumbers/tir310:ContactNumber", xnMgr))
            {
                if (Telephone.Attributes.GetNamedItem("Phone").InnerText.IndexOf("T*FARE/") != -1)
                {
                    StrFareInfo = Telephone.Attributes.GetNamedItem("Phone").InnerText;
                }
                else if (Telephone.Attributes.GetNamedItem("Phone").InnerText.IndexOf("T*FSC/") != -1)
                {
                    StrFscInfo = Telephone.Attributes.GetNamedItem("Phone").InnerText;
                }
                else if (Telephone.Attributes.GetNamedItem("Phone").InnerText.IndexOf("T*TAX/") != -1)
                {
                    StrTaxInfo = Telephone.Attributes.GetNamedItem("Phone").InnerText;
                }
            }

            if (!String.IsNullOrWhiteSpace(StrFareInfo))
            {
                int[] BaseFare = new Int32[3];
                int[] BaseFsc = new Int32[3];
                int[] BaseTax = new Int32[4];

                BaseFare[0] = 0;
                BaseFare[1] = 0;
                BaseFare[2] = 0;

                BaseFsc[0] = 0;
                BaseFsc[1] = 0;
                BaseFsc[2] = 0;

                BaseTax[0] = 0;
                BaseTax[1] = 0;
                BaseTax[2] = 0;
                BaseTax[3] = 0;

                foreach (string fare in StrFareInfo.Split('/'))
                {
                    if (fare.StartsWith("A"))
                        BaseFare[0] = cm.RequestInt(fare.Replace("A", ""));
                    else if (fare.StartsWith("C"))
                        BaseFare[1] = cm.RequestInt(fare.Replace("C", ""));
                    else if (fare.StartsWith("I"))
                        BaseFare[2] = cm.RequestInt(fare.Replace("I", ""));
                }

                foreach (string fsc in StrFscInfo.Split('/'))
                {
                    if (fsc.StartsWith("A"))
                        BaseFsc[0] = cm.RequestInt(fsc.Replace("A", ""));
                    else if (fsc.StartsWith("C"))
                        BaseFsc[1] = cm.RequestInt(fsc.Replace("C", ""));
                    else if (fsc.StartsWith("I"))
                        BaseFsc[2] = cm.RequestInt(fsc.Replace("I", ""));
                }

                foreach (string tax in StrTaxInfo.Split('/'))
                {
                    if (tax.StartsWith("A"))
                        BaseTax[0] = cm.RequestInt(tax.Replace("A", ""));
                    else if (tax.StartsWith("C"))
                        BaseTax[1] = cm.RequestInt(tax.Replace("C", ""));
                    else if (tax.StartsWith("I"))
                        BaseTax[2] = cm.RequestInt(tax.Replace("I", ""));
                    else if (tax.StartsWith("Q"))
                        BaseTax[3] = cm.RequestInt(tax.Replace("Q", ""));
                }

                foreach (XmlNode Traveller in TravellerInfo.SelectNodes("paxData[pax/@ptc='ADT']", xnMgr))
                {
                    NewFare = FareInfo.AppendChild(Fare.CloneNode(false));
                    NewFare.Attributes.GetNamedItem("ptc").InnerText = Traveller.SelectSingleNode("pax").Attributes.GetNamedItem("ptc").InnerText;
                    NewFare.Attributes.GetNamedItem("amount").InnerText = (BaseFare[0] + BaseFsc[0] + BaseTax[0]).ToString();
                    NewFare.Attributes.GetNamedItem("fare").InnerText = BaseFare[0].ToString();
                    NewFare.Attributes.GetNamedItem("disFare").InnerText = BaseFare[0].ToString();
                    NewFare.Attributes.GetNamedItem("tax").InnerText = BaseTax[0].ToString();
                    NewFare.Attributes.GetNamedItem("fsc").InnerText = BaseFsc[0].ToString();
                    NewFare.Attributes.GetNamedItem("price").InnerText = (BaseFare[0] + BaseFsc[0] + BaseTax[0]).ToString();
                    NewFare.Attributes.GetNamedItem("basis").InnerText = "";
                    NewFare.Attributes.GetNamedItem("tkd").InnerText = "";
                    break;
                }

                foreach (XmlNode Traveller in TravellerInfo.SelectNodes("paxData[pax/@ptc='CHD']", xnMgr))
                {
                    NewFare = FareInfo.AppendChild(Fare.CloneNode(false));
                    NewFare.Attributes.GetNamedItem("ptc").InnerText = Traveller.SelectSingleNode("pax").Attributes.GetNamedItem("ptc").InnerText;
                    NewFare.Attributes.GetNamedItem("amount").InnerText = (BaseFare[1] + BaseFsc[1] + BaseTax[1]).ToString();
                    NewFare.Attributes.GetNamedItem("fare").InnerText = BaseFare[1].ToString();
                    NewFare.Attributes.GetNamedItem("disFare").InnerText = BaseFare[1].ToString();
                    NewFare.Attributes.GetNamedItem("tax").InnerText = BaseTax[1].ToString();
                    NewFare.Attributes.GetNamedItem("fsc").InnerText = BaseFsc[1].ToString();
                    NewFare.Attributes.GetNamedItem("price").InnerText = (BaseFare[1] + BaseFsc[1] + BaseTax[1]).ToString();
                    NewFare.Attributes.GetNamedItem("basis").InnerText = "";
                    NewFare.Attributes.GetNamedItem("tkd").InnerText = "";
                    break;
                }

                foreach (XmlNode Traveller in TravellerInfo.SelectNodes("paxData[pax/@ptc='INF']", xnMgr))
                {
                    NewFare = FareInfo.AppendChild(Fare.CloneNode(false));
                    NewFare.Attributes.GetNamedItem("ptc").InnerText = Traveller.SelectSingleNode("pax").Attributes.GetNamedItem("ptc").InnerText;
                    NewFare.Attributes.GetNamedItem("amount").InnerText = (BaseFare[2] + BaseFsc[2] + BaseTax[2]).ToString();
                    NewFare.Attributes.GetNamedItem("fare").InnerText = BaseFare[2].ToString();
                    NewFare.Attributes.GetNamedItem("disFare").InnerText = BaseFare[2].ToString();
                    NewFare.Attributes.GetNamedItem("tax").InnerText = BaseTax[2].ToString();
                    NewFare.Attributes.GetNamedItem("fsc").InnerText = BaseFsc[2].ToString();
                    NewFare.Attributes.GetNamedItem("price").InnerText = (BaseFare[2] + BaseFsc[2] + BaseTax[2]).ToString();
                    NewFare.Attributes.GetNamedItem("basis").InnerText = "";
                    NewFare.Attributes.GetNamedItem("tkd").InnerText = "";
                    break;
                }
            }

            FareInfo.RemoveChild(Fare);

			return XmlDoc.DocumentElement;
		}

        /// <summary>
        /// SearchBookingRS를 통합용 XML구조로 치환
        /// </summary>
        /// <param name="ResXml">SearchBookingRS의 Data</param>
        /// <returns></returns>
        protected XmlElement ToModeSearchBookingAbacus(XmlElement ResXml, XmlNamespaceManager xnMgr)
        {
            if (ResXml.Attributes.GetNamedItem("Version").InnerText.Equals("3.10.0"))
            {
                return ToModeSearchBookingAbacus_TravelItineraryRead(ResXml, xnMgr);
            }
            
            XmlNode Reservation = ResXml.SelectSingleNode("stl19:Reservation", xnMgr);
            XmlNode BookingDetails = Reservation.SelectSingleNode("stl19:BookingDetails", xnMgr);
            XmlNode PassengerReservation = Reservation.SelectSingleNode("stl19:PassengerReservation", xnMgr);
            XmlNode OpenReservationElements = Reservation.SelectSingleNode("stl19:OpenReservationElements", xnMgr);

            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchBookingRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            //기본정보
            XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");
            BookingInfo.SelectSingleNode("bookingNo").InnerText = BookingDetails.SelectSingleNode("stl19:RecordLocator", xnMgr).InnerText;
            BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = BookingInfo.SelectSingleNode("bookingNo").InnerText;
            BookingInfo.SelectSingleNode("bookingTL").Attributes.GetNamedItem("ttl").InnerText = SelectATLBase(0, 0, "Abacus", "N", ResXml);

            #region "여정"

            XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
            XmlNode SegmentGroup = FlightInfo.SelectSingleNode("segGroup");
            XmlNode Segment = SegmentGroup.SelectSingleNode("seg");
            XmlNode StopSegment = Segment.SelectSingleNode("seg");
            XmlNode NewSegmentGroup = null;
            XmlNode NewSegment = null;
            XmlNode NewStopSegmentA = null;
            XmlNode NewStopSegmentB = null;

            if (PassengerReservation.SelectNodes("stl19:Segments", xnMgr).Count > 0 && PassengerReservation.SelectNodes("stl19:Segments/stl19:Segment[stl19:Air]", xnMgr).Count > 0)
            {
                int GroupIdx = 1;

                foreach (XmlNode ItemNode in PassengerReservation.SelectNodes("stl19:Segments/stl19:Segment[stl19:Air]", xnMgr))
                {
                    XmlNode FlightSegment = ItemNode.SelectSingleNode("stl19:Air", xnMgr);

                    if (FlightSegment.SelectSingleNode("stl19:inboundConnection", xnMgr).InnerText.Equals("false"))
                    {
                        NewSegmentGroup = FlightInfo.AppendChild(SegmentGroup.CloneNode(false));
                        NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = (GroupIdx++).ToString();
                    }

                    NewSegment = NewSegmentGroup.AppendChild(Segment.CloneNode(false));
                    NewSegment.Attributes.GetNamedItem("ref").InnerText = FlightSegment.Attributes.GetNamedItem("sequence").InnerText;

                    //기착수
                    int STN = ((XmlAttribute)FlightSegment.Attributes.GetNamedItem("StopQuantity") != null) ? cm.RequestInt(FlightSegment.Attributes.GetNamedItem("StopQuantity").InnerText) : 0;

                    if (FlightSegment.SelectSingleNode("stl19:FlightNumber", xnMgr).InnerText.Equals("OPEN"))
                    {
                        NewSegment.Attributes.GetNamedItem("dlc").InnerText = FlightSegment.SelectSingleNode("stl19:DepartureAirport", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("alc").InnerText = FlightSegment.SelectSingleNode("stl19:ArrivalAirport", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("ddt").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("ardt").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("mcc").InnerText = FlightSegment.SelectSingleNode("stl19:MarketingAirlineCode", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("occ").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("fln").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("eqt").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("stn").InnerText = "0";
                        NewSegment.Attributes.GetNamedItem("etc").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("rbd").InnerText = FlightSegment.SelectSingleNode("stl19:ClassOfService", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("rsco").InnerText = "QQ";
                        NewSegment.Attributes.GetNamedItem("rsc").InnerText = "QQ";
                        NewSegment.Attributes.GetNamedItem("eft").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("pnr").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("dtc").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("atc").InnerText = "";
                    }
                    else
                    {
                        string GWT = string.Empty;
                        
                        NewSegment.Attributes.GetNamedItem("dlc").InnerText = FlightSegment.SelectSingleNode("stl19:DepartureAirport", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("alc").InnerText = FlightSegment.SelectSingleNode("stl19:ArrivalAirport", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(FlightSegment.SelectSingleNode("stl19:DepartureDateTime", xnMgr).InnerText);
                        NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(FlightSegment.SelectSingleNode("stl19:ArrivalDateTime", xnMgr).InnerText);
                        NewSegment.Attributes.GetNamedItem("mcc").InnerText = FlightSegment.SelectSingleNode("stl19:MarketingAirlineCode", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("occ").InnerText = FlightSegment.SelectSingleNode("stl19:OperatingAirlineCode", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(FlightSegment.SelectSingleNode("stl19:FlightNumber", xnMgr).InnerText);
                        NewSegment.Attributes.GetNamedItem("eqt").InnerText = FlightSegment.SelectSingleNode("stl19:EquipmentType", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("stn").InnerText = STN.ToString();
                        NewSegment.Attributes.GetNamedItem("etc").InnerText = FlightSegment.SelectSingleNode("stl19:Eticket", xnMgr).InnerText.Equals("true") ? "Y" : "N";
                        NewSegment.Attributes.GetNamedItem("rbd").InnerText = FlightSegment.SelectSingleNode("stl19:ClassOfService", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("rsco").InnerText = FlightSegment.SelectSingleNode("stl19:ActionCode", xnMgr).InnerText;
                        NewSegment.Attributes.GetNamedItem("rsc").InnerText = Common.BookingStatusCode(NewSegment.Attributes.GetNamedItem("rsco").InnerText);
                        NewSegment.Attributes.GetNamedItem("eft").InnerText = (FlightSegment.SelectNodes("stl19:ElapsedTime", xnMgr).Count > 0) ? cm.ConvertToDateTime(FlightSegment.SelectSingleNode("stl19:ElapsedTime", xnMgr).InnerText) : "";
                        NewSegment.Attributes.GetNamedItem("pnr").InnerText = (FlightSegment.SelectNodes("stl19:AirlineRefId", xnMgr).Count > 0) ? ((FlightSegment.SelectSingleNode("stl19:AirlineRefId", xnMgr).InnerText.IndexOf('*') != -1) ? FlightSegment.SelectSingleNode("stl19:AirlineRefId", xnMgr).InnerText.Split('*')[1] : FlightSegment.SelectSingleNode("stl19:AirlineRefId", xnMgr).InnerText) : "";
                        NewSegment.Attributes.GetNamedItem("dtc").InnerText = (FlightSegment.SelectNodes("stl19:DepartureTerminalCode", xnMgr).Count > 0) ? FlightSegment.SelectSingleNode("stl19:DepartureTerminalCode", xnMgr).InnerText : "";
                        NewSegment.Attributes.GetNamedItem("atc").InnerText = (FlightSegment.SelectNodes("stl19:ArrivalTerminalCode", xnMgr).Count > 0) ? FlightSegment.SelectSingleNode("stl19:ArrivalTerminalCode", xnMgr).InnerText : "";

                        if (STN > 0)
                        {
                            NewStopSegmentA = NewSegment.AppendChild(StopSegment.CloneNode(false));
                            NewStopSegmentA.Attributes.GetNamedItem("dlc").InnerText = NewSegment.Attributes.GetNamedItem("dlc").InnerText;
                            NewStopSegmentA.Attributes.GetNamedItem("alc").InnerText = FlightSegment.SelectSingleNode("stl19:HiddenStop", xnMgr).Attributes.GetNamedItem("Airport").InnerText;
                            NewStopSegmentA.Attributes.GetNamedItem("ddt").InnerText = NewSegment.Attributes.GetNamedItem("ddt").InnerText;
                            NewStopSegmentA.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(FlightSegment.SelectSingleNode("stl19:HiddenStop/stl19:ArrivalDateTime", xnMgr).InnerText);
                            NewStopSegmentA.Attributes.GetNamedItem("eft").InnerText = "";
                            NewStopSegmentA.Attributes.GetNamedItem("gwt").InnerText = "";

                            NewStopSegmentB = NewSegment.AppendChild(StopSegment.CloneNode(false));
                            NewStopSegmentB.Attributes.GetNamedItem("dlc").InnerText = FlightSegment.SelectSingleNode("stl19:HiddenStop", xnMgr).Attributes.GetNamedItem("Airport").InnerText;
                            NewStopSegmentB.Attributes.GetNamedItem("alc").InnerText = NewSegment.Attributes.GetNamedItem("alc").InnerText;
                            NewStopSegmentB.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(FlightSegment.SelectSingleNode("stl19:HiddenStop/stl19:DepartureDateTime", xnMgr).InnerText);
                            NewStopSegmentB.Attributes.GetNamedItem("ardt").InnerText = NewSegment.Attributes.GetNamedItem("ardt").InnerText;
                            NewStopSegmentB.Attributes.GetNamedItem("eft").InnerText = "";
                            NewStopSegmentB.Attributes.GetNamedItem("gwt").InnerText = cm.ElapseFlyingTime(NewStopSegmentA.Attributes.GetNamedItem("ardt").InnerText, NewStopSegmentB.Attributes.GetNamedItem("ddt").InnerText).Replace(":", "");

                            if (!String.IsNullOrWhiteSpace(NewStopSegmentB.Attributes.GetNamedItem("gwt").InnerText))
                                GWT = cm.SumTime(NewStopSegmentB.Attributes.GetNamedItem("gwt").InnerText, GWT);

                            NewSegment.Attributes.GetNamedItem("ewt").InnerText = cm.ConvertToDateTime(GWT);
                        }
                    }
                }
            }

            FlightInfo.RemoveChild(SegmentGroup);

            #endregion "여정"

            #region "탑승객"

            XmlNode TravellerInfo = XmlDoc.SelectSingleNode("ResponseDetails/travellerInfo");
            XmlNode PaxData = TravellerInfo.SelectSingleNode("paxData");
            XmlNode Pax;
            XmlNode Passport;
            XmlNode NewPaxData;

            //성인/소아
            foreach (XmlNode Passenger in PassengerReservation.SelectNodes("stl19:Passengers/stl19:Passenger[@passengerType!='INF']", xnMgr))
            {
                string[] TmpPaxName = cm.SplitPaxType(Passenger.SelectSingleNode("stl19:FirstName", xnMgr).InnerText.Trim(), false);

                NewPaxData = TravellerInfo.AppendChild(PaxData.CloneNode(true));

                Pax = NewPaxData.SelectSingleNode("pax");
                Pax.Attributes.GetNamedItem("ref").InnerText = Passenger.Attributes.GetNamedItem("nameAssocId").InnerText;
                Pax.Attributes.GetNamedItem("phn").InnerText = "";
                Pax.Attributes.GetNamedItem("psn").InnerText = Passenger.SelectSingleNode("stl19:LastName", xnMgr).InnerText;
                Pax.Attributes.GetNamedItem("pfn").InnerText = TmpPaxName[1].Trim();
                Pax.Attributes.GetNamedItem("ptc").InnerText = (String.IsNullOrWhiteSpace(TmpPaxName[2])) ? (Passenger.Attributes.GetNamedItem("passengerType").InnerText.StartsWith("C") ? "CHD" : Passenger.Attributes.GetNamedItem("passengerType").InnerText) : TmpPaxName[2].Trim();
                Pax.Attributes.GetNamedItem("ptl").InnerText = TmpPaxName[0].Trim();
                Pax.Attributes.GetNamedItem("pbd").InnerText = "";
                Pax.Attributes.GetNamedItem("gni").InnerText = "";

                //여권정보
                if (Passenger.SelectNodes(String.Format("stl19:SpecialRequests/stl19:APISRequest/stl19:DOCSEntry[stl19:Surname='{0}' and stl19:Forename='{1}']", Pax.Attributes.GetNamedItem("psn").InnerText, Pax.Attributes.GetNamedItem("pfn").InnerText), xnMgr).Count > 0)
                {
                    XmlNode DOCS = Passenger.SelectSingleNode(String.Format("stl19:SpecialRequests/stl19:APISRequest[stl19:DOCSEntry[stl19:Surname='{0}' and stl19:Forename='{1}']][last()]/stl19:DOCSEntry", Pax.Attributes.GetNamedItem("psn").InnerText, Pax.Attributes.GetNamedItem("pfn").InnerText), xnMgr);

                    Passport = NewPaxData.SelectSingleNode("passport");
                    Passport.Attributes.GetNamedItem("id").InnerText = DOCS.SelectSingleNode("stl19:DocumentNumber", xnMgr).InnerText;
                    Passport.Attributes.GetNamedItem("expireDate").InnerText = DOCS.SelectSingleNode("stl19:DocumentExpirationDate", xnMgr).InnerText;
                    Passport.Attributes.GetNamedItem("issueCountry").InnerText = DOCS.SelectSingleNode("stl19:CountryOfIssue", xnMgr).InnerText;
                    Passport.Attributes.GetNamedItem("holderNationality").InnerText = DOCS.SelectSingleNode("stl19:DocumentNationalityCountry", xnMgr).InnerText;
                    Passport.Attributes.GetNamedItem("writeDate").InnerText = "";

                    Pax.Attributes.GetNamedItem("pbd").InnerText = DOCS.SelectSingleNode("stl19:DateOfBirth", xnMgr).InnerText;
                }

                //티켓정보
                foreach (XmlNode TicketingRequest in Passenger.SelectNodes("stl19:SpecialRequests/stl19:TicketingRequest[stl19:ActionCode='HK'][not(starts-with(stl19:TicketNumber, 'INF'))]", xnMgr))
                {
                    string TicketNumber = TicketingRequest.SelectSingleNode("stl19:TicketNumber", xnMgr).InnerText.Substring(0, 13);

                    if (NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText.IndexOf(TicketNumber).Equals(-1))
                    {
                        if (!String.IsNullOrWhiteSpace(NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText))
                            NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText += "/";

                        NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText += TicketNumber;
                    }
                }

                //항공사 마일리지 회원정보
                if (Passenger.SelectNodes("stl19:FrequentFlyer", xnMgr).Count > 0)
                {
                    NewPaxData.SelectSingleNode("membership").Attributes.GetNamedItem("carrier").InnerText = Passenger.SelectSingleNode("stl19:FrequentFlyer/stl19:SupplierCode", xnMgr).InnerText;
                    NewPaxData.SelectSingleNode("membership").Attributes.GetNamedItem("number").InnerText = Passenger.SelectSingleNode("stl19:FrequentFlyer/stl19:Number", xnMgr).InnerText;
                }
            }

            //유아
            foreach (XmlNode Passenger in PassengerReservation.SelectNodes("stl19:Passengers/stl19:Passenger[@passengerType='INF']", xnMgr))
            {
                XmlNode ParentPassenger = PassengerReservation.SelectSingleNode(String.Format("stl19:Passengers/stl19:Passenger[@withInfant='true'][stl19:SpecialRequests/stl19:GenericSpecialRequest[stl19:Code='INFT' and starts-with(stl19:FreeText, '/{0}/{1}/')]]", Passenger.SelectSingleNode("stl19:LastName", xnMgr).InnerText, Passenger.SelectSingleNode("stl19:FirstName", xnMgr).InnerText), xnMgr);
                string[] TmpPaxName = cm.SplitPaxType(Passenger.SelectSingleNode("stl19:FirstName", xnMgr).InnerText.Trim(), false);

                NewPaxData = TravellerInfo.AppendChild(PaxData.CloneNode(true));

                Pax = NewPaxData.SelectSingleNode("pax");
                Pax.Attributes.GetNamedItem("ref").InnerText = Passenger.Attributes.GetNamedItem("nameAssocId").InnerText;
                Pax.Attributes.GetNamedItem("phn").InnerText = "";
                Pax.Attributes.GetNamedItem("psn").InnerText = Passenger.SelectSingleNode("stl19:LastName", xnMgr).InnerText;
                Pax.Attributes.GetNamedItem("pfn").InnerText = TmpPaxName[1].Trim();
                Pax.Attributes.GetNamedItem("ptc").InnerText = Passenger.Attributes.GetNamedItem("passengerType").InnerText;
                Pax.Attributes.GetNamedItem("ptl").InnerText = TmpPaxName[0].Trim();
                Pax.Attributes.GetNamedItem("pbd").InnerText = "";
                Pax.Attributes.GetNamedItem("gni").InnerText = (ParentPassenger != null) ? ParentPassenger.Attributes.GetNamedItem("nameAssocId").InnerText : "";

                if (ParentPassenger != null)
                {
                    //여권정보
                    if (ParentPassenger.SelectNodes(String.Format("stl19:SpecialRequests/stl19:APISRequest/stl19:DOCSEntry[stl19:Surname='{0}' and stl19:Forename='{1}']", Pax.Attributes.GetNamedItem("psn").InnerText, Pax.Attributes.GetNamedItem("pfn").InnerText), xnMgr).Count > 0)
                    {
                        XmlNode DOCS = ParentPassenger.SelectSingleNode(String.Format("stl19:SpecialRequests/stl19:APISRequest[stl19:DOCSEntry[stl19:Surname='{0}' and stl19:Forename='{1}']][last()]/stl19:DOCSEntry", Pax.Attributes.GetNamedItem("psn").InnerText, Pax.Attributes.GetNamedItem("pfn").InnerText), xnMgr);

                        Passport = NewPaxData.SelectSingleNode("passport");
                        Passport.Attributes.GetNamedItem("id").InnerText = DOCS.SelectSingleNode("stl19:DocumentNumber", xnMgr).InnerText;
                        Passport.Attributes.GetNamedItem("expireDate").InnerText = DOCS.SelectSingleNode("stl19:DocumentExpirationDate", xnMgr).InnerText;
                        Passport.Attributes.GetNamedItem("issueCountry").InnerText = DOCS.SelectSingleNode("stl19:CountryOfIssue", xnMgr).InnerText;
                        Passport.Attributes.GetNamedItem("holderNationality").InnerText = DOCS.SelectSingleNode("stl19:DocumentNationalityCountry", xnMgr).InnerText;
                        Passport.Attributes.GetNamedItem("writeDate").InnerText = "";

                        Pax.Attributes.GetNamedItem("pbd").InnerText = DOCS.SelectSingleNode("stl19:DateOfBirth", xnMgr).InnerText;
                    }

                    //티켓정보
                    foreach (XmlNode TicketingRequest in ParentPassenger.SelectNodes("stl19:SpecialRequests/stl19:TicketingRequest[stl19:ActionCode='HK'][starts-with(stl19:TicketNumber, 'INF')]", xnMgr))
                    {
                        string TicketNumber = TicketingRequest.SelectSingleNode("stl19:TicketNumber", xnMgr).InnerText.Substring(3, 13);

                        if (NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText.IndexOf(TicketNumber).Equals(-1))
                        {
                            if (!String.IsNullOrWhiteSpace(NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText))
                                NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText += "/";

                            NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText += TicketNumber;
                        }
                    }
                }
            }

            TravellerInfo.RemoveChild(PaxData);

            #endregion "탑승객"

            #region "요금"

            XmlNode FareInfo = XmlDoc.SelectSingleNode("ResponseDetails/fareInfo");
            XmlNode Fare = FareInfo.SelectSingleNode("fare");
            XmlNode NewFare;

            string StrFareInfo = string.Empty;
            string StrFscInfo = string.Empty;
            string StrTaxInfo = string.Empty;

            foreach (XmlNode PhoneNumber in Reservation.SelectNodes("stl19:PhoneNumbers/stl19:PhoneNumber", xnMgr))
            {
                if (PhoneNumber.SelectSingleNode("stl19:Number", xnMgr).InnerText.IndexOf("T*FARE/") != -1)
                {
                    StrFareInfo = PhoneNumber.SelectSingleNode("stl19:Number", xnMgr).InnerText;
                }
                else if (PhoneNumber.SelectSingleNode("stl19:Number", xnMgr).InnerText.IndexOf("T*FSC/") != -1)
                {
                    StrFscInfo = PhoneNumber.SelectSingleNode("stl19:Number", xnMgr).InnerText;
                }
                else if (PhoneNumber.SelectSingleNode("stl19:Number", xnMgr).InnerText.IndexOf("T*TAX/") != -1)
                {
                    StrTaxInfo = PhoneNumber.SelectSingleNode("stl19:Number", xnMgr).InnerText;
                }
            }

            if (!String.IsNullOrWhiteSpace(StrFareInfo))
            {
                int[] BaseFare = new Int32[3];
                int[] BaseFsc = new Int32[3];
                int[] BaseTax = new Int32[4];

                BaseFare[0] = 0;
                BaseFare[1] = 0;
                BaseFare[2] = 0;

                BaseFsc[0] = 0;
                BaseFsc[1] = 0;
                BaseFsc[2] = 0;

                BaseTax[0] = 0;
                BaseTax[1] = 0;
                BaseTax[2] = 0;
                BaseTax[3] = 0;

                foreach (string fare in StrFareInfo.Split('/'))
                {
                    if (fare.StartsWith("A"))
                        BaseFare[0] = cm.RequestInt(fare.Replace("A", ""));
                    else if (fare.StartsWith("C"))
                        BaseFare[1] = cm.RequestInt(fare.Replace("C", ""));
                    else if (fare.StartsWith("I"))
                        BaseFare[2] = cm.RequestInt(fare.Replace("I", ""));
                }

                foreach (string fsc in StrFscInfo.Split('/'))
                {
                    if (fsc.StartsWith("A"))
                        BaseFsc[0] = cm.RequestInt(fsc.Replace("A", ""));
                    else if (fsc.StartsWith("C"))
                        BaseFsc[1] = cm.RequestInt(fsc.Replace("C", ""));
                    else if (fsc.StartsWith("I"))
                        BaseFsc[2] = cm.RequestInt(fsc.Replace("I", ""));
                }

                foreach (string tax in StrTaxInfo.Split('/'))
                {
                    if (tax.StartsWith("A"))
                        BaseTax[0] = cm.RequestInt(tax.Replace("A", ""));
                    else if (tax.StartsWith("C"))
                        BaseTax[1] = cm.RequestInt(tax.Replace("C", ""));
                    else if (tax.StartsWith("I"))
                        BaseTax[2] = cm.RequestInt(tax.Replace("I", ""));
                    else if (tax.StartsWith("Q"))
                        BaseTax[3] = cm.RequestInt(tax.Replace("Q", ""));
                }

                foreach (XmlNode Traveller in TravellerInfo.SelectNodes("paxData[pax/@ptc='ADT']", xnMgr))
                {
                    NewFare = FareInfo.AppendChild(Fare.CloneNode(false));
                    NewFare.Attributes.GetNamedItem("ptc").InnerText = Traveller.SelectSingleNode("pax").Attributes.GetNamedItem("ptc").InnerText;
                    NewFare.Attributes.GetNamedItem("amount").InnerText = (BaseFare[0] + BaseFsc[0] + BaseTax[0]).ToString();
                    NewFare.Attributes.GetNamedItem("fare").InnerText = BaseFare[0].ToString();
                    NewFare.Attributes.GetNamedItem("disFare").InnerText = BaseFare[0].ToString();
                    NewFare.Attributes.GetNamedItem("tax").InnerText = BaseTax[0].ToString();
                    NewFare.Attributes.GetNamedItem("fsc").InnerText = BaseFsc[0].ToString();
                    NewFare.Attributes.GetNamedItem("price").InnerText = (BaseFare[0] + BaseFsc[0] + BaseTax[0]).ToString();
                    NewFare.Attributes.GetNamedItem("basis").InnerText = "";
                    NewFare.Attributes.GetNamedItem("tkd").InnerText = "";
                    break;
                }

                foreach (XmlNode Traveller in TravellerInfo.SelectNodes("paxData[pax/@ptc='CHD']", xnMgr))
                {
                    NewFare = FareInfo.AppendChild(Fare.CloneNode(false));
                    NewFare.Attributes.GetNamedItem("ptc").InnerText = Traveller.SelectSingleNode("pax").Attributes.GetNamedItem("ptc").InnerText;
                    NewFare.Attributes.GetNamedItem("amount").InnerText = (BaseFare[1] + BaseFsc[1] + BaseTax[1]).ToString();
                    NewFare.Attributes.GetNamedItem("fare").InnerText = BaseFare[1].ToString();
                    NewFare.Attributes.GetNamedItem("disFare").InnerText = BaseFare[1].ToString();
                    NewFare.Attributes.GetNamedItem("tax").InnerText = BaseTax[1].ToString();
                    NewFare.Attributes.GetNamedItem("fsc").InnerText = BaseFsc[1].ToString();
                    NewFare.Attributes.GetNamedItem("price").InnerText = (BaseFare[1] + BaseFsc[1] + BaseTax[1]).ToString();
                    NewFare.Attributes.GetNamedItem("basis").InnerText = "";
                    NewFare.Attributes.GetNamedItem("tkd").InnerText = "";
                    break;
                }

                foreach (XmlNode Traveller in TravellerInfo.SelectNodes("paxData[pax/@ptc='INF']", xnMgr))
                {
                    NewFare = FareInfo.AppendChild(Fare.CloneNode(false));
                    NewFare.Attributes.GetNamedItem("ptc").InnerText = Traveller.SelectSingleNode("pax").Attributes.GetNamedItem("ptc").InnerText;
                    NewFare.Attributes.GetNamedItem("amount").InnerText = (BaseFare[2] + BaseFsc[2] + BaseTax[2]).ToString();
                    NewFare.Attributes.GetNamedItem("fare").InnerText = BaseFare[2].ToString();
                    NewFare.Attributes.GetNamedItem("disFare").InnerText = BaseFare[2].ToString();
                    NewFare.Attributes.GetNamedItem("tax").InnerText = BaseTax[2].ToString();
                    NewFare.Attributes.GetNamedItem("fsc").InnerText = BaseFsc[2].ToString();
                    NewFare.Attributes.GetNamedItem("price").InnerText = (BaseFare[2] + BaseFsc[2] + BaseTax[2]).ToString();
                    NewFare.Attributes.GetNamedItem("basis").InnerText = "";
                    NewFare.Attributes.GetNamedItem("tkd").InnerText = "";
                    break;
                }
            }

            FareInfo.RemoveChild(Fare);

            #endregion "요금"

            return XmlDoc.DocumentElement;
        }

        /// <summary>
        /// SearchBookingRS를 통합용 XML구조로 치환
        /// </summary>
        /// <param name="ResXml">SearchBookingRS의 Data</param>
        /// <returns></returns>
        protected XmlElement ToModeSearchBookingGalileo(XmlElement ResXml)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchBookingRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            //기본정보
            XmlNode GenPnrInfo = (ResXml.SelectNodes("ReservationData").Count > 0) ? ResXml.SelectSingleNode("ReservationData") : ResXml.SelectSingleNode("GenPnrInfo");
            XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");
            BookingInfo.SelectSingleNode("bookingNo").InnerText = String.IsNullOrWhiteSpace(GenPnrInfo.SelectSingleNode("PnrAddress2").InnerText) ? GenPnrInfo.SelectSingleNode("PnrAddress").InnerText : GenPnrInfo.SelectSingleNode("PnrAddress2").InnerText;
            BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = GenPnrInfo.SelectSingleNode("PnrAddress").InnerText;
            BookingInfo.SelectSingleNode("bookingTL").Attributes.GetNamedItem("ttl").InnerText = String.IsNullOrWhiteSpace(GenPnrInfo.SelectSingleNode("AirTLDate").InnerText) ? "" : String.Format("{0} {1}", cm.ConvertToDateTime(GenPnrInfo.SelectSingleNode("AirTLDate").InnerText), cm.ConvertToDateTime(GenPnrInfo.SelectSingleNode("AirTLTime").InnerText));
            BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ucf").InnerText = (GenPnrInfo.SelectNodes("ConfirmInd").Count > 0) ? (GenPnrInfo.SelectSingleNode("ConfirmInd").InnerText.Equals("Y") ? "N" : "Y") : "N";

            //여정
            XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
            XmlNode SegmentGroup = FlightInfo.SelectSingleNode("segGroup");
            XmlNode Segment = SegmentGroup.SelectSingleNode("seg");
            XmlNode StopSegment = Segment.SelectSingleNode("seg");
            XmlNode NewSegmentGroup;
            XmlNode NewSegment;
            XmlNode NewStopSegment;
            string SegGroupNo = string.Empty;
            string ConTm = string.Empty;
            int idx = 1;

            if (ResXml.SelectNodes("AirSegDetail").Count > 0)
            {
                foreach (XmlNode AirSegDetail in ResXml.SelectNodes("AirSegDetail[not(SegGroupNo=preceding-sibling::AirSegDetail/SegGroupNo)]"))
                {
                    SegGroupNo = AirSegDetail.SelectSingleNode("SegGroupNo").InnerText;

                    NewSegmentGroup = FlightInfo.AppendChild(SegmentGroup.CloneNode(false));
                    NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = SegGroupNo;
                    ConTm = "";
                    idx = 1;

                    foreach (XmlNode ItemNode in ResXml.SelectNodes(String.Format("AirSegDetail[SegGroupNo='{0}']", SegGroupNo)))
                    {
                        NewSegment = NewSegmentGroup.AppendChild(Segment.CloneNode(false));
                        NewSegment.Attributes.GetNamedItem("ref").InnerText = (idx++).ToString();
                        NewSegment.Attributes.GetNamedItem("dlc").InnerText = ItemNode.SelectSingleNode("StartAirp").InnerText;
                        NewSegment.Attributes.GetNamedItem("alc").InnerText = ItemNode.SelectSingleNode("EndAirp").InnerText;
                        NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(ItemNode.SelectSingleNode("StartDtTm").InnerText);
                        NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(ItemNode.SelectSingleNode("EndDtTm").InnerText);
                        NewSegment.Attributes.GetNamedItem("mcc").InnerText = ItemNode.SelectSingleNode("AirV").InnerText;
                        NewSegment.Attributes.GetNamedItem("occ").InnerText = String.IsNullOrWhiteSpace(ItemNode.SelectSingleNode("OpAirV").InnerText) ? ItemNode.SelectSingleNode("AirV").InnerText : ItemNode.SelectSingleNode("OpAirV").InnerText;
                        NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(ItemNode.SelectSingleNode("FltNum").InnerText);
                        NewSegment.Attributes.GetNamedItem("eqt").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("stn").InnerText = cm.RequestInt(ItemNode.SelectSingleNode("StopCnt").InnerText).ToString();
                        NewSegment.Attributes.GetNamedItem("etc").InnerText = "Y";
                        NewSegment.Attributes.GetNamedItem("rbd").InnerText = ItemNode.SelectSingleNode("BkClass").InnerText;
                        NewSegment.Attributes.GetNamedItem("rsco").InnerText = ItemNode.SelectSingleNode("Status").InnerText;
                        NewSegment.Attributes.GetNamedItem("rsc").InnerText = Common.BookingStatusCode(NewSegment.Attributes.GetNamedItem("rsco").InnerText);
                        NewSegment.Attributes.GetNamedItem("eft").InnerText = cm.ConvertToDateTime(ItemNode.SelectSingleNode("FltTm").InnerText);
                        NewSegment.Attributes.GetNamedItem("ewt").InnerText = String.IsNullOrWhiteSpace(ConTm) ? "" : cm.SumTime(ConTm, ItemNode.SelectSingleNode("ConTm").InnerText);
                        NewSegment.Attributes.GetNamedItem("ewt").InnerText = NewSegment.Attributes.GetNamedItem("ewt").InnerText.Equals("00:00") ? "" : NewSegment.Attributes.GetNamedItem("ewt").InnerText;
                        NewSegment.Attributes.GetNamedItem("pnr").InnerText = ItemNode.SelectSingleNode("VndRecLoc").InnerText;

                        if (NewSegment.Attributes.GetNamedItem("stn").InnerText.Equals("1"))
                        {
                            //갈릴레오는 기착지에 대한 상세 스케쥴 정보를 주지 않아 아마데우스 비행편 정보로 출력
                            XmlElement FlightInfoXml = FlightInfoRS(2, NewSegment.Attributes.GetNamedItem("ddt").InnerText, "", NewSegment.Attributes.GetNamedItem("dlc").InnerText, NewSegment.Attributes.GetNamedItem("alc").InnerText, NewSegment.Attributes.GetNamedItem("mcc").InnerText, NewSegment.Attributes.GetNamedItem("occ").InnerText, NewSegment.Attributes.GetNamedItem("fln").InnerText);
                            
                            if (FlightInfoXml.SelectNodes("flightInfo").Count > 0)
                            {
                                //NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                                //NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[1]").Attributes.GetNamedItem("dlc").InnerText;
                                //NewStopSegment.Attributes.GetNamedItem("alc").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[1]").Attributes.GetNamedItem("alc").InnerText;
                                //NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[1]").Attributes.GetNamedItem("ddt").InnerText;
                                //NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[1]").Attributes.GetNamedItem("ardt").InnerText;

                                //NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                                //NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[2]").Attributes.GetNamedItem("dlc").InnerText;
                                //NewStopSegment.Attributes.GetNamedItem("alc").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[2]").Attributes.GetNamedItem("alc").InnerText;
                                //NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[2]").Attributes.GetNamedItem("ddt").InnerText;
                                //NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[2]").Attributes.GetNamedItem("ardt").InnerText;

                                int TotalEFT = 0;
                                int TotalGWT = 0;

                                foreach (XmlNode LegInfo in FlightInfoXml.SelectNodes("flightInfo/flightIndex/segGroup/seg"))
                                {
                                    TotalEFT += cm.ChangeMinutes(LegInfo.Attributes.GetNamedItem("eft").InnerText);
                                    TotalGWT += cm.ChangeMinutes(LegInfo.Attributes.GetNamedItem("gwt").InnerText);

                                    NewSegment.AppendChild(XmlDoc.ImportNode(LegInfo, true));
                                }

                                NewSegment.Attributes.GetNamedItem("eft").InnerText = cm.ChangeTime(TotalEFT);
                                NewSegment.Attributes.GetNamedItem("ewt").InnerText = TotalGWT.Equals(0) ? "" : cm.ChangeTime(TotalGWT);
                            }
                            else
                            {
                                NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                                NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = NewSegment.Attributes.GetNamedItem("dlc").InnerText;
                                NewStopSegment.Attributes.GetNamedItem("alc").InnerText = ItemNode.SelectSingleNode("StopCity1").InnerText;
                                NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = NewSegment.Attributes.GetNamedItem("ddt").InnerText;
                                NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = "";

                                NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                                NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = ItemNode.SelectSingleNode("StopCity1").InnerText;
                                NewStopSegment.Attributes.GetNamedItem("alc").InnerText = NewSegment.Attributes.GetNamedItem("alc").InnerText;
                                NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = "";
                                NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = NewSegment.Attributes.GetNamedItem("ardt").InnerText;
                            }
                        }

                        //대기시간
                        ConTm = ItemNode.SelectSingleNode("ConTm").InnerText;
                    }
                }
            }

            FlightInfo.RemoveChild(SegmentGroup);

            //탑승객
            XmlNode TravellerInfo = XmlDoc.SelectSingleNode("ResponseDetails/travellerInfo");
            XmlNode PaxData = TravellerInfo.SelectSingleNode("paxData");
            XmlNode Pax;
            //XmlNode Passport;
            XmlNode NewPaxData;
            idx = 1;

            foreach (XmlNode PersonNameNode in ResXml.SelectNodes("PaxFareInfo"))
            {
                //탑승객
                NewPaxData = TravellerInfo.AppendChild(PaxData.CloneNode(true));

                Pax = NewPaxData.SelectSingleNode("pax");
                Pax.Attributes.GetNamedItem("ref").InnerText = (idx++).ToString();
                Pax.Attributes.GetNamedItem("phn").InnerText = "";
                Pax.Attributes.GetNamedItem("psn").InnerText = PersonNameNode.SelectSingleNode("PaxLastName").InnerText;
                Pax.Attributes.GetNamedItem("pfn").InnerText = PersonNameNode.SelectSingleNode("PaxFirstName").InnerText;
                Pax.Attributes.GetNamedItem("ptc").InnerText = (PersonNameNode.SelectNodes("PaxType").Count > 0) ? PersonNameNode.SelectSingleNode("PaxType").InnerText : "";
                Pax.Attributes.GetNamedItem("ptl").InnerText = PersonNameNode.SelectSingleNode("PaxTitle").InnerText;
                Pax.Attributes.GetNamedItem("pbd").InnerText = (PersonNameNode.SelectNodes("BirthDate").Count > 0) ? PersonNameNode.SelectSingleNode("BirthDate").InnerText : "";
                Pax.Attributes.GetNamedItem("gni").InnerText = "";

                ////여권정보
                //foreach (XmlNode Service in TravelItinerary.SelectNodes("m:SpecialServices/m:Service[@SSRCode='SSR'][m:TPA_Extensions and m:TPA_Extensions/m:SSRType='DOCS']", xnMgr))
                //{
                //    if (Service.SelectSingleNode("m:Text", xnMgr).InnerText.IndexOf(String.Format("{0}/{1}", Pax.Attributes.GetNamedItem("psn").InnerText, Pax.Attributes.GetNamedItem("pfn").InnerText)) != -1)
                //    {
                //        string[] StrDocInfo = Service.SelectSingleNode("m:Text", xnMgr).InnerText.Split('/');

                //        if (StrDocInfo.Length > 9)
                //        {
                //            Passport = NewPaxData.SelectSingleNode("passport");
                //            Passport.Attributes.GetNamedItem("id").InnerText = StrDocInfo[3];
                //            Passport.Attributes.GetNamedItem("expireDate").InnerText = cm.ConvertToDateTime(StrDocInfo[7]);
                //            Passport.Attributes.GetNamedItem("issueCountry").InnerText = StrDocInfo[2];
                //            Passport.Attributes.GetNamedItem("holderNationality").InnerText = StrDocInfo[4];
                //            Passport.Attributes.GetNamedItem("writeDate").InnerText = "";

                //            Pax.Attributes.GetNamedItem("pbd").InnerText = cm.ConvertToBirthDate(StrDocInfo[5]);
                //        }
                //    }
                //}

                //티켓정보
                if (PersonNameNode.SelectNodes("PaxTicketNum").Count > 0)
                    NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText = PersonNameNode.SelectSingleNode("PaxTicketNum").InnerText;
            }

            TravellerInfo.RemoveChild(PaxData);

            //요금
            XmlNode FareInfo = XmlDoc.SelectSingleNode("ResponseDetails/fareInfo");
            XmlNode Fare = FareInfo.SelectSingleNode("fare");
            XmlNode NewFare;
            string PaxType = string.Empty;

            foreach (XmlNode PersonNameNode in ResXml.SelectNodes("PaxFareInfo[not(PaxType=preceding-sibling::PaxFareInfo/PaxType)]"))
            {
                if (PersonNameNode.SelectNodes("SaleFare").Count > 0)
                {
                    int BaseFare = Convert.ToInt32(PersonNameNode.SelectSingleNode("NormalFare").InnerText);
                    int BaseDisFare = Convert.ToInt32(PersonNameNode.SelectSingleNode("SaleFare").InnerText);
                    int BaseTax = Convert.ToInt32(PersonNameNode.SelectSingleNode("TaxAmt").InnerText);
                    int BaseFsc = Convert.ToInt32(PersonNameNode.SelectSingleNode("QchargeAmt").InnerText);

                    NewFare = FareInfo.AppendChild(Fare.CloneNode(false));
                    NewFare.Attributes.GetNamedItem("ptc").InnerText = PersonNameNode.SelectSingleNode("PaxType").InnerText;
                    NewFare.Attributes.GetNamedItem("amount").InnerText = (BaseFare + BaseTax + BaseFsc).ToString();
                    NewFare.Attributes.GetNamedItem("fare").InnerText = BaseFare.ToString();
                    NewFare.Attributes.GetNamedItem("disFare").InnerText = BaseDisFare.ToString();
                    NewFare.Attributes.GetNamedItem("tax").InnerText = BaseTax.ToString();
                    NewFare.Attributes.GetNamedItem("fsc").InnerText = BaseFsc.ToString();
                    NewFare.Attributes.GetNamedItem("price").InnerText = (BaseDisFare + BaseTax + BaseFsc).ToString();
                    NewFare.Attributes.GetNamedItem("basis").InnerText = "";
                    NewFare.Attributes.GetNamedItem("tkd").InnerText = "";
                }
            }

            FareInfo.RemoveChild(Fare);

            return XmlDoc.DocumentElement;
        }

        /// <summary>
        /// SearchBookingRS를 통합용 XML구조로 치환(투어소프트용)
        /// </summary>
        /// <param name="ResXml">SearchBookingRS의 Data</param>
        /// <returns></returns>
        protected XmlElement ToModeSearchBookingSabre(XmlElement ResXml)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchBookingRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            //기본정보
            XmlNode GenPnrInfo = ResXml.SelectSingleNode("pnr_common_data_t");
            XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");
            BookingInfo.SelectSingleNode("bookingNo").InnerText = String.IsNullOrWhiteSpace(GenPnrInfo.SelectSingleNode("pnr_addr2").InnerText) ? GenPnrInfo.SelectSingleNode("pnr_addr1").InnerText : GenPnrInfo.SelectSingleNode("pnr_addr2").InnerText;
            BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = GenPnrInfo.SelectSingleNode("pnr_addr1").InnerText;
            //BookingInfo.SelectSingleNode("bookingTL").Attributes.GetNamedItem("ttl").InnerText = String.IsNullOrWhiteSpace(GenPnrInfo.SelectSingleNode("ttl").InnerText) ? "" : String.Format("{0} {1}", cm.ConvertToDateTime(GenPnrInfo.SelectSingleNode("ttl").InnerText), (String.IsNullOrWhiteSpace(GenPnrInfo.SelectSingleNode("ttl_time").InnerText) ? "23:59" : cm.ConvertToDateTime(GenPnrInfo.SelectSingleNode("ttl_time").InnerText)));
            BookingInfo.SelectSingleNode("bookingAmount").Attributes.GetNamedItem("ucf").InnerText = (GenPnrInfo.SelectSingleNode("fare_fixed").InnerText.Equals("FY") || GenPnrInfo.SelectSingleNode("fare_fixed").InnerText.Equals("YY")) ? "N" : "Y";

            //TL
            if (GenPnrInfo.SelectSingleNode("ttl_type").InnerText.Equals("INST"))
            {
                //당일TL(항공사 시간과, 업무시간(주중:20시, 주말:16시) 중 빠른 시간으로 셋팅)(2018-07-16,김경미매니저)
                string NowDate = DateTime.Now.ToString("yyyy-MM-dd");

                int Time1 = String.IsNullOrWhiteSpace(GenPnrInfo.SelectSingleNode("ttl_time").InnerText) ? 2359 : Convert.ToInt32(GenPnrInfo.SelectSingleNode("ttl_time").InnerText);
                int Time2 = cm.WorkdayYN(NowDate) ? 2000 : 1600;

                BookingInfo.SelectSingleNode("bookingTL").Attributes.GetNamedItem("ttl").InnerText = String.Format("{0} {1}", NowDate, cm.ConvertToDateTime(Convert.ToString((Time1 > Time2) ? Time2 : Time1)));
            }
            else
            {
                string TmpTL1 = String.Empty;
                string TmpTL2 = String.Empty;
                
                foreach (XmlNode TTLDetail in ResXml.SelectNodes("ttl_detail_arry/ttl_detail"))
                {
                    TmpTL1 = String.Format("{0} {1}", cm.RequestDateTime(TTLDetail.SelectSingleNode("TL_Date").InnerText), cm.ConvertToDateTime(TTLDetail.SelectSingleNode("TL_Time").InnerText));

                    if (!String.IsNullOrWhiteSpace(TmpTL2))
                    {
                        if (cm.DateDiff("d", TmpTL1, TmpTL2) > 0)
                            TmpTL2 = TmpTL1;
                    }
                    else
                        TmpTL2 = TmpTL1;
                }

                if (!String.IsNullOrWhiteSpace(TmpTL2))
                {
                    //항공사 TL에서 2시간 빼준다(2019-08-27,김경미매니저)
                    BookingInfo.SelectSingleNode("bookingTL").Attributes.GetNamedItem("ttl").InnerText = Convert.ToDateTime(TmpTL2).AddHours(-2).ToString("yyyy-MM-dd HH:mm");
                }
            }

            //여정
            XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
            XmlNode SegmentGroup = FlightInfo.SelectSingleNode("segGroup");
            XmlNode Segment = SegmentGroup.SelectSingleNode("seg");
            XmlNode StopSegment = Segment.SelectSingleNode("seg");
            XmlNode NewSegmentGroup;
            XmlNode NewSegment;
            XmlNode NewStopSegment;
            XmlNodeList ItemNodes;
            XmlNode ItemNode;
            string SegGroupNo = string.Empty;
            
            if (ResXml.SelectNodes("seg_detail_t").Count > 0)
            {
                foreach (XmlNode SegGroupInfo in ResXml.SelectNodes("seg_group_info_arry/seg_group_info"))
                {
                    SegGroupNo = SegGroupInfo.SelectSingleNode("group_seq").InnerText;
                    ItemNodes = ResXml.SelectNodes(String.Format("seg_detail_t[group_seq='{0}']", SegGroupNo));

                    NewSegmentGroup = FlightInfo.AppendChild(SegmentGroup.CloneNode(false));
                    NewSegmentGroup.Attributes.GetNamedItem("ref").InnerText = SegGroupNo;
                    
                    for (int i = 0; i < ItemNodes.Count; i++)
                    {
                        ItemNode = ItemNodes[i];
                        
                        NewSegment = NewSegmentGroup.AppendChild(Segment.CloneNode(false));
                        NewSegment.Attributes.GetNamedItem("ref").InnerText = ItemNode.SelectSingleNode("seq_num").InnerText;
                        NewSegment.Attributes.GetNamedItem("dlc").InnerText = ItemNode.SelectSingleNode("dep_city").InnerText;
                        NewSegment.Attributes.GetNamedItem("alc").InnerText = ItemNode.SelectSingleNode("arr_city").InnerText;
                        NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(ItemNode.SelectSingleNode("dep_date_time").InnerText);
                        NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(ItemNode.SelectSingleNode("arr_date_time").InnerText);
                        NewSegment.Attributes.GetNamedItem("mcc").InnerText = ItemNode.SelectSingleNode("car_code").InnerText;
                        NewSegment.Attributes.GetNamedItem("occ").InnerText = String.IsNullOrWhiteSpace(ItemNode.SelectSingleNode("op_car_code").InnerText) ? ItemNode.SelectSingleNode("car_code").InnerText : ItemNode.SelectSingleNode("op_car_code").InnerText;
                        NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(ItemNode.SelectSingleNode("main_flt").InnerText);
                        NewSegment.Attributes.GetNamedItem("eqt").InnerText = ItemNode.SelectSingleNode("flt_type1").InnerText;
                        NewSegment.Attributes.GetNamedItem("stn").InnerText = ItemNode.SelectSingleNode("no_of_stop_over").InnerText;
                        NewSegment.Attributes.GetNamedItem("etc").InnerText = ItemNode.SelectSingleNode("tktg_type").InnerText.Equals("E") ? "Y" : "N";
                        NewSegment.Attributes.GetNamedItem("rbd").InnerText = ItemNode.SelectSingleNode("class").InnerText;
                        NewSegment.Attributes.GetNamedItem("rsco").InnerText = ItemNode.SelectSingleNode("status_code").InnerText;
                        NewSegment.Attributes.GetNamedItem("rsc").InnerText = Common.BookingStatusCode(NewSegment.Attributes.GetNamedItem("rsco").InnerText);
                        NewSegment.Attributes.GetNamedItem("eft").InnerText = cm.ConvertToDateTime(ItemNode.SelectSingleNode("flying_time").InnerText);
                        NewSegment.Attributes.GetNamedItem("ewt").InnerText = (i > 0) ? cm.ElapseFlyingTime(cm.ConvertToDateTime(ItemNodes[(i - 1)].SelectSingleNode("arr_date_time").InnerText), NewSegment.Attributes.GetNamedItem("ddt").InnerText) : "";
                        NewSegment.Attributes.GetNamedItem("pnr").InnerText = ItemNode.SelectSingleNode("pnr_addr").InnerText;

                        //여정상태코드='QQ'이면서 도착일이 존재하는 경우 대기예약으로 변경
                        if (NewSegment.Attributes.GetNamedItem("rsc").InnerText.Equals("QQ") && !String.IsNullOrWhiteSpace(NewSegment.Attributes.GetNamedItem("ardt").InnerText))
                            NewSegment.Attributes.GetNamedItem("rsc").InnerText = "HL";

                        if (NewSegment.Attributes.GetNamedItem("stn").InnerText.Equals("1"))
                        {
                            NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                            NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = NewSegment.Attributes.GetNamedItem("dlc").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("alc").InnerText = ItemNode.SelectSingleNode("via_point1").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = NewSegment.Attributes.GetNamedItem("ddt").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = "";
                            NewStopSegment.Attributes.GetNamedItem("eft").InnerText = "";
                            NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = "";

                            NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                            NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = ItemNode.SelectSingleNode("via_point1").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("alc").InnerText = NewSegment.Attributes.GetNamedItem("alc").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = "";
                            NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = NewSegment.Attributes.GetNamedItem("ardt").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("eft").InnerText = "";
                            NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = ItemNode.SelectSingleNode("via1_connecting_time").InnerText;
                        }
                    }
                }
            }

            FlightInfo.RemoveChild(SegmentGroup);

            //탑승객
            XmlNode TravellerInfo = XmlDoc.SelectSingleNode("ResponseDetails/travellerInfo");
            XmlNode PaxData = TravellerInfo.SelectSingleNode("paxData");
            XmlNode Pax;
            //XmlNode Passport;
            XmlNode NewPaxData;
            int idx = 1;

            foreach (XmlNode PersonNameNode in ResXml.SelectNodes("pax_detail_t"))
            {
                //탑승객
                NewPaxData = TravellerInfo.AppendChild(PaxData.CloneNode(true));

                Pax = NewPaxData.SelectSingleNode("pax");
                Pax.Attributes.GetNamedItem("ref").InnerText = (idx++).ToString();
                Pax.Attributes.GetNamedItem("phn").InnerText = "";
                Pax.Attributes.GetNamedItem("psn").InnerText = PersonNameNode.SelectSingleNode("last_name").InnerText;
                Pax.Attributes.GetNamedItem("pfn").InnerText = PersonNameNode.SelectSingleNode("gvn_name").InnerText;
                Pax.Attributes.GetNamedItem("ptc").InnerText = PersonNameNode.SelectSingleNode("id_code").InnerText;
                Pax.Attributes.GetNamedItem("ptl").InnerText = PersonNameNode.SelectSingleNode("title").InnerText;
                Pax.Attributes.GetNamedItem("pbd").InnerText = PersonNameNode.SelectSingleNode("birth_date").InnerText;
                Pax.Attributes.GetNamedItem("gni").InnerText = "";

                ////여권정보
                //foreach (XmlNode Service in TravelItinerary.SelectNodes("m:SpecialServices/m:Service[@SSRCode='SSR'][m:TPA_Extensions and m:TPA_Extensions/m:SSRType='DOCS']", xnMgr))
                //{
                //    if (Service.SelectSingleNode("m:Text", xnMgr).InnerText.IndexOf(String.Format("{0}/{1}", Pax.Attributes.GetNamedItem("psn").InnerText, Pax.Attributes.GetNamedItem("pfn").InnerText)) != -1)
                //    {
                //        string[] StrDocInfo = Service.SelectSingleNode("m:Text", xnMgr).InnerText.Split('/');

                //        if (StrDocInfo.Length > 9)
                //        {
                //            Passport = NewPaxData.SelectSingleNode("passport");
                //            Passport.Attributes.GetNamedItem("id").InnerText = StrDocInfo[3];
                //            Passport.Attributes.GetNamedItem("expireDate").InnerText = cm.ConvertToDateTime(StrDocInfo[7]);
                //            Passport.Attributes.GetNamedItem("issueCountry").InnerText = StrDocInfo[2];
                //            Passport.Attributes.GetNamedItem("holderNationality").InnerText = StrDocInfo[4];
                //            Passport.Attributes.GetNamedItem("writeDate").InnerText = "";

                //            Pax.Attributes.GetNamedItem("pbd").InnerText = cm.ConvertToBirthDate(StrDocInfo[5]);
                //        }
                //    }
                //}

                ////티켓정보
                //if (PersonNameNode.SelectNodes("PaxTicketNum").Count > 0)
                //    NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText = PersonNameNode.SelectSingleNode("PaxTicketNum").InnerText;
            }

            TravellerInfo.RemoveChild(PaxData);

            ////요금
            //XmlNode FareInfo = XmlDoc.SelectSingleNode("ResponseDetails/fareInfo");
            //XmlNode Fare = FareInfo.SelectSingleNode("fare");
            //XmlNode NewFare;
            //string PaxType = string.Empty;

            //foreach (XmlNode PersonNameNode in ResXml.SelectNodes("reply_if_t[not(idt_code=preceding-sibling::reply_if_t/idt_code)]"))
            //{
            //    if (PersonNameNode.SelectNodes("SaleFare").Count > 0)
            //    {
            //        int BaseFare = Convert.ToInt32(PersonNameNode.SelectSingleNode("sales_fare").InnerText);
            //        int BaseDisFare = Convert.ToInt32(PersonNameNode.SelectSingleNode("disc_sales_fare").InnerText);
            //        int BaseTax = Convert.ToInt32(PersonNameNode.SelectSingleNode("TaxAmt").InnerText);
            //        int BaseFsc = Convert.ToInt32(PersonNameNode.SelectSingleNode("QchargeAmt").InnerText);

            //        NewFare = FareInfo.AppendChild(Fare.CloneNode(false));
            //        NewFare.Attributes.GetNamedItem("ptc").InnerText = PersonNameNode.SelectSingleNode("idt_code").InnerText;
            //        NewFare.Attributes.GetNamedItem("amount").InnerText = (BaseFare + BaseTax + BaseFsc).ToString();
            //        NewFare.Attributes.GetNamedItem("fare").InnerText = BaseFare.ToString();
            //        NewFare.Attributes.GetNamedItem("disFare").InnerText = BaseDisFare.ToString();
            //        NewFare.Attributes.GetNamedItem("tax").InnerText = BaseTax.ToString();
            //        NewFare.Attributes.GetNamedItem("fsc").InnerText = BaseFsc.ToString();
            //        NewFare.Attributes.GetNamedItem("price").InnerText = (BaseDisFare + BaseTax + BaseFsc).ToString();
            //        NewFare.Attributes.GetNamedItem("basis").InnerText = "";
            //        NewFare.Attributes.GetNamedItem("tkd").InnerText = "";
            //    }
            //}

            //FareInfo.RemoveChild(Fare);

            return XmlDoc.DocumentElement;
        }

		#endregion "예약조회"

		#region "예약취소"

		/// <summary>
		/// 예약취소(PNR만 취소)
		/// </summary>
		/// <param name="OID">모두투어 주문번호</param>
		/// <param name="PID">예약자번호(PTID)</param>
		/// <param name="CID">취소자번호(PTID)</param>
        /// <param name="RIP">요청자IP</param>
		/// <returns></returns>
		[WebMethod(Description = "예약취소(PNR만 취소)")]
        public XmlElement CancelBookingPNRRS(int OID, int PID, int CID, string RIP)
		{
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 6;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = CID;
                sqlParam[12].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
			try
			{
                //DB에 저장된 예약정보
				XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");

				if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
				{
					//결과
					XmlElement ResXml;

					//네임스페이스
					XmlNamespaceManager xnMgr;

					string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
					string PNR = XmlDBBooking.SelectSingleNode("item3/GDS주문번호").InnerText;

					if (String.Compare(GDS, "Abacus", true).Equals(0))
					{
						ResXml = CancelBookingAbacus(GUID, PNR);

						//오류 결과일 경우 예외 처리
						xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
						xnMgr.AddNamespace("m", AbacusConfig.NamespaceURL(""));

						if (!ResXml.SelectSingleNode("m:Response", xnMgr).InnerText.StartsWith("OK "))
							throw new Exception(ResXml.SelectSingleNode("m:Response", xnMgr).InnerText);
					}
                    else if (String.Compare(GDS, "Galileo", true).Equals(0))
                    {
                        string PaxName = string.Empty;

                        foreach (XmlNode Item in XmlDBBooking.SelectNodes("item4"))
                        {
                            if (!String.IsNullOrWhiteSpace(PaxName))
                                PaxName += "^^";
                            
                            PaxName += Item.SelectSingleNode("영문성명").InnerText;
                        }

                        ResXml = CancelBookingGalileo(GUID, PNR, CID.ToString(), "", PaxName, Common.ConvertToOnlyNumber(XmlDBBooking.SelectSingleNode("item3/예약일").InnerText.Substring(0, 10)));

                        //오류 결과일 경우 예외 처리
                        if (!ResXml.SelectSingleNode("ResultErrorNo").InnerText.Equals("0"))
                            throw new Exception(ResXml.SelectSingleNode("ResultMsg").InnerText);
                    }
					else
					{
						ResXml = CancelBookingAmadeus(GUID, cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), PNR, CID);

						//오류 결과일 경우 예외 처리
						xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
						xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

						if (ResXml.SelectNodes("m:applicationError/m:errorText", xnMgr).Count > 0)
							throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorText/m:errorFreeText", xnMgr).InnerText);
					}

					//### 통합모드 생성 #####
					XmlDocument XmlDoc = new XmlDocument();
					XmlDoc.Load(mc.XmlFullPath("CancelBookingRS"));

					XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

					XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");

					BookingInfo.SelectSingleNode("gds").InnerText = GDS;
					BookingInfo.SelectSingleNode("bookingNo").InnerText = PNR;
					BookingInfo.SelectSingleNode("modeBookingNo").InnerText = OID.ToString();
					BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("code").InnerText = "XX";

					return XmlDoc.DocumentElement;
				}
				else
					throw new Exception("예약 정보가 존재하지 않습니다.");
			}
			catch (Exception ex)
			{
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("CID", CID);
                ex.Data.Add("RIP", RIP);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 6, OID, 0).ToErrors;
			}
		}

		/// <summary>
        /// 예약취소(미발권시에만 취소)(PNR + DB 모두 취소)
		/// </summary>
		/// <param name="OID">모두투어 주문번호</param>
		/// <param name="PID">예약자번호(PTID)</param>
        /// <param name="CID">취소자번호(PTID)</param>
        /// <param name="RIP">요청자IP</param>
		/// <returns></returns>
        [WebMethod(Description = "예약취소(미발권시에만 취소)(PNR + DB 모두 취소)")]
        public XmlElement CancelBookingNonTicketedRS(int OID, int PID, int CID, string RIP)
		{
            return CancelBookingNonTicketedRS2(OID, PID, CID, RIP, "WEBSERVICE");
		}

        /// <summary>
        /// 예약취소(미발권시에만 취소)(PNR + DB 모두 취소)
        /// </summary>
        /// <param name="OID">모두투어 주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="CID">취소자번호(PTID)</param>
        /// <param name="RIP">요청자IP</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "예약취소(미발권시에만 취소)(PNR + DB 모두 취소)")]
        public XmlElement CancelBookingNonTicketedRS2(int OID, int PID, int CID, string RIP, string RQT)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 5;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = CID;
                sqlParam[12].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //PNR조회
                XmlElement XmlBooking = SearchBookingRS(OID, PID, RIP);

                if (XmlBooking.SelectNodes("travellerInfo/paxData/ticket[@number != '']").Count.Equals(0))
                {
                    return CancelBookingRS2(OID, PID, CID, RIP, RQT);
                }
                else
                    throw new Exception("발권된 PNR입니다.");
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 5, OID, 0).ToErrors;
            }
        }

		/// <summary>
        /// 예약취소(PNR + DB 모두 취소)
		/// </summary>
		/// <param name="OID">모두투어 주문번호</param>
		/// <param name="PID">예약자번호(PTID)</param>
		/// <param name="CID">취소자번호(PTID)</param>
        /// <param name="RIP">요청자IP</param>
		/// <returns></returns>
		[WebMethod(Description = "예약취소(PNR + DB 모두 취소)")]
        public XmlElement CancelBookingRS(int OID, int PID, int CID, string RIP)
		{
            return CancelBookingRS2(OID, PID, CID, RIP, "WEBSERVICE");
		}

        /// <summary>
        /// 예약취소(PNR + DB 모두 취소)
		/// </summary>
		/// <param name="OID">모두투어 주문번호</param>
		/// <param name="PID">예약자번호(PTID)</param>
		/// <param name="CID">취소자번호(PTID)</param>
        /// <param name="RIP">요청자IP</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "예약취소(PNR + DB 모두 취소)")]
        public XmlElement CancelBookingRS2(int OID, int PID, int CID, string RIP, string RQT)
        {
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 7;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = CID;
                sqlParam[12].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    //결과
                    XmlElement ResXml;

                    //네임스페이스
                    XmlNamespaceManager xnMgr;

                    int SNM = cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText);
                    string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
                    string PNR = XmlDBBooking.SelectSingleNode("item3/GDS주문번호").InnerText;

                    if (String.Compare(GDS, "Abacus", true).Equals(0))
                    {
                        ResXml = CancelBookingAbacus(GUID, PNR);

                        //오류 결과일 경우 예외 처리
                        xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                        xnMgr.AddNamespace("m", AbacusConfig.NamespaceURL(""));

                        if (!ResXml.SelectSingleNode("m:Response", xnMgr).InnerText.StartsWith("OK "))
                            throw new Exception(ResXml.SelectSingleNode("m:Response", xnMgr).InnerText);
                    }
                    else if (String.Compare(GDS, "Galileo", true).Equals(0))
                    {
                        string PaxName = string.Empty;

                        foreach (XmlNode Item in XmlDBBooking.SelectNodes("item4"))
                        {
                            if (!String.IsNullOrWhiteSpace(PaxName))
                                PaxName += "^^";

                            PaxName += Item.SelectSingleNode("영문성명").InnerText;
                        }

                        ResXml = CancelBookingGalileo(GUID, PNR, CID.ToString(), "", PaxName, Common.ConvertToOnlyNumber(XmlDBBooking.SelectSingleNode("item3/예약일").InnerText.Substring(0, 10)));

                        //갈릴레오 취소일 경우 응답여부 상관 없이 모두웨어 취소 진행(2016-12-22,정성하과장)
                        //오류 결과일 경우 예외 처리
                        //if (!ResXml.SelectSingleNode("ResultErrorNo").InnerText.Equals("0"))
                        //    throw new Exception(ResXml.SelectSingleNode("ResultMsg").InnerText);
                    }
                    else
                    {
                        ResXml = CancelBookingAmadeus(GUID, cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), PNR, CID);

                        //오류 결과일 경우 예외 처리
                        xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                        xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                        if (ResXml.SelectNodes("m:applicationError/m:errorText", xnMgr).Count > 0)
                            throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorText/m:errorFreeText", xnMgr).InnerText);
                    }

                    //### DB취소 #####
                    string CancelMassege = CancelBookingDB(OID, CID, "00", RQT);

                    if (String.IsNullOrWhiteSpace(CancelMassege))
                    {
                        //11번가(4924,4929), 티몬(4925,4926), 이베이(5020,5119)(5161,5163)(5162,5164), 네이버(4638)
                        if (SNM.Equals(4924) || SNM.Equals(4929) || SNM.Equals(4925) || SNM.Equals(4926) || SNM.Equals(5020) || SNM.Equals(5119) || SNM.Equals(5161) || SNM.Equals(5163) || SNM.Equals(5162) || SNM.Equals(5164) || SNM.Equals(4638))
                            mod.AirCancel(SNM, OID, 0, PID, CID, RQT);

                        //### 통합모드 생성 #####
                        XmlDocument XmlDoc = new XmlDocument();
                        XmlDoc.Load(mc.XmlFullPath("CancelBookingRS"));

                        XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

                        XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");

                        BookingInfo.SelectSingleNode("gds").InnerText = GDS;
                        BookingInfo.SelectSingleNode("bookingNo").InnerText = PNR;
                        BookingInfo.SelectSingleNode("modeBookingNo").InnerText = OID.ToString();
                        BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("code").InnerText = "XX";

                        return XmlDoc.DocumentElement;
                    }
                    else
                        throw new Exception(CancelMassege);
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 7, OID, 0).ToErrors;
            }
        }

		/// <summary>
		/// 예약취소(아마데우스)
		/// </summary>
		/// <param name="GUID">고유번호</param>
		/// <param name="SNM">사이트번호</param>
		/// <param name="PNR">항공사예약번호</param>
		/// <param name="CID">취소자번호(PTID)</param>
		/// <returns></returns>
		//[WebMethod(Description = "예약취소(아마데우스)")]
		public XmlElement CancelBookingAmadeus(string GUID, int SNM, string PNR, int CID)
		{
			string SID = String.Empty;
			string SCT = String.Empty;
			int SQN = 0;

			GUID = (String.IsNullOrWhiteSpace(GUID)) ? cm.GetGUID : GUID;

			try
			{
				//결과
				XmlElement ResXml;

				//### 01.세션생성 #####
				XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

				SID = Session.SelectSingleNode("session/sessionId").InnerText;
				SCT = Session.SelectSingleNode("session/securityToken").InnerText;
				SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

				//### 02.PNR취소(PNR_Cancel) #####
				ResXml = amd.CancelRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

				//### 03.ReceiveFrom(PNR_AddMultiElements) #####
				ResXml = amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), String.Concat("P-", CID));

				//### 04.PNR조회(PNR_Retrieve) #####
				ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"), PNR);

				//### 05.세션종료 #####
				SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05"));

				return ResXml;
			}
			catch (Exception ex)
			{
				//### 세션종료 #####
				if (SQN > 0)
					amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0).ToErrors;
			}
		}

		/// <summary>
		/// 예약취소(애바카스)
		/// </summary>
		/// <param name="GUID">고유번호</param>
		/// <param name="PNR">항공사예약번호</param>
		/// <returns></returns>
		//[WebMethod(Description = "예약취소(애바카스)")]
		public XmlElement CancelBookingAbacus(string GUID, string PNR)
		{
			string ConversationId = String.Empty;
			string SecurityToken = String.Empty;

			GUID = (String.IsNullOrWhiteSpace(GUID)) ? cm.GetGUID : GUID;

			try
			{
				//결과
				XmlElement ResXml;

				//### 01.세션생성 #####
				XmlElement Session = aas.SessionCreate();

				ConversationId = Session.ChildNodes[0].InnerText;
				SecurityToken = Session.ChildNodes[1].InnerText;

				//### 02.PNR취소 #####
				ResXml = aas.AbacusCancelRS(ConversationId, SecurityToken, PNR, GUID);

				//### 03.세션종료 #####
				aas.SessionClose(ConversationId, SecurityToken); ;
				ConversationId = "";
				SecurityToken = "";

				return ResXml;
			}
			catch (Exception ex)
			{
				//### 세션종료 #####
				if (!String.IsNullOrWhiteSpace(ConversationId))
					aas.SessionClose(ConversationId, SecurityToken);

                return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0).ToErrors;
			}
		}

        /// <summary>
        /// 예약취소(갈릴레오)
        /// </summary>
        /// <param name="GUID">고유번호</param>
        /// <param name="PNR">항공사예약번호</param>
        /// <param name="CID">취소자PTID</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="PaxName">PNR 탑승객이름(ex:(1명)HONG/GILDONG, (2명)HONG/GILDONG^^KIM/DONGGIL)</param>
        /// <param name="ResDate">PNR 예약일(ex:20160323)</param>
        /// <returns></returns>
        //[WebMethod(Description = "예약취소(갈릴레오)")]
        public XmlElement CancelBookingGalileo(string GUID, string PNR, string CID, string RQT, string PaxName, string ResDate)
        {
            GUID = (String.IsNullOrWhiteSpace(GUID)) ? cm.GetGUID : GUID;

            try
            {
                XmlElement PnrInfoXml = gas.PnrInfoDisplayRS("0", PNR, "G", GUID);

                if (!PnrInfoXml.SelectSingleNode("ResultErrorNo").InnerText.Equals("0"))
                    throw new Exception(PnrInfoXml.SelectSingleNode("ResultMsg").InnerText);
                else
                {
                    bool Ticketing = false;

                    foreach (XmlNode PaxFareInfo in PnrInfoXml.SelectNodes("PaxFareInfo"))
                    {
                        if (PaxFareInfo.SelectNodes("PaxTicketNum").Count > 0 && !String.IsNullOrWhiteSpace(PaxFareInfo.SelectSingleNode("PaxTicketNum").InnerText))
                        {
                            Ticketing = true;
                            break;
                        }
                    }

                    if (!Ticketing)
                    {
                        XmlElement ResXml = gas.PnrCancelRS("0", PNR, "G", CID, (!String.IsNullOrWhiteSpace(RQT) && ("/WEB/MOBILEWEB/MOBILEAPP/".IndexOf(RQT) != -1)) ? "C" : "", PaxName, ResDate, String.Concat(GUID, "-01"));

                        //오류 발생시 한 번 더 실행
                        if (ResXml.SelectSingleNode("ResultErrorNo").InnerText != "0")
                        {
                            ResXml = gas.PnrCancelRS("0", PNR, "G", CID, (!String.IsNullOrWhiteSpace(RQT) && ("/WEB/MOBILEWEB/MOBILEAPP/".IndexOf(RQT) != -1)) ? "C" : "", PaxName, ResDate, String.Concat(GUID, "-02"));
                        }

                        return ResXml;
                    }
                    else
                        throw new Exception("발권된 PNR은 취소할 수 없습니다.");
                }
            }
            catch (Exception ex)
            {
                return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0).ToErrors;
            }
        }

		/// <summary>
		/// 항공예약취소
		/// </summary>
		/// <param name="OID">모두투어 주문번호</param>
		/// <param name="CID">취소자PTID</param>
		/// <param name="CRN">취소사유 코드</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
		/// <returns></returns>
		//[WebMethod(Description = "항공예약취소")]
		protected string CancelBookingDB(int OID, int CID, string CRN, string RQT)
		{
			using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
			{
				SqlCommand cmd = new SqlCommand
				{
					Connection = conn,
					CommandTimeout = 20,
					CommandType = CommandType.StoredProcedure,
                    CommandText = "DBO.WSV_T_아이템예약_해외항공_취소"
				};

				cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
				cmd.Parameters.Add("@취소자", SqlDbType.Int, 0);
				cmd.Parameters.Add("@취소사유", SqlDbType.Char, 2);
                cmd.Parameters.Add("@요청단말기", SqlDbType.VarChar, 20);
                cmd.Parameters.Add("@요청URL", SqlDbType.VarChar, 1000);
                cmd.Parameters.Add("@SMS발송여부", SqlDbType.Char, 1);
                cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

				cmd.Parameters["@주문번호"].Value = OID;
				cmd.Parameters["@취소자"].Value = CID;
				cmd.Parameters["@취소사유"].Value = String.IsNullOrWhiteSpace(CRN) ? "00" : CRN;
                cmd.Parameters["@요청단말기"].Value = String.IsNullOrWhiteSpace(RQT) ? "WEBSERVICE" : RQT;
                cmd.Parameters["@요청URL"].Value = Convert.DBNull;
                cmd.Parameters["@SMS발송여부"].Value = "Y";
                cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

				try
				{
					conn.Open();
					cmd.ExecuteNonQuery();

                    return cmd.Parameters["@에러메시지"].Value.ToString();
				}
				catch (Exception ex)
				{
					throw new Exception(ex.Message);
				}
				finally
				{
					conn.Close();
				}
			}
		}

		#endregion "예약취소"

		#region "Seat Map 조회"

		/// <summary>
		/// Seat Map 조회
		/// </summary>
		/// <param name="SNM">사이트번호</param>
		/// <param name="PNR">PNR Number</param>
		/// <returns></returns>
		//[WebMethod(Description = "Seat Map 조회")]
		public XmlElement SearchSeatMapRS(int SNM, string PNR)
		{
			string GUID = cm.GetGUID;
			string SID = String.Empty;
			string SCT = String.Empty;
			int SQN = 0;

			try
			{
				//결과
				XmlElement ResXml;

				//네임스페이스
				XmlNamespaceManager xnMgr;

				//### 01.세션생성 #####
				XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

				SID = Session.SelectSingleNode("session/sessionId").InnerText;
				SCT = Session.SelectSingleNode("session/securityToken").InnerText;
				SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

				//### 02.PNR조회(PNR_Retrieve) #####
				ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

				//### 02.이티켓정보(Ticket_ProcessEDoc) #####
				xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
				xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

				ResXml = amd.RetrieveSeatMapRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), ResXml.SelectSingleNode("m:originDestinationDetails/m:itineraryInfo/m:travelProduct/m:productDetails/m:identification", xnMgr).InnerText);

				////오류 결과일 경우 예외 처리
				//xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
				//xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Ticket_ProcessEDoc"));

				//if (ResXml.SelectNodes("m:error", xnMgr).Count > 0)
				//{
				//    throw new Exception(ResXml.SelectSingleNode("m:textInfo/m:freeText", xnMgr).InnerText);
				//}

				//### 03.세션종료 #####
				SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"));

				return ResXml;
			}
			catch (Exception ex)
			{
				//### 세션종료 #####
				if (SQN > 0)
					amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSExceptionMode(ex, hcc, GUID, "AirService", MethodBase.GetCurrentMethod().Name, 0, 0, 0).ToErrors;
			}
		}

		#endregion "Seat Map 조회"

		#region "실시간좌석배정 인증키(토파스 ASP서비스용)"

        /// <summary>
		/// 실시간좌석배정 인증키(토파스 ASP서비스용)
		/// </summary>
		/// <param name="SNM">사이트번호</param>
		/// <param name="PNR">PNR</param>
		/// <returns></returns>
		[WebMethod(Description = "실시간좌석배정 인증키")]
		public XmlElement SeatMapServiceKey(int SNM, string PNR)
		{
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 40;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = PNR;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
            {
                string OfficeId = AmadeusConfig.OfficeId(SNM);
                string GSsKey = String.Format("air:b2c:{0}:{0}::00", OfficeId);

                XmlDocument XmlToken = (XmlDocument)Newtonsoft.Json.JsonConvert.DeserializeXmlNode(XmlRequest.GetSendToJSon(String.Format("http://seatmap.cyberbooking.co.kr/tsm/AAA/TSMAAAMAP111011033004.k1xml?KSESID={0}&rsvno={1}&officeId={2}", GSsKey, PNR, OfficeId)).Replace("null(", "").Replace(")", ""));

                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.Load(mc.XmlFullPath("SeatMapServiceKey"));

                XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;
                XmlDoc.SelectSingleNode("ResponseDetails/gSsKey").InnerText = GSsKey;
                XmlDoc.SelectSingleNode("ResponseDetails/pnr").InnerText = PNR;
                XmlDoc.SelectSingleNode("ResponseDetails/officeId").InnerText = OfficeId;
                XmlDoc.SelectSingleNode("ResponseDetails/topasToken").InnerText = XmlToken.SelectSingleNode("topasToken").InnerText;

                //로그기록
                cm.XmlFileSave(XmlDoc, mc.Name, "SeatMapServiceKey", "N", LogGUID);

                return XmlDoc.DocumentElement;
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 40, 0, 0).ToErrors;
            }
		}

		/// <summary>
		/// 실시간좌석배정 인증키(토파스 ASP서비스용)(Json형으로 리턴)
		/// </summary>
		/// <param name="SNM">사이트번호</param>
		/// <param name="PNR">PNR</param>
		/// <param name="CTU">Y:Json형태의 Object, N:Json형태의 String</param>
		/// <returns></returns>
		[WebMethod(Description = "실시간좌석배정 인증키(Json형으로 리턴)")]
		[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
		public void SeatMapServiceKeyToJson(int SNM, string PNR, string CTU)
		{
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 41;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = PNR;
                sqlParam[8].Value = CTU;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            HttpContext.Current.Response.Clear();
		    HttpContext.Current.Response.Charset = "UTF-8";

		    try
		    {
		        if (cm.RequestString(CTU, "N").Equals("Y"))
		            HttpContext.Current.Response.ContentType = "application/json;charset=utf-8";

		        HttpContext.Current.Response.Write(Newtonsoft.Json.JsonConvert.SerializeXmlNode(SeatMapServiceKey(SNM, PNR), Newtonsoft.Json.Formatting.Indented, true));
		    }
		    catch (Exception ex)
		    {
                HttpContext.Current.Response.Write(new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 41, 0, 0).Message);
		    }

		    HttpContext.Current.Response.End();
		}

		#endregion "실시간좌석배정 인증키(토파스 ASP서비스용)"

		#region "APIS 등록"

        //[WebMethod(Description = "APIS 등록 테스트")]
        public XmlElement APISUpdateTest()
        {
            int OID = 0;
            int PID = 1743;
            string RQR = "1743";
            string[] SurName = new String[2] { "", "" };
            string[] GivenName = new String[2] { "", "" };
            string[] PaxGender = new String[2] { "", "" };
            string[] BirthDate = new String[2] { "", "" };
            string[] PassportNum = new String[2] { "", "" };
            string[] ExpireDate = new String[2] { "", "" };
            string[] IssueCountry = new String[2] { "", "" };
            string[] HolderNationality = new String[2] { "", "" };
            string[] Email = new String[2] { "", "" };
            string[] Tel = new String[2] { "", "" };
            string[] HP = new String[2] { "", "" };
            string RIP = "172.30.52.40";
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;

            return APIS(0, OID, RQR, SurName, GivenName, PaxGender, BirthDate, PassportNum, ExpireDate, IssueCountry, HolderNationality, Email, Tel, HP, LogGUID, GUID, 1, SearchBookingDB(OID, PID, RIP));
        }

        /// <summary>
		/// APIS 등록
		/// </summary>
		/// <param name="OID">주문번호</param>
		/// <param name="PID">예약자번호(PTID)</param>
		/// <param name="RQR">작업 요청자(PTID 또는 이름)</param>
		/// <param name="SurName">영문성</param>
		/// <param name="GivenName">영문이름</param>
		/// <param name="PaxGender">성별(M/F)</param>
		/// <param name="BirthDate">생년월일(YYYYMMDD)</param>
		/// <param name="PassportNum">여권번호</param>
		/// <param name="ExpireDate">여권만료일(YYYYMMDD)</param>
		/// <param name="IssueCountry">여권발행국</param>
		/// <param name="HolderNationality">국적</param>
        /// <param name="RIP">요청자IP</param>
		/// <returns></returns>
		[WebMethod(Description = "APIS 등록")]
		public XmlElement APISUpdate(int OID, int PID, string RQR, string[] SurName, string[] GivenName, string[] PaxGender, string[] BirthDate, string[] PassportNum, string[] ExpireDate, string[] IssueCountry, string[] HolderNationality, string RIP)
		{
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청10", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청11", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청12", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 1;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RQR;
                sqlParam[12].Value = String.Join("^", SurName);
                sqlParam[13].Value = String.Join("^", GivenName);
                sqlParam[14].Value = String.Join("^", PaxGender);
                sqlParam[15].Value = String.Join("^", BirthDate);
                sqlParam[16].Value = String.Join("^", PassportNum);
                sqlParam[17].Value = String.Join("^", ExpireDate);
                sqlParam[18].Value = String.Join("^", IssueCountry);
                sqlParam[19].Value = String.Join("^", HolderNationality);
                sqlParam[20].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            int Len = SurName.Length;
            string[] Email = new String[Len];
            string[] Tel = new String[Len];
            string[] HP = new String[Len];

            for (int i = 0; i < Len; i++ )
            {
                Email[i] = "";
                Tel[i] = "";
                HP[i] = "";
            }

            return APIS(0, OID, RQR, SurName, GivenName, PaxGender, BirthDate, PassportNum, ExpireDate, IssueCountry, HolderNationality, Email, Tel, HP, LogGUID, GUID, 1, SearchBookingDB(OID, PID, RIP));
		}

        /// <summary>
        /// APIS 및 연락처 등록
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RQR">작업 요청자(PTID 또는 이름)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="SurName">영문성</param>
        /// <param name="GivenName">영문이름</param>
        /// <param name="PaxGender">성별(M/F)</param>
        /// <param name="BirthDate">생년월일(YYYYMMDD)</param>
        /// <param name="PassportNum">여권번호</param>
        /// <param name="ExpireDate">여권만료일(YYYYMMDD)</param>
        /// <param name="IssueCountry">여권발행국</param>
        /// <param name="HolderNationality">국적</param>
        /// <param name="Email">이메일주소</param>
        /// <param name="Tel">전화번호</param>
        /// <param name="HP">휴대폰번호</param>
        /// <param name="RIP">요청자IP</param>
        /// <returns></returns>
		[WebMethod(Description = "APIS 및 연락처 등록")]
        public XmlElement APISContactUpdate(int SNM, int OID, int PID, string RQR, string RQT, string[] SurName, string[] GivenName, string[] PaxGender, string[] BirthDate, string[] PassportNum, string[] ExpireDate, string[] IssueCountry, string[] HolderNationality, string[] Email, string[] Tel, string[] HP, string RIP)
        {
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청10", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청11", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청12", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청13", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청14", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청15", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 477;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RQR;
                sqlParam[12].Value = String.Join("^", SurName);
                sqlParam[13].Value = String.Join("^", GivenName);
                sqlParam[14].Value = String.Join("^", PaxGender);
                sqlParam[15].Value = String.Join("^", BirthDate);
                sqlParam[16].Value = String.Join("^", PassportNum);
                sqlParam[17].Value = String.Join("^", ExpireDate);
                sqlParam[18].Value = String.Join("^", IssueCountry);
                sqlParam[19].Value = String.Join("^", HolderNationality);
                sqlParam[20].Value = String.Join("^", Email);
                sqlParam[21].Value = String.Join("^", Tel);
                sqlParam[22].Value = String.Join("^", HP);
                sqlParam[23].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            return APIS(SNM, OID, RQR, SurName, GivenName, PaxGender, BirthDate, PassportNum, ExpireDate, IssueCountry, HolderNationality, Email, Tel, HP, LogGUID, GUID, 477, SearchBookingDB(OID, PID, RIP));
        }

        /// <summary>
        /// APIS 및 연락처 등록(주문정보 이용)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RQR">작업 요청자(PTID 또는 이름)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="RIP">요청자IP</param>
        /// <returns></returns>
        [WebMethod(Description = "APIS 및 연락처 등록(주문정보 이용)")]
        public XmlElement APISContactUpdate2(int SNM, int OID, int PID, string RQR, string RQT, string RIP)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 628;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RQR;
                sqlParam[12].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, RIP);

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item4").Count > 0)
                {
                    int PaxCount = XmlDBBooking.SelectNodes("item4").Count;
                    
                    string[] SurName = new String[PaxCount];
                    string[] GivenName = new String[PaxCount];
                    string[] PaxGender = new String[PaxCount];
                    string[] BirthDate = new String[PaxCount];
                    string[] PassportNum = new String[PaxCount];
                    string[] ExpireDate = new String[PaxCount];
                    string[] IssueCountry = new String[PaxCount];
                    string[] HolderNationality = new String[PaxCount];
                    string[] Email = new String[PaxCount];
                    string[] Tel = new String[PaxCount];
                    string[] HP = new String[PaxCount];

                    for (int i = 0; i < PaxCount; i++)
                    {
                        SurName[i] = XmlDBBooking.SelectNodes("item4/영문성")[i].InnerText;
                        GivenName[i] = XmlDBBooking.SelectNodes("item4/영문이름")[i].InnerText;
                        PaxGender[i] = XmlDBBooking.SelectNodes("item4/성별")[i].InnerText;
                        BirthDate[i] = XmlDBBooking.SelectNodes("item4/생년월일")[i].InnerText;
                        PassportNum[i] = XmlDBBooking.SelectNodes("item4/여권번호")[i].InnerText;
                        ExpireDate[i] = XmlDBBooking.SelectNodes("item4/여권만료일")[i].InnerText.Replace("-", "");
                        IssueCountry[i] = XmlDBBooking.SelectNodes("item4/여권발행국코드")[i].InnerText;
                        HolderNationality[i] = XmlDBBooking.SelectNodes("item4/여권국적코드")[i].InnerText;
                        Email[i] = XmlDBBooking.SelectNodes("item4/이메일주소")[i].InnerText;
                        Tel[i] = XmlDBBooking.SelectNodes("item4/전화번호")[i].InnerText;
                        HP[i] = XmlDBBooking.SelectNodes("item4/휴대폰번호")[i].InnerText;
                    }

                    return APIS(SNM, OID, RQR, SurName, GivenName, PaxGender, BirthDate, PassportNum, ExpireDate, IssueCountry, HolderNationality, Email, Tel, HP, LogGUID, LogGUID, 628, XmlDBBooking);
                }
                else
                    throw new Exception("탑승객 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 628, OID, 0).ToErrors;
            }
        }

        private XmlElement APIS(int SNM, int OID, string RQR, string[] SurName, string[] GivenName, string[] PaxGender, string[] BirthDate, string[] PassportNum, string[] ExpireDate, string[] IssueCountry, string[] HolderNationality, string[] Email, string[] Tel, string[] HP, string LogGUID, string GUID, int ServiceNumber, XmlElement XmlDBBooking)
        {
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            try
            {
                //PNR
                string PNR = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;

                //탑승객수
                int LopNum = SurName.Length;

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    if (XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText.Equals("Amadeus"))
                    {
                        //결과
                        XmlElement ResXml;

                        //여정구분
                        string ROT = XmlDBBooking.SelectSingleNode("item3/여정구분").InnerText;

                        //### 01.세션생성 #####
                        XmlElement Session = amd.Authenticate(cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), String.Concat(GUID, "-01"));

                        SID = Session.SelectSingleNode("session/sessionId").InnerText;
                        SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                        SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                        //### 02.PNR조회(PNR_Retrieve) #####
                        ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

                        //### 03.APIS정보 등록(PNR_AddMultiElements) #####
                        ResXml = amd.AddMultiElementsAPISRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), SurName, GivenName, PaxGender, BirthDate, PassportNum, ExpireDate, IssueCountry, HolderNationality, ResXml);

                        //### 04.탑승객 연락처(CommandCryptic) #####
                        for (int n = 0; n < LopNum; n++)
                        {
                            if (!String.IsNullOrWhiteSpace(SurName[n]) && !String.IsNullOrWhiteSpace(GivenName[n]))
                            {
                                if (!String.IsNullOrWhiteSpace(Tel[n]))
                                    amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04_Tel", n), String.Format("AP {0} {1}/{2}", Tel[n], SurName[n], GivenName[n]));

                                if (!String.IsNullOrWhiteSpace(HP[n]))
                                    amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04_HP", n), String.Format("APM-{0} {1}/{2}", HP[n], SurName[n], GivenName[n]));

                                if (!String.IsNullOrWhiteSpace(Email[n]))
                                    amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04_Email", n), String.Format("APE-{0} {1}/{2}", Email[n], SurName[n], GivenName[n]));
                            }
                        }

                        //### 05.ReceiveFrom(PNR_AddMultiElements) #####
                        ResXml = amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05"), String.Concat("P-", RQR));

                        //### 06.PNR조회(PNR_Retrieve) #####
                        ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06"), PNR);

                        XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                        xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                        //오류 결과일 경우 예외 처리
                        if (ResXml.SelectNodes("m:applicationError/m:errorText", xnMgr).Count > 0)
                        {
                            amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-07"), "IG");
                            throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorText/m:errorFreeText", xnMgr).InnerText);
                        }

                        //### 07.세션종료 #####
                        SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-08"));

                        //### 08.통합모드 생성 #####
                        return ToModeSearchBookingAmadeus(SNM, ROT, ResXml, xnMgr);
                    }
                    else if (XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText.Equals("Abacus"))
                    {
                        //3DOCS/P/KR/M1234567/KR/30APR74/M/30APR20/KO/JAEYOUNG-01.01
                        //3DOCS/P/발행국/여권번호/국적/생년월일/성별(유아는 'I'추가)/여권만료일/성/이름-승객번호(승객번호는 1-1)(유아는 보호자번호)

                        XmlElement ResXml;
                        XmlNamespaceManager xnMgr;

                        string AdultPaxNum = string.Empty;
                        string PaxNum = string.Empty;
                        bool Infant = false;
                        int i = 0;

                        //### 01.세션생성 #####
                        XmlNode Session = aas.SessionCreate();
                        string CID = Session.ChildNodes[0].InnerText;
                        string STK = Session.ChildNodes[1].InnerText;

                        //### 02.PNR조회(PNR_Retrieve) #####
                        ResXml = aas.TravelItineraryReadRS(CID, STK, PNR, String.Concat(GUID, "-02_1"));

                        xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                        xnMgr.AddNamespace("stl", AbacusConfig.NamespaceURL("TravelItineraryRead_stl"));
                        xnMgr.AddNamespace("tir310", AbacusConfig.NamespaceURL("TravelItineraryRead_tir310"));

                        //오류시
                        if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
                        {
                            if (ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText.Trim().Equals("NAK3 - UPDATED PNR CURRENTLY IN AAA - FINISH OR IGNORE"))
                            {
                                aas.AbacusCommand(CID, STK, "E", String.Concat(GUID, "-18"));
                                ResXml = aas.TravelItineraryReadRS(CID, STK, PNR, String.Concat(GUID, "-19"));

                                //오류시
                                if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
                                    throw new Exception(ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText);
                            }
                            else
                                throw new Exception(ResXml.GetElementsByTagName("Message")[0].InnerText.Trim());
                        }

                        //### 03.APIS정보 등록 #####
                        foreach (XmlNode PersonNameNode in ResXml.SelectNodes("tir310:TravelItinerary/tir310:CustomerInfo/tir310:PersonName[tir310:GivenName]", xnMgr))
                        {
                            PaxNum = PersonNameNode.Attributes.GetNamedItem("NameNumber").InnerText;
                            Infant = false;

                            if (PersonNameNode.Attributes.GetNamedItem("PassengerType").InnerText.Equals("ADT"))
                                AdultPaxNum += String.Concat(PaxNum, ",");
                            else if (PersonNameNode.Attributes.GetNamedItem("PassengerType").InnerText.Equals("INF"))
                            {
                                PaxNum = AdultPaxNum.Split(',')[(i % 2)];
                                Infant = true;
                                i++;
                            }

                            for (int PaxIdx = 0; PaxIdx < SurName.Length; PaxIdx++)
                            {
                                if (!String.IsNullOrWhiteSpace(SurName[PaxIdx]) && !String.IsNullOrWhiteSpace(GivenName[PaxIdx]) && !String.IsNullOrWhiteSpace(PassportNum[PaxIdx]))
                                {
                                    if (PersonNameNode.SelectSingleNode("tir310:Surname", xnMgr).InnerText.Equals(SurName[PaxIdx].Trim().ToUpper()) && GivenName[PaxIdx].Trim().ToUpper().Equals(cm.SplitPaxType(PersonNameNode.SelectSingleNode("tir310:GivenName", xnMgr).InnerText.Trim(), false)[1]))
                                    {
                                        aas.AbacusCommand(CID, STK, String.Format("3DOCS/P/{0}/{1}/{2}/{3}/{4}/{5}/{6}/{7}-{8}", IssueCountry[PaxIdx], PassportNum[PaxIdx], HolderNationality[PaxIdx], cm.AbacusDateTime(BirthDate[PaxIdx]), String.Concat(PaxGender[PaxIdx], (Infant ? "I" : "")), cm.AbacusDateTime(ExpireDate[PaxIdx]), SurName[PaxIdx], GivenName[PaxIdx], PaxNum), String.Format("{0}-03_{1}", GUID, PaxIdx));

                                        if (Infant)
                                            aas.AbacusCommand(CID, STK, String.Format("3INFT/{0}/{1}/{2}-{3}", SurName[PaxIdx], PersonNameNode.SelectSingleNode("tir310:GivenName", xnMgr).InnerText, cm.AbacusDateTime(BirthDate[PaxIdx]), PaxNum), String.Format("{0}-04_{1}", GUID, PaxIdx));

                                        break;
                                    }
                                }
                            }
                        }

                        //### 04.탑승객 연락처(CommandCryptic) #####
                        for (int n = 0; n < LopNum; n++)
                        {
                            if (!String.IsNullOrWhiteSpace(SurName[n]) && !String.IsNullOrWhiteSpace(GivenName[n]))
                            {
                                if (!String.IsNullOrWhiteSpace(Tel[n]))
                                    aas.AbacusCommand(CID, STK, String.Format("9T*{0} {1}/{2}", Common.ConvertToOnlyNumber(Tel[n]), SurName[n], GivenName[n]), String.Concat(GUID, "-05_Tel", n));

                                if (!String.IsNullOrWhiteSpace(HP[n]))
                                    aas.AbacusCommand(CID, STK, String.Format("9M*{0} {1}/{2}", Common.ConvertToOnlyNumber(HP[n]), SurName[n], GivenName[n]), String.Concat(GUID, "-05_HP", n));

                                if (!String.IsNullOrWhiteSpace(Email[n]))
                                    aas.AbacusCommand(CID, STK, String.Format("9E*{0} {1}/{2}", Email[n].Replace("@", "//"), SurName[n], GivenName[n]), String.Concat(GUID, "-05_Email", n));
                            }
                        }

                        //### 05.작업자 등록 #####
                        aas.AbacusCommand(CID, STK, "6P", String.Concat(GUID, "-06"));

                        //### 06.적용 #####
                        ResXml = aas.AbacusCommand(CID, STK, "E", String.Concat(GUID, "-07"));

                        //### 07.세션종료 #####
                        aas.SessionClose(CID, STK);

                        return ResXml;
                    }
                    else if (XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText.Equals("Galileo"))
                    {
                        int PaxCnt = XmlDBBooking.SelectNodes("item4").Count;
                        string ApisInfo = string.Empty;

                        foreach (XmlNode PaxInfo in SearchBookingPNR(XmlDBBooking.SelectNodes("item/사이트번호").Count, XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText, PNR, GUID).SelectNodes("PaxFareInfo"))
                        {
                            XmlNode ItemNode = XmlDBBooking.SelectSingleNode(String.Format("item4[영문성='{0}' and 영문이름='{1}']", PaxInfo.SelectSingleNode("PaxLastName").InnerText, PaxInfo.SelectSingleNode("PaxFirstName").InnerText));

                            if (!String.IsNullOrWhiteSpace(ApisInfo))
                                ApisInfo += ",";

                            ApisInfo += String.Format("{0}^{1}^{2}^{3}^{4}^{5}^{6}^{7}^{8}^{9}^{10}^{11}^{12}^{13}^{14}^{15}",
                                                ItemNode.SelectSingleNode("판매명세번호").InnerText,
                                                PaxInfo.SelectSingleNode("AbsNameNum").InnerText,
                                                ItemNode.SelectSingleNode("영문성명").InnerText,
                                                ItemNode.SelectSingleNode("구분").InnerText,
                                                "0",
                                                ItemNode.SelectSingleNode("여권번호").InnerText,
                                                Common.ConvertToOnlyNumber(ItemNode.SelectSingleNode("여권만료일").InnerText),
                                                Common.ConvertToOnlyNumber(ItemNode.SelectSingleNode("생년월일").InnerText),
                                                ItemNode.SelectSingleNode("여권발행국코드").InnerText,
                                                ItemNode.SelectSingleNode("여권국적코드").InnerText,
                                                ItemNode.SelectSingleNode("성별").InnerText,
                                                "",
                                                "",
                                                "",
                                                "",
                                                "");
                        }

                        XmlElement ResXml = gas.ApisRS(OID.ToString(), PNR, "G", RQR.ToString(), PaxCnt, "DOCS", ApisInfo, GUID);

                        //### 탑승객 연락처(CommandCryptic) #####
                        XmlElement XmlElem;
                        string Token = gas.SessionStartRS(GUID).SelectSingleNode("ResultMsg").InnerText;

                        for (int n = 0; n < LopNum; n++)
                        {
                            if (!String.IsNullOrWhiteSpace(SurName[n]) && !String.IsNullOrWhiteSpace(GivenName[n]))
                            {
                                if (!String.IsNullOrWhiteSpace(Tel[n]))
                                    gas.TerminalSubmitRS(Token, String.Format("P.T*{0} {1}/{2}", Tel[n], SurName[n], GivenName[n]), String.Concat(GUID, "-Tel", n));

                                if (!String.IsNullOrWhiteSpace(HP[n]))
                                    gas.TerminalSubmitRS(Token, String.Format("P.H*{0} {1}/{2}", HP[n], SurName[n], GivenName[n]), String.Concat(GUID, "-HP", n));

                                if (!String.IsNullOrWhiteSpace(Email[n]))
                                    gas.TerminalSubmitRS(Token, String.Format("P.SELE*{0} {1}/{2}", Email[n].Replace("@", "//"), SurName[n], GivenName[n]), String.Concat(GUID, "-Email", n));
                            }
                        }

                        XmlElem = gas.TerminalSubmitRS(Token, String.Format("*{0}", PNR), GUID);

                        gas.SessionEndRS(Token, GUID);

                        return ResXml;
                    }
                    else
                        throw new Exception("APIS 등록 및 E-Ticket 출력이 불가능한 예약입니다.");
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, OID, 0).ToErrors;
            }
        }

        #endregion "APIS 등록"

        #region "항공사 마일리지 등록"

        //[WebMethod(Description = "항공사 마일리지 등록")]
        public XmlElement AirMileageSavingsTEST()
        {
            int SNM = 3915;
            int OID = 31497291;
            int PID = 3171916;
            string[] SurName = new String[1] { "PARK" };
            string[] GivenName = new String[1] { "YUNA" };
            string[] AirCode = new String[1] { "OZ" };
            string[] MileageNumber = new String[1] { "387346318" };
            string RQR = "1743";
            string RQT = "WEBSERVICE";

            return AirMileageSavings(SNM, OID, PID, SurName, GivenName, AirCode, MileageNumber, RQR, RQT);
        }

        /// <summary>
        /// 항공사 마일리지 등록
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="SurName">영문성</param>
        /// <param name="GivenName">영문이름</param>
        /// <param name="AirCode">마일리지 적립 항공사코드</param>
        /// <param name="MileageNumber">항공사 마일리지 회원번호</param>
        /// <param name="RQR">작업 요청자(PTID 또는 이름)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "항공사 마일리지 등록")]
        public XmlElement AirMileageSavings(int SNM, int OID, int PID, string[] SurName, string[] GivenName, string[] AirCode, string[] MileageNumber, string RQR, string RQT)
        {
            int ServiceNumber = 522;
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = ServiceNumber;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = String.Join("^", SurName);
                sqlParam[12].Value = String.Join("^", GivenName);
                sqlParam[13].Value = String.Join("^", AirCode);
                sqlParam[14].Value = String.Join("^", MileageNumber);
                sqlParam[15].Value = RQR;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");

                //PNR
                string PNR = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;

                //마케팅항공사
                string MCC = XmlDBBooking.SelectSingleNode("item3/마케팅항공사").InnerText;

                //성공여부
                bool Success = true;

                //마일리지 등록 실행 여부
                bool Exec = false;

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    XmlDocument XmlDoc = new XmlDocument();
                    XmlDoc.Load(mc.XmlFullPath("AirMileageSavings"));

                    XmlDoc.SelectSingleNode("AirMileageSavings").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;
                    
                    if (XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText.Equals("Amadeus"))
                    {
                        //결과
                        XmlElement ResXml;

                        //네임스페이스
                        XmlNamespaceManager xnMgr1;
                        XmlNamespaceManager xnMgr2;

                        string PTNum = String.Empty;

                        //### 01.세션생성 #####
                        XmlElement Session = amd.Authenticate(cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), String.Concat(GUID, "-01"));

                        SID = Session.SelectSingleNode("session/sessionId").InnerText;
                        SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                        SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                        //### 02.PNR조회(PNR_Retrieve) #####
                        ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

                        xnMgr1 = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                        xnMgr1.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                        //오류 결과일 경우 예외 처리
                        if (ResXml.SelectNodes("m:applicationError/m:errorText", xnMgr1).Count > 0)
                        {
                            throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorText/m:errorFreeText", xnMgr1).InnerText);
                        }

                        //### 03.항공사 마일리지 등록(CommandCryptic) #####
                        for (int n = 0; n < MileageNumber.Length; n++)
                        {
                            int LineNum = 0;

                            foreach (XmlNode TmpTravellerInfo in ResXml.SelectNodes("m:travellerInfo", xnMgr1))
                            {
                                if (TmpTravellerInfo.SelectNodes(String.Format("m:passengerData[m:travellerInformation/m:traveller/m:surname='{0}']", SurName[n].Trim().ToUpper()), xnMgr1).Count > 0)
                                {
                                    foreach (XmlNode TmpPassenger in TmpTravellerInfo.SelectNodes("m:passengerData/m:travellerInformation/m:passenger", xnMgr1))
                                    {
                                        if (GivenName[n].Trim().ToUpper().Equals(cm.SplitPaxType(TmpPassenger.SelectSingleNode("m:firstName", xnMgr1).InnerText.Replace(" ", ""), false)[1]))
                                        {
                                            LineNum = Convert.ToInt32(TmpTravellerInfo.SelectSingleNode("m:elementManagementPassenger/m:lineNumber", xnMgr1).InnerText);
                                            PTNum += String.Concat(TmpTravellerInfo.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr1).InnerText, "/");
                                            break;
                                        }
                                    }
                                }
                            }

                            if (LineNum > 0)
                            {
                                ResXml = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03_FFN", n), String.Format("FFN{0}-{1}{2}/P{3}", MCC, MileageNumber[n].Trim(), (!MCC.Equals(AirCode[n]) ? String.Format(", {0}, {1}", MCC, AirCode[n]) : ""), LineNum));

                                xnMgr2 = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                                xnMgr2.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));

                                if (ResXml.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr2).InnerText.IndexOf(String.Format("{0}/{1}", SurName[n].Trim(), GivenName[n].Trim()).ToUpper()).Equals(-1))
                                    Success = false;

                                Exec = true;
                            }
                        }

                        if (Exec)
                        {
                            //### 05.ReceiveFrom(PNR_AddMultiElements) #####
                            ResXml = amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"), String.Concat("P-", RQR));

                            //### 06.PNR조회(PNR_Retrieve) #####
                            ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05"), PNR);

                            xnMgr1 = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            xnMgr1.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                            //오류 결과일 경우 예외 처리
                            if (ResXml.SelectNodes("m:applicationError/m:errorText", xnMgr1).Count > 0)
                            {
                                amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06"), "IG");
                                throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorText/m:errorFreeText", xnMgr1).InnerText);
                            }

                            //PNR에 항공사 마일리지 번호가 존재하는지 체크
                            if (Success)
                            {
                                foreach (string PTNumber in PTNum.Split('/'))
                                {
                                    if (!String.IsNullOrWhiteSpace(PTNumber) && ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:frequentFlyerInformationGroup][m:referenceForDataElement/m:reference[m:qualifier='PT' and m:number='{0}']]", PTNumber), xnMgr1).Count.Equals(0))
                                        Success = false;
                                }
                            }
                        }

                        //### 07.세션종료 #####
                        SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-07"));

                        //성공여부
                        if (!Success)
                            throw new Exception("항공사 마일리지 등록이 실패했습니다.");

                        return XmlDoc.DocumentElement;
                    }
                    else if (XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText.Equals("Abacus"))
                    {
                        XmlElement ResXml;
                        XmlNamespaceManager xnMgr;

                        string AdultPaxNum = string.Empty;
                        string PaxNum = string.Empty;
                        int SuccessCount = 0;
                        int i = 0;

                        //### 01.세션생성 #####
                        XmlNode Session = aas.SessionCreate();
                        string CID = Session.ChildNodes[0].InnerText;
                        string STK = Session.ChildNodes[1].InnerText;

                        //마일리지 등록 요청수만큼 반복
                        for (int n = 0; n < MileageNumber.Length; n++)
                        {
                            //### 02.PNR조회(PNR_Retrieve) #####
                            ResXml = aas.TravelItineraryReadRS(CID, STK, PNR, String.Format("{0}-02_{1}1", GUID, n));

                            xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            xnMgr.AddNamespace("stl", AbacusConfig.NamespaceURL("TravelItineraryRead_stl"));
                            xnMgr.AddNamespace("tir310", AbacusConfig.NamespaceURL("TravelItineraryRead_tir310"));

                            //오류시
                            if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
                            {
                                if (ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText.Trim().Equals("NAK3 - UPDATED PNR CURRENTLY IN AAA - FINISH OR IGNORE"))
                                {
                                    aas.AbacusCommand(CID, STK, "E", String.Concat(GUID, "-18"));
                                    ResXml = aas.TravelItineraryReadRS(CID, STK, PNR, String.Concat(GUID, "-19"));

                                    //오류시
                                    if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
                                        throw new Exception(ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText);
                                }
                                else
                                    throw new Exception(ResXml.GetElementsByTagName("Message")[0].InnerText.Trim());
                            }

                            //### 03.항공사 마일리지 등록 #####
                            foreach (XmlNode PersonNameNode in ResXml.SelectNodes("tir310:TravelItinerary/tir310:CustomerInfo/tir310:PersonName[tir310:GivenName]", xnMgr))
                            {
                                PaxNum = PersonNameNode.Attributes.GetNamedItem("NameNumber").InnerText;

                                if (PersonNameNode.Attributes.GetNamedItem("PassengerType").InnerText.Equals("ADT"))
                                    AdultPaxNum += String.Concat(PaxNum, ",");
                                else if (PersonNameNode.Attributes.GetNamedItem("PassengerType").InnerText.Equals("INF"))
                                {
                                    PaxNum = AdultPaxNum.Split(',')[(i % 2)];
                                    i++;
                                }

                                if (PersonNameNode.SelectSingleNode("tir310:Surname", xnMgr).InnerText.Equals(SurName[n].Trim().ToUpper()) && GivenName[n].Trim().ToUpper().Equals(cm.SplitPaxType(PersonNameNode.SelectSingleNode("tir310:GivenName", xnMgr).InnerText.Trim(), false)[1]))
                                {
                                    if (aas.AbacusCommand(CID, STK, String.Format("FF{0}{1}{2}-{3}", MCC, MileageNumber[n].Trim(), (!MCC.Equals(AirCode[n]) ? String.Format("/{0}", AirCode[n]) : ""), PaxNum), String.Format("{0}-03_{1}", GUID, n)).InnerText.Replace(" ", "").Equals("*"))
                                        SuccessCount++;
                                    
                                    break;
                                }
                            }

                            //### 04.작업자 등록 #####
                            aas.AbacusCommand(CID, STK, "6P", String.Format("{0}-04_{1}", GUID, n));

                            //### 05.적용 #####
                            ResXml = aas.AbacusCommand(CID, STK, "E", String.Format("{0}-05_{1}", GUID, n));
                        }
                        
                        //### 06.세션종료 #####
                        aas.SessionClose(CID, STK);

                        //성공여부
                        if (SuccessCount != MileageNumber.Length)
                            throw new Exception("항공사 마일리지 등록이 실패했습니다.");

                        return XmlDoc.DocumentElement;
                    }
                    else if (XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText.Equals("Galileo"))
                    {
                        XmlElement ResXml;
                        
                        //### 01.PNR조회(PNR_Retrieve) #####
                        ResXml = gas.PnrInfoDisplayRS("0", PNR, "G", GUID);

                        //오류시
                        if (!ResXml.SelectSingleNode("ResultErrorNo").InnerText.Equals("0"))
                            throw new Exception(ResXml.SelectSingleNode("ResultMsg").InnerText);

                        //### 항공사 마일리지 등록(CommandCryptic) #####
                        string Token = gas.SessionStartRS(GUID).SelectSingleNode("ResultMsg").InnerText;

                        for (int n = 0; n < MileageNumber.Length; n++)
                        {
                            if (ResXml.SelectNodes(String.Format("PaxFareInfo[PaxLastName='{0}' and PaxFirstName='{1}']", SurName[n].Trim().ToUpper(), GivenName[n].Trim().ToUpper())).Count > 0)
                            {
                                if (gas.TerminalSubmitRS(Token, String.Format("P{0}/{1}{2}{3}", ResXml.SelectSingleNode(String.Format("PaxFareInfo[PaxLastName='{0}' and PaxFirstName='{1}']/AbsNameNum", SurName[n].Trim().ToUpper(), GivenName[n].Trim().ToUpper())).InnerText, MCC, MileageNumber[n].Trim(), (!MCC.Equals(AirCode[n]) ? String.Format("/{0}", AirCode[n]) : "")), String.Concat(GUID, "-FF", n)).SelectSingleNode("ResultErrorNo").InnerText != "0")
                                    Success = false;
                            }
                            else
                                Success = false;
                        }

                        ResXml = gas.TerminalSubmitRS(Token, String.Format("*{0}", PNR), GUID);

                        gas.SessionEndRS(Token, GUID);

                        //성공여부
                        if (!Success)
                            throw new Exception("항공사 마일리지 등록이 실패했습니다.");

                        return XmlDoc.DocumentElement;
                    }
                    else
                        throw new Exception("항공사 마일리지 등록이 불가능한 예약입니다.");
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, OID, 0).ToErrors;
            }
        }

        #endregion "항공사 마일리지 등록"

        #region "FOID 등록"

        /// <summary>
        /// FOID 등록(중국 국내선 단독/연결 발권시)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RQR">작업 요청자(PTID 또는 이름)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="RIP">요청자IP</param>
        /// <returns></returns>
        [WebMethod(Description = "FOID 등록(중국 국내선 단독/연결 발권시)")]
        public XmlElement FOIDUpdate(int SNM, int OID, int PID, string RQR, string RQT, string RIP)
        {
            int ServiceNumber = 480;
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = ServiceNumber;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RQR;
                sqlParam[12].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, RIP);

                //PNR
                string PNR = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;

                //마케팅항공사
                string MCC = XmlDBBooking.SelectSingleNode("item3/마케팅항공사").InnerText;

                //중국 국내선 구간 여부
                bool ChinaRoute = false;

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    if (XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText.Equals("Amadeus"))
                    {
                        //결과
                        XmlElement ResXml;

                        //### 01.세션생성 #####
                        XmlElement Session = amd.Authenticate(cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), String.Concat(GUID, "-01"));

                        SID = Session.SelectSingleNode("session/sessionId").InnerText;
                        SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                        SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                        //### 02.PNR조회(PNR_Retrieve) #####
                        ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);
                        
                        XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                        xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                        foreach (XmlNode ItineraryInfo in ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo", xnMgr))
                        {
                            if (ItineraryInfo.SelectNodes("m:travelProduct/m:offpointDetail", xnMgr).Count > 0)
                            {
                                if (Common.ChinaOfAirport(ItineraryInfo.SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText) && Common.ChinaOfAirport(ItineraryInfo.SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText))
                                {
                                    ChinaRoute = true;
                                    break;
                                }
                            }
                        }

                        if (ChinaRoute)
                        {
                            //### 03.FOID 등록(CommandCryptic)(유아는 탑승객번호가 없기 때문에 제외)(ex:SRFOID KE HK1-PP여권번호/P1) #####
                            foreach (XmlNode Traveller in ResXml.SelectNodes("m:travellerInfo[m:elementManagementPassenger/m:segmentName='NM']", xnMgr))
                            {
                                string PTNum = Traveller.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText;
                                
                                //여권정보
                                if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:serviceRequest/m:ssr/m:type='DOCS'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr).Count > 0)
                                {
                                    string[] StrDocInfo = ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:serviceRequest/m:ssr/m:type='DOCS'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}'][last()]/m:serviceRequest/m:ssr/m:freeText", PTNum), xnMgr).InnerText.Split('/');

                                    if (StrDocInfo.Length > 7)
                                    {
                                        if (StrDocInfo[7].Equals(Traveller.SelectSingleNode("m:passengerData/m:travellerInformation/m:traveller/m:surname", xnMgr).InnerText) && StrDocInfo[8].Equals(cm.SplitPaxType(Traveller.SelectSingleNode("m:passengerData/m:travellerInformation/m:passenger[not(m:type) or m:type!='INF']/m:firstName", xnMgr).InnerText.Replace(" ", ""), false)[1].Trim()))
                                            amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03_", PTNum), String.Format("SRFOID {0} HK1-PP{1}/P{2}", MCC, StrDocInfo[2], PTNum));
                                    }
                                }
                            }
                            
                            //### 04.ReceiveFrom(PNR_AddMultiElements) #####
                            amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"), String.Concat("P-", RQR));

                            //### 05.PNR조회(PNR_Retrieve) #####
                            ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05"), PNR);

                            //오류 결과일 경우 예외 처리
                            if (ResXml.SelectNodes("m:applicationError/m:errorText", xnMgr).Count > 0)
                            {
                                //### 06.PNR 작업 정리(CommandCryptic) #####
                                amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06"), "IG");
                                throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorText/m:errorFreeText", xnMgr).InnerText);
                            }
                        }

                        //### 07.세션종료 #####
                        SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-07"));

                        //### 08.통합모드 생성 #####
                        //return ToModeSearchBookingAmadeus(ResXml, xnMgr);
                        return ResXml;
                    }
                    else if (XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText.Equals("Abacus"))
                    {
                        //결과
                        XmlElement ResXml;

                        //### 01.세션생성 #####
                        XmlNode Session = aas.SessionCreate();
                        string CID = Session.ChildNodes[0].InnerText;
                        string STK = Session.ChildNodes[1].InnerText;

                        //### 02.PNR조회(PNR_Retrieve) #####
                        ResXml = aas.TravelItineraryReadRS(CID, STK, PNR, String.Concat(GUID, "-02_1"));

                        XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                        xnMgr.AddNamespace("stl", AbacusConfig.NamespaceURL("TravelItineraryRead_stl"));
                        xnMgr.AddNamespace("tir310", AbacusConfig.NamespaceURL("TravelItineraryRead_tir310"));

                        //오류시
                        if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
                        {
                            if (ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText.Trim().Equals("NAK3 - UPDATED PNR CURRENTLY IN AAA - FINISH OR IGNORE"))
                            {
                                aas.AbacusCommand(CID, STK, "E", String.Concat(GUID, "-18"));
                                ResXml = aas.TravelItineraryReadRS(CID, STK, PNR, String.Concat(GUID, "-19"));

                                //오류시
                                if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
                                    throw new Exception(ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText);
                            }
                            else
                                throw new Exception(ResXml.GetElementsByTagName("Message")[0].InnerText.Trim());
                        }

                        foreach (XmlNode ItineraryInfo in ResXml.SelectNodes("tir310:TravelItinerary/tir310:ItineraryInfo/tir310:ReservationItems/tir310:Item/tir310:FlightSegment", xnMgr))
                        {
                            if (Common.ChinaOfAirport(ItineraryInfo.SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText) && Common.ChinaOfAirport(ItineraryInfo.SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText))
                            {
                                ChinaRoute = true;
                                break;
                            }
                        }

                        if (ChinaRoute)
                        {
                            //### 03.FOID 등록(ex:3FOID/PPKR여권번호-1.1) #####
                            foreach (XmlNode PersonNameNode in ResXml.SelectNodes("tir310:TravelItinerary/tir310:CustomerInfo/tir310:PersonName[tir310:GivenName]", xnMgr))
                            {
                                string NameNumber = PersonNameNode.Attributes.GetNamedItem("NameNumber").InnerText;
                                bool Infant = PersonNameNode.Attributes.GetNamedItem("PassengerType").InnerText.Equals("INF") ? true : false;
                                
                                //여권정보
                                foreach (XmlNode Service in ResXml.SelectNodes(String.Format("tir310:TravelItinerary/tir310:SpecialServiceInfo/tir310:Service[@SSR_Code='SSR' and @SSR_Type='DOCS' and tir310:PersonName/@NameNumber='{0}']", NameNumber), xnMgr))
                                {
                                    string[] StrDocInfo = Service.SelectSingleNode("tir310:Text", xnMgr).InnerText.Split('/');

                                    if (StrDocInfo.Length > 9)
                                        aas.AbacusCommand(CID, STK, String.Format("3FOID/PP{0}{1}-{2}", StrDocInfo[4], StrDocInfo[3], NameNumber), String.Concat(GUID, "-03_", NameNumber.Split('.')[0]));
                                }
                            }
                            
                            //### 04.작업자 등록 #####
                            aas.AbacusCommand(CID, STK, "6P", String.Concat(GUID, "-04"));

                            //### 05.적용 #####
                            ResXml = aas.AbacusCommand(CID, STK, "E", String.Concat(GUID, "-05"));
                        }

                        //### 06.세션종료 #####
                        aas.SessionClose(CID, STK);

                        //### 07.통합모드 생성 #####
                        //return ToModeSearchBookingAbacus(ResXml, xnMgr);
                        return ResXml;
                    }
                    else if (XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText.Equals("Galileo"))
                    {
                        //결과
                        XmlElement ResXml;
                        
                        //### 01.PNR조회(PNR_Retrieve) #####
                        ResXml = gas.PnrInfoDisplayRS("0", PNR, "G", String.Concat(GUID, "-01"));

                        //오류 결과일 경우 예외 처리
                        if (!ResXml.SelectSingleNode("ResultErrorNo").InnerText.Equals("0"))
                            throw new Exception(ResXml.SelectSingleNode("ResultMsg").InnerText);

                        foreach (XmlNode ItineraryInfo in ResXml.SelectNodes("AirSegDetail"))
                        {
                            if (Common.ChinaOfAirport(ItineraryInfo.SelectSingleNode("StartAirp").InnerText) && Common.ChinaOfAirport(ItineraryInfo.SelectSingleNode("EndAirp").InnerText))
                            {
                                ChinaRoute = true;
                                break;
                            }
                        }

                        if (ChinaRoute)
                        {
                            //### 02.FOID 등록(ex:SI.P1/SSRFOIDKEHK1/PP여권번호) #####
                            string Token = gas.SessionStartRS(GUID).SelectSingleNode("ResultMsg").InnerText;

                            foreach (XmlNode PaxFareInfo in ResXml.SelectNodes("PaxFareInfo"))
                            {
                                string PTNum = PaxFareInfo.SelectSingleNode("AbsNameNum").InnerText;
                                XmlNode ItemNode = XmlDBBooking.SelectSingleNode(String.Format("item4[영문성='{0}' and 영문이름='{1}']", PaxFareInfo.SelectSingleNode("PaxLastName").InnerText, PaxFareInfo.SelectSingleNode("PaxFirstName").InnerText));

                                //여권정보
                                if (!String.IsNullOrWhiteSpace(ItemNode.SelectSingleNode("여권번호").InnerText))
                                    gas.TerminalSubmitRS(Token, String.Format("SI.P{0}/SSRFOID{1}HK1/PP{2}", PTNum, MCC, ItemNode.SelectSingleNode("여권번호").InnerText), String.Concat(GUID, "-02_", PTNum));
                            }

                            ResXml = gas.TerminalSubmitRS(Token, String.Format("*{0}", PNR), GUID);

                            gas.SessionEndRS(Token, GUID);
                        }

                        //### 03.통합모드 생성 #####
                        //return ToModeSearchBookingGalileo(ResXml);
                        return ResXml;
                    }
                    else
                        throw new Exception("FOID 등록이 불가능한 예약입니다.");
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, OID, 0).ToErrors;
            }
        }

        #endregion "FOID 등록"

        #region "증빙서류"

        /// <summary>
		/// 증빙서류 조회
		/// </summary>
		/// <param name="OID">주문번호</param>
		/// <param name="PID">예약자번호(PTID)</param>
		/// <returns>증빙서류 내용</returns>
		[WebMethod(Description = "증빙서류 조회")]
		public string SearchProof(int OID, int PID)
		{
            string ProofText = string.Empty;
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 36;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
			try
			{
				if (!SearchProofNeed(OID, PID).Equals("N"))
				{
					XmlElement RuleXml = SearchBookingRuleRS(OID, PID);

                    if (RuleXml.SelectNodes("rule").Count > 0)
                    {
                        foreach (XmlNode Item in RuleXml.SelectNodes("rule/item[name='증빙서류' or name='증빙 서류']"))
                        {
                            if (!String.IsNullOrWhiteSpace(Item.SelectSingleNode("message").InnerText))
                                ProofText += String.Concat(String.IsNullOrWhiteSpace(ProofText) ? "" : Environment.NewLine, Item.SelectSingleNode("message").InnerText);
                        }
                    }
                    else
                        ProofText = "증빙서류 필요 여부를 확인할 수 없습니다. 담당자에게 문의하시기 바랍니다.";
				}
			}
			catch (Exception ex)
			{
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 36, OID, 0).ToString;
			}

            return (String.IsNullOrEmpty(ProofText)) ? "" : cm.HtmlStrip(ProofText.Replace("<BR>", Environment.NewLine));
		}

		/// <summary>
		/// 증빙필요여부 조회
		/// </summary>
		/// <param name="OID">주문번호</param>
		/// <param name="PID">예약자번호(PTID)</param>
		/// <returns></returns>
		public string SearchProofNeed(int OID, int PID)
		{
			string ProofNeed = "Y";
			
			try
			{
				string ErrCode = string.Empty;
				string ErrMsg = string.Empty;
				
				using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
				{
					SqlCommand cmd = new SqlCommand();

					cmd.Connection = conn;
					cmd.CommandTimeout = 60;
					cmd.CommandType = CommandType.StoredProcedure;
					cmd.CommandText = "DBO.WSV_S_아이템예약_해외항공_증빙필요여부";

					cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
					cmd.Parameters.Add("@예약자번호", SqlDbType.Int, 0);
					cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
					cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

					cmd.Parameters["@주문번호"].Value = OID;
					cmd.Parameters["@예약자번호"].Value = PID;
					cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
					cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

					try
					{
						conn.Open();

						ProofNeed = cmd.ExecuteScalar().ToString();
						ErrCode = cmd.Parameters["@결과"].Value.ToString();
						ErrMsg = cmd.Parameters["@에러메시지"].Value.ToString();
					}
					catch (Exception ex)
					{
						ErrCode = "F";
						ErrMsg = ex.ToString();
					}
					finally
					{
						conn.Close();
					}
				}

				if (!ErrCode.Equals("S"))
					throw new Exception(ErrMsg);
			}
			catch (Exception ex)
			{
                new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, 0);
			}

			return ProofNeed;
		}
		
		#endregion "증빙서류"

		#region "자동발권"

        #region "발권가능 항공사 리스트"

        /// <summary>
        /// 발권가능 항공사 리스트
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "발권가능 항공사 리스트")]
        public XmlElement TicketableAirlineRS(int SNM, string RQT)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("TicketableAirlineRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;
            XmlDoc.SelectSingleNode("ResponseDetails/airline").InnerText = amd.SearchTicketableAirListDB();

            return XmlDoc.DocumentElement;
        }

        #endregion "발권가능 항공사 리스트"

        #region "발권요청"

        /// <summary>
        /// 발권요청
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <returns>요청일련번호</returns>
        [WebMethod(Description = "발권요청")]
        public int TicketIssuingRequest(int OID, int PID)
        {
            int ReqNumber = 0;
            string ErrorText = string.Empty;
            int ServiceNumber = 359;
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = ServiceNumber;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;

                log.LogDBSave(sqlParam);
            }
            catch (Exception ex)
            {
                if (ex.Message.Equals("서비스가 중복 요청되었습니다."))
                    ErrorText = ex.Message;
            }
            finally { }

            try
            {
                XmlDocument XmlTmp = new XmlDocument();
                string Xml = string.Empty;

                Xml += "<TicketIssuingRequestRQ>";
                Xml += String.Format("<OID>{0}</OID>", OID);
                Xml += String.Format("<PID>{0}</PID>", PID);
                Xml += "</TicketIssuingRequestRQ>";

                XmlTmp.LoadXml(Xml);
                cm.XmlFileSave(XmlTmp, mc.Name, "TicketIssuingRequestRQ", "N", GUID);
            }
            finally { }
            
            try
            {
                if (String.IsNullOrWhiteSpace(ErrorText))
                {
                    //DB에 저장된 예약정보
                    XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");

                    if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                    {
                        using (SqlCommand cmd = new SqlCommand())
                        {
                            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString);
                            SqlDataReader dr = null;

                            cmd.Connection = conn;
                            cmd.CommandTimeout = 60;
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.CommandText = "DBO.USP_T_CRS_고객발권요청발권요청";

                            cmd.Parameters.Add("@요청구분", SqlDbType.Char, 1);
                            cmd.Parameters.Add("@발권요청번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@주문아이템번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@부서번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@직원번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@발권담당", SqlDbType.VarChar, 100);
                            cmd.Parameters.Add("@PNR", SqlDbType.VarChar, 50);
                            cmd.Parameters.Add("@PNRCOPY", SqlDbType.NVarChar, 2000);
                            cmd.Parameters.Add("@프로모션", SqlDbType.VarChar, 10);
                            cmd.Parameters.Add("@TASF할부", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@TASF금액", SqlDbType.BigInt, 0);
                            cmd.Parameters.Add("@요청상태", SqlDbType.Char, 2);
                            cmd.Parameters.Add("@자동발권요청여부", SqlDbType.Char, 1);
                            cmd.Parameters.Add("@수정경로", SqlDbType.VarChar, 20);
                            cmd.Parameters.Add("@PRICETST정보", SqlDbType.NVarChar, 4000);
                            cmd.Parameters.Add("@요청자구분", SqlDbType.Char, 2);

                            cmd.Parameters["@요청구분"].Value = "1";
                            cmd.Parameters["@발권요청번호"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@주문번호"].Value = OID;
                            cmd.Parameters["@주문아이템번호"].Value = XmlDBBooking.SelectSingleNode("item3/주문아이템번호").InnerText;
                            cmd.Parameters["@부서번호"].Value = XmlDBBooking.SelectSingleNode("item/발권부서번호").InnerText;
                            cmd.Parameters["@직원번호"].Value = XmlDBBooking.SelectSingleNode("item/발권직원번호").InnerText;
                            cmd.Parameters["@발권담당"].Value = String.Format("[{0}] {1}", XmlDBBooking.SelectSingleNode("item/발권부서명").InnerText, XmlDBBooking.SelectSingleNode("item/발권직원명").InnerText);
                            cmd.Parameters["@PNR"].Value = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;
                            cmd.Parameters["@PNRCOPY"].Value = Convert.DBNull;
                            cmd.Parameters["@프로모션"].Value = Convert.DBNull;
                            cmd.Parameters["@TASF할부"].Value = Convert.DBNull;
                            cmd.Parameters["@TASF금액"].Value = Convert.DBNull;
                            cmd.Parameters["@요청상태"].Value = Convert.DBNull;
                            cmd.Parameters["@자동발권요청여부"].Value = Convert.DBNull;
                            cmd.Parameters["@수정경로"].Value = "웹서비스";
                            cmd.Parameters["@PRICETST정보"].Value = Convert.DBNull;
                            cmd.Parameters["@요청자구분"].Value = "03";

                            try
                            {
                                conn.Open();
                                dr = cmd.ExecuteReader();

                                if (dr.Read())
                                {
                                    if (dr["자동발권처리여부"].ToString().Equals("Y"))
                                        ReqNumber = Convert.ToInt32(dr["요청일련번호"]);
                                }
                            }
                            catch (Exception)
                            {
                                throw;
                            }
                            finally
                            {
                                dr.Dispose();
                                dr.Close();
                                conn.Close();
                            }
                        }
                    }
                    else
                        throw new Exception("예약 정보가 존재하지 않습니다.");
                }
                else
                    throw new Exception(ErrorText);
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);

                ErrorText = new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, OID, 0).ToString;
            }

            try
            {
                XmlDocument XmlTmp = new XmlDocument();
                string Xml = string.Empty;

                Xml += "<TicketIssuingRequestRS>";
                Xml += String.Format("<ReqNumber>{0}</ReqNumber>", ReqNumber);
                Xml += String.Format("<Exception><![CDATA[{0}]]></Exception>", ErrorText);
                Xml += "</TicketIssuingRequestRS>";

                XmlTmp.LoadXml(Xml);
                cm.XmlFileSave(XmlTmp, mc.Name, "TicketIssuingRequestRS", "N", GUID);
            }
            finally { }

            return ReqNumber;
        }

        #endregion "발권요청"

        #region "발권요청 상태값 변경"

        /// <summary>
        /// 발권요청 상태값 변경
        /// </summary>
        /// <param name="TIRN">요청일련번호</param>
        /// <param name="Status">자동발권상태값(1G:시스템불가, 1D:시스템실패, 1B:발권완료, 1J:발권완료(부분), 1O:중복발권)</param>
        /// <param name="Message">자동발권메시지</param>
        /// <returns></returns>
        [WebMethod(Description = "발권요청 상태값 변경")]
        public void TicketIssuingRequestStatus(int TIRN, string Status, string Message)
        {
            TicketIssuingRequestStatusSub(TIRN, Status, Message, cm.GetGUID);
        }

        /// <summary>
        /// 발권요청 상태값 변경
        /// </summary>
        /// <param name="TIRN">요청일련번호</param>
        /// <param name="Status">자동발권상태값(1G:시스템불가, 1D:시스템실패, 1B:발권완료, 1J:발권완료(부분), 1O:중복발권)</param>
        /// <param name="Message">자동발권메시지</param>
        /// <param name="GUID">고유번호</param>
        /// <returns></returns>
        public void TicketIssuingRequestStatusSub(int TIRN, string Status, string Message, string GUID)
        {
            if (String.IsNullOrWhiteSpace(GUID))
                GUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 360;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = GUID;
                sqlParam[7].Value = TIRN;
                sqlParam[8].Value = Status;
                sqlParam[9].Value = Message;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                XmlDocument XmlTmp = new XmlDocument();
                string Xml = string.Empty;

                Xml += "<TicketIssuingRequestStatusRQ>";
                Xml += String.Format("<TIRN>{0}</TIRN>", TIRN);
                Xml += String.Format("<Status>{0}</Status>", Status);
                Xml += String.Format("<Message><![CDATA[{0}]]></Message>", Message);
                Xml += "</TicketIssuingRequestStatusRQ>";

                XmlTmp.LoadXml(Xml);
                cm.XmlFileSave(XmlTmp, mc.Name, "TicketIssuingRequestStatusRQ", "N", GUID);
            }
            finally { }

            try
            {
                //발권요청상태 변경
                using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand
                    {
                        Connection = conn,
                        CommandType = CommandType.StoredProcedure,
                        CommandText = "DBO.USP_T_CRS5_발권요청_NEW2"
                    })
                    {
                        cmd.Parameters.Add("@구분", SqlDbType.Char, 2);
                        cmd.Parameters.Add("@요청일련번호", SqlDbType.Int, 0);
                        cmd.Parameters.Add("@자동발권상태값", SqlDbType.Char, 2);
                        cmd.Parameters.Add("@자동발권리턴메시지", SqlDbType.NVarChar, 4000);
                        cmd.Parameters.Add("@자동발권리턴메시지MAX", SqlDbType.NVarChar, -1);

                        cmd.Parameters["@구분"].Value = "A";
                        cmd.Parameters["@요청일련번호"].Value = TIRN;
                        cmd.Parameters["@자동발권상태값"].Value = Status;
                        cmd.Parameters["@자동발권리턴메시지"].Value = Message.Replace("\n", "\r\n");
                        cmd.Parameters["@자동발권리턴메시지MAX"].Value = Message.Replace("\n", "\r\n");

                        try
                        {
                            conn.Open();
                            cmd.ExecuteNonQuery();
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                        finally
                        {
                            conn.Close();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                cm.XmlFileSave(new MWSExceptionMode(ex, hcc, GUID, "AirService", MethodBase.GetCurrentMethod().Name, 360, 0, 0).ToErrors, mc.Name, "TicketIssuingRequestStatusRS", "N", GUID);
            }
        }

        #endregion "발권요청 상태값 변경"

        #region "결제요청 정보 삭제"

        /// <summary>
        /// 결제요청 정보 삭제
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="RQP">요청상세경로</param>
        /// <param name="GUID">고유번호</param>
        /// <returns></returns>
        //[WebMethod(Description = "결제요청 정보 삭제")]
        public bool DeletePaymentRequest(int SNM, int OID, int PID, int RQR, string RQT, string RQP, string GUID)
        {
            string LogGUID = String.IsNullOrWhiteSpace(GUID) ? cm.GetGUID : GUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 517;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = RQR;
                sqlParam[11].Value = RQP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            bool Success = false;
            int ANM = 0;
            
            try
            {
                //더페이(5025)는 결제요청 정보 삭제하지 않음(2017-09-27,김덕열과장)
                //티몬(4925,4926),11번가(4924,4929)는 결제요청 정보 삭제하지 않음(2017-11-15,연선미차장)
                //결제요청 정보 삭제 예외처리 하지 않음(2018-10-23,김경미매니저)
                //if (SNM != 5025 && SNM != 4925 && SNM != 4926 && SNM != 4924 && SNM != 4929)
                //{
                    using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
                    {
                        using (SqlCommand cmd = new SqlCommand
                        {
                            Connection = conn,
                            CommandType = CommandType.StoredProcedure,
                            CommandText = "DBO.WSV_T_아이템예약_해외항공_결제요청_취소"
                        })
                        {
                            cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@요청자", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@요청단말기", SqlDbType.VarChar, 20);
                            cmd.Parameters.Add("@요청경로", SqlDbType.NVarChar, 1000);
                            cmd.Parameters.Add("@거래처번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                            cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                            cmd.Parameters["@주문번호"].Value = OID;
                            cmd.Parameters["@요청자"].Value = RQR;
                            cmd.Parameters["@요청단말기"].Value = RQT;
                            cmd.Parameters["@요청경로"].Value = RQP;
                            cmd.Parameters["@거래처번호"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                            try
                            {
                                conn.Open();
                                cmd.ExecuteNonQuery();

                                if (cmd.Parameters["@결과"].Value.ToString().Equals("S"))
                                {
                                    Success = true;
                                    ANM = Convert.ToInt32(cmd.Parameters["@거래처번호"].Value);
                                }
                                else
                                    throw new Exception(cmd.Parameters["@에러메시지"].Value.ToString());
                            }
                            catch (Exception ex)
                            {
                                throw new Exception(ex.Message);
                            }
                            finally
                            {
                                conn.Close();
                            }
                        }
                    }

                    //제휴사 결제취소 동기화
                    if (Success)
                    {
                        ////11번가(2752850), 티몬(2748253), 이베이(3501914,3501927,3501922), 네이버(1847904)
                        //if (ANM.Equals(2752850) || ANM.Equals(2748253) || ANM.Equals(3501914) || ANM.Equals(3501927) || ANM.Equals(3501922) || ANM.Equals(1847904))
                        //    mod.AirBookPayCancel(ANM, OID, 0, PID, RQR, RQT);

                        //11번가(2752850), 티몬(2748253), 네이버(1847904)
                        if (ANM.Equals(2752850) || ANM.Equals(2748253) || ANM.Equals(1847904))
                            mod.AirBookPayCancel(ANM, OID, 0, PID, RQR, RQT);
                    }
                //}
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }

            return Success;
        }

        #endregion "결제요청 정보 삭제"

        #region "자동발권용 Pricing"

        //[WebMethod(Description = "")]
        public XmlElement AAAAAAAAAAAAASearchETicketingTEST()
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("_RetrieveRS"));

            XmlElement ResXml = XmlDoc.DocumentElement;
            XmlElement XmlDBBooking = SearchBookingDB(37564723, 5439665, "");
            
            return ToModeSearchETicketAmadeus(XmlDBBooking, ResXml);
        }

        //[WebMethod(Description = "")]
        public XmlElement AAAAAAAAAAAAASearchETicketingTEST2()
        {
            return SearchETicketingRS(40060777, 1512391);
        }

        /// <summary>
        /// 자동발권용 Pricing(PNR정보 이용)
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RIP">요청자IP</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "자동발권용 Pricing(PNR정보 이용)")]
        public XmlElement SearchETicketingRS(int OID, int PID)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 29;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    XmlElement ModeXml = SearchETicketing(OID, PID, XmlDBBooking, LogGUID);
                    
                    //저장
                    cm.XmlFileSave(ModeXml, mc.Name, "SearchETicketingRS", "N", String.Concat(LogGUID, "-25"));

                    return ModeXml;
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 29, OID, 0).ToErrors;
            }
        }

        [WebMethod(Description = "자동발권용 Pricing(PNR정보 이용)")]
        public XmlElement SearchETicketing2RS(int OID, int PID, string RIP)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 29;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, RIP);

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    XmlElement ModeXml = SearchETicketing(OID, PID, XmlDBBooking, LogGUID);

                    //저장
                    cm.XmlFileSave(ModeXml, mc.Name, "SearchETicketing2RS", "N", String.Concat(LogGUID, "-25"));

                    return ModeXml;
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("RIP", RIP);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 29, OID, 0).ToErrors;
            }
        }

        [WebMethod(Description = "자동발권용 Pricing(PNR정보 이용)")]
        public XmlElement SearchETicketing3RS(int OID, int PID, string RIP, string RQT)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 29;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, RIP);

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    XmlElement ModeXml = SearchETicketing(OID, PID, XmlDBBooking, LogGUID);

                    //저장
                    cm.XmlFileSave(ModeXml, mc.Name, "SearchETicketing2RS", "N", String.Concat(LogGUID, "-25"));

                    return ModeXml;
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("RIP", RIP);
                ex.Data.Add("RQT", RQT);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 29, OID, 0).ToErrors;
            }
        }

        public XmlElement SearchETicketing(int OID, int PID, XmlElement XmlDBBooking, string GUID)
        {
            try
            {
                XmlDocument FareXml = null;
                string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
                string PNR = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;
                int SNM = cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2);
                int ANM = cm.RequestInt(XmlDBBooking.SelectSingleNode("item2/거래처번호").InnerText, 83549);
                string ValidatingCarrier = XmlDBBooking.SelectSingleNode("item3/마케팅항공사").InnerText;

                //예약시 운임(항공료+텍스+유류할증료)
                double FirstFare = 0;
                double FirstDisFare = 0;

                if (XmlDBBooking.SelectNodes("item3/요금XML").Count > 0)
                {
                    FareXml = new XmlDocument();
                    FareXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                    if (FareXml.SelectNodes("priceIndex/summary").Count > 0)
                    {
                        FirstFare = (cm.RequestDouble(FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("fare").InnerText) + cm.RequestDouble(FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("tax").InnerText) + cm.RequestDouble(FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("fsc").InnerText));
                        FirstDisFare = (cm.RequestDouble(FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("disFare").InnerText) + cm.RequestDouble(FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("tax").InnerText) + cm.RequestDouble(FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("fsc").InnerText) + cm.RequestDouble(FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("disPartner").InnerText));
                    }

                    if (FareXml.SelectNodes("priceIndex/promotionInfo").Count > 0 && FareXml.SelectNodes("priceIndex/promotionInfo/item").Count > 0)
                    {
                        if (cm.RequestInt(FareXml.SelectSingleNode("priceIndex/promotionInfo/item/discount").InnerText) > 0)
                            throw new Exception("모두투어 특가가 별도로 존재하는 경우 자동발권이 제외됩니다.");
                    }
                }

                #region "아마데우스"

                if (String.Compare(GDS, "Amadeus", true).Equals(0) || String.Compare(GDS, "Topas", true).Equals(0))
                {
                    string SID = String.Empty;
                    string SCT = String.Empty;
                    int SQN = 0;

                    try
                    {
                        //결과
                        XmlElement ResXml;
                        XmlElement ResPricing = null;
                        XmlElement ResPricingRU = null;
                        XmlElement ResPricingRP = null;
                        XmlElement ResPricingRUList = null;

                        //네임스페이스
                        XmlNamespaceManager xnMgr;
                        XmlNamespaceManager xnMgrPricing;
                        XmlNamespaceManager xnMgrPricingRU;
                        XmlNamespaceManager xnMgrPricingRP;
                        XmlNamespaceManager xnMgrPricingRUList;

                        //Commission(RU)
                        string RuCommADT = string.Empty;
                        string RuCommCHD = string.Empty;
                        string RuCommINF = string.Empty;

                        //TourCode(RU)
                        string RuTourCode = string.Empty;

                        //Endorsement(RU)
                        string RuEndorsement = string.Empty;

                        //Fare Calculation(RU)
                        string RuFareCalculation = string.Empty;

                        //RUList 조회 적용 여부
                        bool RUList = false;

                        //PNR정보 변경 여부(커미션, 투어코드 등록 등)
                        bool PNRModify = false;

                        //사이트번호 재정의(OID 사용을 위한 재정의)
                        int SiteNum = SNM;

                        //증빙서류 체크 여부
                        bool CheckProof = true;

                        //MSP 체크 여부
                        bool CheckMSP = true;

                        //Q챠지 계산 여부
                        //bool CheckQCharge = true;

                        //프로모션 적용 금액 비교 여부
                        bool CheckFirstDisFare = true;

                        //해외OTA 여부
                        bool ForeignOTA = false;

                        //언더운임 프라이싱 여부
                        bool UnderPricing = false;

                        //오프라인 예약일 경우 SELK138AB로 Pricing 진행(2015-09-08,김지영과장)
                        if (XmlDBBooking.SelectSingleNode("item3/품목코드").InnerText.Equals("OA"))
                        {
                            //해외OTA(CTrip(1807166),취날(1950780),투니우(2944377),PK투어(3335127),FR24(3396932))는 SELK3300으로 Pricing 진행(2018-10-11,김지영팀장)
                            //해외OTA는 증빙서류 정보가 없기 때문에 체크 제외(2018-10-11,김지영팀장)
                            //해외OTA는 SELK38AB로 Pricing 진행(2019-04-05,김지영팀장)
                            if (ANM.Equals(1807166) || ANM.Equals(1950780) || ANM.Equals(2944377) || ANM.Equals(3335127) || ANM.Equals(3396932))
                            {
                                SiteNum = 2;
                                CheckProof = false;
                                CheckMSP = false;
                                //CheckQCharge = false;
                                CheckFirstDisFare = false;
                                ForeignOTA = true;
                            }
                            else
                                SiteNum = 2;
                        }

                        //### 01.세션생성 ##### 
                        XmlElement Session = amd.Authenticate(SiteNum, String.Concat(GUID, "-01"));

                        SID = Session.SelectSingleNode("session/sessionId").InnerText;
                        SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                        SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                        //### 02.PNR조회(PNR_Retrieve) #####
                        ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

                        xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                        xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                        //PNR에 등록되어 있는 운임
                        double PNRFare = 0;

                        //Q-Charge
                        //double QCharge = 0;
                        //double ROE = 0;
                        //double CalFsc = 0;

                        //탑승객수
                        double PaxCount = 0;

                        foreach (XmlNode TstData in ResXml.SelectNodes("m:tstData", xnMgr))
                        {
                            PaxCount = TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']", xnMgr).Count;
                            //PNRFare += (cm.RequestDouble((TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:currencyCode", xnMgr).InnerText != "KRW" && TstData.SelectNodes("m:fareData/m:monetaryInfo[m:qualifier='E']", xnMgr).Count > 0) ? TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='E']/m:amount", xnMgr).InnerText : TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:amount", xnMgr).InnerText) * PaxCount);
                            PNRFare += (cm.RequestDouble(TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='T']/m:amount", xnMgr).InnerText) * PaxCount);

                            //if (CheckQCharge && (ValidatingCarrier.Equals("HA") || ValidatingCarrier.Equals("TW")))
                            //{
                            //    if (TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:currencyCode", xnMgr).InnerText.Equals("KRW"))
                            //    {
                            //        if (TstData.SelectNodes("m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='37']", xnMgr).Count > 0 && TstData.SelectSingleNode("m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='37']/m:longFreetext", xnMgr).InnerText.IndexOf("Q") != -1)
                            //        {
                            //            double[] QInfo = Common.GetQCharge(TstData.SelectSingleNode("m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='37']/m:longFreetext", xnMgr).InnerText);
                            //            QCharge = QInfo[0];
                            //            ROE = QInfo[1];

                            //            CalFsc = Common.IntIncrement(QCharge * ROE, 100);
                            //            PNRFare = PNRFare - (CalFsc * PaxCount);
                            //        }
                            //    }
                            //}
                        }

                        //항공료+텍스+유류할증료 합산 금액이 1000원 이상 차이일 경우 자동발권 불가(2018-11-14,김경미매니저)
                        //항공료+텍스+유류할증료 합산 금액이 3000원 이상 차이일 경우 자동발권 불가(2019-02-21,김지영팀장)
                        //if (FirstFare > 0 && FirstFare != PNRFare)
                        //    throw new Exception("최초 예약시 운임과 현재 PNR상의 운임이 상이합니다.");
                        if (FirstFare > 0 && Math.Abs(FirstFare - PNRFare) >= 3000)
                            throw new Exception("최초 예약시 운임과 현재 PNR상의 운임이 상이합니다.");

                        //소아나 유아 포함 여부
                        bool TSTPax = ResXml.SelectNodes("m:travellerInfo/m:passengerData/m:travellerInformation/m:passenger[m:type='INF' or m:type='CHD']", xnMgr).Count.Equals(0) ? false : true;

                        //유아 포함 여부
                        bool TSTInfant = ResXml.SelectNodes("m:travellerInfo/m:passengerData/m:travellerInformation/m:passenger[m:type='INF']", xnMgr).Count.Equals(0) ? false : true;

                        //여정정보
                        XmlNodeList ItineraryInfo = ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR' and m:travelProduct/m:boardpointDetail]", xnMgr);
                        int ItineraryInfoCount = ItineraryInfo.Count;

                        XmlDocument XmlItineraryInfo2 = new XmlDocument();

                        if (ItineraryInfoCount > 0)
                        {
                            //발권항공사
                            ValidatingCarrier = String.IsNullOrWhiteSpace(ValidatingCarrier) ? ((ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo", xnMgr).Count > 0 && ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).InnerText : null) : ValidatingCarrier;

                            //수동커미션
                            string DLC = ItineraryInfo[0].SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText;
                            string ALC = XmlDBBooking.SelectSingleNode("item3/공항E").InnerText;
                            string RoutingCity = string.Empty;
                            string RoutingOA = string.Empty;
                            string RoutingMA = string.Empty;
                            string RoutingCls = string.Empty;
                            string DepartureDate = cm.ConvertToDateTime(ItineraryInfo[0].SelectSingleNode("m:travelProduct/m:product/m:depDate", xnMgr).InnerText);

                            //OJT여부
                            bool OJT = ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:travelProduct/m:productDetails/m:identification='ARNK']", xnMgr).Count > 0 ? true : false;

                            //한국출발여부
                            bool StartKorea = Common.KoreaOfAirport(DLC);

                            //DC 여부
                            bool DC = false;

                            for (int i = 0; i < ItineraryInfoCount; i++)
                            {
                                if (i > 0 && !ItineraryInfo[i].SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText.Equals(ItineraryInfo[(i - 1)].SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText))
                                    RoutingCity += String.Concat(ItineraryInfo[(i - 1)].SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText, "-");

                                RoutingCity += String.Concat(ItineraryInfo[i].SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText, "-");
                                RoutingOA += (ItineraryInfo[i].SelectNodes("m:legInfo/m:legTravelProduct/m:companyDetails/m:operatingCompany", xnMgr).Count > 0) ? ItineraryInfo[i].SelectSingleNode("m:legInfo/m:legTravelProduct/m:companyDetails/m:operatingCompany", xnMgr).InnerText : ItineraryInfo[i].SelectSingleNode("m:travelProduct/m:companyDetail/m:identification", xnMgr).InnerText;
                                RoutingMA += ItineraryInfo[i].SelectSingleNode("m:travelProduct/m:companyDetail/m:identification", xnMgr).InnerText;
                                RoutingCls += ItineraryInfo[i].SelectSingleNode("m:travelProduct/m:productDetails/m:classOfService", xnMgr).InnerText;

                                if (i.Equals(ItineraryInfoCount - 1))
                                {
                                    RoutingCity += ItineraryInfo[i].SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText;
                                }
                                else
                                {
                                    RoutingOA += "-";
                                    RoutingMA += "-";
                                    RoutingCls += "-";
                                }
                            }

                            bool NTF = false;
                            string[] MCommission = ModeCommission(SNM, ValidatingCarrier, DLC, ALC, RoutingCity, RoutingOA, RoutingMA, RoutingCls, DepartureDate, OJT);

                            //### 03.커미션(MODE) 정보 #####
                            XmlDocument XmlCommission = new XmlDocument();
                            XmlCommission.LoadXml(String.Format("<CommissionInfo><Source><SNM>{0}</SNM><ValidatingCarrier>{1}</ValidatingCarrier><DLC>{2}</DLC><ALC>{3}</ALC><RoutingCity>{4}</RoutingCity><RoutingOA>{5}</RoutingOA><RoutingMA>{6}</RoutingMA><RoutingCls>{7}</RoutingCls><DepartureDate>{8}</DepartureDate></Source><Result><Code>{9}</Code><Commission><![CDATA[{10}]]></Commission><ChildApply>{11}</ChildApply><TourCode>{12}</TourCode></Result></CommissionInfo>", SNM, ValidatingCarrier, DLC, ALC, RoutingCity, RoutingOA, RoutingMA, RoutingCls, DepartureDate, MCommission[0], MCommission[1], MCommission[2], MCommission[3]));
                            cm.XmlFileSave(XmlCommission, mc.Name, "ModeCommission", "N", String.Concat(GUID, "-03"));

                            if (TSTPax && MCommission[0].Equals("S") && MCommission[2].Equals("N"))
                            {
                                throw new Exception("성인과 소아의 커미션 적용이 다를 경우 자동 발권이 불가능합니다.");
                            }
                            else if (MCommission[0].Equals("F") && (ValidatingCarrier.Equals("JL") || ValidatingCarrier.Equals("NH")))
                            {
                                string[] RCls = RoutingCls.Split('-');
                                string OCls = RCls[0].Trim();
                                bool ClsErr = false;

                                foreach (string TmpCls in RCls)
                                {
                                    if (OCls != TmpCls.Trim())
                                    {
                                        ClsErr = true;
                                        break;
                                    }
                                }

                                if (ClsErr)
                                    throw new Exception("CLS별로 COMM이 상이하여 자동발권이 불가합니다.");
                            }

                            //항공원가계산
                            if (MCommission[0].Equals("S"))
                            {
                                foreach (XmlNode TstData in ResXml.SelectNodes("m:tstData", xnMgr))
                                {
                                    string StrPrimeCost = TstData.SelectSingleNode("m:tstFreetext[m:freetextDetail[m:subjectQualifier='3'][m:type='37']]/m:longFreetext", xnMgr).InnerText;
                                    double PrimeFare = 0;
                                    double Fare = Convert.ToDouble((TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:currencyCode", xnMgr).InnerText != "KRW" && TstData.SelectNodes("m:fareData/m:monetaryInfo[m:qualifier='E']", xnMgr).Count > 0) ? TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='E']/m:amount", xnMgr).InnerText : TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:amount", xnMgr).InnerText);

                                    if (!StartKorea || StrPrimeCost.IndexOf("M/IT") != -1)
                                        PrimeFare = Fare;
                                    else
                                    {
                                        Match match = new Regex(@"NUC(?<NUC>[0-9.]+)END.+ROE(?<ROE>[0-9.]+).?", RegexOptions.Singleline).Match(StrPrimeCost);
                                        PrimeFare = (match.Success) ? Common.IntCutting((cm.RequestDouble(match.Groups["NUC"].Value) * cm.RequestDouble(match.Groups["ROE"].Value)), 100) : Fare;
                                    }

                                    DC = (PrimeFare - Fare) > 0 ? true : false;
                                    break;
                                }
                            }

                            //예약상태코드(전 여정 'HK'만 가능)
                            if (ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:travelProduct/m:productDetails/m:identification!='ARNK'][m:relatedProduct/m:status!='HK' or not(m:itineraryReservationInfo)]", xnMgr).Count.Equals(0))
                            {
                                //증빙서류 체크
                                if (!CheckProof || String.IsNullOrWhiteSpace(SearchProof(OID, PID)))
                                {
                                    //첫번째 승객 성인 여부 체크
                                    if (ResXml.SelectNodes("m:travellerInfo[m:elementManagementPassenger/m:segmentName='NM']", xnMgr)[0].SelectNodes("m:passengerData[0]/m:travellerInformation/m:passenger/m:type", xnMgr).Count.Equals(0) || ResXml.SelectNodes("m:travellerInfo[m:elementManagementPassenger/m:segmentName='NM']", xnMgr)[0].SelectSingleNode("m:passengerData/m:travellerInformation/m:passenger/m:type", xnMgr).InnerText.Equals("ADT"))
                                    {
                                        //해외출발이면서 NX/SU/AI 항공사는 자동발권 불가(2019-04-16,김지영팀장)
                                        //해외출발이면서 NZ 항공사는 자동발권 불가(2019-06-07,김경미매니저)
                                        if (StartKorea || "NX/SU/AI/NZ".IndexOf(ValidatingCarrier).Equals(-1))
                                        {
                                            #region "언더운임발권"

                                            //발권 가능한 전체 운임 중 가장 저렴한 운임으로 발권(예약시 금액과의 차액은 DC처리)
                                            //LJ,ZE,TW,7C일 경우 언더운임 발권(2019-09-25,김지영팀장)
                                            //ZE는 소아/유아 포함일 경우 제외(2019-09-25,김지영팀장)
                                            //if ("/LJ/TW/7C/".IndexOf(ValidatingCarrier) != -1 || (ValidatingCarrier.Equals("ZE") && !TSTPax))
                                            if ("/7C/".IndexOf(ValidatingCarrier) != -1)
                                            //if ((SNM.Equals(2) && "/TW/7C/".IndexOf(ValidatingCarrier) != -1) || (!SNM.Equals(2) && "/7C/".IndexOf(ValidatingCarrier) != -1))
                                            {
                                                //### 04.운임Pricing(Fare_PricePNRWithBookingClass) #####
                                                ResPricing = amd.PricePNRWithBookingClassPricing3RS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04_UNDER"), "", ValidatingCarrier);

                                                //오류 결과일 경우 예외 처리
                                                xnMgrPricing = new XmlNamespaceManager(ResPricing.OwnerDocument.NameTable);
                                                xnMgrPricing.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassKEPricing"));

                                                if (ResPricing.SelectNodes("m:applicationError", xnMgrPricing).Count > 0)
                                                {
                                                    throw new Exception(String.Format("{0} - UNDER001", ResPricing.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgrPricing).InnerText));
                                                }

                                                //SF운임 제외(단, TW만 허용)(2019-09-04,김경미매니저)
                                                if (ValidatingCarrier != "TW")
                                                {
                                                    foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList[m:pricingInformation/m:tstInformation/m:tstIndicator='G' and m:pricingInformation/m:fcmi='M']", xnMgrPricing))
                                                    {
                                                        ResPricing.RemoveChild(FareList);
                                                    }
                                                }

                                                //최초운임과 언더운임 차액 계산을 위해 복사
                                                XmlDocument OResXml = new XmlDocument();
                                                OResXml.LoadXml(ResXml.OuterXml);

                                                //RP운임시 커미션 조회를 위해 복사
                                                XmlDocument XmlRU = new XmlDocument();
                                                XmlRU.LoadXml(ResPricing.OuterXml);
                                                ResPricingRU = XmlRU.DocumentElement;

                                                //NTF운임 제외
                                                foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList", xnMgrPricing))
                                                {
                                                    if (FareList.SelectNodes("m:fareIndicators", xnMgrPricing).Count > 0 && FareList.SelectSingleNode("m:fareIndicators/m:fareDetails/m:fareCategory", xnMgrPricing).InnerText.Equals("NTF"))
                                                        ResPricing.RemoveChild(FareList);
                                                }

                                                //로그기록
                                                cm.XmlFileSave(ResPricing, mc.Name, "ResPricingKE", "N", String.Concat(GUID, "-04_UNDER_1"));

                                                if (ResPricing.SelectNodes("m:fareList", xnMgrPricing).Count.Equals(0))
                                                    throw new Exception("자동 발권이 가능한 운임이 없습니다. - UNDER002");

                                                //가장 저렴한 운임 선택
                                                if (ResPricing.SelectNodes("m:fareList", xnMgrPricing).Count > 1)
                                                {
                                                    string CurrencyCode = ResXml.SelectSingleNode("m:tstData/m:fareData/m:monetaryInfo[m:qualifier='F']/m:currencyCode", xnMgr).InnerText;

                                                    //성인,소아
                                                    foreach (XmlNode TstData in ResXml.SelectNodes("m:tstData[m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='41']/m:longFreetext='PAX']", xnMgr))
                                                    {
                                                        int LowFare = 999999999;
                                                        string TstReferenceNumber = string.Empty;

                                                        foreach (XmlNode RefNumber in TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']/m:number", xnMgr))
                                                        {
                                                            TstReferenceNumber += String.Concat(RefNumber.InnerText, "/");
                                                        }

                                                        foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList[m:paxSegReference/m:refDetails/m:refQualifier='PA']", xnMgrPricing))
                                                        {
                                                            string PaxLegNumbers = string.Empty;
                                                            foreach (XmlNode RefNumber in FareList.SelectNodes("m:paxSegReference/m:refDetails[m:refQualifier='PA']/m:refNumber", xnMgrPricing))
                                                                PaxLegNumbers += String.Concat(RefNumber.InnerText, "/");

                                                            if (TstReferenceNumber.Equals(PaxLegNumbers))
                                                            {
                                                                if (FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareCurrency", xnMgrPricing).InnerText.Equals(CurrencyCode))
                                                                {
                                                                    if (LowFare < Convert.ToInt32(FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareAmount", xnMgrPricing).InnerText))
                                                                        ResPricing.RemoveChild(FareList);
                                                                    else
                                                                        LowFare = Convert.ToInt32(FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareAmount", xnMgrPricing).InnerText);
                                                                }
                                                                else
                                                                    ResPricing.RemoveChild(FareList);
                                                            }
                                                        }
                                                    }

                                                    //유아
                                                    foreach (XmlNode TstData in ResXml.SelectNodes("m:tstData[m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='41']/m:longFreetext='INF']", xnMgr))
                                                    {
                                                        int LowFare = 999999999;
                                                        string TstReferenceNumber = string.Empty;

                                                        foreach (XmlNode RefNumber in TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']/m:number", xnMgr))
                                                        {
                                                            TstReferenceNumber += String.Concat(RefNumber.InnerText, "/");
                                                        }

                                                        foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList[m:paxSegReference/m:refDetails/m:refQualifier='PI']", xnMgrPricing))
                                                        {
                                                            string PaxLegNumbers = string.Empty;
                                                            foreach (XmlNode RefNumber in FareList.SelectNodes("m:paxSegReference/m:refDetails[m:refQualifier='PI']/m:refNumber", xnMgrPricing))
                                                                PaxLegNumbers += String.Concat(RefNumber.InnerText, "/");

                                                            if (TstReferenceNumber.Equals(PaxLegNumbers))
                                                            {
                                                                if (FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareCurrency", xnMgrPricing).InnerText.Equals(CurrencyCode))
                                                                {
                                                                    if (LowFare < Convert.ToInt32(FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareAmount", xnMgrPricing).InnerText))
                                                                        ResPricing.RemoveChild(FareList);
                                                                    else
                                                                        LowFare = Convert.ToInt32(FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareAmount", xnMgrPricing).InnerText);
                                                                }
                                                                else
                                                                    ResPricing.RemoveChild(FareList);
                                                            }
                                                        }
                                                    }

                                                    //로그기록
                                                    cm.XmlFileSave(ResPricing, mc.Name, "ResPricingKE", "N", String.Concat(GUID, "-04_UNDER_2"));
                                                }

                                                if (ResPricing.SelectNodes("m:fareList", xnMgrPricing).Count.Equals(0))
                                                    throw new Exception("자동 발권이 가능한 운임이 없습니다. - UNDER003");

                                                //해외출발인 경우 NO-COMM으로 발권(2019-04-16,김지영팀장)
                                                if (StartKorea)
                                                {
                                                    //NTF운임에서 커미션 추출
                                                    if (ResPricingRU.SelectNodes("m:fareList[m:fareIndicators/m:fareDetails/m:fareCategory='NTF']", xnMgrPricing).Count > 0)
                                                    {
                                                        //NTF운임만 남김
                                                        foreach (XmlNode FareList in ResPricingRU.SelectNodes("m:fareList", xnMgrPricing))
                                                        {
                                                            if (FareList.SelectNodes("m:fareIndicators", xnMgrPricing).Count.Equals(0) || FareList.SelectSingleNode("m:fareIndicators/m:fareDetails/m:fareCategory", xnMgrPricing).InnerText != "NTF")
                                                                ResPricingRU.RemoveChild(FareList);
                                                        }

                                                        //로그기록
                                                        cm.XmlFileSave(ResPricingRU, mc.Name, "ResPricingRUKE", "N", String.Concat(GUID, "-04_UNDER_3"));

                                                        //가장 저렴한 운임 선택
                                                        if (ResPricingRU.SelectNodes("m:fareList", xnMgrPricing).Count > 1)
                                                        {
                                                            string CurrencyCode = ResXml.SelectSingleNode("m:tstData/m:fareData/m:monetaryInfo[m:qualifier='F']/m:currencyCode", xnMgr).InnerText;

                                                            //성인,소아
                                                            foreach (XmlNode TstData in ResXml.SelectNodes("m:tstData[m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='41']/m:longFreetext='PAX']", xnMgr))
                                                            {
                                                                int LowFare = 999999999;
                                                                string TstReferenceNumber = string.Empty;

                                                                foreach (XmlNode RefNumber in TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']/m:number", xnMgr))
                                                                {
                                                                    TstReferenceNumber += String.Concat(RefNumber.InnerText, "/");
                                                                }

                                                                foreach (XmlNode FareList in ResPricingRU.SelectNodes("m:fareList[m:paxSegReference/m:refDetails/m:refQualifier='PA']", xnMgrPricing))
                                                                {
                                                                    string PaxLegNumbers = string.Empty;
                                                                    foreach (XmlNode RefNumber in FareList.SelectNodes("m:paxSegReference/m:refDetails[m:refQualifier='PA']/m:refNumber", xnMgrPricing))
                                                                        PaxLegNumbers += String.Concat(RefNumber.InnerText, "/");

                                                                    if (TstReferenceNumber.Equals(PaxLegNumbers))
                                                                    {
                                                                        if (FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareCurrency", xnMgrPricing).InnerText.Equals(CurrencyCode))
                                                                        {
                                                                            if (LowFare < Convert.ToInt32(FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareAmount", xnMgrPricing).InnerText))
                                                                                ResPricingRU.RemoveChild(FareList);
                                                                            else
                                                                                LowFare = Convert.ToInt32(FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareAmount", xnMgrPricing).InnerText);
                                                                        }
                                                                        else
                                                                            ResPricingRU.RemoveChild(FareList);
                                                                    }
                                                                }
                                                            }

                                                            //유아
                                                            foreach (XmlNode TstData in ResXml.SelectNodes("m:tstData[m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='41']/m:longFreetext='INF']", xnMgr))
                                                            {
                                                                int LowFare = 999999999;
                                                                string TstReferenceNumber = string.Empty;

                                                                foreach (XmlNode RefNumber in TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']/m:number", xnMgr))
                                                                {
                                                                    TstReferenceNumber += String.Concat(RefNumber.InnerText, "/");
                                                                }

                                                                foreach (XmlNode FareList in ResPricingRU.SelectNodes("m:fareList[m:paxSegReference/m:refDetails/m:refQualifier='PI']", xnMgrPricing))
                                                                {
                                                                    string PaxLegNumbers = string.Empty;
                                                                    foreach (XmlNode RefNumber in FareList.SelectNodes("m:paxSegReference/m:refDetails[m:refQualifier='PI']/m:refNumber", xnMgrPricing))
                                                                        PaxLegNumbers += String.Concat(RefNumber.InnerText, "/");

                                                                    if (TstReferenceNumber.Equals(PaxLegNumbers))
                                                                    {
                                                                        if (FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareCurrency", xnMgrPricing).InnerText.Equals(CurrencyCode))
                                                                        {
                                                                            if (LowFare < Convert.ToInt32(FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareAmount", xnMgrPricing).InnerText))
                                                                                ResPricingRU.RemoveChild(FareList);
                                                                            else
                                                                                LowFare = Convert.ToInt32(FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareAmount", xnMgrPricing).InnerText);
                                                                        }
                                                                        else
                                                                            ResPricingRU.RemoveChild(FareList);
                                                                    }
                                                                }
                                                            }

                                                            //로그기록
                                                            cm.XmlFileSave(ResPricingRU, mc.Name, "ResPricingRUKE", "N", String.Concat(GUID, "-04_UNDER_4"));
                                                        }

                                                        int t = 0;
                                                        int p = 0;
                                                        int s = 0;

                                                        //PNR운임정보
                                                        for (t = 0; t < ResXml.SelectNodes("m:tstData", xnMgr).Count; t++)
                                                        {
                                                            XmlNode TstData = ResXml.SelectNodes("m:tstData", xnMgr)[t];
                                                            string PaxType = TstData.SelectSingleNode("m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='41']/m:longFreetext", xnMgr).InnerText;

                                                            for (p = 0; p < TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']", xnMgr).Count; p++)
                                                            {
                                                                XmlNode PaxRef = TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']", xnMgr)[p];

                                                                for (s = 0; s < TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST' and m:number!='0']", xnMgr).Count; s++)
                                                                {
                                                                    XmlNode ItiRef = TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST' and m:number!='0']", xnMgr)[s];

                                                                    if (ResPricingRU.SelectNodes(String.Format("m:fareList[m:fareComponentDetailsGroup/m:couponDetailsGroup/m:productId/m:referenceDetails[m:type='ST' and m:value='{0}']]", ItiRef.SelectSingleNode("m:number", xnMgr).InnerText), xnMgrPricing).Count > 0)
                                                                    {
                                                                        XmlNode RURricing = null;

                                                                        if (PaxType.Equals("INF"))
                                                                        {
                                                                            RURricing = ResPricingRU.SelectSingleNode(String.Format("m:fareList[m:paxSegReference/m:refDetails[m:refQualifier='PI' and m:refNumber='{0}']][m:fareComponentDetailsGroup/m:couponDetailsGroup/m:productId/m:referenceDetails[m:type='ST' and m:value='{1}']]", PaxRef.SelectSingleNode("m:number", xnMgr).InnerText, ItiRef.SelectSingleNode("m:number", xnMgr).InnerText), xnMgrPricing);

                                                                            //Commission
                                                                            if (String.IsNullOrWhiteSpace(RuCommINF))
                                                                            {
                                                                                if (RURricing.SelectNodes("m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']", xnMgrPricing).Count > 0)
                                                                                    RuCommINF = RURricing.SelectSingleNode("m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']/m:attributeDescription", xnMgrPricing).InnerText;
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            RURricing = ResPricingRU.SelectSingleNode(String.Format("m:fareList[m:paxSegReference/m:refDetails[m:refQualifier='PA' and m:refNumber='{0}']][m:fareComponentDetailsGroup/m:couponDetailsGroup/m:productId/m:referenceDetails[m:type='ST' and m:value='{1}']]", PaxRef.SelectSingleNode("m:number", xnMgr).InnerText, ItiRef.SelectSingleNode("m:number", xnMgr).InnerText), xnMgrPricing);
                                                                            PaxType = (ResXml.SelectNodes(String.Format("m:travellerInfo[m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number='{0}']/m:passengerData/m:travellerInformation/m:passenger/m:type", PaxRef.SelectSingleNode("m:number", xnMgr).InnerText), xnMgr).Count > 0) ? ResXml.SelectSingleNode(String.Format("m:travellerInfo[m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number='{0}']/m:passengerData/m:travellerInformation/m:passenger/m:type", PaxRef.SelectSingleNode("m:number", xnMgr).InnerText), xnMgr).InnerText : "ADT";

                                                                            //Commission
                                                                            if (PaxType.Equals("CHD"))
                                                                            {
                                                                                if (String.IsNullOrWhiteSpace(RuCommCHD))
                                                                                {
                                                                                    if (RURricing.SelectNodes("m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']", xnMgrPricing).Count > 0)
                                                                                        RuCommCHD = RURricing.SelectSingleNode("m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']/m:attributeDescription", xnMgrPricing).InnerText;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if (String.IsNullOrWhiteSpace(RuCommADT))
                                                                                {
                                                                                    if (RURricing.SelectNodes("m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']", xnMgrPricing).Count > 0)
                                                                                        RuCommADT = RURricing.SelectSingleNode("m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']/m:attributeDescription", xnMgrPricing).InnerText;
                                                                                }
                                                                            }

                                                                            //TourCode
                                                                            if (RURricing.SelectNodes("m:otherPricingInfo/m:attributeDetails[m:attributeType='TOU']", xnMgrPricing).Count > 0)
                                                                                RuTourCode = RURricing.SelectSingleNode("m:otherPricingInfo/m:attributeDetails[m:attributeType='TOU']/m:attributeDescription", xnMgrPricing).InnerText;

                                                                            //Endorsement
                                                                            if (RURricing.SelectNodes("m:otherPricingInfo/m:attributeDetails[m:attributeType='END']", xnMgrPricing).Count > 0)
                                                                                RuEndorsement = RURricing.SelectSingleNode("m:otherPricingInfo/m:attributeDetails[m:attributeType='END']/m:attributeDescription", xnMgrPricing).InnerText;

                                                                            //Fare Calculation
                                                                            if (RURricing.SelectNodes("m:otherPricingInfo/m:attributeDetails[m:attributeType='FCA']", xnMgrPricing).Count > 0)
                                                                                RuFareCalculation = RURricing.SelectSingleNode("m:otherPricingInfo/m:attributeDetails[m:attributeType='FCA']/m:attributeDescription", xnMgrPricing).InnerText;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                        //로그기록
                                                        XmlDocument XmlCom = new XmlDocument();
                                                        XmlCom.LoadXml(String.Format("<com><RuCommADT>{0}</RuCommADT><RuCommCHD>{1}</RuCommCHD><RuCommINF>{2}</RuCommINF><RuTourCode>{3}</RuTourCode></com>", RuCommADT, RuCommCHD, RuCommINF, RuTourCode));
                                                        cm.XmlFileSave(XmlCom, mc.Name, "RuComm", "N", String.Concat(GUID, "-04_UNDER_5"));
                                                    }
                                                }
                                                else
                                                {
                                                    RuCommADT = "*F*0.00N";
                                                    RuCommCHD = "*F*0.00N";
                                                    RuCommINF = "*F*0.00N";
                                                }

                                                //### 05.TST삭제(Command_Cryptic) #####
                                                amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05_UNDER_TTE"), "TTE/ALL");

                                                //### 06.TST저장(Ticket_CreateTSTFromPricing) #####
                                                string TSTNumbers = "";
                                                string PAXNumbers = "";
                                                foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList", xnMgrPricing))
                                                {
                                                    string PaxLegNumbers = "";
                                                    foreach (XmlNode PaxList in FareList.SelectNodes("m:paxSegReference/m:refDetails[m:refQualifier='PA' or m:refQualifier='PI']", xnMgrPricing))
                                                    {
                                                        PaxLegNumbers += String.Concat(PaxList.SelectSingleNode("m:refNumber", xnMgrPricing).InnerText, "/");
                                                    }

                                                    TSTNumbers += String.Concat(FareList.SelectSingleNode("m:fareReference[m:referenceType='TST']/m:uniqueReference", xnMgrPricing).InnerText, ",");
                                                    PAXNumbers += String.Concat(PaxLegNumbers, ",");
                                                }

                                                amd.CreateTSTFromPricingPAXRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06_UNDER"), TSTNumbers, PAXNumbers);

                                                //### 07.ReceiveFrom(PNR_AddMultiElements) #####
                                                amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-07_UNDER"), String.Concat("P-", "WEBSERVICE"));

                                                //### 08.PNR조회(PNR_Retrieve) #####
                                                ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-08_UNDER"), PNR);

                                                //### 09.커미션(RU) 등록
                                                if (MCommission[0].Equals("F"))
                                                {
                                                    int y = 1;
                                                    foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList", xnMgrPricing))
                                                    {
                                                        if (FareList.SelectNodes("m:segmentInformation/m:fareQualifier/m:fareBasisDetails/m:discTktDesignator", xnMgrPricing).Count > 0)
                                                        {
                                                            if (FareList.SelectSingleNode("m:segmentInformation/m:fareQualifier/m:fareBasisDetails/m:discTktDesignator", xnMgrPricing).InnerText.Equals("CH"))
                                                            {
                                                                if (!String.IsNullOrWhiteSpace(RuCommCHD))
                                                                    amd.AddMultiElementsCommissionRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-09_UNDER_CHD_", y), RuCommCHD);
                                                            }
                                                            else if (FareList.SelectSingleNode("m:segmentInformation/m:fareQualifier/m:fareBasisDetails/m:discTktDesignator", xnMgrPricing).InnerText.Equals("IN"))
                                                            {
                                                                if (!String.IsNullOrWhiteSpace(RuCommINF))
                                                                    amd.AddMultiElementsCommissionRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-09_UNDER_INF_", y), RuCommINF);
                                                            }
                                                            else
                                                            {
                                                                if (!String.IsNullOrWhiteSpace(RuCommADT))
                                                                    amd.AddMultiElementsCommissionRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-09_UNDER_ADT_", y), RuCommADT);
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (!String.IsNullOrWhiteSpace(RuCommADT))
                                                                amd.AddMultiElementsCommissionRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-09_UNDER_ADT_", y), RuCommADT);
                                                        }

                                                        y++;
                                                    }
                                                }

                                                //### 10.ReceiveFrom(PNR_AddMultiElements) #####
                                                amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-10_UNDER"), String.Concat("P-", "WEBSERVICE"));

                                                //### 11.PNR조회(PNR_Retrieve) #####
                                                ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-11_UNDER"), PNR);

                                                //### 12.DC 발권(Command_Cryptic) #####
                                                //예약당시의 탑승객별 NetFare/TotalFare와 차액 계산
                                                string DCTSTNumbers = string.Empty;
                                                string Difference = string.Empty;

                                                //성인,소아
                                                foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList[m:paxSegReference/m:refDetails/m:refQualifier='PA']", xnMgrPricing))
                                                {
                                                    int FareAmount = Convert.ToInt32(FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareAmount", xnMgrPricing).InnerText);
                                                    int TstFareAmount = 0;
                                                    string PaxLegNumbers = string.Empty;
                                                    string TstReferenceNumber = string.Empty;
                                                    bool AdultYN = false;

                                                    foreach (XmlNode RefNumber in FareList.SelectNodes("m:paxSegReference/m:refDetails[m:refQualifier='PA']/m:refNumber", xnMgrPricing))
                                                        PaxLegNumbers += String.Concat(RefNumber.InnerText, "/");

                                                    foreach (XmlNode TstData in ResXml.SelectNodes("m:tstData[m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='41']/m:longFreetext='PAX']", xnMgr))
                                                    {
                                                        string TstPaxLegNumbers = string.Empty;
                                                        foreach (XmlNode RefNumber in TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']/m:number", xnMgr))
                                                        {
                                                            TstPaxLegNumbers += String.Concat(RefNumber.InnerText, "/");

                                                            if (ResXml.SelectNodes(String.Format("m:travellerInfo[m:elementManagementPassenger/m:reference[m:qualifier='PT' and m:number='{0}']]/m:passengerData/m:travellerInformation/m:passenger[not(type) or m:type='ADT']", RefNumber.InnerText), xnMgr).Count > 0)
                                                                AdultYN = true;
                                                        }

                                                        if (PaxLegNumbers.Equals(TstPaxLegNumbers))
                                                        {
                                                            TstReferenceNumber = TstData.SelectSingleNode("m:tstGeneralInformation/m:generalInformation/m:tstReferenceNumber", xnMgr).InnerText;
                                                            break;
                                                        }
                                                    }

                                                    foreach (XmlNode TstData in OResXml.SelectNodes("m:PNR_Reply/m:tstData[m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='41']/m:longFreetext='PAX']", xnMgr))
                                                    {
                                                        string TstPaxLegNumbers = string.Empty;
                                                        foreach (XmlNode RefNumber in TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']/m:number", xnMgr))
                                                            TstPaxLegNumbers += String.Concat(RefNumber.InnerText, "/");

                                                        if (PaxLegNumbers.Equals(TstPaxLegNumbers))
                                                        {
                                                            TstFareAmount = Convert.ToInt32(TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:amount", xnMgr).InnerText);
                                                            break;
                                                        }
                                                    }

                                                    //TW의 경우에는 성인 DC요금이 100단위 금액이 존재할 경우 실패 처리(2019-10-31,김경미매니저)
                                                    if (ValidatingCarrier.Equals("TW") && AdultYN && ((FareAmount - TstFareAmount) % 1000) > 0)
                                                    {
                                                        throw new Exception("티웨이항공은 성인일 경우 DC요금이 100단위의 금액이 존재할 경우 자동 발권이 불가능합니다.");
                                                    }
                                                    else
                                                    {
                                                        DCTSTNumbers += String.Concat(TstReferenceNumber, ",");
                                                        Difference += String.Concat((FareAmount - TstFareAmount), ",");
                                                    }
                                                }

                                                //유아
                                                foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList[m:paxSegReference/m:refDetails/m:refQualifier='PI']", xnMgrPricing))
                                                {
                                                    int FareAmount = Convert.ToInt32(FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareAmount", xnMgrPricing).InnerText);
                                                    int TstFareAmount = 0;
                                                    string PaxLegNumbers = string.Empty;
                                                    string TstReferenceNumber = string.Empty;

                                                    foreach (XmlNode RefNumber in FareList.SelectNodes("m:paxSegReference/m:refDetails[m:refQualifier='PI']/m:refNumber", xnMgrPricing))
                                                        PaxLegNumbers += String.Concat(RefNumber.InnerText, "/");

                                                    foreach (XmlNode TstData in ResXml.SelectNodes("m:tstData[m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='41']/m:longFreetext='INF']", xnMgr))
                                                    {
                                                        string TstPaxLegNumbers = string.Empty;
                                                        foreach (XmlNode RefNumber in TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']/m:number", xnMgr))
                                                            TstPaxLegNumbers += String.Concat(RefNumber.InnerText, "/");

                                                        if (PaxLegNumbers.Equals(TstPaxLegNumbers))
                                                        {
                                                            TstReferenceNumber = TstData.SelectSingleNode("m:tstGeneralInformation/m:generalInformation/m:tstReferenceNumber", xnMgr).InnerText;
                                                            break;
                                                        }
                                                    }

                                                    foreach (XmlNode TstData in OResXml.SelectNodes("m:PNR_Reply/m:tstData[m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='41']/m:longFreetext='INF']", xnMgr))
                                                    {
                                                        string TstPaxLegNumbers = string.Empty;
                                                        foreach (XmlNode RefNumber in TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']/m:number", xnMgr))
                                                            TstPaxLegNumbers += String.Concat(RefNumber.InnerText, "/");

                                                        if (PaxLegNumbers.Equals(TstPaxLegNumbers))
                                                        {
                                                            TstFareAmount = Convert.ToInt32(TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:amount", xnMgr).InnerText);
                                                            break;
                                                        }
                                                    }

                                                    DCTSTNumbers += String.Concat(TstReferenceNumber, ",");
                                                    Difference += String.Concat((FareAmount - TstFareAmount), ",");
                                                }

                                                if (DCTSTNumbers.IndexOf(",") != -1)
                                                {
                                                    string[] TSTN = DCTSTNumbers.Split(',');
                                                    string[] DIFN = Difference.Split(',');

                                                    for (int i = 0; i < TSTN.Length; i++)
                                                    {
                                                        if (!String.IsNullOrWhiteSpace(TSTN[i]) && cm.RequestInt(DIFN[i]) > 0)
                                                        {
                                                            amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-12_UNDER_TTN_", (i + 1)), String.Format("TTN/T{0}/D{1}", TSTN[i], DIFN[i]));
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-12_UNDER_TTN"), String.Concat("TTN/D", Difference));
                                                }

                                                //### 13.ReceiveFrom(PNR_AddMultiElements) #####
                                                amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-13_UNDER"), String.Concat("P-", "WEBSERVICE"));

                                                //### 14.PNR조회(PNR_Retrieve) #####
                                                ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-14_UNDER"), PNR);

                                                //### 15.투어코드(FT) 등록 #####
                                                if (!String.IsNullOrWhiteSpace(RuTourCode))
                                                {
                                                    //투어코드 삭제
                                                    XmlNodeList ElementManagementData = ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv/m:elementManagementData[m:segmentName='FT']", xnMgr);
                                                    int z = 1;
                                                    for (int i = ElementManagementData.Count; i > 0; i--)
                                                    {
                                                        amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-15_UNDER_TOU_1_XE_", z++), String.Concat("XE", ElementManagementData[(i - 1)].SelectSingleNode("m:lineNumber", xnMgr).InnerText));
                                                    }

                                                    //투어코드 등록(성인/소아)
                                                    amd.AddMultiElementsTourCodeRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-15_UNDER_TOU_2_PAX"), "PAX", RuTourCode.Replace("*F*", ""), 11);

                                                    //투어코드 등록(유아)
                                                    if (TSTInfant)
                                                        amd.AddMultiElementsTourCodeRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-15_UNDER_TOU_3_INF"), "INF", RuTourCode.Replace("*F*", ""), 0);

                                                    //### 16.엔도스(FE) 등록(투어코드가 존재하는 경우에만 등록) #####
                                                    if (!String.IsNullOrWhiteSpace(RuEndorsement))
                                                    {
                                                        //엔도스 삭제
                                                        int x = 1;
                                                        for (int i = ElementManagementData.Count; i > 0; i--)
                                                        {
                                                            amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-16_UNDER_END_1_XE_", x++), String.Concat("XE", ElementManagementData[(i - 1)].SelectSingleNode("m:lineNumber", xnMgr).InnerText));
                                                        }

                                                        //엔도스 등록(성인/소아)
                                                        amd.AddMultiElementsEndorsementRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-16_UNDER_END_2_PAX"), "PAX", RuEndorsement.Replace("*M*", ""), 11);

                                                        //엔도스 등록(유아)
                                                        if (TSTInfant)
                                                            amd.AddMultiElementsEndorsementRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-16_UNDER_END_3_INF"), "INF", RuEndorsement.Replace("*M*", ""), 0);
                                                    }
                                                }

                                                //### 17.운임계산식(FE) 등록 #####
                                                //개발 불필요

                                                PNRModify = true;
                                                UnderPricing = true;
                                            }

                                            #endregion "언더운임발권"

                                            #region "대한항공"

                                            //KE일 경우 별도 로직 추가(2018-09-28)
                                            //7C,CX,TW,MU일 경우 별도 로직 추가(2019-04-05,김지영팀장)
                                            //SC일 경우 별도 로직 추가(2019-04-08,김지영팀장)
                                            //ZE일 경우 별도 로직 추가(2019-04-16,김경미매니저)
                                            //SQ일 경우 별도 로직 추가(2019-05-09,김지영팀장)
                                            //TG일 경우 별도 로직 추가(2019-06-21,김지영팀장)
                                            //VN일 경우 별도 로직 추가(2019-07-03,김지영팀장)
                                            else if ("/KE/7C/CX/TW/MU/SC/ZE/SQ/TG/VN/".IndexOf(ValidatingCarrier) != -1)
                                            {
                                                int TstCount = ResXml.SelectNodes("m:tstData", xnMgr).Count;
                                                bool TstPass = false;

                                                //### 04.운임Pricing(Fare_PricePNRWithBookingClass) #####
                                                ResPricing = amd.PricePNRWithBookingClassPricing3RS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04_KE"), "", ValidatingCarrier);

                                                //오류 결과일 경우 예외 처리
                                                xnMgrPricing = new XmlNamespaceManager(ResPricing.OwnerDocument.NameTable);
                                                xnMgrPricing.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassKEPricing"));

                                                if (ResPricing.SelectNodes("m:applicationError", xnMgrPricing).Count > 0)
                                                {
                                                    throw new Exception(String.Format("{0} - KE001", ResPricing.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgrPricing).InnerText));
                                                }

                                                //SF운임 제외(단, TW만 허용)(2019-09-04,김경미매니저)
                                                if (ValidatingCarrier != "TW")
                                                {
                                                    foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList[m:pricingInformation/m:tstInformation/m:tstIndicator='G' and m:pricingInformation/m:fcmi='M']", xnMgrPricing))
                                                    {
                                                        ResPricing.RemoveChild(FareList);
                                                    }
                                                }

                                                //예약당시의 탑승객별 NetFare/TotalFare와 동일하지 않은 운임 삭제
                                                string TSTRefNumber = string.Empty;

                                                foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList", xnMgrPricing))
                                                {
                                                    string FC = FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareCurrency", xnMgrPricing).InnerText;
                                                    string FA = FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareAmount", xnMgrPricing).InnerText;
                                                    string TC = FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='712']/m:fareCurrency", xnMgrPricing).InnerText;
                                                    string TA = FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='712']/m:fareAmount", xnMgrPricing).InnerText;

                                                    string PaxNumber1 = string.Empty;
                                                    foreach (XmlNode RefNumber in FareList.SelectNodes("m:paxSegReference/m:refDetails[m:refQualifier='PA' or m:refQualifier='PI']/m:refNumber", xnMgrPricing))
                                                        PaxNumber1 += String.Concat(RefNumber.InnerText, "/");

                                                    foreach (XmlNode TstData in ResXml.SelectNodes(String.Format("m:tstData[m:fareData/m:monetaryInfo[m:qualifier='F' and m:currencyCode='{0}' and m:amount={1}]][m:fareData/m:monetaryInfo[m:qualifier='T' and m:currencyCode='{2}' and m:amount={3}]]", FC, FA, TC, TA), xnMgr))
                                                    {
                                                        string PaxNumber2 = string.Empty;
                                                        foreach (XmlNode RefNumber in TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']/m:number", xnMgr))
                                                            PaxNumber2 += String.Concat(RefNumber.InnerText, "/");

                                                        if (PaxNumber1.Equals(PaxNumber2))
                                                            TSTRefNumber += String.Concat(FareList.SelectSingleNode("m:fareReference[m:referenceType='TST']/m:uniqueReference", xnMgrPricing).InnerText, "/");
                                                    }
                                                }

                                                foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList", xnMgrPricing))
                                                {
                                                    if (TSTRefNumber.IndexOf(FareList.SelectSingleNode("m:fareReference[m:referenceType='TST']/m:uniqueReference", xnMgrPricing).InnerText).Equals(-1))
                                                        ResPricing.RemoveChild(FareList);
                                                }

                                                //로그기록
                                                cm.XmlFileSave(ResPricing, mc.Name, "ResPricingKE", "N", String.Concat(GUID, "-04_KE_0"));

                                                //RP운임시 커미션 조회를 위해 복사
                                                XmlDocument XmlRU = new XmlDocument();
                                                XmlRU.LoadXml(ResPricing.OuterXml);
                                                ResPricingRU = XmlRU.DocumentElement;

                                                //NTF운임 제외
                                                foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList", xnMgrPricing))
                                                {
                                                    if (FareList.SelectNodes("m:fareIndicators", xnMgrPricing).Count > 0 && FareList.SelectSingleNode("m:fareIndicators/m:fareDetails/m:fareCategory", xnMgrPricing).InnerText.Equals("NTF"))
                                                        ResPricing.RemoveChild(FareList);
                                                }

                                                //로그기록
                                                cm.XmlFileSave(ResPricing, mc.Name, "ResPricingKE", "N", String.Concat(GUID, "-04_KE_1"));

                                                if (ResPricing.SelectNodes("m:fareList", xnMgrPricing).Count.Equals(0))
                                                    throw new Exception("자동 발권이 가능한 운임이 없습니다. - KE002");

                                                //MSP운임이면서 커미션이 존재할 경우(2019-04-08,김지영팀장)
                                                if (ResPricing.SelectNodes("m:fareList[m:pricingInformation/m:tstInformation/m:tstIndicator='F' and m:pricingInformation/m:fcmi='N' and m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']]", xnMgrPricing).Count >= TstCount)
                                                {
                                                    foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList[m:pricingInformation/m:tstInformation/m:tstIndicator != 'F' or m:pricingInformation/m:fcmi != 'N' or not(m:otherPricingInfo/m:attributeDetails[m:attributeType='COM'])]", xnMgrPricing))
                                                        ResPricing.RemoveChild(FareList);

                                                    if (ResPricing.SelectNodes("m:fareList", xnMgrPricing).Count.Equals(TstCount))
                                                        TstPass = true;

                                                    //로그기록
                                                    cm.XmlFileSave(ResPricing, mc.Name, "ResPricing", "N", String.Concat(GUID, "-04_KE_2"));
                                                }

                                                if (TstPass)
                                                {
                                                    //### 05.TST삭제(Command_Cryptic) #####
                                                    amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05_KE_TTE"), "TTE/ALL");

                                                    //### 06.TST저장(Ticket_CreateTSTFromPricing) #####
                                                    amd.CreateTSTFromPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06_KE"), ResPricing, "Fare_PricePNRWithBookingClassKEPricing");
                                                }
                                                else
                                                {
                                                    //자동발권 가능여부 체크
                                                    //로직 미체크(2019-07-03,김지영매니저)
                                                    //if (ValidatingCarrier != "KE")
                                                    //{
                                                    //    string ArrNationCode = string.Empty;
                                                    //    string ArrCityCode = string.Empty;
                                                    //    string ArrAirportCode = XmlDBBooking.SelectSingleNode("item3/공항E").InnerText;
                                                    //    string ViaNationCode = string.Empty;
                                                    //    string ViaCityCode = string.Empty;
                                                    //    string ViaAirportCode = string.Empty;
                                                    //    string TmpItinerary1 = string.Empty;
                                                    //    string TmpItinerary2 = string.Empty;

                                                    //    using (DataSet ds = Common.GetAirportInfo("EN", ArrAirportCode))
                                                    //    {
                                                    //        if (ds.Tables[0].Rows.Count > 0)
                                                    //        {
                                                    //            ArrNationCode = ds.Tables[0].Rows[0]["CountryCode"].ToString();
                                                    //            ArrCityCode = ds.Tables[0].Rows[0]["CityCode"].ToString();
                                                    //        }
                                                    //    }

                                                    //    for (int i = 0; i < ItineraryInfoCount; i++)
                                                    //    {
                                                    //        if (i < ItineraryInfoCount - 1)
                                                    //        {
                                                    //            string TmpNationCode = string.Empty;
                                                    //            string TmpCityCode = string.Empty;
                                                    //            string TmpAirportCode = ItineraryInfo[i].SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText;

                                                    //            if (!TmpAirportCode.Equals(ArrAirportCode))
                                                    //            {
                                                    //                if (ViaAirportCode.IndexOf(TmpAirportCode).Equals(-1))
                                                    //                {
                                                    //                    using (DataSet ds = Common.GetAirportInfo("EN", TmpAirportCode))
                                                    //                    {
                                                    //                        if (ds.Tables[0].Rows.Count > 0)
                                                    //                        {
                                                    //                            TmpNationCode = ds.Tables[0].Rows[0]["CountryCode"].ToString();
                                                    //                            TmpCityCode = ds.Tables[0].Rows[0]["CityCode"].ToString();
                                                    //                        }
                                                    //                    }

                                                    //                    if (ViaNationCode.IndexOf(TmpNationCode).Equals(-1))
                                                    //                        ViaNationCode += String.Concat("/", TmpNationCode);

                                                    //                    if (ViaCityCode.IndexOf(TmpCityCode).Equals(-1))
                                                    //                        ViaCityCode += String.Concat("/", TmpCityCode);

                                                    //                    ViaAirportCode += String.Concat("/", TmpAirportCode);
                                                    //                }
                                                    //            }
                                                    //        }

                                                    //        TmpItinerary1 += String.Concat(Common.SelAirport(ItineraryInfo[i].SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText), Common.SelAirport(ItineraryInfo[i].SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText));
                                                    //        TmpItinerary2 = String.Concat(Common.SelAirport(ItineraryInfo[i].SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText), Common.SelAirport(ItineraryInfo[i].SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText), TmpItinerary2);
                                                    //    }

                                                    //    if (!String.IsNullOrWhiteSpace(ViaNationCode))
                                                    //        ViaNationCode += "/";

                                                    //    if (!String.IsNullOrWhiteSpace(ViaCityCode))
                                                    //        ViaCityCode += "/";

                                                    //    if (!String.IsNullOrWhiteSpace(ViaAirportCode))
                                                    //        ViaAirportCode += "/";

                                                    //    //### 05.여정정보 #####
                                                    //    XmlDocument XmlItineraryInfo = new XmlDocument();
                                                    //    XmlItineraryInfo.LoadXml(String.Format("<ItineraryInfo><ValidatingCarrier>{0}</ValidatingCarrier><ArrNationCode>{1}</ArrNationCode><ArrCityCode>{2}</ArrCityCode><ArrAirportCode>{3}</ArrAirportCode><ViaNationCode>{4}</ViaNationCode><ViaCityCode>{5}</ViaCityCode><ViaAirportCode>{6}</ViaAirportCode><TmpItineraryA>{7}</TmpItineraryA><TmpItineraryB>{8}</TmpItineraryB></ItineraryInfo>", ValidatingCarrier, ArrNationCode, ArrCityCode, ArrAirportCode, ViaNationCode, ViaCityCode, ViaAirportCode, TmpItinerary1, TmpItinerary2));
                                                    //    cm.XmlFileSave(XmlItineraryInfo, mc.Name, "ItineraryInfo", "N", String.Concat(GUID, "-04_KE_3"));

                                                    //    if (amd.SearchTicketableDB(ValidatingCarrier, ArrNationCode, ArrCityCode, ArrAirportCode, ViaNationCode, ViaCityCode, ViaAirportCode).Equals("N"))
                                                    //    {
                                                    //        throw new Exception("해당 항공사 및 여정은 자동 발권이 불가능합니다. - KE003");
                                                    //    }
                                                    //}

                                                    //운임비교
                                                    if (ResXml.SelectNodes("m:tstData", xnMgr).Count != ResPricing.SelectNodes("m:fareList", xnMgrPricing).Count)
                                                    {
                                                        if (TstCount.Equals(1))
                                                        {
                                                            if (ResPricing.SelectNodes("m:fareList", xnMgrPricing).Count > TstCount)
                                                            {
                                                                //운임 및 FARE BASIS 비교
                                                                XmlNode TstData = ResXml.SelectSingleNode("m:tstData", xnMgr);
                                                                string TstFare = TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:amount", xnMgr).InnerText;
                                                                string TstFareBasis = string.Empty;
                                                                string TstFareBasisFW = string.Empty;

                                                                foreach (XmlNode FareElement in TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr))
                                                                {
                                                                    TstFareBasis += String.Concat(FareElement.SelectSingleNode("m:primaryCode", xnMgr).InnerText, FareElement.SelectSingleNode("m:fareBasis", xnMgr).InnerText);
                                                                    TstFareBasisFW += FareElement.SelectSingleNode("m:primaryCode", xnMgr).InnerText.Substring(0, 1);
                                                                }

                                                                foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList", xnMgrPricing))
                                                                {
                                                                    //운임비교
                                                                    if (TstFare != FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareAmount", xnMgrPricing).InnerText)
                                                                        ResPricing.RemoveChild(FareList);
                                                                    else
                                                                    {
                                                                        //FARE BASIS 비교
                                                                        string FareBasis = string.Empty;
                                                                        string FareBasisFW = string.Empty;

                                                                        foreach (XmlNode FareBasisDetails in FareList.SelectNodes("m:segmentInformation/m:fareQualifier/m:fareBasisDetails", xnMgrPricing))
                                                                        {
                                                                            FareBasis += String.Concat(FareBasisDetails.SelectSingleNode("m:primaryCode", xnMgrPricing).InnerText, FareBasisDetails.SelectSingleNode("m:fareBasisCode", xnMgrPricing).InnerText);
                                                                            FareBasisFW += FareBasisDetails.SelectSingleNode("m:primaryCode", xnMgrPricing).InnerText.Substring(0, 1);
                                                                        }

                                                                        //해외OTA는 첫번째 자리만 비교(2019-06-19,김지영팀장)
                                                                        if (ForeignOTA)
                                                                        {
                                                                            if (TstFareBasisFW != FareBasisFW)
                                                                                ResPricing.RemoveChild(FareList);
                                                                        }
                                                                        else
                                                                        {
                                                                            if (TstFareBasis != FareBasis)
                                                                                ResPricing.RemoveChild(FareList);
                                                                        }
                                                                    }
                                                                }

                                                                //동일 운인 조건이 하나 이상일 경우 임의로 하나의 운임 선택(2019-04-08)
                                                                if (ResPricing.SelectNodes("m:fareList", xnMgrPricing).Count > TstCount)
                                                                {
                                                                    //MSP운임이 존재할 경우
                                                                    if (ResPricing.SelectNodes("m:fareList[m:pricingInformation/m:tstInformation/m:tstIndicator='F' and m:pricingInformation/m:fcmi='N']", xnMgrPricing).Count > 0)
                                                                    {
                                                                        XmlNode TmpFare = ResPricing.SelectSingleNode("m:fareList[m:pricingInformation/m:tstInformation/m:tstIndicator='F' and m:pricingInformation/m:fcmi='N']", xnMgrPricing).Clone();

                                                                        foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList", xnMgrPricing))
                                                                            ResPricing.RemoveChild(FareList);

                                                                        ResPricing.AppendChild(ResPricing.OwnerDocument.ImportNode(TmpFare, true));
                                                                    }
                                                                    else
                                                                    {
                                                                        for (int x = 1; x < ResPricing.SelectNodes("m:fareList", xnMgrPricing).Count; x++)
                                                                            ResPricing.RemoveChild(ResPricing.SelectNodes("m:fareList", xnMgrPricing)[x]);
                                                                    }
                                                                }
                                                                else if (ResPricing.SelectNodes("m:fareList", xnMgrPricing).Count < TstCount)
                                                                    throw new Exception("예약 운임과 발권운임 결과가 일치하지 않아 자동 발권이 불가능합니다. - KE004");
                                                            }
                                                            else
                                                                throw new Exception("예약 운임과 발권운임 결과가 일치하지 않아 자동 발권이 불가능합니다. - KE005");
                                                        }
                                                        else
                                                            throw new Exception("예약 운임과 발권운임 결과가 일치하지 않아 자동 발권이 불가능합니다. - KE006");
                                                    }

                                                    //해외출발인 경우 NO-COMM으로 발권(2019-04-16,김지영팀장)
                                                    if (StartKorea)
                                                    {
                                                        //NTF운임에서 커미션 추출
                                                        if (ResPricingRU.SelectNodes("m:fareList[m:fareIndicators/m:fareDetails/m:fareCategory='NTF']", xnMgrPricing).Count > 0)
                                                        {
                                                            //NTF운임만 남김
                                                            foreach (XmlNode FareList in ResPricingRU.SelectNodes("m:fareList", xnMgrPricing))
                                                            {
                                                                if (FareList.SelectNodes("m:fareIndicators", xnMgrPricing).Count.Equals(0) || FareList.SelectSingleNode("m:fareIndicators/m:fareDetails/m:fareCategory", xnMgrPricing).InnerText != "NTF")
                                                                    ResPricingRU.RemoveChild(FareList);
                                                            }

                                                            //로그기록
                                                            cm.XmlFileSave(ResPricingRU, mc.Name, "ResPricingRUKE", "N", String.Concat(GUID, "-04_KE_3"));

                                                            int t = 0;
                                                            int p = 0;
                                                            int s = 0;

                                                            //PNR운임정보
                                                            for (t = 0; t < ResXml.SelectNodes("m:tstData", xnMgr).Count; t++)
                                                            {
                                                                XmlNode TstData = ResXml.SelectNodes("m:tstData", xnMgr)[t];
                                                                string PaxType = TstData.SelectSingleNode("m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='41']/m:longFreetext", xnMgr).InnerText;

                                                                for (p = 0; p < TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']", xnMgr).Count; p++)
                                                                {
                                                                    XmlNode PaxRef = TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']", xnMgr)[p];

                                                                    for (s = 0; s < TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST' and m:number!='0']", xnMgr).Count; s++)
                                                                    {
                                                                        XmlNode ItiRef = TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST' and m:number!='0']", xnMgr)[s];

                                                                        if (ResPricingRU.SelectNodes(String.Format("m:fareList[m:fareComponentDetailsGroup/m:couponDetailsGroup/m:productId/m:referenceDetails[m:type='ST' and m:value='{0}']]", ItiRef.SelectSingleNode("m:number", xnMgr).InnerText), xnMgrPricing).Count > 0)
                                                                        {
                                                                            XmlNode RURricing = null;

                                                                            if (PaxType.Equals("INF"))
                                                                            {
                                                                                RURricing = ResPricingRU.SelectSingleNode(String.Format("m:fareList[m:paxSegReference/m:refDetails[m:refQualifier='PI' and m:refNumber='{0}']][m:fareComponentDetailsGroup/m:couponDetailsGroup/m:productId/m:referenceDetails[m:type='ST' and m:value='{1}']]", PaxRef.SelectSingleNode("m:number", xnMgr).InnerText, ItiRef.SelectSingleNode("m:number", xnMgr).InnerText), xnMgrPricing);

                                                                                //Commission
                                                                                if (String.IsNullOrWhiteSpace(RuCommINF))
                                                                                {
                                                                                    if (RURricing.SelectNodes("m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']", xnMgrPricing).Count > 0)
                                                                                        RuCommINF = RURricing.SelectSingleNode("m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']/m:attributeDescription", xnMgrPricing).InnerText;
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                RURricing = ResPricingRU.SelectSingleNode(String.Format("m:fareList[m:paxSegReference/m:refDetails[m:refQualifier='PA' and m:refNumber='{0}']][m:fareComponentDetailsGroup/m:couponDetailsGroup/m:productId/m:referenceDetails[m:type='ST' and m:value='{1}']]", PaxRef.SelectSingleNode("m:number", xnMgr).InnerText, ItiRef.SelectSingleNode("m:number", xnMgr).InnerText), xnMgrPricing);
                                                                                PaxType = (ResXml.SelectNodes(String.Format("m:travellerInfo[m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number='{0}']/m:passengerData/m:travellerInformation/m:passenger/m:type", PaxRef.SelectSingleNode("m:number", xnMgr).InnerText), xnMgr).Count > 0) ? ResXml.SelectSingleNode(String.Format("m:travellerInfo[m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number='{0}']/m:passengerData/m:travellerInformation/m:passenger/m:type", PaxRef.SelectSingleNode("m:number", xnMgr).InnerText), xnMgr).InnerText : "ADT";

                                                                                //Commission
                                                                                if (PaxType.Equals("CHD"))
                                                                                {
                                                                                    if (String.IsNullOrWhiteSpace(RuCommCHD))
                                                                                    {
                                                                                        if (RURricing.SelectNodes("m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']", xnMgrPricing).Count > 0)
                                                                                            RuCommCHD = RURricing.SelectSingleNode("m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']/m:attributeDescription", xnMgrPricing).InnerText;
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    if (String.IsNullOrWhiteSpace(RuCommADT))
                                                                                    {
                                                                                        if (RURricing.SelectNodes("m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']", xnMgrPricing).Count > 0)
                                                                                            RuCommADT = RURricing.SelectSingleNode("m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']/m:attributeDescription", xnMgrPricing).InnerText;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                            //로그기록
                                                            XmlDocument XmlCom = new XmlDocument();
                                                            XmlCom.LoadXml(String.Format("<com><RuCommADT>{0}</RuCommADT><RuCommCHD>{1}</RuCommCHD><RuCommINF>{2}</RuCommINF></com>", RuCommADT, RuCommCHD, RuCommINF));
                                                            cm.XmlFileSave(XmlCom, mc.Name, "RuComm", "N", String.Concat(GUID, "-04_KE_4"));
                                                        }

                                                        //커미션이 없을 경우 KE는 NO-COMM으로 발권(2019-09-19,김경미매니저)
                                                        if (String.IsNullOrWhiteSpace(RuCommADT) && ValidatingCarrier.Equals("KE"))
                                                        {
                                                            RuCommADT = "*F*0.00N";
                                                            RuCommCHD = "*F*0.00N";
                                                            RuCommINF = "*F*0.00N";
                                                        }
                                                    }
                                                    else
                                                    {
                                                        RuCommADT = "*F*0.00N";
                                                        RuCommCHD = "*F*0.00N";
                                                        RuCommINF = "*F*0.00N";
                                                    }

                                                    //### 05.TST삭제(Command_Cryptic) #####
                                                    amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05_KE_TTE"), "TTE/ALL");

                                                    //### 06.TST저장(Ticket_CreateTSTFromPricing) #####
                                                    string TSTNumbers = "";
                                                    string PAXNumbers = "";
                                                    foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList", xnMgrPricing))
                                                    {
                                                        string PaxLegNumbers = "";
                                                        foreach (XmlNode PaxList in FareList.SelectNodes("m:paxSegReference/m:refDetails[m:refQualifier='PA' or m:refQualifier='PI']", xnMgrPricing))
                                                        {
                                                            PaxLegNumbers += String.Concat(PaxList.SelectSingleNode("m:refNumber", xnMgrPricing).InnerText, "/");
                                                        }

                                                        TSTNumbers += String.Concat(FareList.SelectSingleNode("m:fareReference[m:referenceType='TST']/m:uniqueReference", xnMgrPricing).InnerText, ",");
                                                        PAXNumbers += String.Concat(PaxLegNumbers, ",");
                                                    }

                                                    amd.CreateTSTFromPricingPAXRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06_KE"), TSTNumbers, PAXNumbers);

                                                    //### 07.ReceiveFrom(PNR_AddMultiElements) #####
                                                    amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-07_KE"), String.Concat("P-", "WEBSERVICE"));

                                                    //### 08.PNR조회(PNR_Retrieve) #####
                                                    ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-08_KE"), PNR);

                                                    //### 09.커미션(RU) 등록
                                                    if (MCommission[0].Equals("F"))
                                                    {
                                                        int y = 1;
                                                        foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList", xnMgrPricing))
                                                        {
                                                            if (FareList.SelectNodes("m:segmentInformation/m:fareQualifier/m:fareBasisDetails/m:discTktDesignator", xnMgrPricing).Count > 0)
                                                            {
                                                                if (FareList.SelectSingleNode("m:segmentInformation/m:fareQualifier/m:fareBasisDetails/m:discTktDesignator", xnMgrPricing).InnerText.Equals("CH"))
                                                                {
                                                                    if (!String.IsNullOrWhiteSpace(RuCommCHD))
                                                                        amd.AddMultiElementsCommissionRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-09_KE_CHD_", y), RuCommCHD);
                                                                }
                                                                else if (FareList.SelectSingleNode("m:segmentInformation/m:fareQualifier/m:fareBasisDetails/m:discTktDesignator", xnMgrPricing).InnerText.Equals("IN"))
                                                                {
                                                                    if (!String.IsNullOrWhiteSpace(RuCommINF))
                                                                        amd.AddMultiElementsCommissionRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-09_KE_INF_", y), RuCommINF);
                                                                }
                                                                else
                                                                {
                                                                    if (!String.IsNullOrWhiteSpace(RuCommADT))
                                                                        amd.AddMultiElementsCommissionRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-09_KE_ADT_", y), RuCommADT);
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if (!String.IsNullOrWhiteSpace(RuCommADT))
                                                                    amd.AddMultiElementsCommissionRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-09_KE_ADT_", y), RuCommADT);
                                                            }

                                                            y++;
                                                        }
                                                    }
                                                }

                                                //### 10.ReceiveFrom(PNR_AddMultiElements) #####
                                                amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-10_KE"), String.Concat("P-", "WEBSERVICE"));

                                                //### 11.PNR조회(PNR_Retrieve) #####
                                                ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-11_KE"), PNR);

                                                PNRModify = false;
                                            }

                                            #endregion "대한항공"

                                            #region "대한항공 외 모든 항공사"

                                            else
                                            {
                                                //### 04.운임Pricing(Fare_PricePNRWithBookingClass) #####
                                                ResPricing = amd.PricePNRWithBookingClassPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04_1"), ValidatingCarrier, "", (FareXml != null) ? FareXml.SelectSingleNode("priceIndex/paxFareGroup") : null);

                                                //오류 결과일 경우 예외 처리
                                                xnMgrPricing = new XmlNamespaceManager(ResPricing.OwnerDocument.NameTable);
                                                xnMgrPricing.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassPricing"));

                                                if (ResPricing.SelectNodes("m:applicationError", xnMgrPricing).Count > 0)
                                                {
                                                    throw new Exception(ResPricing.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgrPricing).InnerText);
                                                }

                                                //### 04.ReceiveFrom(PNR_AddMultiElements) #####
                                                //amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04_2"), String.Concat("P-", "WEBSERVICE"));

                                                //### 04.PNR조회(PNR_Retrieve) #####
                                                //ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04_2"), PNR);

                                                //MSP인 경우에만 자동발권 가능
                                                if (!CheckMSP || ResPricing.SelectSingleNode("m:fareList/m:pricingInformation/m:tstInformation/m:tstIndicator", xnMgrPricing).InnerText.Equals("F") && ResPricing.SelectSingleNode("m:fareList/m:pricingInformation/m:fcmi", xnMgrPricing).InnerText.Equals("N"))
                                                {
                                                    int FareTypeRP = 0;
                                                    int FareTypeRU = 0;

                                                    //NTF여부
                                                    if (ResPricing.SelectNodes("m:fareList/m:fareIndicators", xnMgrPricing).Count > 0 && ResPricing.SelectNodes("m:fareList/m:fareIndicators/m:fareDetails[m:fareCategory='NTF']", xnMgrPricing).Count > 0)
                                                    {
                                                        NTF = true;

                                                        string ArrNationCode = string.Empty;
                                                        string ArrCityCode = string.Empty;
                                                        string ArrAirportCode = XmlDBBooking.SelectSingleNode("item3/공항E").InnerText;
                                                        string ViaNationCode = string.Empty;
                                                        string ViaCityCode = string.Empty;
                                                        string ViaAirportCode = string.Empty;
                                                        string TmpItinerary1 = string.Empty;
                                                        string TmpItinerary2 = string.Empty;

                                                        using (DataSet ds = Common.GetAirportInfo("EN", ArrAirportCode))
                                                        {
                                                            if (ds.Tables[0].Rows.Count > 0)
                                                            {
                                                                ArrNationCode = ds.Tables[0].Rows[0]["CountryCode"].ToString();
                                                                ArrCityCode = ds.Tables[0].Rows[0]["CityCode"].ToString();
                                                            }
                                                        }

                                                        for (int i = 0; i < ItineraryInfoCount; i++)
                                                        {
                                                            if (i < ItineraryInfoCount - 1)
                                                            {
                                                                string TmpNationCode = string.Empty;
                                                                string TmpCityCode = string.Empty;
                                                                string TmpAirportCode = ItineraryInfo[i].SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText;

                                                                if (!TmpAirportCode.Equals(ArrAirportCode))
                                                                {
                                                                    if (ViaAirportCode.IndexOf(TmpAirportCode).Equals(-1))
                                                                    {
                                                                        using (DataSet ds = Common.GetAirportInfo("EN", TmpAirportCode))
                                                                        {
                                                                            if (ds.Tables[0].Rows.Count > 0)
                                                                            {
                                                                                TmpNationCode = ds.Tables[0].Rows[0]["CountryCode"].ToString();
                                                                                TmpCityCode = ds.Tables[0].Rows[0]["CityCode"].ToString();
                                                                            }
                                                                        }

                                                                        if (ViaNationCode.IndexOf(TmpNationCode).Equals(-1))
                                                                            ViaNationCode += String.Concat("/", TmpNationCode);

                                                                        if (ViaCityCode.IndexOf(TmpCityCode).Equals(-1))
                                                                            ViaCityCode += String.Concat("/", TmpCityCode);

                                                                        ViaAirportCode += String.Concat("/", TmpAirportCode);
                                                                    }
                                                                }
                                                            }

                                                            TmpItinerary1 += String.Concat(Common.SelAirport(ItineraryInfo[i].SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText), Common.SelAirport(ItineraryInfo[i].SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText));
                                                            TmpItinerary2 = String.Concat(Common.SelAirport(ItineraryInfo[i].SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText), Common.SelAirport(ItineraryInfo[i].SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText), TmpItinerary2);
                                                        }

                                                        if (!String.IsNullOrWhiteSpace(ViaNationCode))
                                                            ViaNationCode += "/";

                                                        if (!String.IsNullOrWhiteSpace(ViaCityCode))
                                                            ViaCityCode += "/";

                                                        if (!String.IsNullOrWhiteSpace(ViaAirportCode))
                                                            ViaAirportCode += "/";

                                                        //### 05.여정정보 #####
                                                        XmlDocument XmlItineraryInfo = new XmlDocument();
                                                        XmlItineraryInfo.LoadXml(String.Format("<ItineraryInfo><ValidatingCarrier>{0}</ValidatingCarrier><ArrNationCode>{1}</ArrNationCode><ArrCityCode>{2}</ArrCityCode><ArrAirportCode>{3}</ArrAirportCode><ViaNationCode>{4}</ViaNationCode><ViaCityCode>{5}</ViaCityCode><ViaAirportCode>{6}</ViaAirportCode><TmpItineraryA>{7}</TmpItineraryA><TmpItineraryB>{8}</TmpItineraryB></ItineraryInfo>", ValidatingCarrier, ArrNationCode, ArrCityCode, ArrAirportCode, ViaNationCode, ViaCityCode, ViaAirportCode, TmpItinerary1, TmpItinerary2));
                                                        cm.XmlFileSave(XmlItineraryInfo, mc.Name, "ItineraryInfo", "N", String.Concat(GUID, "-05"));

                                                        //자동발권 수행여부
                                                        if (amd.SearchTicketableDB(ValidatingCarrier, ArrNationCode, ArrCityCode, ArrAirportCode, ViaNationCode, ViaCityCode, ViaAirportCode).Equals("Y"))
                                                        {
                                                            //운임타입(동일 운임타입일 경우 운임Pricing을 중복으로 실행하지 않기 위함)
                                                            if (FareXml != null)
                                                            {
                                                                foreach (XmlNode FareType in FareXml.SelectNodes("priceIndex/paxFareGroup/paxFare/segFareGroup/segFare/fare/fare/fareType"))
                                                                {
                                                                    if (FareType.InnerText.Equals("RP"))
                                                                        FareTypeRP++;
                                                                    else
                                                                        FareTypeRU++;
                                                                }
                                                            }

                                                            //### 06.운임Pricing(Fare_PricePNRWithBookingClass)(RU) #####
                                                            if (FareTypeRU > 0 && FareTypeRP.Equals(0))
                                                                ResPricingRU = ResPricing;
                                                            else
                                                                ResPricingRU = amd.PricePNRWithBookingClassPricing2RS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06"), ValidatingCarrier, "RU", false);

                                                            //오류 결과일 경우 예외 처리
                                                            xnMgrPricingRU = new XmlNamespaceManager(ResPricingRU.OwnerDocument.NameTable);
                                                            xnMgrPricingRU.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassPricing"));

                                                            if (ResPricingRU.SelectNodes("m:applicationError", xnMgrPricingRU).Count > 0)
                                                            {
                                                                throw new Exception(ResPricingRU.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgrPricingRU).InnerText);
                                                            }

                                                            if (ResPricingRU.SelectSingleNode("m:fareList/m:pricingInformation/m:tstInformation/m:tstIndicator", xnMgrPricingRU).InnerText.Equals("F") && ResPricingRU.SelectSingleNode("m:fareList/m:pricingInformation/m:fcmi", xnMgrPricingRU).InnerText.Equals("N"))
                                                            {
                                                                if (ResXml.SelectNodes("m:tstData", xnMgr).Count > 0 && ResXml.SelectNodes("m:tstData", xnMgr).Count.Equals(ResPricingRU.SelectNodes("m:fareList", xnMgrPricingRU).Count))
                                                                {
                                                                    bool SameFare = true;
                                                                    int t = 0;
                                                                    int p = 0;
                                                                    int s = 0;
                                                                    int f = 0;

                                                                    //PNR운임정보
                                                                    for (t = 0; t < ResXml.SelectNodes("m:tstData", xnMgr).Count; t++)
                                                                    {
                                                                        XmlNode TstData = ResXml.SelectNodes("m:tstData", xnMgr)[t];
                                                                        string PaxType = TstData.SelectSingleNode("m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='41']/m:longFreetext", xnMgr).InnerText;

                                                                        for (p = 0; p < TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']", xnMgr).Count; p++)
                                                                        {
                                                                            XmlNode PaxRef = TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']", xnMgr)[p];

                                                                            for (s = 0; s < TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST' and m:number!='0']", xnMgr).Count; s++)
                                                                            {
                                                                                XmlNode ItiRef = TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST' and m:number!='0']", xnMgr)[s];

                                                                                if (ResPricingRU.SelectNodes(String.Format("m:fareList[m:fareComponentDetailsGroup/m:couponDetailsGroup/m:productId/m:referenceDetails[m:type='ST' and m:value='{0}']]", ItiRef.SelectSingleNode("m:number", xnMgr).InnerText), xnMgrPricingRU).Count > 0)
                                                                                {
                                                                                    string TotalFare = TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='T']/m:amount", xnMgr).InnerText;
                                                                                    //string Fare = TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:amount", xnMgr).InnerText;
                                                                                    //int Tax = 0;

                                                                                    //foreach (XmlNode TaxFields in TstData.SelectNodes("m:fareData/m:taxFields[m:taxIndicator='X']", xnMgr))
                                                                                    //{
                                                                                    //    Tax += Convert.ToInt32(TaxFields.SelectSingleNode("m:taxAmount", xnMgr).InnerText);
                                                                                    //}

                                                                                    XmlNode RURricing = null;

                                                                                    if (PaxType.Equals("INF"))
                                                                                    {
                                                                                        RURricing = ResPricingRU.SelectSingleNode(String.Format("m:fareList[m:paxSegReference/m:refDetails[m:refQualifier='PI' and m:refNumber='{0}']][m:fareComponentDetailsGroup/m:couponDetailsGroup/m:productId/m:referenceDetails[m:type='ST' and m:value='{1}']]", PaxRef.SelectSingleNode("m:number", xnMgr).InnerText, ItiRef.SelectSingleNode("m:number", xnMgr).InnerText), xnMgrPricingRU);

                                                                                        //Commission
                                                                                        if (String.IsNullOrWhiteSpace(RuCommINF))
                                                                                        {
                                                                                            if (RURricing.SelectNodes("m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']", xnMgrPricingRU).Count > 0)
                                                                                                RuCommINF = RURricing.SelectSingleNode("m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']/m:attributeDescription", xnMgrPricingRU).InnerText;
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        RURricing = ResPricingRU.SelectSingleNode(String.Format("m:fareList[m:paxSegReference/m:refDetails[m:refQualifier='PA' and m:refNumber='{0}']][m:fareComponentDetailsGroup/m:couponDetailsGroup/m:productId/m:referenceDetails[m:type='ST' and m:value='{1}']]", PaxRef.SelectSingleNode("m:number", xnMgr).InnerText, ItiRef.SelectSingleNode("m:number", xnMgr).InnerText), xnMgrPricingRU);

                                                                                        //Commission
                                                                                        if (PaxType.Equals("CHD"))
                                                                                        {
                                                                                            if (String.IsNullOrWhiteSpace(RuCommCHD))
                                                                                            {
                                                                                                if (RURricing.SelectNodes("m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']", xnMgrPricingRU).Count > 0)
                                                                                                    RuCommCHD = RURricing.SelectSingleNode("m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']/m:attributeDescription", xnMgrPricingRU).InnerText;
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if (String.IsNullOrWhiteSpace(RuCommADT))
                                                                                            {
                                                                                                if (RURricing.SelectNodes("m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']", xnMgrPricingRU).Count > 0)
                                                                                                    RuCommADT = RURricing.SelectSingleNode("m:otherPricingInfo/m:attributeDetails[m:attributeType='COM']/m:attributeDescription", xnMgrPricingRU).InnerText;
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                    //ARNK노드 삭제
                                                                                    if (RURricing.SelectNodes("m:segmentInformation[m:connexInformation/m:connecDetails/m:routingInformation='ARNK']", xnMgrPricingRU).Count > 0)
                                                                                    {
                                                                                        foreach (XmlNode ARNK in RURricing.SelectNodes("m:segmentInformation[m:connexInformation/m:connecDetails/m:routingInformation='ARNK']", xnMgrPricingRU))
                                                                                            RURricing.RemoveChild(ARNK);
                                                                                    }

                                                                                    if (RURricing.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='712']/m:fareAmount", xnMgrPricingRU).InnerText.Equals(TotalFare))
                                                                                    {
                                                                                        //if (RURricing.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareAmount", xnMgrPricingRU).InnerText.Equals(Fare))
                                                                                        //{
                                                                                        //int Tax2 = 0;

                                                                                        //foreach (XmlNode AmountDetails in RURricing.SelectNodes("m:taxInformation/m:amountDetails[m:fareDataMainInformation/m:fareDataQualifier='TAX']", xnMgrPricingRU))
                                                                                        //{
                                                                                        //    Tax2 += Convert.ToInt32(AmountDetails.SelectSingleNode("m:fareDataMainInformation/m:fareAmount", xnMgrPricingRU).InnerText);
                                                                                        //}

                                                                                        //if (Tax2.Equals(Tax))
                                                                                        //{
                                                                                        //FARE BASIS 비교
                                                                                        for (f = 1; f <= TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr).Count; f++)
                                                                                        {
                                                                                            if (!RURricing.SelectSingleNode(String.Format("m:segmentInformation[{0}]/m:fareQualifier/m:fareBasisDetails/m:primaryCode", f), xnMgrPricingRU).InnerXml.Equals(TstData.SelectSingleNode(String.Format("m:fareBasisInfo/m:fareElement[{0}]/m:primaryCode", f), xnMgr).InnerText))
                                                                                            {
                                                                                                SameFare = false;
                                                                                                break;
                                                                                            }

                                                                                            if (RURricing.SelectNodes(String.Format("m:segmentInformation[{0}]/m:fareQualifier/m:fareBasisDetails/m:fareBasisCode", f), xnMgrPricingRU).Count > 0 && TstData.SelectNodes(String.Format("m:fareBasisInfo/m:fareElement[{0}]/m:fareBasis", f), xnMgr).Count > 0)
                                                                                            {
                                                                                                if (!RURricing.SelectSingleNode(String.Format("m:segmentInformation[{0}]/m:fareQualifier/m:fareBasisDetails/m:fareBasisCode", f), xnMgrPricingRU).InnerXml.Equals(TstData.SelectSingleNode(String.Format("m:fareBasisInfo/m:fareElement[{0}]/m:fareBasis", f), xnMgr).InnerText))
                                                                                                {
                                                                                                    SameFare = false;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            else if (!(RURricing.SelectNodes(String.Format("m:segmentInformation[{0}]/m:fareQualifier/m:fareBasisDetails/m:fareBasisCode", f), xnMgrPricingRU).Count.Equals(0) && TstData.SelectNodes(String.Format("m:fareBasisInfo/m:fareElement[{0}]/m:fareBasis", f), xnMgr).Count.Equals(0)))
                                                                                            {
                                                                                                SameFare = false;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        //}
                                                                                        //else
                                                                                        //    SameFare = false;
                                                                                        //}
                                                                                        //else
                                                                                        //    SameFare = false;
                                                                                    }
                                                                                    else
                                                                                        SameFare = false;
                                                                                }
                                                                                else
                                                                                    SameFare = false;
                                                                            }

                                                                            if (s.Equals(0))
                                                                                SameFare = false;
                                                                        }

                                                                        if (p.Equals(0))
                                                                            SameFare = false;
                                                                    }

                                                                    if (t.Equals(0))
                                                                        SameFare = false;

                                                                    //예약운임과 RU운임비교
                                                                    if (SameFare)
                                                                    {
                                                                        //### 07.운임Pricing(Fare_PricePNRWithBookingClass)(RP) #####
                                                                        if (FareTypeRP > 0 && FareTypeRU.Equals(0))
                                                                            ResPricingRP = ResPricing;
                                                                        else
                                                                            ResPricingRP = amd.PricePNRWithBookingClassPricing2RS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-07"), ValidatingCarrier, "RP", false);

                                                                        //오류 결과일 경우 예외 처리
                                                                        xnMgrPricingRP = new XmlNamespaceManager(ResPricingRP.OwnerDocument.NameTable);
                                                                        xnMgrPricingRP.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassPricing"));

                                                                        if (ResPricingRP.SelectNodes("m:applicationError", xnMgrPricingRP).Count > 0)
                                                                        {
                                                                            string FreeText = ResPricingRP.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgrPricingRP).InnerText;

                                                                            //DC발권을 위한 Pricing 로직 적용(2017-10-11)
                                                                            if (FreeText.Equals("NO FARE FOR BOOKING CODE-TRY OTHER PRICING OPTIONS"))
                                                                            {
                                                                                //적용 가능한 전체 운임 List 조회
                                                                                ResPricingRUList = amd.PricePNRWithBookingClassPricing2RS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-08_1"), ValidatingCarrier, "RU", true);

                                                                                //오류 결과일 경우 예외 처리
                                                                                xnMgrPricingRUList = new XmlNamespaceManager(ResPricingRUList.OwnerDocument.NameTable);
                                                                                xnMgrPricingRUList.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassPricing"));

                                                                                if (ResPricingRUList.SelectNodes("m:applicationError", xnMgrPricingRUList).Count > 0)
                                                                                {
                                                                                    throw new Exception(ResPricingRUList.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgrPricingRUList).InnerText);
                                                                                }

                                                                                foreach (XmlNode FareList in ResPricingRUList.SelectNodes("m:fareList", xnMgrPricingRUList))
                                                                                {
                                                                                    if (FareList.SelectNodes("m:fareIndicators", xnMgrPricingRUList).Count > 0 && FareList.SelectSingleNode("m:fareIndicators/m:fareDetails/m:fareCategory", xnMgrPricingRUList).InnerText.Equals("NTF"))
                                                                                        ResPricingRUList.RemoveChild(FareList);
                                                                                    else
                                                                                    {
                                                                                        string PaxNumber = FareList.SelectSingleNode("m:paxSegReference/m:refDetails[m:refQualifier='PA' or m:refQualifier='PI']/m:refNumber", xnMgrPricingRUList).InnerText;
                                                                                        string CurrencyCode = FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareCurrency", xnMgrPricingRUList).InnerText;
                                                                                        string F = FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareAmount", xnMgrPricingRUList).InnerText;
                                                                                        string T = FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='712']/m:fareAmount", xnMgrPricingRUList).InnerText;

                                                                                        if (ResXml.SelectNodes(String.Format("m:tstData[m:referenceForTstData/m:reference[m:qualifier='PT' and m:number='{0}']][m:fareData/m:monetaryInfo[m:qualifier='F' and m:currencyCode='{1}' and m:amount={2}]][m:fareData/m:monetaryInfo[m:qualifier='T' and m:currencyCode='{1}' and m:amount={3}]]", PaxNumber, CurrencyCode, F, T), xnMgr).Count > 0)
                                                                                        {
                                                                                            FareList.SelectSingleNode("m:pricingInformation/m:tstInformation/m:tstIndicator", xnMgrPricingRUList).InnerText = "I";
                                                                                            FareList.SelectSingleNode("m:pricingInformation/m:fcmi", xnMgrPricingRUList).InnerText = "0";
                                                                                        }
                                                                                        else
                                                                                            ResPricingRUList.RemoveChild(FareList);
                                                                                    }
                                                                                }

                                                                                if (ResPricingRUList.SelectNodes("m:fareList", xnMgrPricingRUList).Count.Equals(0))
                                                                                    throw new Exception("NTF가 아닌 운임이 없습니다.");

                                                                                //PNR운임정보
                                                                                //for (t = 0; t < ResXml.SelectNodes("m:tstData", xnMgr).Count; t++)
                                                                                //{
                                                                                //    XmlNode TstData = ResXml.SelectNodes("m:tstData", xnMgr)[t];
                                                                                //    string PaxType = TstData.SelectSingleNode("m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='41']/m:longFreetext", xnMgr).InnerText;

                                                                                ResPricingRP = ResPricingRUList;
                                                                                xnMgrPricingRP = xnMgrPricingRUList;
                                                                                RUList = true;

                                                                                //임시저장
                                                                                cm.XmlFileSave(ResPricingRP, mc.Name, "ResPricingRP", "N", String.Concat(GUID, "-08"));
                                                                            }
                                                                            else
                                                                                throw new Exception(FreeText);
                                                                        }

                                                                        if (ResPricingRP.SelectSingleNode("m:fareList/m:pricingInformation/m:tstInformation/m:tstIndicator", xnMgrPricingRP).InnerText.Equals("I") && ResPricingRP.SelectSingleNode("m:fareList/m:pricingInformation/m:fcmi", xnMgrPricingRP).InnerText.Equals("0"))
                                                                        {
                                                                            if (ResXml.SelectNodes("m:tstData", xnMgr).Count.Equals(ResPricingRP.SelectNodes("m:fareList", xnMgrPricingRP).Count))
                                                                            {
                                                                                SameFare = true;
                                                                                t = 0;
                                                                                p = 0;
                                                                                s = 0;

                                                                                //PNR운임정보
                                                                                for (t = 0; t < ResXml.SelectNodes("m:tstData", xnMgr).Count; t++)
                                                                                {
                                                                                    XmlNode TstData = ResXml.SelectNodes("m:tstData", xnMgr)[t];
                                                                                    string PaxType = TstData.SelectSingleNode("m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='41']/m:longFreetext", xnMgr).InnerText;

                                                                                    for (p = 0; p < TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']", xnMgr).Count; p++)
                                                                                    {
                                                                                        XmlNode PaxRef = TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']", xnMgr)[p];

                                                                                        for (s = 0; s < TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST']", xnMgr).Count; s++)
                                                                                        {
                                                                                            XmlNode ItiRef = TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST']", xnMgr)[s];

                                                                                            if (ResPricingRP.SelectNodes(String.Format("m:fareList[m:fareComponentDetailsGroup/m:couponDetailsGroup/m:productId/m:referenceDetails[m:type='ST' and m:value='{0}']]", ItiRef.SelectSingleNode("m:number", xnMgr).InnerText), xnMgrPricingRP).Count > 0)
                                                                                            {
                                                                                                string TotalFare = TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='T']/m:amount", xnMgr).InnerText;
                                                                                                //string Fare = TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:amount", xnMgr).InnerText;
                                                                                                //int Tax = 0;

                                                                                                //foreach (XmlNode TaxFields in TstData.SelectNodes("m:fareData/m:taxFields[m:taxIndicator='X']", xnMgr))
                                                                                                //{
                                                                                                //    Tax += Convert.ToInt32(TaxFields.SelectSingleNode("m:taxAmount", xnMgr).InnerText);
                                                                                                //}

                                                                                                XmlNode RPRricing = null;

                                                                                                if (PaxType.Equals("INF"))
                                                                                                    RPRricing = ResPricingRP.SelectSingleNode(String.Format("m:fareList[m:paxSegReference/m:refDetails[m:refQualifier='PI' and m:refNumber='{0}']][m:fareComponentDetailsGroup/m:couponDetailsGroup/m:productId/m:referenceDetails[m:type='ST' and m:value='{1}']]", PaxRef.SelectSingleNode("m:number", xnMgr).InnerText, ItiRef.SelectSingleNode("m:number", xnMgr).InnerText), xnMgrPricingRP);
                                                                                                else
                                                                                                    RPRricing = ResPricingRP.SelectSingleNode(String.Format("m:fareList[m:paxSegReference/m:refDetails[m:refQualifier='PA' and m:refNumber='{0}']][m:fareComponentDetailsGroup/m:couponDetailsGroup/m:productId/m:referenceDetails[m:type='ST' and m:value='{1}']]", PaxRef.SelectSingleNode("m:number", xnMgr).InnerText, ItiRef.SelectSingleNode("m:number", xnMgr).InnerText), xnMgrPricingRP);

                                                                                                //ARNK노드 삭제
                                                                                                if (RPRricing.SelectNodes("m:segmentInformation[m:connexInformation/m:connecDetails/m:routingInformation='ARNK']", xnMgrPricingRP).Count > 0)
                                                                                                {
                                                                                                    foreach (XmlNode ARNK in RPRricing.SelectNodes("m:segmentInformation[m:connexInformation/m:connecDetails/m:routingInformation='ARNK']", xnMgrPricingRP))
                                                                                                        RPRricing.RemoveChild(ARNK);
                                                                                                }

                                                                                                if (RPRricing.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='712']/m:fareAmount", xnMgrPricingRP).InnerText.Equals(TotalFare))
                                                                                                {
                                                                                                    if (RUList)
                                                                                                    {
                                                                                                        //클래스 비교
                                                                                                        for (f = 1; f <= TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr).Count; f++)
                                                                                                        {
                                                                                                            if (!RPRricing.SelectSingleNode(String.Format("m:segmentInformation[{0}]/m:fareQualifier/m:fareBasisDetails/m:primaryCode", f), xnMgrPricingRP).InnerXml.Substring(0, 1).Equals(TstData.SelectSingleNode(String.Format("m:fareBasisInfo/m:fareElement[{0}]/m:primaryCode", f), xnMgr).InnerText.Substring(0, 1)))
                                                                                                            {
                                                                                                                SameFare = false;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        //FARE BASIS 비교
                                                                                                        for (f = 1; f <= TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr).Count; f++)
                                                                                                        {
                                                                                                            if (!RPRricing.SelectSingleNode(String.Format("m:segmentInformation[{0}]/m:fareQualifier/m:fareBasisDetails/m:primaryCode", f), xnMgrPricingRP).InnerXml.Equals(TstData.SelectSingleNode(String.Format("m:fareBasisInfo/m:fareElement[{0}]/m:primaryCode", f), xnMgr).InnerText))
                                                                                                            {
                                                                                                                SameFare = false;
                                                                                                                break;
                                                                                                            }

                                                                                                            if (RPRricing.SelectNodes(String.Format("m:segmentInformation[{0}]/m:fareQualifier/m:fareBasisDetails/m:fareBasisCode", f), xnMgrPricingRP).Count > 0 && TstData.SelectNodes(String.Format("m:fareBasisInfo/m:fareElement[{0}]/m:fareBasis", f), xnMgr).Count > 0)
                                                                                                            {
                                                                                                                if (!RPRricing.SelectSingleNode(String.Format("m:segmentInformation[{0}]/m:fareQualifier/m:fareBasisDetails/m:fareBasisCode", f), xnMgrPricingRP).InnerXml.Equals(TstData.SelectSingleNode(String.Format("m:fareBasisInfo/m:fareElement[{0}]/m:fareBasis", f), xnMgr).InnerText))
                                                                                                                {
                                                                                                                    SameFare = false;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            else if (!(RPRricing.SelectNodes(String.Format("m:segmentInformation[{0}]/m:fareQualifier/m:fareBasisDetails/m:fareBasisCode", f), xnMgrPricingRP).Count.Equals(0) && TstData.SelectNodes(String.Format("m:fareBasisInfo/m:fareElement[{0}]/m:fareBasis", f), xnMgr).Count.Equals(0)))
                                                                                                            {
                                                                                                                SameFare = false;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                    SameFare = false;
                                                                                            }
                                                                                            else
                                                                                                SameFare = false;
                                                                                        }

                                                                                        if (s.Equals(0))
                                                                                            SameFare = false;
                                                                                    }

                                                                                    if (p.Equals(0))
                                                                                        SameFare = false;
                                                                                }

                                                                                if (t.Equals(0))
                                                                                    SameFare = false;

                                                                                //예약운임과 RP운임비교
                                                                                if (SameFare)
                                                                                {
                                                                                    //해외출발인 경우 NO-COMM으로 발권(2019-04-16,김지영팀장)
                                                                                    if (!StartKorea)
                                                                                    {
                                                                                        RuCommADT = "*F*0.00N";
                                                                                        RuCommCHD = "*F*0.00N";
                                                                                        RuCommINF = "*F*0.00N";
                                                                                    }

                                                                                    //### 08.등록되어 있는 커미션 삭제(Command_Cryptic) #####
                                                                                    if (MCommission[0].Equals("F"))
                                                                                    {
                                                                                        if (!String.IsNullOrWhiteSpace(RuCommADT) || !String.IsNullOrWhiteSpace(RuCommCHD) || !String.IsNullOrWhiteSpace(RuCommINF))
                                                                                        {
                                                                                            if (ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FM']", xnMgr).Count > 0)
                                                                                            {
                                                                                                XmlNodeList FMNodeList = ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FM']", xnMgr);
                                                                                                int w = 1;
                                                                                                bool XETrue08 = false;
                                                                                                for (int i = FMNodeList.Count; i > 0; i--)
                                                                                                {
                                                                                                    amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-08_2_XE", w++), String.Concat("XE", FMNodeList[(i - 1)].SelectSingleNode("m:elementManagementData/m:lineNumber", xnMgr).InnerText));
                                                                                                    XETrue08 = true;
                                                                                                }

                                                                                                if (XETrue08)
                                                                                                {
                                                                                                    //### 08.ReceiveFrom(PNR_AddMultiElements) #####
                                                                                                    amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-08_3"), String.Concat("P-", "WEBSERVICE"));

                                                                                                    //### 08.PNR조회(PNR_Retrieve) #####
                                                                                                    ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-08_4"), PNR);
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                    if (TSTPax)
                                                                                    {
                                                                                        //### 09.TST삭제(Command_Cryptic) #####
                                                                                        amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-09_TTE"), "TTE/ALL");

                                                                                        //### 10.TST저장(Ticket_CreateTSTFromPricing) #####
                                                                                        string TSTNumbers = "";
                                                                                        string PAXNumbers = "";
                                                                                        foreach (XmlNode FareList in ResPricingRP.SelectNodes("m:fareList", xnMgrPricingRP))
                                                                                        {
                                                                                            string PaxLegNumbers = "";
                                                                                            foreach (XmlNode PaxList in FareList.SelectNodes("m:paxSegReference/m:refDetails[m:refQualifier='PA' or m:refQualifier='PI']", xnMgrPricingRP))
                                                                                            {
                                                                                                PaxLegNumbers += String.Concat(PaxList.SelectSingleNode("m:refNumber", xnMgrPricingRP).InnerText, "/");
                                                                                            }

                                                                                            TSTNumbers += String.Concat(FareList.SelectSingleNode("m:fareReference[m:referenceType='TST']/m:uniqueReference", xnMgrPricingRP).InnerText, ",");
                                                                                            PAXNumbers += String.Concat(PaxLegNumbers, ",");
                                                                                        }

                                                                                        amd.CreateTSTFromPricingPAXRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-10_1"), TSTNumbers, PAXNumbers);

                                                                                        //### 10.ReceiveFrom(PNR_AddMultiElements) #####
                                                                                        amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-10_2"), String.Concat("P-", "WEBSERVICE"));

                                                                                        //### 10.PNR조회(PNR_Retrieve) #####
                                                                                        ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-10_3"), PNR);

                                                                                        //### 11.커미션(RU) 등록
                                                                                        if (MCommission[0].Equals("F"))
                                                                                        {
                                                                                            int y = 1;
                                                                                            foreach (XmlNode FareList in ResPricingRP.SelectNodes("m:fareList", xnMgrPricingRP))
                                                                                            {
                                                                                                if (FareList.SelectNodes("m:segmentInformation/m:fareQualifier/m:fareBasisDetails/m:discTktDesignator", xnMgrPricingRP).Count > 0)
                                                                                                {
                                                                                                    if (FareList.SelectSingleNode("m:segmentInformation/m:fareQualifier/m:fareBasisDetails/m:discTktDesignator", xnMgrPricingRP).InnerText.Equals("CH"))
                                                                                                    {
                                                                                                        if (!String.IsNullOrWhiteSpace(RuCommCHD))
                                                                                                            amd.AddMultiElementsCommissionRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-11_CHD_", y), RuCommCHD);
                                                                                                    }
                                                                                                    else if (FareList.SelectSingleNode("m:segmentInformation/m:fareQualifier/m:fareBasisDetails/m:discTktDesignator", xnMgrPricingRP).InnerText.Equals("IN"))
                                                                                                    {
                                                                                                        if (!String.IsNullOrWhiteSpace(RuCommINF))
                                                                                                            amd.AddMultiElementsCommissionRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-11_INF_", y), RuCommINF);
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if (!String.IsNullOrWhiteSpace(RuCommADT))
                                                                                                            amd.AddMultiElementsCommissionRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-11_ADT_", y), RuCommADT);
                                                                                                    }
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if (!String.IsNullOrWhiteSpace(RuCommADT))
                                                                                                        amd.AddMultiElementsCommissionRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-11_ADT_", y), RuCommADT);
                                                                                                }

                                                                                                y++;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        //### 09.TST삭제(Command_Cryptic) #####
                                                                                        amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-09_TTE"), "TTE/ALL");

                                                                                        //### 10.TST저장(Ticket_CreateTSTFromPricing) #####
                                                                                        amd.CreateTSTFromPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-10_1"), ResPricingRP, "Fare_PricePNRWithBookingClassPricing");

                                                                                        //### 10.ReceiveFrom(PNR_AddMultiElements) #####
                                                                                        amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-10_2"), String.Concat("P-", "WEBSERVICE"));

                                                                                        //### 10.PNR조회(PNR_Retrieve) #####
                                                                                        ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-10_3"), PNR);

                                                                                        //### 11.커미션(RU) 등록
                                                                                        if (MCommission[0].Equals("F") && !String.IsNullOrWhiteSpace(RuCommADT))
                                                                                        {
                                                                                            amd.AddMultiElementsCommissionRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-11"), RuCommADT);
                                                                                        }
                                                                                    }

                                                                                    //### 12.ReceiveFrom(PNR_AddMultiElements) #####
                                                                                    amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-12"), String.Concat("P-", "WEBSERVICE"));

                                                                                    //### 13.PNR조회(PNR_Retrieve) #####
                                                                                    ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-13"), PNR);

                                                                                    PNRModify = false;
                                                                                }
                                                                                else
                                                                                {
                                                                                    throw new Exception("예약 운임과 RP운임의 금액이 일치하지 않아 자동 발권이 불가능합니다. - 001");
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                throw new Exception("예약 운임과 RP운임 결과가 일치하지 않아 자동 발권이 불가능합니다. - 002");
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            throw new Exception("RP운임은 TST Indicator = I, FCMI = O 인 경우에만 자동 발권이 가능합니다. - 003");
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        throw new Exception("예약 운임과 RU운임의 금액이 일치하지 않아 자동 발권이 불가능합니다. - 004");
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    throw new Exception("예약 운임과 RU운임 결과가 일치하지 않아 자동 발권이 불가능합니다. - 005");
                                                                }
                                                            }
                                                            else
                                                            {
                                                                throw new Exception("RP운임은 TST Indicator = F, FCMI = N 인 경우에만 자동 발권이 가능합니다. - 006");
                                                            }
                                                        }
                                                        else
                                                        {
                                                            throw new Exception("해당 항공사 및 여정은 자동 발권이 불가능합니다. - 007");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        //해외OTA는 NTF가 아닌 운임일 경우 OID를 변경하기 위해서 TST 실행(2019-06-14,김지영팀장)
                                                        if (ForeignOTA)
                                                        {
                                                            //### 05.TST삭제(Command_Cryptic) #####
                                                            amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05_TTE"), "TTE/ALL");

                                                            //### 06.TST저장(Ticket_CreateTSTFromPricing) #####
                                                            amd.CreateTSTFromPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06_1"), ResPricing, "Fare_PricePNRWithBookingClassPricing");

                                                            //### 06.ReceiveFrom(PNR_AddMultiElements) #####
                                                            amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06_2"), String.Concat("P-", "WEBSERVICE"));

                                                            //### 06.PNR조회(PNR_Retrieve) #####
                                                            ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06_3"), PNR);

                                                            //해외출발인 경우 NO-COMM으로 발권(2019-07-24,김지영팀장)
                                                            if (!StartKorea && ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FM']", xnMgr).Count.Equals(0))
                                                            {
                                                                //### 07.커미션 등록(PNR_AddMultiElements) #####
                                                                if (ResXml.SelectNodes("m:travellerInfo[m:passengerData/m:travellerInformation/m:passenger[not(m:type) or (m:type!='CHD' and m:type!='INF')]]", xnMgr).Count > 0)
                                                                    amd.AddMultiElementsCommissionRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-07_1_ADT"), "*F*0.00N");

                                                                if (ResXml.SelectNodes("m:travellerInfo[m:passengerData/m:travellerInformation/m:passenger/m:type='CHD']", xnMgr).Count > 0)
                                                                    amd.AddMultiElementsCommissionRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-07_1_CHD"), "*F*0.00N");

                                                                if (ResXml.SelectNodes("m:travellerInfo[m:passengerData/m:travellerInformation/m:passenger/m:type='INF']", xnMgr).Count > 0)
                                                                    amd.AddMultiElementsCommissionRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-07_1_INF"), "*F*0.00N");

                                                                //### 07.ReceiveFrom(PNR_AddMultiElements) #####
                                                                amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-07_2"), String.Concat("P-", "WEBSERVICE"));

                                                                //### 07.PNR조회(PNR_Retrieve) #####
                                                                ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-07_3"), PNR);
                                                            }

                                                            PNRModify = false;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    throw new Exception("MSP 운임인 경우에만 자동 발권이 가능합니다. - 009");
                                                }
                                            }

                                            #endregion "대한항공 외 모든 항공사"
                                        }
                                        else
                                        {
                                            throw new Exception("해외 출발인 경우 NX/SU/AI/NZ 항공은 자동 발권이 불가능합니다. - 010");
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("첫번째 승객이 성인일 경우에만 자동 발권이 가능합니다. - 012");
                                    }
                                }
                                else
                                {
                                    throw new Exception("증빙 서류가 필요한 경우 자동 발권이 불가능합니다. - 013");
                                }
                            }
                            else
                            {
                                throw new Exception("여정이 OJT인 경우는 자동 발권이 불가합니다. - 014");
                            }

                            if (MCommission[0].Equals("S"))
                            {
                                //### 18.커미션(MODE) 삭제 #####
                                XmlNodeList DataElementsIndiv = ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FM' and starts-with(m:otherDataFreetext/m:longFreetext, 'PAX')]", xnMgr);
                                int y = 1;
                                bool XETrue14 = false;

                                for (int i = DataElementsIndiv.Count; i > 0; i--)
                                {
                                    amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-18_1_XE", y++), String.Concat("XE", DataElementsIndiv[(i - 1)].SelectSingleNode("m:elementManagementData/m:lineNumber", xnMgr).InnerText));
                                    XETrue14 = true;
                                }

                                if (XETrue14)
                                {
                                    //### 14.ReceiveFrom(PNR_AddMultiElements) #####
                                    amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-18_2"), String.Concat("P-", "WEBSERVICE"));

                                    //### 14.PNR조회(PNR_Retrieve) #####
                                    ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-18_3"), PNR);
                                }

                                //### 19.커미션(MODE) 등록 #####
                                //DC가 존재할 경우에는 'N', 없는 경우에는 'G' 로 처리해야 함(2016-05-09,김지영과장)
                                amd.AddMultiElementsCommissionModeRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-19"), String.Concat(MCommission[1], (DC ? "N" : "G")));

                                //### 20.투어코드(MODE) 등록 #####
                                if (!String.IsNullOrWhiteSpace(MCommission[3]))
                                {
                                    //투어코드 삭제
                                    XmlNodeList ElementManagementData = ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv/m:elementManagementData[m:segmentName='FT']", xnMgr);
                                    int z = 1;
                                    for (int i = ElementManagementData.Count; i > 0; i--)
                                    {
                                        amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-20_XE_1", z++), String.Concat("XE", ElementManagementData[(i - 1)].SelectSingleNode("m:lineNumber", xnMgr).InnerText));
                                    }

                                    //투어코드 등록(성인,소아)
                                    amd.AddMultiElementsTourCodeRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-20_PAX_2"), "PAX", MCommission[3], 11);

                                    //투어코드 등록(유아)
                                    if (TSTInfant)
                                        amd.AddMultiElementsTourCodeRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-20_INF_3"), "INF", MCommission[3], 0);
                                }

                                //운임조회 및 TST 재실행 중단(2019-04-16,김경미매니저)
                                //if (NTF)
                                //{
                                //    //운임조회 및 TST 재실행
                                //    //### 18.운임Pricing(Fare_PricePNRWithBookingClass) #####
                                //    ResPricing = (PNRModify) ? amd.PricePNRWithBookingClassPricing2RS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-18"), ValidatingCarrier, "RP", false) : amd.PricePNRWithBookingClassPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-18"), ValidatingCarrier, "", (FareXml != null) ? FareXml.SelectSingleNode("priceIndex/paxFareGroup") : null);

                                //    //오류 결과일 경우 예외 처리
                                //    xnMgrPricing = new XmlNamespaceManager(ResPricing.OwnerDocument.NameTable);
                                //    xnMgrPricing.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassPricing"));

                                //    if (ResPricing.SelectNodes("m:applicationError", xnMgrPricing).Count > 0)
                                //    {
                                //        throw new Exception(ResPricing.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgrPricing).InnerText);
                                //    }

                                //    if (TSTPax)
                                //    {
                                //        //### 19.TST삭제(Command_Cryptic) #####
                                //        amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-19"), "TTE/ALL");

                                //        //### 20.TST저장(Ticket_CreateTSTFromPricing) #####
                                //        int x = 1;
                                //        foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList", xnMgrPricing))
                                //        {
                                //            amd.CreateTSTFromPricingPAXRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-20", x), FareList.SelectSingleNode("m:fareReference[m:referenceType='TST']/m:uniqueReference", xnMgrPricing).InnerText, FareList.SelectSingleNode("m:paxSegReference/m:refDetails[m:refQualifier='PA' or m:refQualifier='PI']/m:refNumber", xnMgrPricing).InnerText);
                                //            x++;
                                //        }
                                //    }
                                //    else
                                //    {
                                //        //### 21.TST저장(Ticket_CreateTSTFromPricing) #####
                                //        amd.CreateTSTFromPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-21"), ResPricing, "Fare_PricePNRWithBookingClassPricing");
                                //    }
                                //}

                                PNRModify = true;
                            }
                        }
                        else
                        {
                            throw new Exception("여정 정보가 존재하지 않습니다.");
                        }

                        if (PNRModify)
                        {
                            //### 22.ReceiveFrom(PNR_AddMultiElements) #####
                            amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-22"), String.Concat("P-", "WEBSERVICE"));

                            //### 23.PNR조회(PNR_Retrieve) #####
                            ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-23"), PNR);
                        }

                        //### 24.세션종료 #####
                        SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-24"));

                        //통합용
                        XmlElement ModeXml = ToModeSearchETicketAmadeus(XmlDBBooking, ResXml);

                        //저장
                        cm.XmlFileSave(ModeXml, mc.Name, "SearchETicketing", "N", String.Concat(GUID, "-25"));

                        if (!UnderPricing)
                        {
                            //추가정보
                            double PricingFare = 0;
                            double PricingDisFare = 0;

                            foreach (XmlNode Fare in ModeXml.SelectNodes("fareInfo/fare"))
                            {
                                if (ResPricing.SelectNodes(String.Format("m:fareList[m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='712']/m:fareAmount='{0}']", Fare.Attributes.GetNamedItem("amount").InnerText), xnMgrPricing).Count > 0)
                                {
                                    //운임계산모드
                                    XmlNode SelFareNode = ResPricing.SelectSingleNode(String.Format("m:fareList[m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='712']/m:fareAmount='{0}']", Fare.Attributes.GetNamedItem("amount").InnerText), xnMgrPricing);
                                    Fare.Attributes.GetNamedItem("calMode").InnerText = String.Format("{0} {1}", SelFareNode.SelectSingleNode("m:pricingInformation/m:tstInformation/m:tstIndicator", xnMgrPricing).InnerText, SelFareNode.SelectSingleNode("m:pricingInformation/m:fcmi", xnMgrPricing).InnerText);

                                    //공시운임 기준 할인금액(발권시 중복 DC를 방지하기 위해 차감한다)
                                    if (SelFareNode.SelectNodes("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='MKF']", xnMgrPricing).Count > 0)
                                        Fare.Attributes.GetNamedItem("primeFare").InnerText = Convert.ToString(cm.RequestDouble(Fare.Attributes.GetNamedItem("primeFare").InnerText) - cm.RequestDouble(SelFareNode.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='MKF']/m:fareAmount", xnMgrPricing).InnerText));
                                }

                                //primeFare와 fare가 상이할 경우 오류 처리(DC처리 방지)(2017-05-22,김지영차장)
                                if (Fare.Attributes.GetNamedItem("primeFare").InnerText != Fare.Attributes.GetNamedItem("fare").InnerText)
                                {
                                    throw new Exception("Prime fare와 항공운임이 상이하여 자동발권이 불가합니다.");
                                }

                                PricingFare += ((cm.RequestDouble(Fare.Attributes.GetNamedItem("fare").InnerText) + cm.RequestDouble(Fare.Attributes.GetNamedItem("tax").InnerText) + cm.RequestDouble(Fare.Attributes.GetNamedItem("fsc").InnerText)) * Fare.SelectNodes("traveler/ref").Count);
                                PricingDisFare += ((cm.RequestDouble(Fare.Attributes.GetNamedItem("disFare").InnerText) + cm.RequestDouble(Fare.Attributes.GetNamedItem("tax").InnerText) + cm.RequestDouble(Fare.Attributes.GetNamedItem("fsc").InnerText) + cm.RequestDouble(Fare.Attributes.GetNamedItem("disPartner").InnerText)) * Fare.SelectNodes("traveler/ref").Count);
                            }

                            //저장
                            cm.XmlFileSave(ModeXml, mc.Name, "SearchETicketing", "N", String.Concat(GUID, "-26"));

                            //발권용 프라이싱 금액과 예약금액 최종 비교
                            if (FirstFare > 0 && Math.Abs(FirstFare - PricingFare) >= 3000)
                                throw new Exception("최초 예약시 운임과 발권용 운임 재계산 후의 운임이 상이합니다.");

                            //발권용 프라이싱 금액과 예약금액 최종 비교(프로모션 적용 금액 비교)
                            if (CheckFirstDisFare && (FirstDisFare > 0 && Math.Abs(FirstDisFare - PricingDisFare) >= 3000))
                                throw new Exception("최초 예약시 프로모션 적용 운임과 발권용 운임 재계산 후의 프로모션 적용 운임이 상이합니다.");
                        }

                        return ModeXml;
                    }
                    catch (Exception ex)
                    {
                        //### 세션종료 #####
                        if (SQN > 0)
                            amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                        throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, 0);
                    }
                }

                #endregion "아마데우스"

                #region "갈릴레오"

                else if (String.Compare(GDS, "Galileo", true).Equals(0))
                {
                    try
                    {
                        //### 01.PNR조회 #####
                        XmlElement ResXml = gas.PnrInfoDisplayRS("0", PNR, "G", String.Concat(GUID, "-01"));

                        //오류시
                        if (!ResXml.SelectSingleNode("ResultErrorNo").InnerText.Equals("0"))
                            throw new Exception(ResXml.SelectSingleNode("ResultMsg").InnerText);

                        //예약상태코드(전 여정 'HK'만 가능)
                        if (ResXml.SelectNodes("AirSegDetail[Status!='HK']").Count.Equals(0))
                        {
                            //증빙서류 체크
                            if (String.IsNullOrWhiteSpace(SearchProof(OID, PID)))
                            {
                                //첫번째 승객 성인 여부 체크
                                if (ResXml.SelectSingleNode("PaxFareInfo[1]/PaxType").InnerText.Equals("ADT"))
                                {
                                    //유아 포함 여부
                                    if (ResXml.SelectNodes("PaxFareInfo[PaxType='INF']").Count.Equals(0))
                                    {
                                        //한국출발만 가능
                                        if (Common.KoreaOfAirport(ResXml.SelectSingleNode("AirSegDetail[1]/StartAirp").InnerText))
                                        {
                                            //예약정보
                                            XmlDocument XmlGalileoBook = new XmlDocument();
                                            XmlGalileoBook.LoadXml(XmlDBBooking.SelectSingleNode("item3/예약XML").InnerText);

                                            string GoodCode = (FareXml.SelectNodes("priceIndex/fareMessage/fareKey").Count > 0) ? FareXml.SelectSingleNode("priceIndex/fareMessage/fareKey").InnerText.Replace("*", "/") : "";
                                            string FareLocation = XmlDBBooking.SelectSingleNode("item3/운임종류").InnerText;
                                            string GKPNR = XmlDBBooking.SelectSingleNode("item3/GKPNR").InnerText;
                                            string Tel = XmlDBBooking.SelectSingleNode("item1/휴대폰").InnerText;
                                            int PaxCnt = XmlDBBooking.SelectNodes("item4").Count;
                                            string PaxAmountInfo = string.Empty;

                                            foreach (XmlNode PaxInfo in ResXml.SelectNodes("PaxFareInfo[PaxType!='INF']"))
                                            {
                                                string PaxLastName = PaxInfo.SelectSingleNode("PaxLastName").InnerText;
                                                string PaxFirstName = PaxInfo.SelectSingleNode("PaxFirstName").InnerText;
                                                string PaxTitle = PaxInfo.SelectSingleNode("PaxTitle").InnerText;

                                                XmlNode ItemNode = XmlDBBooking.SelectSingleNode(String.Format("item4[영문성='{0}' and 영문이름='{1}']", PaxLastName, PaxFirstName));
                                                XmlNode FareNode = FareXml.SelectSingleNode(String.Format("priceIndex/paxFareGroup/paxFare[@ptc='{0}']", ItemNode.SelectSingleNode("구분").InnerText));
                                                XmlNode PaxFareInfo = XmlGalileoBook.SelectSingleNode(String.Format("*/PaxFareInfo[PaxLastName='{0}' and PaxFirstName='{1}']", PaxLastName, PaxFirstName));

                                                string TaxInfo = string.Empty;

                                                foreach (XmlNode TaxDetails in PaxFareInfo.SelectNodes("TaxDetails"))
                                                {
                                                    if (!String.IsNullOrWhiteSpace(TaxInfo))
                                                        TaxInfo += "/";

                                                    TaxInfo += String.Concat(TaxDetails.SelectSingleNode("TaxAmt").InnerText, TaxDetails.SelectSingleNode("TaxCode").InnerText);
                                                }

                                                if (!String.IsNullOrWhiteSpace(PaxAmountInfo))
                                                    PaxAmountInfo += ",";

                                                PaxAmountInfo += String.Format("{0}^{1}^{2}^{3}^{4}^{5}^{6}^{7}^{8}^{9}^{10}^{11}^{12}^{13}^{14}^{15}^{16}^{17}^{18}^{19}^{20}^{21}^{22}^{23}^{24}^{25}^{26}^{27}^{28}^{29}",
                                                                    ItemNode.SelectSingleNode("판매명세번호").InnerText,
                                                                    PaxInfo.SelectSingleNode("AbsNameNum").InnerText,
                                                                    ItemNode.SelectSingleNode("영문성명").InnerText,
                                                                    ItemNode.SelectSingleNode("구분").InnerText,
                                                                    FareNode.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText,
                                                                    ItemNode.SelectSingleNode("항공료").InnerText,
                                                                    ItemNode.SelectSingleNode("TAX").InnerText,
                                                                    ItemNode.SelectSingleNode("유류할증료").InnerText,
                                                                    "0",
                                                                    "0",
                                                                    "0",
                                                                    "0",
                                                                    ItemNode.SelectSingleNode("생년월일").InnerText,
                                                                    ItemNode.SelectSingleNode("여권번호").InnerText,
                                                                    ItemNode.SelectSingleNode("여권발행국코드").InnerText,
                                                                    ItemNode.SelectSingleNode("여권국적코드").InnerText,
                                                                    "",
                                                                    Tel,
                                                                    "",
                                                                    "",
                                                                    "",
                                                                    "",
                                                                    "",
                                                                    "",
                                                                    "",
                                                                    "",
                                                                    "",
                                                                    TaxInfo,
                                                                    PaxInfo.SelectSingleNode("PaxTitle").InnerText,
                                                                    FareLocation);
                                            }

                                            //### 02.발권운임 조회 #####
                                            XmlElement FqmXml = gas.TicketIssuingRS(OID.ToString(), PNR, GoodCode, PID.ToString(), PaxCnt, PaxAmountInfo, "Y", "FQ", "G", GKPNR, (!String.IsNullOrWhiteSpace(GKPNR) ? "B" : "G"), String.Concat(GUID, "-02_FQ"));

                                            if (!FqmXml.SelectSingleNode("ResultErrorNo").InnerText.Equals("0"))
                                                throw new Exception(FqmXml.SelectSingleNode("ResultMsg").InnerText);
                                            else
                                            {
                                                XmlNodeList PaxFareInfos = XmlGalileoBook.SelectNodes("ReservationProcess/PaxFareInfo");
                                                XmlNodeList PaxTaxTotals = FqmXml.SelectNodes("PaxDetails/Pax_TaxTotal");

                                                if (PaxFareInfos.Count.Equals(PaxTaxTotals.Count))
                                                {
                                                    for (int i = 0; i < PaxFareInfos.Count; i++)
                                                    {
                                                        XmlNode PaxFare = FareXml.SelectSingleNode(String.Format("priceIndex/paxFareGroup/paxFare[@ptc='{0}']", PaxFareInfos[i].SelectSingleNode("PaxType").InnerText));

                                                        //예약시 운임과 현재 항공 운임 비교
                                                        if (PaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText != PaxTaxTotals[i].SelectSingleNode("SaleAmount").InnerText)
                                                            throw new Exception("예약시 운임과 현재 PNR상의 운임이 상이합니다.");
                                                    }

                                                    return ToModeSearchETicketGalileo(XmlDBBooking, ResXml, FqmXml);
                                                }
                                                else
                                                    throw new Exception("예약시 탑승객 정보와 현재 PNR상의 탑승객 정보가 상이합니다.");
                                            }
                                        }
                                        else
                                        {
                                            throw new Exception("한국 출발인 경우에만 자동 발권이 가능합니다. - 010");
                                        }
                                    }
                                    else
                                    {
                                        throw new Exception("유아가 포함된 경우에는 자동 발권이 불가능합니다. - 011");
                                    }
                                }
                                else
                                {
                                    throw new Exception("첫번째 승객이 성인일 경우에만 자동 발권이 가능합니다. - 012");
                                }
                            }
                            else
                            {
                                throw new Exception("증빙 서류가 필요한 경우 자동 발권이 불가능합니다. - 013");
                            }
                        }
                        else
                        {
                            throw new Exception("모든 여정의 예약 상태코드가 'HK'인 경우에만 자동 발권이 가능합니다.");
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, 0);
                    }
                }

                #endregion "갈릴레오"

                else
                    throw new Exception("자동 발권이 지원되지 않는 GDS입니다.");
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }
        }

        #endregion "자동발권용 Pricing"
        
        #region "자동발권(Command)"

        //[WebMethod(Description = "자동발권(Command)")]
        public string AAAA_TicketIssuingSemiAutoRSTEST()
        {
            XmlDocument XmlFP = new XmlDocument();
            XmlFP.Load(mc.XmlFullPath("_TicketIssuingSemiAutoAmadeusRS"));

            XmlElement XmlTicketIssuing = XmlFP.DocumentElement;
            int PaxCount = (XmlTicketIssuing.SelectNodes("travellerInfo").Count > 0) ? XmlTicketIssuing.SelectNodes("travellerInfo/traveller").Count : 0;
            int TicketCount = (XmlTicketIssuing.SelectNodes("travellerInfo").Count > 0) ? XmlTicketIssuing.SelectNodes("travellerInfo/traveller/couponGroup[normalize-space(ticketNumber) != '']").Count : 0;

            //return XmlTicketIssuing.SelectSingleNode("message").Attributes.GetNamedItem("alert").InnerText.Equals("Y") ? "1S" : (TicketCount.Equals(0) ? "1D" : (PaxCount.Equals(TicketCount) ? "1B" : "1J"));
            return string.Format("PaxCount : {0}, TicketCount : {1}", PaxCount, TicketCount);
        }

        //[WebMethod(Description = "자동발권(Command)")]
        public XmlElement AAAAA_TicketIssuingSemiAutoRSTEST()
        {
            int OID = 37823068;
            int PID = 1546658;
            string FT = "";
            string FM = "";
            string FE = "";
            string FV = "";
            int RQR = 1743;
            string RQT = "WEBSERVICE";
            int TIRN = 0;

            XmlDocument XmlFP = new XmlDocument();
            XmlFP.Load(mc.XmlFullPath("_FP"));

            return TicketIssuingSemiAutoRS(OID, PID, FT, FM, FE, FV, XmlFP.DocumentElement, RQR, RQT, TIRN);

            //XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");
            //return TicketIssuingSemiAutoPNRRSTEST(cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), OID, PID, XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText, XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText, FT, FM, FE, FV, XmlFP.DocumentElement, RQR, RQT, TIRN, cm.GetGUID);
        }

        //[WebMethod(Description = "자동발권(Command)")]
        public XmlElement AAAAAA_TicketIssuingSemiAutoRSTEST()
        {
            int OID = 38319894;
            int PID = 1546658;
            string FT = "";
            string FM = "";
            string FE = "";
            string FV = "";
            int RQR = 1743;
            string RQT = "WEBSERVICE";
            int TIRN = 0;

            XmlDocument XmlFP = new XmlDocument();
            XmlFP.Load(mc.XmlFullPath("_FP"));

            return TicketIssuingSemiAutoOfflineRS(OID, PID, FT, FM, FE, FV, XmlFP.DocumentElement.OuterXml, RQR, RQT, TIRN);
        }

        /// <summary>
        /// 자동발권(Command) - 오프라인 PNR용(씨트립 등 해외 OTA 자동발권용)
        /// </summary>
        /// <param name="OID">모두투어 주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="FT">TourCode</param>
        /// <param name="FM">Commission</param>
        /// <param name="FE">Endorsement</param>
        /// <param name="FV">Validating Carrier</param>
        /// <param name="FP">결제요청정보</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기</param>
        /// <param name="TIRN">발권요청번호(TicketIssuingRequest 서비스의 결과값)</param>
        /// <returns></returns>
        [WebMethod(Description = "자동발권(Command)")]
        public XmlElement TicketIssuingSemiAutoOfflineRS(int OID, int PID, string FT, string FM, string FE, string FV, string FP, int RQR, string RQT, int TIRN)
        {
            int ServiceNumber = 638;
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
            Int64 LogSequence = 0;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청41", SqlDbType.VarChar, -1),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = ServiceNumber;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = FT;
                sqlParam[12].Value = FM;
                sqlParam[13].Value = FE;
                sqlParam[14].Value = FV;
                sqlParam[15].Value = FP;
                sqlParam[16].Value = RQR;
                sqlParam[17].Value = TIRN;

                LogSequence = log.LogDBSave(sqlParam);
            }
            catch (Exception ex)
            {
                if (ex.Message.Equals("서비스가 중복 요청되었습니다."))
                {
                    XmlElement ErrorXml = new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, OID, 0).ToErrors;
                    cm.XmlFileSave(ErrorXml, mc.Name, "TicketIssuingSemiAutoOfflineRS", "N", GUID);
                    return ErrorXml;
                }
            }
            finally { }

            //try
            //{
            //    XmlDocument XmlTmp = new XmlDocument();
            //    string Xml = string.Empty;

            //    Xml += "<TicketIssuingSemiAutoOfflineRQ>";
            //    Xml += String.Format("<OID>{0}</OID>", OID);
            //    Xml += String.Format("<PID>{0}</PID>", PID);
            //    Xml += String.Format("<FT>{0}</FT>", FT);
            //    Xml += String.Format("<FM>{0}</FM>", FM);
            //    Xml += String.Format("<FE>{0}</FE>", FE);
            //    Xml += String.Format("<FV>{0}</FV>", FV);
            //    Xml += String.Format("<FP><![CDATA[{0}]]></FP>", FP);
            //    Xml += String.Format("<RQR>{0}</RQR>", RQR);
            //    Xml += String.Format("<RQT>{0}</RQT>", RQT);
            //    Xml += String.Format("<TIRN>{0}</TIRN>", TIRN);
            //    Xml += "</TicketIssuingSemiAutoOfflineRQ>";

            //    XmlTmp.LoadXml(Xml);
            //    cm.XmlFileSave(XmlTmp, mc.Name, "TicketIssuingSemiAutoOfflineRQ", "N", GUID);
            //}
            //finally { }

            try
            {
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.LoadXml(FP);

                XmlElement XmlTicketIssuing = TicketIssuingSemiAutoRS(OID, PID, FT, FM, FE, FV, XmlDoc.DocumentElement, RQR, RQT, TIRN);
                int PaxCount = (XmlTicketIssuing.SelectNodes("travellerInfo").Count > 0) ? XmlTicketIssuing.SelectNodes("travellerInfo/traveller").Count : 0;
                int TicketCount = (XmlTicketIssuing.SelectNodes("travellerInfo").Count > 0) ? XmlTicketIssuing.SelectNodes("travellerInfo/traveller/couponGroup[normalize-space(ticketNumber) != '']").Count : 0;

                try
                {
                    //발권요청상태 변경
                    TicketIssuingRequestStatusSub(TIRN, (XmlTicketIssuing.SelectSingleNode("message").Attributes.GetNamedItem("alert").InnerText.Equals("Y") ? "1S" : (TicketCount.Equals(0) ? "1D" : (PaxCount.Equals(TicketCount) ? "1B" : "1J"))), XmlTicketIssuing.SelectSingleNode("commandInfo/query").InnerText, GUID);
                }
                catch (Exception ex)
                {
                    new MWSException(ex, hcc, mc.Name, String.Concat(MethodBase.GetCurrentMethod().Name, "-TicketIssuingRequestStatus"), OID, 0);
                }

                cm.XmlFileSave(XmlTicketIssuing, mc.Name, "TicketIssuingSemiAutoOfflineRS", "N", GUID);

                return XmlTicketIssuing;
            }
            catch (Exception ex)
            {
                XmlElement ErrorXml = new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, OID, 0).ToErrors;
                cm.XmlFileSave(ErrorXml, mc.Name, "TicketIssuingSemiAutoOfflineRS", "N", GUID);
                return ErrorXml;
            }
        }

        /// <summary>
        /// 자동발권(Command)
        /// </summary>
        /// <param name="OID">모두투어 주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="FT">TourCode</param>
        /// <param name="FM">Commission</param>
        /// <param name="FE">Endorsement</param>
        /// <param name="FV">Validating Carrier</param>
        /// <param name="FP">결제요청정보</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기</param>
        /// <param name="TIRN">발권요청번호(TicketIssuingRequest 서비스의 결과값)</param>
        /// <returns></returns>
        [WebMethod(Description = "자동발권(Command)")]
        public XmlElement TicketIssuingSemiAutoStringRS(int OID, int PID, string FT, string FM, string FE, string FV, string FP, int RQR, string RQT, int TIRN)
        {
            int ServiceNumber = 46;
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
            Int64 LogSequence = 0;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청41", SqlDbType.VarChar, -1),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = ServiceNumber;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = FT;
                sqlParam[12].Value = FM;
                sqlParam[13].Value = FE;
                sqlParam[14].Value = FV;
                sqlParam[15].Value = FP;
                sqlParam[16].Value = RQR;
                sqlParam[17].Value = TIRN;

                LogSequence = log.LogDBSave(sqlParam);
            }
            catch (Exception ex)
            {
                if (ex.Message.Equals("서비스가 중복 요청되었습니다."))
                {
                    XmlElement ErrorXml = new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, OID, 0).ToErrors;
                    cm.XmlFileSave(ErrorXml, mc.Name, "TicketIssuingSemiAutoStringRS", "N", GUID);
                    return ErrorXml;
                }
            }
            finally { }

            //try
            //{
            //    XmlDocument XmlTmp = new XmlDocument();
            //    string Xml = string.Empty;

            //    Xml += "<TicketIssuingSemiAutoStringRQ>";
            //    Xml += String.Format("<OID>{0}</OID>", OID);
            //    Xml += String.Format("<PID>{0}</PID>", PID);
            //    Xml += String.Format("<FT>{0}</FT>", FT);
            //    Xml += String.Format("<FM>{0}</FM>", FM);
            //    Xml += String.Format("<FE>{0}</FE>", FE);
            //    Xml += String.Format("<FV>{0}</FV>", FV);
            //    Xml += String.Format("<FP><![CDATA[{0}]]></FP>", FP);
            //    Xml += String.Format("<RQR>{0}</RQR>", RQR);
            //    Xml += String.Format("<RQT>{0}</RQT>", RQT);
            //    Xml += String.Format("<TIRN>{0}</TIRN>", TIRN);
            //    Xml += "</TicketIssuingSemiAutoStringRQ>";

            //    XmlTmp.LoadXml(Xml);
            //    cm.XmlFileSave(XmlTmp, mc.Name, "TicketIssuingSemiAutoStringRQ", "N", GUID);
            //}
            //finally { }

            try
            {
                XmlElement XmlTicketIssuing = null;
                int PaxCount = 0;
                int TicketCount = 0;

                try
                {
                    XmlDocument XmlDoc = new XmlDocument();
                    XmlDoc.LoadXml(FP);

                    //자동발권
                    XmlTicketIssuing = TicketIssuingSemiAutoRS(OID, PID, FT, FM, FE, FV, XmlDoc.DocumentElement, RQR, RQT, TIRN);

                    PaxCount = (XmlTicketIssuing.SelectNodes("travellerInfo").Count > 0) ? XmlTicketIssuing.SelectNodes("travellerInfo/traveller").Count : 0;
                    TicketCount = (XmlTicketIssuing.SelectNodes("travellerInfo").Count > 0) ? XmlTicketIssuing.SelectNodes("travellerInfo/traveller/couponGroup[normalize-space(ticketNumber) != '']").Count : 0;
                    
                    //발권요청상태 변경
                    TicketIssuingRequestStatusSub(TIRN, (XmlTicketIssuing.SelectSingleNode("message").Attributes.GetNamedItem("alert").InnerText.Equals("Y") ? "1S" : (TicketCount.Equals(0) ? "1D" : (PaxCount.Equals(TicketCount) ? "1B" : "1J"))), XmlTicketIssuing.SelectSingleNode("commandInfo/query").InnerText, GUID);
                }
                catch (Exception ex)
                {
                    new MWSException(ex, hcc, mc.Name, String.Concat(MethodBase.GetCurrentMethod().Name, "-TicketIssuingRequestStatus"), OID, 0);
                }

                try
                {
                    //PNR에 모두투어 예약번호 추가
                    AddBookingNumberPNR(OID, PID);
                }
                catch (Exception ex)
                {
                    new MWSException(ex, hcc, mc.Name, String.Concat(MethodBase.GetCurrentMethod().Name, "-AddBookingNumberPNR"), OID, 0);
                }

                try
                {
                    //PNR정보 캐싱
                    CachingPNR(OID, PID, RQR, RQT);
                }
                catch (Exception ex)
                {
                    new MWSException(ex, hcc, mc.Name, String.Concat(MethodBase.GetCurrentMethod().Name, "-CachingPNR"), OID, 0);
                }

                //전체발권인 경우에만 실행
                if (PaxCount > 0 && PaxCount.Equals(TicketCount))
                {
                    //try
                    //{
                    //    //이티켓 발송
                    //    string RepEMail = SearchBookingDB(OID, PID).SelectSingleNode("item1/이메일").InnerText;

                    //    foreach (XmlNode Traveller in XmlTicketIssuing.SelectNodes("travellerInfo/traveller"))
                    //    {
                    //        if (Traveller.SelectNodes("couponGroup").Count > 0)
                    //            SendETicketDocRS(OID, PID, String.Format("{0}/{1}", Traveller.SelectSingleNode("surname").InnerText, Traveller.SelectSingleNode("firstName").InnerText.Replace(" ", "")), RepEMail);
                    //    }
                    //}
                    //catch (Exception ex)
                    //{
                    //    new MWSException(ex, hcc, mc.Name, String.Concat(MethodBase.GetCurrentMethod().Name, "-SendETicketDocRS"));
                    //}

                    try
                    {
                        if (TicketCount > 0)
                        {
                            //SMS 발송
                            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
                            {
                                using (SqlCommand cmd = new SqlCommand
                                {
                                    Connection = conn,
                                    CommandType = CommandType.StoredProcedure,
                                    CommandText = "DBO.USP_T_발권요청_상태변경_SMS이메일전송"
                                })
                                {
                                    cmd.Parameters.Add("@요청일련번호", SqlDbType.Int, 0);
                                    cmd.Parameters["@요청일련번호"].Value = TIRN;

                                    try
                                    {
                                        conn.Open();
                                        cmd.ExecuteNonQuery();
                                    }
                                    catch (Exception)
                                    {
                                        throw;
                                    }
                                    finally
                                    {
                                        conn.Close();
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        new MWSException(ex, hcc, mc.Name, String.Concat(MethodBase.GetCurrentMethod().Name, "-USP_T_발권요청_상태변경_SMS이메일전송"), OID, 0);
                    }
                }

                //Response Log(2018-09-11,DB공간부족으로 로그기록 중단)
                //log.RSLogDBSave(LogSequence, ServiceNumber, XmlTicketIssuing.OuterXml);
                cm.XmlFileSave(XmlTicketIssuing, mc.Name, "TicketIssuingSemiAutoStringRS", "N", GUID);

                return XmlTicketIssuing;
            }
            catch (Exception ex)
            {
                XmlElement ErrorXml = new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, OID, 0).ToErrors;
                cm.XmlFileSave(ErrorXml, mc.Name, "TicketIssuingSemiAutoStringRS", "N", GUID);
                return ErrorXml;
            }
        }

        /// <summary>
        /// 자동발권(Command)
        /// </summary>
        /// <param name="OID">모두투어 주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="FT">TourCode</param>
        /// <param name="FM">Commission</param>
        /// <param name="FE">Endorsement</param>
        /// <param name="FV">Validating Carrier</param>
        /// <param name="FP">결제요청정보</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기</param>
        /// <param name="TIRN">발권요청번호(TicketIssuingRequest 서비스의 결과값)</param>
        /// <returns></returns>
        [WebMethod(Description = "자동발권(Command)")]
        public XmlElement TicketIssuingSemiAutoRS(int OID, int PID, string FT, string FM, string FE, string FV, XmlElement FP, int RQR, string RQT, int TIRN)
        {
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청41", SqlDbType.VarChar, -1)
                    };

                sqlParam[0].Value = 45;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = FT;
                sqlParam[12].Value = FM;
                sqlParam[13].Value = FE;
                sqlParam[14].Value = FV;
                sqlParam[15].Value = RQR;
                sqlParam[16].Value = TIRN;
                sqlParam[17].Value = FP.OuterXml;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                XmlDocument XmlTmp = new XmlDocument();
                string Xml = string.Empty;

                Xml += "<TicketIssuingSemiAutoRQ>";
                Xml += String.Format("<OID>{0}</OID>", OID);
                Xml += String.Format("<PID>{0}</PID>", PID);
                Xml += String.Format("<FT>{0}</FT>", FT);
                Xml += String.Format("<FM>{0}</FM>", FM);
                Xml += String.Format("<FE>{0}</FE>", FE);
                Xml += String.Format("<FV>{0}</FV>", FV);
                Xml += String.Format("<FP><![CDATA[{0}]]></FP>", FP.OuterXml);
                Xml += String.Format("<RQR>{0}</RQR>", RQR);
                Xml += String.Format("<RQT>{0}</RQT>", RQT);
                Xml += String.Format("<TIRN>{0}</TIRN>", TIRN);
                Xml += "</TicketIssuingSemiAutoRQ>";

                XmlTmp.LoadXml(Xml);
                cm.XmlFileSave(XmlTmp, mc.Name, "TicketIssuingSemiAutoRQ", "N", GUID);
            }
            finally { }

            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
                    string PNR = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;
                    string PVC = XmlDBBooking.SelectSingleNode("item3/마케팅항공사").InnerText;
                    int ANM = cm.RequestInt(XmlDBBooking.SelectSingleNode("item2/거래처번호").InnerText, 83549);
                    int SNM = cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2);
                    
                    //소아 2명 이상인 경우 자동발권 불가처리(2018-10-12,김지영매니저)
                    if (XmlDBBooking.SelectNodes("item4[구분='CHD']").Count > 1 && Common.RequiredDOB(PVC))
                        throw new Exception("소아가 2명 이상인 경우 자동발권이 불가능합니다.");
                    
                    //MF항공은 자동발권 불가처리(2017-08-07,김경미차장)
                    //AC항공은 자동발권 불가처리(2017-10-13,김경미차장)
                    //NH항공은 자동발권 불가처리(2017-10-26,김경미차장)
                    //AI항공은 자동발권 불가처리(2017-11-21,김경미차장)
                    //ZH항공은 자동발권 불가처리(2018-01-11,김경미매니저)
                    if (String.Compare(GDS, "Amadeus", true).Equals(0) && "/MF/AC/NH/AI/ZH/".IndexOf(PVC) != -1)
                        throw new Exception("자동발권이 불가능한 항공사입니다.");
                    //갈릴레오
                    else if (String.Compare(GDS, "Galileo", true).Equals(0) && "/NZ/QF/AI/BR/CI/MH/OM/NX/AM/JJ/AC/UA/LA/LO/TK/OS/QR/KQ/SA/SU/CA/ZH/SC/JL/NH/".IndexOf(PVC) != -1)
                        throw new Exception("자동발권이 불가능한 항공사입니다.");
                    //ZE항공(2019-01-22,김경미매니저)
                    else if (PVC.Equals("ZE"))
                    {
                        //ZE항공은 유/소아 포함 및 쿠폰 포함인 경우 자동발권 불가처리(2019-01-22,김경미매니저)
                        if (XmlDBBooking.SelectNodes("item4[구분='CHD']").Count > 0 || XmlDBBooking.SelectNodes("item4[구분='INF']").Count > 0)
                            throw new Exception("ZE항공은 유/소아 포함인 경우 자동발권이 불가능합니다.");
                        else if (XmlDBBooking.SelectNodes("item12[쿠폰번호!='']").Count > 0)
                            throw new Exception("ZE항공은 할인쿠폰을 사용한 경우 자동발권이 불가능합니다.");
                    }

                    //해외OTA(CTrip(1807166),취날(1950780),투니우(2944377),PK투어(3335127),FR24(3396932))일 경우 TST OID로 발권 진행(2019-06-13,김지영팀장)
                    if (ANM.Equals(1807166) || ANM.Equals(1950780) || ANM.Equals(2944377) || ANM.Equals(3335127) || ANM.Equals(3396932))
                    {
                        string SID = String.Empty;
                        string SCT = String.Empty;
                        int SQN = 0;

                        try
                        {
                            //### 01.세션생성 #####
                            XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "OTA-01"));

                            SID = Session.SelectSingleNode("session/sessionId").InnerText;
                            SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                            SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                            //### 02.PNR조회(PNR_Retrieve) #####
                            XmlElement ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "OTA-02"), PNR);

                            XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                            if (ResXml.SelectNodes("m:sbrUpdatorPosDetails", xnMgr).Count > 0)
                            {
                                if (ResXml.SelectSingleNode("m:sbrUpdatorPosDetails/m:sbrUserIdentificationOwn/m:originIdentification/m:inHouseIdentification1", xnMgr).InnerText.Equals("SELK138AB"))
                                    SNM = 2;
                            }

                            //### 03.세션종료 #####
                            SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "OTA-03"));
                        }
                        catch (Exception)
                        {
                            //### 세션종료 #####
                            if (SQN > 0)
                                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "OTA-04"));
                        }
                    }
                    
                    return TicketIssuingSemiAutoPNRRS(SNM, OID, PID, GDS, PNR, PVC, FT, FM, FE, FV, FP, RQR, RQT, TIRN, GUID);
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("FT", FT);
                ex.Data.Add("FM", FM);
                ex.Data.Add("FE", FE);
                ex.Data.Add("FV", FV);
                ex.Data.Add("FP", FP.OuterXml.Replace("<![CDATA[", "<!(CDATA(").Replace("]]>", "))>"));
                ex.Data.Add("RQR", RQR);
                ex.Data.Add("RQT", RQT);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 45, OID, 0).ToErrors;
            }
        }

        /// <summary>
        /// 자동발권(Command)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">모두투어 주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="GDS">GDS코드</param>
        /// <param name="PNR">PNR</param>
        /// <param name="PVC">발권항공사</param>
        /// <param name="FT">TourCode</param>
        /// <param name="FM">Commission</param>
        /// <param name="FE">Endorsement</param>
        /// <param name="FV">Validating Carrier</param>
        /// <param name="FP">결제요청정보</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기</param>
        /// <param name="TIRN">발권요청번호(TicketIssuingRequest 서비스의 결과값)</param>
        /// <param name="GUID">고유번호</param>
        /// <returns></returns>
        public XmlElement TicketIssuingSemiAutoPNRRS(int SNM, int OID, int PID, string GDS, string PNR, string PVC, string FT, string FM, string FE, string FV, XmlElement FP, int RQR, string RQT, int TIRN, string GUID)
        {
            //중복발권 에러메시지
            string DuplicateTicket = string.Empty;
            
            try
            {
                XmlDocument XmlTmp = new XmlDocument();
                string Xml = string.Empty;

                Xml += "<TicketIssuingSemiAutoPNRRQ>";
                Xml += String.Format("<SNM>{0}</SNM>", SNM);
                Xml += String.Format("<OID>{0}</OID>", OID);
                Xml += String.Format("<GDS>{0}</GDS>", GDS);
                Xml += String.Format("<PNR>{0}</PNR>", PNR);
                Xml += String.Format("<PVC>{0}</PVC>", PVC);
                Xml += String.Format("<FT>{0}</FT>", FT);
                Xml += String.Format("<FM>{0}</FM>", FM);
                Xml += String.Format("<FE>{0}</FE>", FE);
                Xml += String.Format("<FV>{0}</FV>", FV);
                Xml += String.Format("<FP><![CDATA[{0}]]></FP>", FP.OuterXml.Replace("<![CDATA[", "<!(CDATA(").Replace("]]>", "))>"));
                Xml += String.Format("<RQR>{0}</RQR>", RQR);
                Xml += String.Format("<RQT>{0}</RQT>", RQT);
                Xml += String.Format("<TIRN>{0}</TIRN>", TIRN);
                Xml += String.Format("<GUID>{0}</GUID>", GUID);
                Xml += "</TicketIssuingSemiAutoPNRRQ>";

                XmlTmp.LoadXml(Xml);
                cm.XmlFileSave(XmlTmp, mc.Name, "TicketIssuingSemiAutoPNRRQ", "N", GUID);
            }
            finally { }

            try
            {
                string XmlData = string.Empty;
                string TicketData = string.Empty;
                string ErrorMessage = string.Empty;
                string ErrorMessageAlert = "N";
                int PaxTicketCount = 0;
                int PaxCount = 0;
                
                #region "아마데우스"

                if (String.Compare(GDS, "Amadeus", true).Equals(0) || String.Compare(GDS, "Topas", true).Equals(0))
                {
                    string SID = String.Empty;
                    string SCT = String.Empty;
                    int SQN = 0;
                    int idx = 1;
                    int idy = 1;

                    try
                    {
                        //결과
                        XmlElement ResXml;
                        XmlElement ResEntry;

                        //네임스페이스
                        XmlNamespaceManager xnMgr;
                        XmlNamespaceManager xnMgrEntry;

                        //### 01.세션생성 #####
                        XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

                        SID = Session.SelectSingleNode("session/sessionId").InnerText;
                        SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                        SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                        //### 02.PNR조회(PNR_Retrieve) #####
                        ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

                        xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                        xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                        //FV항목 체크하여 자동발권 불가 항공사 예외 처리(2019-03-26,김경미매니저)
                        if (ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FV']", xnMgr).Count > 0)
                        {
                            bool ThrowErr = false;
                            FV = ResXml.SelectSingleNode("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FV']/m:otherDataFreetext/m:longFreetext", xnMgr).InnerText;
                            
                            //MF,AC,NH,AI,ZH 추가(2019-03-26,김경미매니저)
                            //TK 추가(2019-06-28,나하나매니저)
                            foreach (string TmpAir in "/MF/AC/NH/AI/ZH/TK/".Split('/'))
                            {
                                if (!String.IsNullOrWhiteSpace(TmpAir) && FV.IndexOf(TmpAir) != -1)
                                {
                                    ThrowErr = true;
                                    break;
                                }
                            }

                            if (ThrowErr)
                                throw new Exception("자동발권이 불가능한 항공사입니다.");
                        }

                        //if (ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA']", xnMgr).Count > 0)
                        //    throw new Exception("이티켓 정보가 존재합니다.");

                        //### 03.기존 결제정보 삭제 #####
                        XmlNodeList FPNodeList = ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv/m:elementManagementData[m:segmentName='FP']", xnMgr);
                        if (FPNodeList.Count > 0)
                        {
                            int o = 1;
                            for (int i = FPNodeList.Count; i > 0; i--)
                            {
                                amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-03-{1}-XE{2}", GUID, idy++, o++), String.Concat("XE", FPNodeList[(i - 1)].SelectSingleNode("m:lineNumber", xnMgr).InnerText));
                            }
                        }

                        //전체 일괄 결제 여부
                        bool FullPayment = true;

                        //결제정보(FP)
                        string StrFP = string.Empty;

                        //할인정보(DC)
                        string StrDC = string.Empty;

                        //결과
                        string TmpEntry = String.Concat("##GUID## ", GUID, Environment.NewLine);
                        string PaxNo = string.Empty;
                        string PaxLineNo = string.Empty;
                        string PaxType = string.Empty;
                        string PaxType2 = string.Empty;
                        string PaxBirthday = string.Empty;
                        string PaxTicketNumber = string.Empty;
                        double SumPay = 0;
                        
                        if (String.IsNullOrWhiteSpace(FP.Attributes.GetNamedItem("paxName").InnerText))
                        {
                            //일괄결제
                            if (FP.SelectNodes("fullAmount").Count > 0)
                            {
                                double TASF = ((XmlAttribute)FP.SelectSingleNode("fullAmount/fare").Attributes.GetNamedItem("tasf") != null) ? cm.RequestDouble(FP.SelectSingleNode("fullAmount/fare").Attributes.GetNamedItem("tasf").InnerText) : 0;

                                foreach (XmlNode Item in FP.SelectNodes("fullAmount/item[@gubun='CASH' or @gubun='CARD']"))
                                {
                                    if (!String.IsNullOrWhiteSpace(StrFP))
                                        StrFP += "+";

                                    if (Item.Attributes.GetNamedItem("gubun").InnerText.Equals("CARD"))
                                        StrFP += String.Format("CC{0}{1}/{2}{3}{4}", Item.Attributes.GetNamedItem("kind").InnerText, Common.ConvertToOnlyNumber(Item.Attributes.GetNamedItem("number").InnerText), Common.CardValidThru(Item.Attributes.GetNamedItem("validThru").InnerText), Common.AmadeusEntryInstallment(Item.Attributes.GetNamedItem("installment").InnerText), Common.AmadeusEntryAmount(Item.Attributes.GetNamedItem("currency").InnerText, (cm.RequestDouble(Item.Attributes.GetNamedItem("amount").InnerText) - TASF).ToString()));
                                    else
                                    {
                                        //캐시는 한 번만 등록(2019-02-22,김지영팀장)
                                        if (StrFP.IndexOf("CASH") == -1)
                                            StrFP += "CASH";
                                    }

                                    SumPay += cm.RequestDouble(Item.Attributes.GetNamedItem("amount").InnerText);
                                }

                                if (StrFP.IndexOf("CASH") != -1)
                                    StrFP = String.Concat("FP", StrFP);
                                else
                                {
                                    if ((cm.RequestDouble(FP.SelectSingleNode("fullAmount/fare").Attributes.GetNamedItem("fare").InnerText) - cm.RequestDouble(FP.SelectSingleNode("fullAmount/fare").Attributes.GetNamedItem("disFare").InnerText)) > 0)
                                        StrFP = String.Concat("FPCASH", String.IsNullOrWhiteSpace(StrFP) ? "" : "+", StrFP);
                                    else if ((cm.RequestDouble(FP.SelectSingleNode("fullAmount/fare").Attributes.GetNamedItem("price").InnerText) - SumPay) > 0)
                                        StrFP = String.Concat("FPCASH", String.IsNullOrWhiteSpace(StrFP) ? "" : "+", StrFP);
                                    else
                                        StrFP = String.Concat("FP", StrFP);
                                }

                                StrDC = (cm.RequestDouble(FP.SelectSingleNode("fullAmount/fare").Attributes.GetNamedItem("dc").InnerText) > 0) ? String.Concat("TTN/D", FP.SelectSingleNode("fullAmount/fare").Attributes.GetNamedItem("dc").InnerText) : "";
                            }
                            //탑승객별 결제
                            else if (FP.SelectNodes("paxAmount").Count > 0)
                            {
                                FullPayment = false;

                                foreach (XmlNode SelPax in FP.SelectNodes("paxAmount/pax"))
                                {
                                    string[] TravellerName = SelPax.Attributes.GetNamedItem("name").InnerText.Split('/');
                                    double TASF = ((XmlAttribute)SelPax.SelectSingleNode("fare").Attributes.GetNamedItem("tasf") != null) ? cm.RequestDouble(SelPax.SelectSingleNode("fare").Attributes.GetNamedItem("tasf").InnerText) : 0;
                                    XmlNode EnhancedPassengerData = ResXml.SelectSingleNode(String.Format("m:travellerInfo/m:enhancedPassengerData[m:enhancedTravellerInformation/m:otherPaxNamesDetails[m:surname='{0}'][translate(m:givenName, ' ', '')='{1}']]", TravellerName[0], TravellerName[1].Replace(" ", "")), xnMgr);

                                    //탑승객 타이틀을 별도로 등록하는 경우가 존재하여 추가 체크(2018-11-08)
                                    if (EnhancedPassengerData == null)
                                    {
                                        foreach (XmlNode EPaxData in ResXml.SelectNodes("m:travellerInfo/m:enhancedPassengerData[m:enhancedTravellerInformation/m:otherPaxNamesDetails/m:title]", xnMgr))
                                        {
                                            if (TravellerName[1].Equals(String.Concat(EPaxData.SelectSingleNode("m:enhancedTravellerInformation/m:otherPaxNamesDetails/m:givenName", xnMgr).InnerText, EPaxData.SelectSingleNode("m:enhancedTravellerInformation/m:otherPaxNamesDetails/m:title", xnMgr).InnerText)))
                                            {
                                                if (TravellerName[0].Equals(EPaxData.SelectSingleNode("m:enhancedTravellerInformation/m:otherPaxNamesDetails/m:surname", xnMgr).InnerText))
                                                {
                                                    EnhancedPassengerData = EPaxData;
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    if (EnhancedPassengerData != null)
                                    {
                                        PaxType = (EnhancedPassengerData.SelectNodes("m:enhancedTravellerInformation/m:travellerNameInfo/m:type", xnMgr).Count > 0) ? EnhancedPassengerData.SelectSingleNode("m:enhancedTravellerInformation/m:travellerNameInfo/m:type", xnMgr).InnerText : "ADT";
                                        PaxType2 = PaxType.Equals("INF") ? "INF" : "PAX";
                                        PaxBirthday = (EnhancedPassengerData.SelectNodes("m:dateOfBirthInEnhancedPaxData", xnMgr).Count > 0) ? EnhancedPassengerData.SelectSingleNode("m:dateOfBirthInEnhancedPaxData/m:dateAndTimeDetails[m:qualifier='706']/m:date", xnMgr).InnerText : "";
                                        PaxNo = EnhancedPassengerData.ParentNode.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText;
                                        PaxLineNo = EnhancedPassengerData.ParentNode.SelectSingleNode("m:elementManagementPassenger/m:lineNumber", xnMgr).InnerText;
                                        StrFP = "";
                                        SumPay = 0;

                                        foreach (XmlNode Item in SelPax.SelectNodes("item[@gubun='CASH' or @gubun='CARD']"))
                                        {
                                            if (!String.IsNullOrWhiteSpace(StrFP))
                                                StrFP += "+";

                                            if (Item.Attributes.GetNamedItem("gubun").InnerText.Equals("CARD"))
                                            {
                                                double CardAmount = (cm.RequestDouble(Item.Attributes.GetNamedItem("amount").InnerText) - TASF);

                                                //5만원 미만은 카드할부 불가(일시불로 처리)(2018-09-11,김지영매니저)
                                                if (CardAmount < 50000 && cm.RequestInt(Item.Attributes.GetNamedItem("installment").InnerText) != 0)
                                                    StrFP += String.Format("CC{0}{1}/{2}*E00{3}", Item.Attributes.GetNamedItem("kind").InnerText, Common.ConvertToOnlyNumber(Item.Attributes.GetNamedItem("number").InnerText), Common.CardValidThru(Item.Attributes.GetNamedItem("validThru").InnerText), Common.AmadeusEntryAmount(Item.Attributes.GetNamedItem("currency").InnerText, CardAmount.ToString()));
                                                else
                                                    StrFP += String.Format("CC{0}{1}/{2}{3}{4}", Item.Attributes.GetNamedItem("kind").InnerText, Common.ConvertToOnlyNumber(Item.Attributes.GetNamedItem("number").InnerText), Common.CardValidThru(Item.Attributes.GetNamedItem("validThru").InnerText), Common.AmadeusEntryInstallment(Item.Attributes.GetNamedItem("installment").InnerText), Common.AmadeusEntryAmount(Item.Attributes.GetNamedItem("currency").InnerText, CardAmount.ToString()));
                                            }
                                            else
                                            {
                                                //캐시는 한 번만 등록(2019-02-22,김지영팀장)
                                                if (StrFP.IndexOf("CASH") == -1)
                                                    StrFP += "CASH";
                                            }

                                            SumPay += cm.RequestDouble(Item.Attributes.GetNamedItem("amount").InnerText);
                                        }

                                        if (StrFP.IndexOf("CASH").Equals(-1) && SelPax.SelectNodes("fare").Count > 0)
                                        {
                                            if ((cm.RequestDouble(SelPax.SelectSingleNode("fare").Attributes.GetNamedItem("fare").InnerText) - cm.RequestDouble(SelPax.SelectSingleNode("fare").Attributes.GetNamedItem("disFare").InnerText)) > 0)
                                                StrFP = String.Concat("CASH", String.IsNullOrWhiteSpace(StrFP) ? "" : "+", StrFP);
                                            else if ((cm.RequestDouble(SelPax.SelectSingleNode("fare").Attributes.GetNamedItem("price").InnerText) - SumPay) > 0)
                                                StrFP = String.Concat("CASH", String.IsNullOrWhiteSpace(StrFP) ? "" : "+", StrFP);
                                        }

                                        StrFP = String.Format("FP{0}{1}/P{2}", PaxType2, StrFP, PaxLineNo);
                                        StrDC = (SelPax.SelectNodes("fare").Count > 0 && cm.RequestDouble(SelPax.SelectSingleNode("fare").Attributes.GetNamedItem("dc").InnerText) > 0) ? String.Format("TTN/D{0}/T{1}", SelPax.SelectSingleNode("fare").Attributes.GetNamedItem("dc").InnerText, ResXml.SelectSingleNode("m:tstData[m:referenceForTstData/m:reference[m:qualifier='PT' and m:number='" + PaxNo + "']]/m:tstGeneralInformation/m:generalInformation/m:tstReferenceNumber", xnMgr).InnerText) : "";

                                        //소아,유아 생년월일 및 성인 티켓번호는 다음 항공사만 실행(2018-10-15,김지영매니저)
                                        if (Common.RequiredDOB(PVC))
                                        {
                                            //소아일 경우 ENDS(FE) 항목에 생년월일 및 성인 티켓번호 추가
                                            if (PaxType.Equals("CHD"))
                                            {
                                                XmlNode FENode = (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FE' and starts-with(m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='10']/m:longFreetext, '{0}') and m:referenceForDataElement/m:reference[m:qualifier='PT' and m:number='{1}']]", PaxType2, PaxNo), xnMgr).Count > 0) ? ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FE' and starts-with(m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='10']/m:longFreetext, '{0}') and m:referenceForDataElement/m:reference[m:qualifier='PT' and m:number='{1}']]", PaxType2, PaxNo), xnMgr) : null;
                                                string FELineNo = (FENode != null) ? FENode.SelectSingleNode("m:elementManagementData/m:lineNumber", xnMgr).InnerText : string.Empty;
                                                string StrFE = (FENode != null) ? FENode.SelectSingleNode("m:otherDataFreetext[m:freetextDetail[m:subjectQualifier='3' and m:type='10']]/m:longFreetext", xnMgr).InnerText : string.Empty;

                                                PaxBirthday = cm.AbacusDateTime(cm.ConvertToBirthDate(PaxBirthday));

                                                if (String.IsNullOrWhiteSpace(StrFE))
                                                {
                                                    ResEntry = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-04-P{1}-{2}-FEDOB", GUID, PaxLineNo, idx++), String.Format("FEDOB{0}/P{1}", PaxBirthday, PaxLineNo));

                                                    xnMgrEntry = new XmlNamespaceManager(ResEntry.OwnerDocument.NameTable);
                                                    xnMgrEntry.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                                                    TmpEntry += String.Concat("FE", FE, Environment.NewLine);
                                                    TmpEntry += String.Concat(ResEntry.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgrEntry).InnerText, Environment.NewLine);

                                                    //Retrieve 를 위해 일단 저장
                                                    ResEntry = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-04-P{1}-{2}-ER", GUID, PaxLineNo, idx++), "ER");

                                                    xnMgrEntry = new XmlNamespaceManager(ResEntry.OwnerDocument.NameTable);
                                                    xnMgrEntry.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                                                    TmpEntry += String.Concat("FE", FE, Environment.NewLine);
                                                    TmpEntry += String.Concat(ResEntry.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgrEntry).InnerText, Environment.NewLine);

                                                    //### 04.PNR조회(PNR_Retrieve) #####
                                                    ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-04-P{1}-{2}", GUID, PaxLineNo, idx++), PNR);

                                                    xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                                                    xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                                                    FENode = (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FE' and starts-with(m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='10']/m:longFreetext, '{0}') and m:referenceForDataElement/m:reference[m:qualifier='PT' and m:number='{1}']]", PaxType2, PaxNo), xnMgr).Count > 0) ? ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FE' and starts-with(m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='10']/m:longFreetext, '{0}') and m:referenceForDataElement/m:reference[m:qualifier='PT' and m:number='{1}']]", PaxType2, PaxNo), xnMgr) : null;
                                                    FELineNo = (FENode != null) ? FENode.SelectSingleNode("m:elementManagementData/m:lineNumber", xnMgr).InnerText : string.Empty;
                                                }
                                                else
                                                {
                                                    ResEntry = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-04-P{1}-{2}-DOB", GUID, PaxLineNo, idx++), String.Format("{0}//DOB{1}/P{2}", FELineNo, PaxBirthday, PaxLineNo));

                                                    xnMgrEntry = new XmlNamespaceManager(ResEntry.OwnerDocument.NameTable);
                                                    xnMgrEntry.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                                                    TmpEntry += String.Concat("FE", FE, Environment.NewLine);
                                                    TmpEntry += String.Concat(ResEntry.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgrEntry).InnerText, Environment.NewLine);
                                                }

                                                if (!String.IsNullOrWhiteSpace(PaxTicketNumber))
                                                {
                                                    ResEntry = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-04-P{1}-{2}-PTN", GUID, PaxLineNo, idx++), String.Format("{0}//{1}/P{2}", FELineNo, PaxTicketNumber, PaxLineNo));

                                                    xnMgrEntry = new XmlNamespaceManager(ResEntry.OwnerDocument.NameTable);
                                                    xnMgrEntry.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                                                    TmpEntry += String.Concat("FE", FE, Environment.NewLine);
                                                    TmpEntry += String.Concat(ResEntry.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgrEntry).InnerText, Environment.NewLine);
                                                }
                                            }
                                            //유아일 경우 ENDS(FE) 항목을 신규로 등록
                                            else if (PaxType.Equals("INF"))
                                            {
                                                XmlNode FENode = (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FE' and starts-with(m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='10']/m:longFreetext, '{0}') and m:referenceForDataElement/m:reference[m:qualifier='PT' and m:number='{1}']]", PaxType2, PaxNo), xnMgr).Count > 0) ? ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FE' and starts-with(m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='10']/m:longFreetext, '{0}') and m:referenceForDataElement/m:reference[m:qualifier='PT' and m:number='{1}']]", PaxType2, PaxNo), xnMgr) : null;
                                                string FELineNo = (FENode != null) ? FENode.SelectSingleNode("m:elementManagementData/m:lineNumber", xnMgr).InnerText : string.Empty;
                                                string StrFE = (FENode != null) ? FENode.SelectSingleNode("m:otherDataFreetext[m:freetextDetail[m:subjectQualifier='3' and m:type='10']]/m:longFreetext", xnMgr).InnerText : string.Empty;

                                                PaxBirthday = cm.AbacusDateTime(cm.ConvertToBirthDate(PaxBirthday));

                                                //기존 FE항목 삭제
                                                if (!String.IsNullOrWhiteSpace(StrFE))
                                                    amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-04-P{1}-{2}-XE", GUID, PaxLineNo, idx++), String.Concat("XE", FELineNo));

                                                //FE
                                                ResEntry = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-04-P{1}-{2}-FE", GUID, PaxLineNo, idx++), String.Format("FE{0}, DOB {1} {2}/P{3}", StrFE, PaxBirthday, PaxTicketNumber, PaxLineNo));
                                                xnMgrEntry = new XmlNamespaceManager(ResEntry.OwnerDocument.NameTable);
                                                xnMgrEntry.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                                                TmpEntry += String.Concat("FE", FE, Environment.NewLine);
                                                TmpEntry += String.Concat(ResEntry.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgrEntry).InnerText, Environment.NewLine);

                                                //Retrieve 를 위해 일단 저장
                                                ResEntry = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-04-P{1}-{2}-ER", GUID, PaxLineNo, idx++), "ER");

                                                xnMgrEntry = new XmlNamespaceManager(ResEntry.OwnerDocument.NameTable);
                                                xnMgrEntry.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                                                TmpEntry += String.Concat("FE", FE, Environment.NewLine);
                                                TmpEntry += String.Concat(ResEntry.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgrEntry).InnerText, Environment.NewLine);

                                                //### 04.PNR조회(PNR_Retrieve) #####
                                                ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-04-P{1}-{2}", GUID, PaxLineNo, idx++), PNR);

                                                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                                                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                                                FENode = (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FE' and starts-with(m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='10']/m:longFreetext, '{0}') and m:referenceForDataElement/m:reference[m:qualifier='PT' and m:number='{1}']]", PaxType2, PaxNo), xnMgr).Count > 0) ? ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FE' and starts-with(m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='10']/m:longFreetext, '{0}') and m:referenceForDataElement/m:reference[m:qualifier='PT' and m:number='{1}']]", PaxType2, PaxNo), xnMgr) : null;
                                                FELineNo = (FENode != null) ? FENode.SelectSingleNode("m:elementManagementData/m:lineNumber", xnMgr).InnerText : string.Empty;
                                            }
                                        }

                                        if (!String.IsNullOrWhiteSpace(StrDC))
                                        {
                                            ResEntry = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-04-P{1}-{2}-DC", GUID, PaxLineNo, idx++), StrDC);

                                            xnMgrEntry = new XmlNamespaceManager(ResEntry.OwnerDocument.NameTable);
                                            xnMgrEntry.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                                            TmpEntry += String.Concat(StrDC, Environment.NewLine);
                                            TmpEntry += String.Concat(ResEntry.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgrEntry).InnerText, Environment.NewLine);
                                        }

                                        if (!String.IsNullOrWhiteSpace(StrFP))
                                        {
                                            ResEntry = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-04-P{1}-{2}-FP", GUID, PaxLineNo, idx++), StrFP);

                                            xnMgrEntry = new XmlNamespaceManager(ResEntry.OwnerDocument.NameTable);
                                            xnMgrEntry.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                                            TmpEntry += String.Concat(StrFP, Environment.NewLine);
                                            TmpEntry += String.Concat(ResEntry.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgrEntry).InnerText, Environment.NewLine);
                                        }

                                        ResEntry = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-04-P{1}-{2}-TTP1", GUID, PaxLineNo, idx++), (!String.IsNullOrWhiteSpace(PaxLineNo) ? String.Format("TTP/{0}/P{1}/RT", PaxType2, PaxLineNo) : "TTP/RT"));

                                        xnMgrEntry = new XmlNamespaceManager(ResEntry.OwnerDocument.NameTable);
                                        xnMgrEntry.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                                        TmpEntry += String.Concat((!String.IsNullOrWhiteSpace(PaxLineNo) ? String.Format("TTP/{0}/P{1}/RT", PaxType2, PaxLineNo) : "TTP/RT"), Environment.NewLine);
                                        TmpEntry += String.Concat(ResEntry.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgrEntry).InnerText, Environment.NewLine);

                                        //발권오류체크
                                        if (Common.CheckIssueError(ResEntry.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgrEntry).InnerText))
                                        {
                                            DuplicateTicket = ResEntry.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgrEntry).InnerText;
                                            TicketIssuingRequestStatusSub(TIRN, "1O", DuplicateTicket, GUID);

                                            throw new Exception(DuplicateTicket);
                                        }

                                        if (ResEntry.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgrEntry).InnerText.IndexOf("OK ETICKET") < 0)
                                        {
                                            ResEntry = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-04-P{1}-{2}-TTP2", GUID, PaxLineNo, idx++), (!String.IsNullOrWhiteSpace(PaxLineNo) ? String.Format("TTP/{0}/P{1}/RT", PaxType2, PaxLineNo) : "TTP/RT"));

                                            xnMgrEntry = new XmlNamespaceManager(ResEntry.OwnerDocument.NameTable);
                                            xnMgrEntry.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                                            TmpEntry += String.Concat((!String.IsNullOrWhiteSpace(PaxLineNo) ? String.Format("TTP/{0}/P{1}/RT", PaxType2, PaxLineNo) : "TTP/RT"), Environment.NewLine);
                                            TmpEntry += String.Concat(ResEntry.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgrEntry).InnerText, Environment.NewLine);
                                        }

                                        //### 04.PNR조회(PNR_Retrieve) #####
                                        ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-04-P{1}-{2}", GUID, PaxLineNo, idx++), PNR);

                                        if (PaxType.Equals("ADT") && String.IsNullOrWhiteSpace(PaxTicketNumber))
                                        {
                                            xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                                            xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                                            if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA' and m:referenceForDataElement/m:reference[m:qualifier='PT' and m:number='{0}']]", PaxNo), xnMgr).Count > 0)
                                            {
                                                PaxTicketNumber = Common.SplitAmadeusTicketNumber(ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA' and m:referenceForDataElement/m:reference[m:qualifier='PT' and m:number='{0}']]/m:otherDataFreetext[m:freetextDetail/m:type='P06' and starts-with(m:longFreetext, 'PAX')]/m:longFreetext", PaxNo), xnMgr).InnerText);
                                            }
                                        }
                                    }
                                    else
                                        throw new Exception("탑승객 정보가 일치하지 않습니다. - 001");
                                }

                                XmlData = "<commandInfo>";
                                XmlData += String.Format("<query><![CDATA[{0}]]></query>", TmpEntry);
                                XmlData += "</commandInfo>";
                            }
                            else
                                throw new Exception("결제 정보가 존재하지 않습니다.");
                        }
                        else
                        {
                            string[] TravellerName = FP.Attributes.GetNamedItem("paxName").InnerText.Split('/');
                            XmlNode SelPax = FP.SelectSingleNode(String.Format("paxAmount/pax[@name='{0}']", FP.Attributes.GetNamedItem("paxName").InnerText));

                            if (ResXml.SelectNodes(String.Format("m:travellerInfo[m:enhancedPassengerData/m:enhancedTravellerInformation/m:otherPaxNamesDetails[m:surname='{0}'][m:givenName='{1}']]", TravellerName[0], TravellerName[1]), xnMgr).Count > 0)
                            {
                                XmlNode TravellerInfo = ResXml.SelectSingleNode(String.Format("m:travellerInfo[m:enhancedPassengerData/m:enhancedTravellerInformation/m:otherPaxNamesDetails[m:surname='{0}'][m:givenName='{1}']]", TravellerName[0], TravellerName[1]), xnMgr);
                                PaxType = (TravellerInfo.SelectNodes(String.Format("m:enhancedPassengerData/m:enhancedTravellerInformation[m:otherPaxNamesDetails[m:surname='{0}'][m:givenName='{1}']]/m:travellerNameInfo/m:type", TravellerName[0], TravellerName[1]), xnMgr).Count > 0) ? TravellerInfo.SelectSingleNode(String.Format("m:enhancedPassengerData/m:enhancedTravellerInformation[m:otherPaxNamesDetails[m:surname='{0}'][m:givenName='{1}']]/m:travellerNameInfo/m:type", TravellerName[0], TravellerName[1]), xnMgr).InnerText : "ADT";
                                PaxNo = TravellerInfo.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText;
                                PaxLineNo = TravellerInfo.SelectSingleNode("m:elementManagementPassenger/m:lineNumber", xnMgr).InnerText;

                                foreach (XmlNode Item in SelPax.SelectNodes("item[@gubun='CASH' or @gubun='CARD']"))
                                {
                                    if (!String.IsNullOrWhiteSpace(StrFP))
                                        StrFP += "+";

                                    if (Item.Attributes.GetNamedItem("gubun").InnerText.Equals("CARD"))
                                        StrFP += String.Format("CC{0}{1}/{2}{3}{4}", Item.Attributes.GetNamedItem("kind").InnerText, Common.ConvertToOnlyNumber(Item.Attributes.GetNamedItem("number").InnerText), Common.CardValidThru(Item.Attributes.GetNamedItem("validThru").InnerText), Common.AmadeusEntryInstallment(Item.Attributes.GetNamedItem("installment").InnerText), Common.AmadeusEntryAmount(Item.Attributes.GetNamedItem("currency").InnerText, Item.Attributes.GetNamedItem("amount").InnerText));
                                    else
                                        //StrFP += String.Concat("CASH", Common.AmadeusEntryAmount(Item.Attributes.GetNamedItem("currency").InnerText, Item.Attributes.GetNamedItem("amount").InnerText));
                                        StrFP += "CASH";

                                    SumPay += cm.RequestDouble(Item.Attributes.GetNamedItem("amount").InnerText);
                                }

                                if (StrFP.IndexOf("CASH").Equals(-1) && SelPax.SelectNodes("fare").Count > 0)
                                {
                                    if ((cm.RequestDouble(SelPax.SelectSingleNode("fare").Attributes.GetNamedItem("fare").InnerText) - cm.RequestDouble(SelPax.SelectSingleNode("fare").Attributes.GetNamedItem("disFare").InnerText)) > 0)
                                        StrFP = String.Concat("CASH", String.IsNullOrWhiteSpace(StrFP) ? "" : "+", StrFP);
                                    else if ((cm.RequestDouble(SelPax.SelectSingleNode("fare").Attributes.GetNamedItem("price").InnerText) - SumPay) > 0)
                                        StrFP = String.Concat("CASH", String.IsNullOrWhiteSpace(StrFP) ? "" : "+", StrFP);
                                }

                                if (PaxType.Equals("INF"))
                                    StrFP = String.Concat(PaxType, StrFP);

                                StrFP = String.Concat("FP", StrFP, "/P", PaxLineNo);
                                StrDC = (SelPax.SelectNodes("fare").Count > 0 && cm.RequestDouble(SelPax.SelectSingleNode("fare").Attributes.GetNamedItem("dc").InnerText) > 0) ? String.Format("TTN/D{0}/T{1}", SelPax.SelectSingleNode("fare").Attributes.GetNamedItem("dc").InnerText, ResXml.SelectSingleNode("m:tstData[m:referenceForTstData/m:reference[m:qualifier='PT' and m:number='" + TravellerInfo.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText + "']]/m:tstGeneralInformation/m:generalInformation/m:tstReferenceNumber", xnMgr).InnerText) : "";
                            }
                            else
                                throw new Exception("탑승객 정보가 일치하지 않습니다. - 002");
                        }

                        if (FullPayment)
                        {
                            //TOURCODE(FT)
                            XmlNode FTNode = (ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FT']", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FT']", xnMgr) : null;
                            string FTLineNo = (FTNode != null) ? FTNode.SelectSingleNode("m:elementManagementData/m:lineNumber", xnMgr).InnerText : string.Empty;
                            string StrFT = (FTNode != null) ? FTNode.SelectSingleNode("m:otherDataFreetext[m:freetextDetail[m:subjectQualifier='3' and m:type='12']]/m:longFreetext", xnMgr).InnerText : string.Empty;

                            //COMMISSION(FM)
                            XmlNode FMNode = (ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FM']", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FM']", xnMgr) : null;
                            string FMLineNo = (FMNode != null) ? FMNode.SelectSingleNode("m:elementManagementData/m:lineNumber", xnMgr).InnerText : string.Empty;
                            string StrFM = (FMNode != null) ? FMNode.SelectSingleNode("m:otherDataFreetext[m:freetextDetail[m:subjectQualifier='3' and m:type='11']]/m:longFreetext", xnMgr).InnerText : string.Empty;

                            //ENDS(FE)
                            XmlNode FENode = (ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FE']", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FE']", xnMgr) : null;
                            string FELineNo = (FENode != null) ? FENode.SelectSingleNode("m:elementManagementData/m:lineNumber", xnMgr).InnerText : string.Empty;
                            string StrFE = (FENode != null) ? FENode.SelectSingleNode("m:otherDataFreetext[m:freetextDetail[m:subjectQualifier='3' and m:type='10']]/m:longFreetext", xnMgr).InnerText : string.Empty;

                            //항공(FV)
                            XmlNode FVNode = (ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FV']", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FV']", xnMgr) : null;
                            string FVLineNo = (FVNode != null) ? FVNode.SelectSingleNode("m:elementManagementData/m:lineNumber", xnMgr).InnerText : string.Empty;
                            string StrFV = (FVNode != null) ? FVNode.SelectSingleNode("m:otherDataFreetext[m:freetextDetail[m:subjectQualifier='3' and m:type='P18']]/m:longFreetext", xnMgr).InnerText : string.Empty;

                            //### 04.CommandCryptic #####
                            //if (!String.IsNullOrWhiteSpace(FVLineNo) && !FV.Equals(StrFV))
                            //{
                            //    ResXml = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04-", idx++), String.Concat("XE", FVLineNo));

                            //    xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            //    xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                            //    TmpEntry += String.Concat("XE", FVLineNo, Environment.NewLine);
                            //    TmpEntry += String.Concat(ResXml.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText, Environment.NewLine);
                            //}

                            //if (!String.IsNullOrWhiteSpace(FTLineNo) && !FT.Equals(StrFT))
                            //{
                            //    ResXml = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04-", idx++), String.Concat("XE", FTLineNo));

                            //    xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            //    xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                            //    TmpEntry += String.Concat("XE", FTLineNo, Environment.NewLine);
                            //    TmpEntry += String.Concat(ResXml.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText, Environment.NewLine);
                            //}

                            //if (!String.IsNullOrWhiteSpace(FMLineNo) && !FM.Equals(StrFM))
                            //{
                            //    ResXml = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04-", idx++), String.Concat("XE", FMLineNo));

                            //    xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            //    xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                            //    TmpEntry += String.Concat("XE", FMLineNo, Environment.NewLine);
                            //    TmpEntry += String.Concat(ResXml.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText, Environment.NewLine);
                            //}

                            //if (!String.IsNullOrWhiteSpace(FELineNo) && !FE.Equals(StrFE))
                            //{
                            //    ResXml = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04-", idx++), String.Concat("XE", FELineNo));

                            //    xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            //    xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                            //    TmpEntry += String.Concat("XE", FELineNo, Environment.NewLine);
                            //    TmpEntry += String.Concat(ResXml.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText, Environment.NewLine);
                            //}

                            if (!String.IsNullOrWhiteSpace(StrDC))
                            {
                                ResXml = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-04-{1}-DC", GUID, idx++), StrDC);

                                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                                TmpEntry += String.Concat(StrDC, Environment.NewLine);
                                TmpEntry += String.Concat(ResXml.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText, Environment.NewLine);
                            }

                            //if (!String.IsNullOrWhiteSpace(FV) && !FV.Equals(StrFV))
                            //{
                            //    ResXml = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04-", idx++), String.Concat("FV", FV));

                            //    xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            //    xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                            //    TmpEntry += String.Concat("FV", FV, Environment.NewLine);
                            //    TmpEntry += String.Concat(ResXml.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText, Environment.NewLine);
                            //}

                            //if (!String.IsNullOrWhiteSpace(FT) && !FT.Equals(StrFT))
                            //{
                            //    ResXml = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04-", idx++), String.Concat("FT", FT));

                            //    xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            //    xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                            //    TmpEntry += String.Concat("FT", FT, Environment.NewLine);
                            //    TmpEntry += String.Concat(ResXml.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText, Environment.NewLine);
                            //}

                            //if (!String.IsNullOrWhiteSpace(FM) && !FM.Equals(StrFM))
                            //{
                            //    ResXml = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04-", idx++), String.Concat("FM", FM));

                            //    xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            //    xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                            //    TmpEntry += String.Concat("FM", FM, Environment.NewLine);
                            //    TmpEntry += String.Concat(ResXml.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText, Environment.NewLine);
                            //}

                            //if (!String.IsNullOrWhiteSpace(FE) && !FE.Equals(StrFE))
                            //{
                            //    ResXml = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04-", idx++), String.Concat("FE", FE));

                            //    xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            //    xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                            //    TmpEntry += String.Concat("FE", FE, Environment.NewLine);
                            //    TmpEntry += String.Concat(ResXml.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText, Environment.NewLine);
                            //}

                            if (!String.IsNullOrWhiteSpace(StrFP))
                            {
                                ResXml = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-04-{1}-FP", GUID, idx++), StrFP);

                                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                                TmpEntry += String.Concat(StrFP, Environment.NewLine);
                                TmpEntry += String.Concat(ResXml.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText, Environment.NewLine);
                            }

                            ResXml = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-04-{1}-TTP1", GUID, idx++), (!String.IsNullOrWhiteSpace(PaxLineNo) ? (PaxType.Equals("INF") ? String.Concat("TTP/INF/P", PaxLineNo, "/RT") : String.Concat("TTP/PAX/P", PaxLineNo, "/RT")) : "TTP/RT"));

                            xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                            TmpEntry += String.Concat((!String.IsNullOrWhiteSpace(PaxLineNo) ? (PaxType.Equals("INF") ? String.Concat("TTP/INF/P", PaxLineNo, "/RT") : String.Concat("TTP/PAX/P", PaxLineNo, "/RT")) : "TTP/RT"), Environment.NewLine);
                            TmpEntry += String.Concat(ResXml.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText, Environment.NewLine);

                            //발권오류체크
                            if (Common.CheckIssueError(ResXml.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText))
                            {
                                DuplicateTicket = ResXml.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText;
                                TicketIssuingRequestStatusSub(TIRN, "1O", DuplicateTicket, GUID);

                                throw new Exception(DuplicateTicket);
                            }

                            if (ResXml.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText.IndexOf("OK ETICKET") < 0)
                            {
                                ResXml = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-04-{1}-TTP2", GUID, idx++), (!String.IsNullOrWhiteSpace(PaxLineNo) ? (PaxType.Equals("INF") ? String.Concat("TTP/INF/P", PaxLineNo, "/RT") : String.Concat("TTP/PAX/P", PaxLineNo, "/RT")) : "TTP/RT"));

                                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));
                                TmpEntry += String.Concat((!String.IsNullOrWhiteSpace(PaxLineNo) ? (PaxType.Equals("INF") ? String.Concat("TTP/INF/P", PaxLineNo, "/RT") : String.Concat("TTP/PAX/P", PaxLineNo, "/RT")) : "TTP/RT"), Environment.NewLine);
                                TmpEntry += String.Concat(ResXml.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText, Environment.NewLine);
                            }

                            XmlData = "<commandInfo>";
                            XmlData += String.Format("<FTLineNo>{0}</FTLineNo>", FTLineNo);
                            XmlData += String.Format("<FMLineNo>{0}</FMLineNo>", FMLineNo);
                            XmlData += String.Format("<FELineNo>{0}</FELineNo>", FELineNo);
                            XmlData += String.Format("<FVLineNo>{0}</FVLineNo>", FVLineNo);
                            //XmlData += String.Format("<Query><![CDATA[{0}]]></Query>", String.Concat(
                            //                (!String.IsNullOrWhiteSpace(FVLineNo) && !FV.Equals(StrFV) ? String.Concat("XE", FVLineNo, Environment.NewLine) : ""),
                            //                (!String.IsNullOrWhiteSpace(FTLineNo) && !FT.Equals(StrFT) ? String.Concat("XE", FTLineNo, Environment.NewLine) : ""),
                            //                (!String.IsNullOrWhiteSpace(FMLineNo) && !FM.Equals(StrFM) ? String.Concat("XE", FMLineNo, Environment.NewLine) : ""),
                            //                (!String.IsNullOrWhiteSpace(FELineNo) && !FE.Equals(StrFE) ? String.Concat("XE", FELineNo, Environment.NewLine) : ""),
                            //                (!String.IsNullOrWhiteSpace(StrDC) ? String.Concat(StrDC, Environment.NewLine) : ""),
                            //                (!String.IsNullOrWhiteSpace(FV) && !FV.Equals(StrFV) ? String.Concat("FV", FV, Environment.NewLine) : ""),
                            //                (!String.IsNullOrWhiteSpace(FT) && !FT.Equals(StrFT) ? String.Concat("FT", FT, Environment.NewLine) : ""),
                            //                (!String.IsNullOrWhiteSpace(FM) && !FM.Equals(StrFM) ? String.Concat("FM", FM, Environment.NewLine) : ""),
                            //                (!String.IsNullOrWhiteSpace(FE) && !FE.Equals(StrFE) ? String.Concat("FE", FE, Environment.NewLine) : ""),
                            //                (!String.IsNullOrWhiteSpace(StrFP) ? String.Concat(StrFP, Environment.NewLine) : ""),
                            //                (!String.IsNullOrWhiteSpace(PaxLineNo) ? (PaxType.Equals("INF") ? String.Concat("TTP/INF/P", PaxLineNo, "/RT") : String.Concat("TTP/P", PaxLineNo, "/RT")) : "TTP/RT")
                            //        ));
                            XmlData += String.Format("<query><![CDATA[{0}]]></query>", TmpEntry);
                            XmlData += "</commandInfo>";
                        }

                        if (TmpEntry.IndexOf("OK ETICKET") != -1)
                        {
                            //### 05.PNR조회(PNR_Retrieve) #####
                            ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05"), PNR);

                            xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                            //탑승객 기준
                            TicketData = "<travellerInfo>";

                            foreach (XmlNode TravellerInfo in ResXml.SelectNodes("m:travellerInfo[m:elementManagementPassenger/m:segmentName='NM']", xnMgr))
                            {
                                string PTNum = TravellerInfo.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText;

                                foreach (XmlNode Passenger in TravellerInfo.SelectNodes("m:passengerData/m:travellerInformation/m:passenger", xnMgr))
                                {
                                    string TicketPaxType = (Passenger.SelectNodes("m:type", xnMgr).Count > 0 && Passenger.SelectSingleNode("m:type", xnMgr).InnerText.Equals("INF")) ? "INF" : "PAX";
                                    string TicketNumber = string.Empty;
                                    string CpnStatus = string.Empty;
                                    string CouponGroup = string.Empty;
                                    int flag = 0;

                                    XmlNodeList DataElementsIndiv = ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA' or m:elementManagementData/m:segmentName='FHE'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr);

                                    foreach (XmlNode TmpDataElementsIndiv in DataElementsIndiv)
                                    {
                                        if (TmpDataElementsIndiv.SelectSingleNode("m:otherDataFreetext/m:longFreetext", xnMgr).InnerText.StartsWith(TicketPaxType))
                                        {
                                            TicketNumber = Common.SplitAmadeusTicketNumber(TmpDataElementsIndiv.SelectSingleNode("m:otherDataFreetext/m:longFreetext", xnMgr).InnerText);

                                            if (!String.IsNullOrWhiteSpace(TicketNumber))
                                            {
                                                CouponGroup += "<couponGroup>";
                                                CouponGroup += String.Format("<ticketNumber>{0}</ticketNumber>", TicketNumber);
                                                CouponGroup += "</couponGroup>";

                                                PaxTicketCount++;
                                                flag++;
                                            }
                                        }
                                    }

                                    //빈 노드 기본 출력
                                    if (flag.Equals(0))
                                    {
                                        CouponGroup += "<couponGroup><ticketNumber></ticketNumber></couponGroup>";
                                    }

                                    TicketData += String.Format("<traveller><surname>{0}</surname><firstName>{1}</firstName><type>{2}</type>{3}</traveller>", Passenger.ParentNode.SelectSingleNode("m:traveller/m:surname", xnMgr).InnerText, Passenger.SelectSingleNode("m:firstName", xnMgr).InnerText.Replace(" ", ""), (Passenger.SelectNodes("m:type", xnMgr).Count > 0 ? Passenger.SelectSingleNode("m:type", xnMgr).InnerText : "ADT"), CouponGroup);
                                    PaxCount++;
                                }
                            }

                            TicketData += "</travellerInfo>";
                        }
                        else if (TmpEntry.IndexOf("MAXIMUM EXCEEDED") != -1)
                        {
                            if (RQT.Equals("WEB") || RQT.Equals("MOBILEWEB") || RQT.Equals("MOBILEAPP"))
                            {
                                DeletePaymentRequest(SNM, OID, PID, RQR, RQT, "[TicketIssuingSemiAutoPNRRS] 한도초과", GUID);
                                ErrorMessage = String.Format("[결제정보 등록 실패]{0}{0}요청하신 카드는 [한도초과]로 발권요청이 처리되지 않았습니다.{0}카드사에 확인 후 결제마감일까지 재요청 부탁드립니다.{0}{0}고객님의 카드정보는 등록과 동시에 승인거절사유로 인해 정보가 삭제처리되었습니다.{0}(단, 결제정보등록 완료문자는 인터넷에서 자동발송되는 문자입니다.)", Environment.NewLine);
                                ErrorMessageAlert = "Y";
                            }
                        }
                        else if (TmpEntry.IndexOf("INSTALLMENT NOT ALLOWED") != -1)
                        {
                            if (RQT.Equals("WEB") || RQT.Equals("MOBILEWEB") || RQT.Equals("MOBILEAPP"))
                            {
                                DeletePaymentRequest(SNM, OID, PID, RQR, RQT, "[TicketIssuingSemiAutoPNRRS] 할부불가", GUID);
                                ErrorMessage = String.Format("[결제정보 등록 실패]{0}{0}요청하신 카드는 [할부불가]로 발권요청이 처리되지 않았습니다.{0}카드사에 확인 후 결제마감일까지 재요청 부탁드립니다.{0}{0}고객님의 카드정보는 등록과 동시에 승인거절사유로 인해 정보가 삭제처리되었습니다.{0}(단, 결제정보등록 완료문자는 인터넷에서 자동발송되는 문자입니다.)", Environment.NewLine);
                                ErrorMessageAlert = "Y";
                            }
                        }
                        else if (TmpEntry.IndexOf("INSUFFICIENT FUNDS") != -1)
                        {
                            if (RQT.Equals("WEB") || RQT.Equals("MOBILEWEB") || RQT.Equals("MOBILEAPP"))
                            {
                                DeletePaymentRequest(SNM, OID, PID, RQR, RQT, "[TicketIssuingSemiAutoPNRRS] 잔액부족", GUID);
                                ErrorMessage = String.Format("[결제정보 등록 실패]{0}{0}요청하신 카드는 [잔액부족]으로 발권요청이 처리되지 않았습니다.{0}카드사에 확인 후 결제마감일까지 재요청 부탁드립니다.{0}{0}고객님의 카드정보는 등록과 동시에 승인거절사유로 인해 정보가 삭제처리되었습니다.{0}(단, 결제정보등록 완료문자는 인터넷에서 자동발송되는 문자입니다.)", Environment.NewLine);
                                ErrorMessageAlert = "Y";
                            }
                        }

                        //### 06.세션종료 #####
                        SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06"));

                        //스탁 부족시 담당자 알림(2019-08-01,김지영팀장)
                        if (TmpEntry.IndexOf("TICKET QUOTA LOW") != -1)
                        {
                            DateTime NowDate = DateTime.Now;
                            int NowHour = NowDate.Hour;

                            //23 ~ 07시는 미발송
                            if (NowHour > 7 && NowHour < 23)
                            {
                                //고재영(1481), 김지영(1641), 백태현(2011)[항공판매사업2부], 최진아(1558)[항공판매사업1부]
                                SendModeTalk(String.Format("[AMADEUS] {0} : TICKET QUOTA LOW", cm.Right(FV, 2)), "1481|1641|2011|1558");
                            }
                        }

                        ////### 07.결과XML #####
                        //XmlDocument XmlDoc = new XmlDocument();
                        //XmlDoc.LoadXml(String.Format("<ticketInfo><pnr>{0}</pnr>{1}{2}<db code=\"\"></db><message code=\"\" alert=\"{3}\"><![CDATA[{4}]]></message></ticketInfo>", PNR, TicketData, XmlData, ErrorMessageAlert, ErrorMessage));

                        ////### 08.DB업데이트 #####
                        //if (PaxTicketCount > 0)
                        //{
                        //    string[] ResultExec = TicketIssuingAutoDBRS(OID, RQR, RQT, XmlDoc.DocumentElement);

                        //    XmlDoc.SelectSingleNode("ticketInfo/db").Attributes.GetNamedItem("code").InnerText = ResultExec[0];

                        //    if (ResultExec[0].Equals("F"))
                        //        XmlDoc.SelectSingleNode("ticketInfo/db").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(ResultExec[1]));
                        //}

                        ////### 09.로그기록 #####
                        //cm.XmlFileSave(XmlDoc, mc.Name, "TicketIssuingSemiAutoPNRRS", "N", GUID);

                        ////### 10.제휴사동기화 #####
                        //if (PaxTicketCount > 0)
                        //{
                        //    //11번가(4924,4929), 티몬(4925,4926), 이베이(5020,5119)(5161,5163)(5162,5164), 네이버(4638)
                        //    if (SNM.Equals(4924) || SNM.Equals(4929) || SNM.Equals(4925) || SNM.Equals(4926) || SNM.Equals(5020) || SNM.Equals(5119) || SNM.Equals(5161) || SNM.Equals(5163) || SNM.Equals(5162) || SNM.Equals(5164) || SNM.Equals(4638))
                        //        mod.AirTicket(SNM, OID, 0, PID, RQR, RQT);
                        //}

                        //return XmlDoc.DocumentElement;
                    }
                    catch (Exception ex)
                    {
                        if (String.IsNullOrEmpty(DuplicateTicket))
                        {
                            //### FP정보 삭제 #####
                            if (SQN > 0)
                            {
                                //### 99.PNR조회(PNR_Retrieve) #####
                                XmlElement ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-99-", idx++), PNR);

                                XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                                //### 99.기존 결제정보 삭제 #####
                                foreach (XmlNode ElementManagementData in ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv/m:elementManagementData[m:segmentName='FP']", xnMgr))
                                {
                                    amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Format("{0}-99-{1}-XE", GUID, idx++), String.Concat("XE", ElementManagementData.SelectSingleNode("m:lineNumber", xnMgr).InnerText));
                                }

                                //### 99.ReceiveFrom 및 PNR저장(PNR_AddMultiElements) #####
                                amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-99-", idx++), "P-Exception");

                                //### 세션종료 #####
                                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-99-", idx++));
                            }

                            throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, 0);
                        }
                        else
                        {
                            //### 세션종료 #####
                            if (SQN > 0)
                                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-99-", idx++));

                            throw new Exception(DuplicateTicket);
                        }
                    }
                }
                
                #endregion "아마데우스"

                #region "갈릴레오"

                else if (String.Compare(GDS, "Galileo", true).Equals(0))
                {
                    XmlElement ResXml = TicketIssuingSemiAutoGalileoRS(SNM, OID, PID, FP, RQR, RQT, "", GUID);
                    cm.XmlFileSave(ResXml, mc.Name, "TicketIssuingSemiAutoGalileoRS", "N", GUID);

                    //오류시 중복 티켓번호가 넘어오는 경우가 있어 중복 체크(2019-03-21)
                    string GalileoPaxTktNo = string.Empty;

                    //탑승객수
                    PaxCount = ResXml.SelectNodes("PaxDetails/PaxIdx").Count;

                    //탑승객 정보
                    TicketData = "<travellerInfo>";

                    foreach (XmlNode PaxTktNo in ResXml.SelectNodes("PaxDetails/PaxTktNo[.!='']"))
                    {
                        if (String.IsNullOrWhiteSpace(GalileoPaxTktNo) || GalileoPaxTktNo.IndexOf(PaxTktNo.InnerText).Equals(-1))
                        {
                            GalileoPaxTktNo += String.Concat(PaxTktNo.InnerText, "/");
                            TicketData += String.Format("<traveller><surname></surname><firstName></firstName><type></type><couponGroup><ticketNumber>{0}</ticketNumber></couponGroup></traveller>", PaxTktNo.InnerText);
                            PaxTicketCount++;
                        }
                    }

                    foreach (XmlNode PaxTktNo in ResXml.SelectNodes("PaxDetails/PaxTktNo[.='']"))
                    {
                        TicketData += "<traveller><surname></surname><firstName></firstName><type></type><couponGroup><ticketNumber></ticketNumber></couponGroup></traveller>";
                    }

                    TicketData += "</travellerInfo>";

                    //엔트리 정보
                    XmlData = "<commandInfo><FTLineNo></FTLineNo><FMLineNo></FMLineNo><FELineNo></FELineNo><FVLineNo></FVLineNo><query><![CDATA[]]></query></commandInfo>";

                    //에러 정보
                    ErrorMessageAlert = "N";
                    //ErrorMessage = (ResXml.SelectNodes("WSError").Count > 0) ? String.Format("갈릴레오-{0}", ResXml.SelectSingleNode("WSError/ExceptionInfo/Message").InnerText) : ((ResXml.SelectNodes("errorMessageText").Count > 0) ? String.Format("갈릴레오-{0}", ResXml.SelectSingleNode("errorMessageText/description").InnerText) : "");
                    ErrorMessage = ResXml.SelectSingleNode("ResultErrorNo").InnerText.Equals("0") ? "" : String.Format("갈릴레오-{0}", ResXml.SelectSingleNode("ResultMsg").InnerText);
                }

                #endregion "갈릴레오"

                else
                {
                    //GKPNR
                    //if (String.Compare(GDS, "Galileo", true).Equals(0))
                    //{
                    //    GKPnrCreate(SNM, OID, PID, RQR, RQT, "");
                    //}
                    
                    throw new Exception("자동발권이 지원되지 않는 GDS입니다.");
                }

                //### 07.결과XML #####
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.LoadXml(String.Format("<ticketInfo><pnr>{0}</pnr>{1}{2}<db code=\"\"></db><message code=\"\" alert=\"{3}\"><![CDATA[{4}]]></message></ticketInfo>", PNR, TicketData, XmlData, ErrorMessageAlert, ErrorMessage));

                //### 08.DB업데이트 #####
                if (PaxTicketCount > 0)
                {
                    string[] ResultExec = TicketIssuingAutoDBRS(OID, RQR, RQT, XmlDoc.DocumentElement);

                    XmlDoc.SelectSingleNode("ticketInfo/db").Attributes.GetNamedItem("code").InnerText = ResultExec[0];

                    if (ResultExec[0].Equals("F"))
                        XmlDoc.SelectSingleNode("ticketInfo/db").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(ResultExec[1]));
                }

                //### 09.로그기록 #####
                cm.XmlFileSave(XmlDoc, mc.Name, "TicketIssuingSemiAutoPNRRS", "N", GUID);

                //### 10.제휴사동기화 #####
                if (PaxTicketCount > 0)
                {
                    //11번가(4924,4929), 티몬(4925,4926), 네이버(4638)
                    if (SNM.Equals(4924) || SNM.Equals(4929) || SNM.Equals(4925) || SNM.Equals(4926) || SNM.Equals(4638))
                        mod.AirTicket(SNM, OID, 0, PID, RQR, RQT);
                    //이베이(5020,5119)(5161,5163)(5162,5164)는 전체 탑승객에 대한 티켓번호가 존재하는 경우에만 동기화(2019-02-28,김경미매니저)
                    else if (SNM.Equals(5020) || SNM.Equals(5119) || SNM.Equals(5161) || SNM.Equals(5163) || SNM.Equals(5162) || SNM.Equals(5164))
                    {
                        if (PaxTicketCount.Equals(PaxCount))
                            mod.AirTicket(SNM, OID, 0, PID, RQR, RQT);
                    }
                }

                return XmlDoc.DocumentElement;
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("SNM", SNM);
                ex.Data.Add("GDS", GDS);
                ex.Data.Add("PNR", PNR);
                ex.Data.Add("FT", FT);
                ex.Data.Add("FM", FM);
                ex.Data.Add("FE", FE);
                ex.Data.Add("FV", FV);
                ex.Data.Add("FP", FP.OuterXml.Replace("<![CDATA[", "<!(CDATA(").Replace("]]>", "))>"));
                ex.Data.Add("TIRN", TIRN);

                return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, 0).ToErrors;
            }
        }

        /// <summary>
        /// 자동발권완료 여부 등록
        /// </summary>
        /// <param name="OID">모두투어 주문번호</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기</param>
        /// <param name="ResXml">발권XML</param>
        /// <returns></returns>
        public string[] TicketIssuingAutoDBRS(int OID, int RQR, string RQT, XmlElement ResXml)
        {
            string[] ResultExec = new String[2] { "F", "" };

            try
            {
                using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand
                    {
                        Connection = conn,
                        CommandTimeout = 60,
                        CommandType = CommandType.StoredProcedure,
                        CommandText = "DBO.WSV_T_아이템예약_해외항공_발권"
                    })
                    {
                        cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                        cmd.Parameters.Add("@주문아이템번호", SqlDbType.Int, 0);
                        cmd.Parameters.Add("@발권요청여부", SqlDbType.Char, 1);
                        cmd.Parameters.Add("@발권완료여부", SqlDbType.Char, 1);
                        cmd.Parameters.Add("@발권", SqlDbType.Xml, -1);
                        cmd.Parameters.Add("@수정자", SqlDbType.Int, 0);
                        cmd.Parameters.Add("@수정경로", SqlDbType.VarChar, 20);
                        cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                        cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                        cmd.Parameters["@주문번호"].Value = OID;
                        cmd.Parameters["@주문아이템번호"].Value = 0;
                        cmd.Parameters["@발권요청여부"].Value = Convert.DBNull;
                        cmd.Parameters["@발권완료여부"].Value = "Y";
                        cmd.Parameters["@발권"].Value = ResXml.OuterXml;
                        cmd.Parameters["@수정자"].Value = RQR;
                        cmd.Parameters["@수정경로"].Value = RQT;
                        cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                        cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                        try
                        {
                            conn.Open();
                            cmd.ExecuteNonQuery();

                            ResultExec[0] = cmd.Parameters["@결과"].Value.ToString();

                            if (ResultExec[0].Equals("F"))
                                ResultExec[1] = cmd.Parameters["@에러메시지"].Value.ToString();
                        }
                        catch (Exception ex)
                        {
                            new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, 0);
                            ResultExec[0] = "F";
                            ResultExec[1] = ex.ToString();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, 0);
                ResultExec[0] = "F";
                ResultExec[1] = ex.ToString();
            }

            return ResultExec;
        }

        #endregion "자동발권(Command)"

        #region "자동 발권전 실행(발권 가능여부 체크 및 발권용 운임 재계산)"

        //[WebMethod(Description = "자동 발권전 실행(발권 가능여부 체크 및 발권용 운임 재계산)")]
        public XmlElement TicketIssuingBeforeTEST()
        {
            int SNM = 2;
            int OID = 36740019;
            int PID = 5283786;

            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;


            //아마데우스 세션 정보
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            //DB에 저장된 예약정보
            XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");

            //자동발권용 운임재계산 결과
            XmlElement SearchETicketingXml = null;

            if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count.Equals(0))
                throw new Exception("예약 정보가 존재하지 않습니다.");

            //11번가 자동발권 오류현상으로 일시적 제한
            //if ((SNM.Equals(4924) || SNM.Equals(4929)) && XmlDBBooking.SelectNodes("item4").Count > 1)
            //    throw new Exception("자동발권이 불가능합니다.");

            string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
            string AirCode = XmlDBBooking.SelectSingleNode("item3/마케팅항공사").InnerText;
            string AgentCode = XmlDBBooking.SelectSingleNode("item2/거래처번호").InnerText;

            //결과
            XmlElement ResXml;
            XmlElement ResPricing;
            XmlElement RefXml;
            XmlElement TSTXml;

            //네임스페이스
            XmlNamespaceManager xnMgr;
            XmlNamespaceManager xnMgrPricing;
            XmlNamespaceManager xnMgrTST;

            XmlDocument FareXml = null;
            string ValidatingCarrier = string.Empty;

            if (XmlDBBooking.SelectNodes("item3/요금XML").Count > 0)
            {
                FareXml = new XmlDocument();
                FareXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                ValidatingCarrier = FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("pvc").InnerText;
            }

            //### 01.세션생성 ##### (2015-09-08,오프라인 예약일 경우 SELK138AB로 Pricing 진행,김지영과장)
            XmlElement Session = amd.Authenticate(XmlDBBooking.SelectSingleNode("item3/품목코드").InnerText.Equals("OA") ? 2 : cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), String.Concat(GUID, "-A-01"));

            SID = Session.SelectSingleNode("session/sessionId").InnerText;
            SCT = Session.SelectSingleNode("session/securityToken").InnerText;
            SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

            //### 02.PNR조회(PNR_Retrieve) #####
            ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-A-02"), XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText);

            xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
            xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

            //한국출발여부
            bool DepartureFromKorea = Common.KoreaOfAirport(ResXml.SelectSingleNode("m:originDestinationDetails/m:itineraryInfo/m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText);

            //### 03-1.운임Pricing(Fare_PricePNRWithBookingClass) #####
            ResXml = amd.PricePNRWithBookingClassPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-A-03"), (String.IsNullOrWhiteSpace(ValidatingCarrier) ? ((ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo", xnMgr).Count > 0 && ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).InnerText : null) : ValidatingCarrier), (DepartureFromKorea) ? "RP" : "", (FareXml != null) ? FareXml.SelectSingleNode("priceIndex/paxFareGroup") : null);

            //오류 결과일 경우 예외 처리
            xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
            xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassPricing"));

            if (ResXml.SelectNodes("m:applicationError", xnMgr).Count > 0)
            {
                throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgr).InnerText);
            }

            //### 03-2.운임Pricing(Fare_PricePNRWithBookingClass) #####
            //ResPricing = amd.PricePNRWithBookingClassPricing3RS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-A-03"), "", ValidatingCarrier);

            ////오류 결과일 경우 예외 처리
            //xnMgrPricing = new XmlNamespaceManager(ResPricing.OwnerDocument.NameTable);
            //xnMgrPricing.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassKEPricing"));

            //if (ResPricing.SelectNodes("m:applicationError", xnMgrPricing).Count > 0)
            //{
            //    throw new Exception(ResPricing.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgrPricing).InnerText);
            //}

            //if (ResXml.SelectNodes("m:tstData", xnMgr).Count != ResPricing.SelectNodes("m:fareList", xnMgrPricing).Count)
            //{
            //    if (ResXml.SelectNodes("m:tstData", xnMgr).Count < ResPricing.SelectNodes("m:fareList", xnMgrPricing).Count)
            //    {
            //        //운임 및 FARE BASIS 비교
            //        foreach (XmlNode TstData in ResXml.SelectNodes("m:tstData", xnMgr))
            //        {
            //            string TstFare = TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:amount", xnMgr).InnerText;
            //            string TstFareBasis = string.Empty;

            //            foreach (XmlNode FareElement in TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr))
            //                TstFareBasis += String.Concat(FareElement.SelectSingleNode("m:primaryCode", xnMgr).InnerText, FareElement.SelectSingleNode("m:fareBasis", xnMgr).InnerText);

            //            foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList", xnMgrPricing))
            //            {
            //                //운임비교
            //                if (TstFare != FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareAmount", xnMgrPricing).InnerText)
            //                    ResPricing.RemoveChild(FareList);
            //                else
            //                {
            //                    //FARE BASIS 비교
            //                    string FareBasis = string.Empty;

            //                    foreach (XmlNode FareBasisDetails in FareList.SelectNodes("m:segmentInformation/m:fareQualifier/m:fareBasisDetails", xnMgrPricing))
            //                        FareBasis += String.Concat(FareBasisDetails.SelectSingleNode("m:primaryCode", xnMgrPricing).InnerText, FareBasisDetails.SelectSingleNode("m:fareBasisCode", xnMgrPricing).InnerText);

            //                    if (TstFareBasis != FareBasis)
            //                        ResPricing.RemoveChild(FareList);
            //                }
            //            }
            //        }
            //    }
            //}
            //### 04.TST저장(Ticket_CreateTSTFromPricing) #####
            TSTXml = amd.CreateTSTFromPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-A-04"), ResXml, "Fare_PricePNRWithBookingClassPricing");


            //오류 결과일 경우 예외 처리
            xnMgrTST = new XmlNamespaceManager(TSTXml.OwnerDocument.NameTable);
            xnMgrTST.AddNamespace("m", AmadeusConfig.NamespaceURL("Ticket_CreateTSTFromPricing"));

            if (TSTXml.SelectNodes("m:applicationError", xnMgrTST).Count > 0)
            {
                throw new Exception(TSTXml.SelectSingleNode("m:applicationError/m:errorText/m:errorFreeText", xnMgrTST).InnerText);
            }

            //### 05.ReceiveFrom(PNR_AddMultiElements) #####
            RefXml = amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-A-05"), String.Concat("P-", "WEBSERVICE"));

            //### 06.PNR조회(PNR_Retrieve) #####
            ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-A-06"), XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText);

            //### 07.세션종료 #####
            SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-A-07"));

            return ResXml;
        }

        /// <summary>
        /// 자동 발권전 실행(발권 가능여부 체크 및 발권용 운임 재계산)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">모두투어 주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RIP">요청자IP</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "자동 발권전 실행(발권 가능여부 체크 및 발권용 운임 재계산)")]
        public XmlElement TicketIssuingBefore(int SNM, int OID, int PID, string RIP, int RQR, string RQT)
        {
            int ServiceNumber = 510;
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
            Int64 LogSequence = 0;

            //발권요청번호
            int ReqNumber = 0;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = ServiceNumber;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RIP;
                sqlParam[12].Value = RQR;

                LogSequence = log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                XmlDocument XmlTmp = new XmlDocument();
                string Xml = string.Empty;

                Xml += "<TicketIssuingBeforeRQ>";
                Xml += String.Format("<OID>{0}</OID>", OID);
                Xml += String.Format("<PID>{0}</PID>", PID);
                Xml += String.Format("<RIP>{0}</RIP>", RIP);
                Xml += String.Format("<RQR>{0}</RQR>", RQR);
                Xml += String.Format("<RQT>{0}</RQT>", RQT);
                Xml += "</TicketIssuingBeforeRQ>";

                XmlTmp.LoadXml(Xml);
                cm.XmlFileSave(XmlTmp, mc.Name, "TicketIssuingBeforeRQ", "N", GUID);
            }
            finally { }

            try
            {
                //아마데우스 세션 정보
                string SID = String.Empty;
                string SCT = String.Empty;
                int SQN = 0;

                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");

                //자동발권용 운임재계산 결과
                XmlElement SearchETicketingXml = null;

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count.Equals(0))
                    throw new Exception("예약 정보가 존재하지 않습니다.");

                //11번가 자동발권 오류현상으로 일시적 제한
                //if ((SNM.Equals(4924) || SNM.Equals(4929)) && XmlDBBooking.SelectNodes("item4").Count > 1)
                //    throw new Exception("자동발권이 불가능합니다.");

                //세이버 FMS운임 예약은 자동발권 불가(2019-03-06,김경미매니저)
                //if (XmlDBBooking.SelectSingleNode("item3/GDS구분").InnerText.Equals("FMS"))
                //    throw new Exception("FMS운임은 자동발권이 불가능합니다.");

                string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
                string AirCode = XmlDBBooking.SelectSingleNode("item3/마케팅항공사").InnerText;
                string AgentCode = XmlDBBooking.SelectSingleNode("item2/거래처번호").InnerText;

                #region "01.운임저장(SearchBookingPriceTSTRS)(Amadeus)"

                if (String.Compare(GDS, "Amadeus", true).Equals(0))
                {
                    try
                    {
                        //결과
                        XmlElement ResXml;
                        XmlElement ResPricing;
                        XmlElement RefXml;
                        XmlElement TSTXml;

                        //네임스페이스
                        XmlNamespaceManager xnMgr;
                        XmlNamespaceManager xnMgrPricing;
                        XmlNamespaceManager xnMgrTST;

                        XmlDocument FareXml = null;
                        string ValidatingCarrier = string.Empty;

                        if (XmlDBBooking.SelectNodes("item3/요금XML").Count > 0)
                        {
                            FareXml = new XmlDocument();
                            FareXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                            ValidatingCarrier = FareXml.SelectSingleNode("priceIndex/summary").Attributes.GetNamedItem("pvc").InnerText;
                        }

                        //### 01.세션생성 ##### (2015-09-08,오프라인 예약일 경우 SELK138AB로 Pricing 진행,김지영과장)
                        XmlElement Session = amd.Authenticate(XmlDBBooking.SelectSingleNode("item3/품목코드").InnerText.Equals("OA") ? 2 : cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), String.Concat(GUID, "-A-01"));

                        SID = Session.SelectSingleNode("session/sessionId").InnerText;
                        SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                        SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                        //### 02.PNR조회(PNR_Retrieve) #####
                        ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-A-02"), XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText);

                        xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                        xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                        //한국출발여부
                        bool DepartureFromKorea = Common.KoreaOfAirport(ResXml.SelectSingleNode("m:originDestinationDetails/m:itineraryInfo/m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText);

                        //### 03-1.운임Pricing(Fare_PricePNRWithBookingClass) #####
                        ResXml = amd.PricePNRWithBookingClassPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-A-03"), (String.IsNullOrWhiteSpace(ValidatingCarrier) ? ((ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo", xnMgr).Count > 0 && ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:originDestinationDetails/m:itineraryInfo/m:itineraryReservationInfo/m:reservation/m:companyId", xnMgr).InnerText : null) : ValidatingCarrier), "", (FareXml != null) ? FareXml.SelectSingleNode("priceIndex/paxFareGroup") : null);

                        //오류 결과일 경우 예외 처리
                        xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                        xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassPricing"));

                        if (ResXml.SelectNodes("m:applicationError", xnMgr).Count > 0)
                        {
                            throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgr).InnerText);
                        }

                        ////### 03-2.운임Pricing(Fare_PricePNRWithBookingClass) #####
                        //ResPricing = amd.PricePNRWithBookingClassPricing3RS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-A-03"), "", ValidatingCarrier);

                        ////오류 결과일 경우 예외 처리
                        //xnMgrPricing = new XmlNamespaceManager(ResPricing.OwnerDocument.NameTable);
                        //xnMgrPricing.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassKEPricing"));

                        //if (ResPricing.SelectNodes("m:applicationError", xnMgrPricing).Count > 0)
                        //{
                        //    throw new Exception(ResPricing.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgrPricing).InnerText);
                        //}

                        //if (ResXml.SelectNodes("m:tstData", xnMgr).Count != ResPricing.SelectNodes("m:fareList", xnMgrPricing).Count)
                        //{
                        //    if (ResXml.SelectNodes("m:tstData", xnMgr).Count < ResPricing.SelectNodes("m:fareList", xnMgrPricing).Count)
                        //    {
                        //        //운임 및 FARE BASIS 비교
                        //        foreach (XmlNode TstData in ResXml.SelectNodes("m:tstData", xnMgr))
                        //        {
                        //            string TstFare = TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:amount", xnMgr).InnerText;
                        //            string TstFareBasis = string.Empty;

                        //            foreach (XmlNode FareElement in TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr))
                        //                TstFareBasis += String.Concat(FareElement.SelectSingleNode("m:primaryCode", xnMgr).InnerText, FareElement.SelectSingleNode("m:fareBasis", xnMgr).InnerText);

                        //            foreach (XmlNode FareList in ResPricing.SelectNodes("m:fareList", xnMgrPricing))
                        //            {
                        //                //운임비교
                        //                if (TstFare != FareList.SelectSingleNode("m:fareDataInformation/m:fareDataSupInformation[m:fareDataQualifier='B']/m:fareAmount", xnMgrPricing).InnerText)
                        //                    ResPricing.RemoveChild(FareList);
                        //                else
                        //                {
                        //                    //FARE BASIS 비교
                        //                    string FareBasis = string.Empty;

                        //                    foreach (XmlNode FareBasisDetails in FareList.SelectNodes("m:segmentInformation/m:fareQualifier/m:fareBasisDetails", xnMgrPricing))
                        //                        FareBasis += String.Concat(FareBasisDetails.SelectSingleNode("m:primaryCode", xnMgrPricing).InnerText, FareBasisDetails.SelectSingleNode("m:fareBasisCode", xnMgrPricing).InnerText);

                        //                    if (TstFareBasis != FareBasis)
                        //                        ResPricing.RemoveChild(FareList);
                        //                }
                        //            }
                        //        }
                        //    }
                        //}

                        //### 04.TST저장(Ticket_CreateTSTFromPricing) #####
                        TSTXml = amd.CreateTSTFromPricingRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-A-04"), ResXml, "Fare_PricePNRWithBookingClassPricing");

                        //오류 결과일 경우 예외 처리
                        xnMgrTST = new XmlNamespaceManager(TSTXml.OwnerDocument.NameTable);
                        xnMgrTST.AddNamespace("m", AmadeusConfig.NamespaceURL("Ticket_CreateTSTFromPricing"));

                        if (TSTXml.SelectNodes("m:applicationError", xnMgrTST).Count > 0)
                        {
                            throw new Exception(TSTXml.SelectSingleNode("m:applicationError/m:errorText/m:errorFreeText", xnMgrTST).InnerText);
                        }

                        //### 05.ReceiveFrom(PNR_AddMultiElements) #####
                        RefXml = amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-A-05"), String.Concat("P-", "WEBSERVICE"));

                        //### 06.세션종료 #####
                        SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-A-06"));
                    }
                    catch (Exception)
                    {
                        //TST 실패여부 체크하지 않는다(2017-09-26,김지영차장)
                        //DeletePaymentRequest(SNM, OID, RQR, RQT, "[TicketIssuingBefore] 01.운임저장(SearchBookingPriceTSTRS)", LogGUID);
                        //throw new Exception(String.Concat("01.운임저장(TST) 실패 : ", ex.ToString()));
                    }
                }

                #endregion

                #region "결제가능거래처 및 시간 체크"

                DateTime NowDate = DateTime.Now;
                int NowTime = Convert.ToInt32(NowDate.ToString("HHmm"));
                bool PayableOnline = false; //발권요청 가능 여부
                bool PayableAllday = false; //발권요청 24시간 가능 여부
                bool PayImpossible = false; //발권요청 불가능 시간으로 체크할 지 여부
                bool WorkdayYN = cm.WorkdayYN(NowDate.ToString("yyyy-MM-dd"));
                int[] PayableTime = new Int32[6]{ 0, 0, 0, 0, 0, 0 };

                switch (XmlDBBooking.SelectSingleNode("item2/거래처번호").InnerText)
                {
                    case "81202":   //모두투어
                    case "83549":   //모두투어
                    case "2045126": //모두투어
                    case "2338487": //모두투어
                    case "2894545": //[ON-BP]나라투어
                    case "1348321": //[ON-BP]투어앤모두
                    case "1007864": //[ON-BP]제이엔투어클럽
                    case "1886421": //스카이스캐너(항공)
                        PayableOnline = true;
                        PayableAllday = false;
                        PayImpossible = false;
                        PayableTime[0] = 0830;  //평일 시작시간
                        PayableTime[1] = 2000;  //평일 마침시간
                        PayableTime[2] = 0830;  //주말 시작시간
                        PayableTime[3] = 1600;  //주말 마침시간
                        PayableTime[4] = 0130;  //발권요청불가 시작시간
                        PayableTime[5] = 0830;  //발권요청불가 마감시간
                        break;
                    case "1773000": //신한카드
                    case "2100508": //카약(국제선)
                    case "2100319": //카카오
                    case "1930904": //위메프(항공)
                    case "1847904": //네이버(항공)
                    case "2312233": //씨티카드(항공)
                    case "1182747": //[ON-BP]스타일투어
                    case "1313488": //[ON-BP]투어비지니스
                    case "1283251": //[ON-BP]여행디자인
                    case "1132156": //[ON-BP]시도여행사
                    case "14015":   //[ON-BP]예약센터
                    case "1250283": //[ON-BP]마이투어
                    case "2752850": //11번가
                    case "2748253": //티몬
                    case "2753374": //티몬
                    case "3501914": //G마켓
                    case "3501927": //옥션
                    case "3501922": //G9
                    case "5313434": //우리카드(항공)
                        PayableOnline = true;
                        PayImpossible = false;
                        PayableTime[0] = 0830;  //평일 시작시간
                        PayableTime[1] = 2000;  //평일 마침시간
                        PayableTime[2] = 0830;  //주말 시작시간
                        PayableTime[3] = 1600;  //주말 마침시간
                        break;
                    case "1354708": //이제너두(항공)
                    case "1559048": //이제너두(포인트몰_항공)
                    case "1855689": //홈플러스(항공)
                    case "1850336": //라이나생명(항공)
                    case "1863592": //라이나생명(항공)
                    case "1833194": //투어캐빈(항공)
                    case "2255030": //bizmode
                    case "1190881": //[ON-BP]투어홀릭
                    case "71373":   //[ON-BP]모두여행사
                    case "1627401": //삼성카드(항공복지몰)
                    case "1663484": //삼성카드(항공)
                    case "3662165": //삼성카드(항공)
                        PayableOnline = true;
                        PayImpossible = false;
                        PayableTime[0] = 0830;  //평일 시작시간
                        PayableTime[1] = 1700;  //평일 마침시간
                        PayableTime[2] = 0830;  //주말 시작시간
                        PayableTime[3] = 1600;  //주말 마침시간
                        break;
                }

                if (!PayableOnline)
                {
                    DeletePaymentRequest(SNM, OID, PID, RQR, RQT, "[TicketIssuingBefore] 결제가능거래처 및 시간 체크 - PayableOnline", LogGUID);
                    throw new Exception("발권요청이 불가능한 거래처 입니다.");
                }

                if (!PayableAllday)
                {
                    if (PayImpossible)
                    {
                        if (NowTime > PayableTime[4] && NowTime < PayableTime[5])
                        {
                            DeletePaymentRequest(SNM, OID, RQR, PID, RQT, "[TicketIssuingBefore] 결제가능거래처 및 시간 체크 - PayImpossible", LogGUID);
                            throw new Exception("발권요청이 불가능한 시간 입니다.");
                        }
                    }
                    else
                    {
                        if (WorkdayYN)
                        {
                            if (NowTime < PayableTime[0] || NowTime > PayableTime[1])
                            {
                                DeletePaymentRequest(SNM, OID, PID, RQR, RQT, "[TicketIssuingBefore] 결제가능거래처 및 시간 체크 - WorkdayYN", LogGUID);
                                throw new Exception("발권요청이 불가능한 시간 입니다.");
                            }
                        }
                        else
                        {
                            if (NowTime < PayableTime[2] || NowTime > PayableTime[3])
                            {
                                DeletePaymentRequest(SNM, OID, RQR, PID, RQT, "[TicketIssuingBefore] 결제가능거래처 및 시간 체크", LogGUID);
                                throw new Exception("발권요청이 불가능한 시간 입니다.");
                            }
                        }
                    }
                }

                #endregion

                #region "TL 체크로직"

                //TL체크하지 않는다(2017-09-26,김지영차장)
                //if (cm.DateDiff("m", NowDate.ToString("yyyy-MM-dd HH:mm"), XmlDBBooking.SelectSingleNode("item3/TL").InnerText) < 0)
                //{
                //    DeletePaymentRequest(SNM, OID, RQR, RQT, "[TicketIssuingBefore] TL 체크로직", LogGUID);
                //    throw new Exception("발권요청 시한이 지난 예약입니다.");
                //}

                #endregion

                #region "QA질문 체크로직"

                bool QA = false;

                try
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWEB"].ConnectionString);
                        SqlDataReader dr = null;

                        cmd.Connection = conn;
                        cmd.CommandTimeout = 10;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "DBO.WSP_S_CMN_항공호텔예약문의리스트_주문별";

                        cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                        cmd.Parameters["@주문번호"].Value = OID;

                        try
                        {
                            conn.Open();
                            dr = cmd.ExecuteReader();

                            while (dr.Read())
                            {
                                if (dr["답변상태"].ToString().Equals("0"))
                                {
                                    QA = true;
                                    break;
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            throw new Exception(ex.ToString());
                        }
                        finally
                        {
                            dr.Dispose();
                            dr.Close();
                            conn.Close();
                        }
                    }
                }
                catch (Exception) { }

                if (QA)
                    throw new Exception("QA 문의에 대한 답변이 완료되지 않았습니다.");

                #endregion

                #region "02.발권요청 금액 체크"

                //결제요청금액
                int CardPriceReq = 0;
                int BankPriceReq = 0;
                int CouponPriceReq = 0;
                int OKCashbagPriceReq = 0;
                int TMembershipPriceReq = 0;
                int TourMileagesPriceReq = 0;

                //입금총금액(할인쿠폰/투어마일리지 등 금액 제외)
                int PayGross = 0;

                //카드결제요청일 경우 소유자명/생년월일 등록여부 체크
                bool CardInfoCheck = true;

                try
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString);
                        SqlDataReader dr = null;

                        cmd.Connection = conn;
                        cmd.CommandTimeout = 10;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "DBO.WSV_S_아이템예약_해외항공_결제요청_상세";

                        cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                        cmd.Parameters.Add("@예약자번호", SqlDbType.Int, 0);
                        cmd.Parameters.Add("@요청자IP", SqlDbType.VarChar, 30);

                        cmd.Parameters["@주문번호"].Value = OID;
                        cmd.Parameters["@예약자번호"].Value = PID;
                        cmd.Parameters["@요청자IP"].Value = Convert.DBNull;

                        try
                        {
                            conn.Open();
                            dr = cmd.ExecuteReader();

                            while (dr.Read())
                            {
                                if (dr["카드결제여부"].ToString().Equals("Y"))
                                {
                                    CardPriceReq += Convert.ToInt32(dr["카드결제금액"]);

                                    if (String.IsNullOrWhiteSpace(dr["소유자명"].ToString()) || String.IsNullOrWhiteSpace(dr["생년월일"].ToString()))
                                        CardInfoCheck = false;
                                }

                                if (dr["계좌이체여부"].ToString().Equals("Y"))
                                    BankPriceReq += Convert.ToInt32(dr["계좌이체금액"]);

                                if (dr["할인쿠폰여부"].ToString().Equals("Y"))
                                    CouponPriceReq += Convert.ToInt32(dr["할인쿠폰금액"]);

                                if (dr["OK캐쉬백여부"].ToString().Equals("Y"))
                                    OKCashbagPriceReq += Convert.ToInt32(dr["OK캐쉬백금액"]);

                                if (dr["T멤버십여부"].ToString().Equals("Y"))
                                    TMembershipPriceReq += Convert.ToInt32(dr["T멤버십금액"]);

                                if (dr["투어마일리지여부"].ToString().Equals("Y"))
                                    TourMileagesPriceReq += Convert.ToInt32(dr["투어마일리지금액"]);
                            }

                            dr.NextResult();
                            dr.NextResult();

                            if (dr.Read())
                                PayGross = Convert.ToInt32(dr["입금제외수납액"]);
                        }
                        catch (Exception ex)
                        {
                            throw new Exception(ex.ToString());
                        }
                        finally
                        {
                            dr.Dispose();
                            dr.Close();
                            conn.Close();
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception(String.Concat("02.발권요청금액 체크 실패 : ", ex.ToString()));
                }

                //결제해야 할 금액(모두웨어 기준)
                int TotalAmount = 0;

                //결제요청 금액
                int ReqTotalAmount = CardPriceReq + BankPriceReq + CouponPriceReq + OKCashbagPriceReq + TMembershipPriceReq + TourMileagesPriceReq - PayGross;

                foreach (XmlNode PaxInfo in XmlDBBooking.SelectNodes("item4"))
                    TotalAmount += cm.RequestInt(PaxInfo.SelectSingleNode("총요금").InnerText);

                //if (TotalAmount != ReqTotalAmount)
                //    throw new Exception("02.발권요청 금액 체크 실패 : 결제금액과 요청금액이 상이합니다.");
                
                //3000원 차이는 무시하고 진행(2018-09-17,김지영매니저)
                if (Math.Abs(TotalAmount - ReqTotalAmount) >= 3000)
                    throw new Exception("02.발권요청 금액 체크 실패 : 결제금액과 요청금액이 상이합니다.");

                #endregion

                //카드결제인 경우에만 발권요청 처리(2017-01-18,정성하과장)
                if (BankPriceReq.Equals(0) && CardInfoCheck)
                {
                    #region "03.발권요청(TicketIssuingRequest)"

                    try
                    {
                        using (SqlCommand cmd = new SqlCommand())
                        {
                            SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString);
                            SqlDataReader dr = null;

                            cmd.Connection = conn;
                            cmd.CommandTimeout = 10;
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.CommandText = "DBO.USP_T_CRS_고객발권요청발권요청";

                            cmd.Parameters.Add("@요청구분", SqlDbType.Char, 1);
                            cmd.Parameters.Add("@발권요청번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@주문아이템번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@부서번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@직원번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@발권담당", SqlDbType.VarChar, 100);
                            cmd.Parameters.Add("@PNR", SqlDbType.VarChar, 50);
                            cmd.Parameters.Add("@PNRCOPY", SqlDbType.NVarChar, 2000);
                            cmd.Parameters.Add("@프로모션", SqlDbType.VarChar, 10);
                            cmd.Parameters.Add("@TASF할부", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@TASF금액", SqlDbType.BigInt, 0);
                            cmd.Parameters.Add("@요청상태", SqlDbType.Char, 2);
                            cmd.Parameters.Add("@USEID", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@자동발권요청여부", SqlDbType.Char, 1);
                            cmd.Parameters.Add("@수정경로", SqlDbType.VarChar, 20);
                            cmd.Parameters.Add("@PRICETST정보", SqlDbType.NVarChar, 4000);
                            cmd.Parameters.Add("@요청자구분", SqlDbType.Char, 2);

                            cmd.Parameters["@요청구분"].Value = "1";
                            cmd.Parameters["@발권요청번호"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@주문번호"].Value = OID;
                            cmd.Parameters["@주문아이템번호"].Value = XmlDBBooking.SelectSingleNode("item3/주문아이템번호").InnerText;
                            cmd.Parameters["@부서번호"].Value = XmlDBBooking.SelectSingleNode("item/발권부서번호").InnerText;
                            cmd.Parameters["@직원번호"].Value = XmlDBBooking.SelectSingleNode("item/발권직원번호").InnerText;
                            cmd.Parameters["@발권담당"].Value = String.Format("[{0}] {1}", XmlDBBooking.SelectSingleNode("item/발권부서명").InnerText, XmlDBBooking.SelectSingleNode("item/발권직원명").InnerText);
                            cmd.Parameters["@PNR"].Value = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;
                            cmd.Parameters["@PNRCOPY"].Value = Convert.DBNull;
                            cmd.Parameters["@프로모션"].Value = Convert.DBNull;
                            cmd.Parameters["@TASF할부"].Value = Convert.DBNull;
                            cmd.Parameters["@TASF금액"].Value = Convert.DBNull;
                            cmd.Parameters["@요청상태"].Value = Convert.DBNull;
                            cmd.Parameters["@USEID"].Value = PID;
                            cmd.Parameters["@자동발권요청여부"].Value = Convert.DBNull;
                            cmd.Parameters["@수정경로"].Value = "웹서비스";
                            cmd.Parameters["@PRICETST정보"].Value = Convert.DBNull;
                            cmd.Parameters["@요청자구분"].Value = "03";

                            try
                            {
                                conn.Open();
                                dr = cmd.ExecuteReader();

                                if (dr.Read())
                                {
                                    if (dr["자동발권처리여부"].ToString().Equals("Y"))
                                        ReqNumber = Convert.ToInt32(dr["요청일련번호"]);
                                }
                            }
                            catch (Exception ex)
                            {
                                throw new Exception(ex.ToString());
                            }
                            finally
                            {
                                dr.Dispose();
                                dr.Close();
                                conn.Close();
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new Exception(String.Concat("03.발권요청 실패 : ", ex.ToString()));
                    }

                    if (ReqNumber.Equals(0))
                        throw new Exception("03.발권요청이 실패하였습니다.");

                    #endregion
                }

                if (!String.Compare(GDS, "Amadeus", true).Equals(0) && !String.Compare(GDS, "Galileo", true).Equals(0))
                    throw new Exception("자동발권이 불가능한 GDS 입니다.");
                else if (String.Compare(AirCode, "OZ", true).Equals(0))
                //else if (String.Compare(AirCode, "OZ", true).Equals(0) && !String.Compare(GDS, "Galileo", true).Equals(0))
                    throw new Exception("아시아나는 자동발권이 불가능한 항공사 입니다.");

                //Glilieo 서버 공사로 인해 잠시 자동발권 중단(2019-06-28,김경미매니저)
                //if (String.Compare(GDS, "Galileo", true).Equals(0))
                //{
                //    //(2019/06/29 00:00 ~ 15:00)
                //    if (NowDate.ToString("yyyy-MM-dd").Equals("2019-06-29") && NowDate.Hour < 15)
                //    {
                //        throw new Exception("갈릴레오 서버 공사로 자동발권이 불가능합니다.");
                //    }
                //}

                #region "04.발권용 운임재계산(SearchETicketingRS)(Amadeus,Galileo)"

                if (String.Compare(GDS, "Amadeus", true).Equals(0) || String.Compare(GDS, "Galileo", true).Equals(0))
                {
                    try
                    {
                        SearchETicketingXml = SearchETicketing(OID, PID, XmlDBBooking, String.Concat(GUID, "-B"));
                    }
                    catch (Exception ex)
                    {
                        throw new Exception(String.Concat("04.발권용 운임재계산 실패 : ", ex.ToString()));
                    }

                    //11번가는 운임재계산 실패시 발권요청 상태값 변경하지 않는다(2017-07-21,김지영차장)
                    if (!SNM.Equals(4924) && !SNM.Equals(4929))
                    {
                        if (SearchETicketingXml == null || SearchETicketingXml.SelectNodes("errorMessageText").Count > 0)
                            TicketIssuingRequestStatusSub(ReqNumber, "1G", "", GUID);
                    }
                }

                #endregion

                //판매명세번호 추가(2019-08-28)
                foreach (XmlNode PaxData in SearchETicketingXml.SelectNodes("travellerInfo/paxData/pax"))
                {
                    if (XmlDBBooking.SelectNodes(String.Format("item4[구분='{0}'][영문성명='{1}/{2}']", PaxData.Attributes.GetNamedItem("ptc").InnerText, PaxData.Attributes.GetNamedItem("psn").InnerText, PaxData.Attributes.GetNamedItem("pfn").InnerText)).Count > 0)
                        PaxData.Attributes.GetNamedItem("nsi").InnerText = XmlDBBooking.SelectSingleNode(String.Format("item4[구분='{0}'][영문성명='{1}/{2}']/판매명세번호", PaxData.Attributes.GetNamedItem("ptc").InnerText, PaxData.Attributes.GetNamedItem("psn").InnerText, PaxData.Attributes.GetNamedItem("pfn").InnerText)).InnerText;
                }

                //소아 or 유아 존재 여부
                bool OnlyADT = XmlDBBooking.SelectNodes("item4[구분!='ADT']").Count.Equals(0) ? true : false;

                //결과에 발권요청번호 추가
                XmlNode IssueRequestNo = SearchETicketingXml.OwnerDocument.CreateElement("issueRequestNo");
                IssueRequestNo.InnerText = ReqNumber.ToString();

                SearchETicketingXml.SelectSingleNode("bookingInfo").AppendChild(IssueRequestNo);

                //자동발권 가능 여부 추가
                //투어마일리지 결제가 존재할 경우 자동발권 불가(2018-03-12,김경미차장)
                XmlNode AutoTicketing = SearchETicketingXml.OwnerDocument.CreateElement("autoTicketing");
                AutoTicketing.InnerText = (TourMileagesPriceReq > 0) ? "N" : ((BankPriceReq.Equals(0) && CardInfoCheck) ? "Y" : "N");

                //11번가는 전체 자동발권 불가(2017-07-05,김지영차장)
                //if (SNM.Equals(4924) || SNM.Equals(4929))
                //    AutoTicketing.InnerText = "N";
                //else if (!String.Compare(GDS, "Amadeus", true).Equals(0) && !String.Compare(GDS, "Galileo", true).Equals(0))
                //    AutoTicketing.InnerText = "N";
                //else if (String.Compare(AirCode, "OZ", true).Equals(0))
                //    AutoTicketing.InnerText = "N";

                //OS항공 유소아 포함시 자동발권 불가(2019-08-27,김경미매니저)
                if (String.Compare(AirCode, "OS", true).Equals(0) && !OnlyADT)
                    AutoTicketing.InnerText = "N";

                SearchETicketingXml.SelectSingleNode("bookingInfo").AppendChild(AutoTicketing);

                //카드 자동발권 가능 여부 추가(대한항공 이니시스 카드결제)
                //모두닷컴(2,3915)에 대해서는 대한항공이어도 Key-in 방식 허용(2017-07-03,김지영차장)
                //스카이스캐너(4664,4837)에 대해서는 대한항공이어도 Key-in 방식 허용(2017-07-04,김지영차장)
                //위메프(해외항공)(4681,4907), 카약(국제선)(4713,4820), 신한카드(항공)(4715), 씨티카드(항공)(4759), 카카오(국제선)(4716), 삼성카드(항공)(4578), 삼성카드(항공_복지몰)(4547)에 대해서는 대한항공이어도 Key-in 방식 허용(2017-07-05,김지영차장)
                //전체 Key-in 방식 허용(2018-10-17)
                XmlNode CardTicketing = SearchETicketingXml.OwnerDocument.CreateElement("cardTicketing");
                //string KEKeyin = "/2/3915/4664/4837/4681/4907/4713/4820/4715/4759/4716/4578/4547/";
                //CardTicketing.InnerText = (KEKeyin.IndexOf(String.Format("/{0}/", SNM)) != -1) ? "N" : ((String.Compare(GDS, "Amadeus", true).Equals(0) && AirCode.Equals("KE")) ? "Y" : "N");
                CardTicketing.InnerText = "N";

                SearchETicketingXml.SelectSingleNode("bookingInfo").AppendChild(CardTicketing);

                //Response Log(2018-09-11,DB공간부족으로 로그기록 중단)
                //log.RSLogDBSave(LogSequence, ServiceNumber, SearchETicketingXml.OuterXml);
                cm.XmlFileSave(SearchETicketingXml, mc.Name, "TicketIssuingBeforeRS", "N", GUID);

                return SearchETicketingXml;
            }
            catch (Exception ex)
            {
                if (ReqNumber > 0)
                    TicketIssuingRequestStatusSub(ReqNumber, "1G", ex.Message, LogGUID);
                
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, OID, 0).ToErrors;
            }
        }

        #endregion "자동 발권전 실행(발권 가능여부 체크 및 발권용 운임 재계산)"

        #region "자동발권(이니시스 결제) 가능 카드리스트"

        /// <summary>
        /// 자동발권(이니시스 결제) 가능 카드리스트
        /// </summary>
        /// <param name="AirCode">항공사코드</param>
        /// <returns></returns>
        [WebMethod(Description = "자동발권(이니시스 결제) 가능 카드리스트")]
        public XmlElement AutoTicketingCardRS(string AirCode)
        {
            return ToModeAutoTicketingCardRS(tas.AirLineRequestServiceRS(AirCode, cm.GetGUID));
        }

        protected XmlElement ToModeAutoTicketingCardRS(XmlElement ResXml)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("AutoTicketingCardRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            XmlNode CardList = XmlDoc.SelectSingleNode("ResponseDetails/cardList");
            XmlNode Card = CardList.SelectSingleNode("card");
            XmlNode NewCard = null;

            XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
            xnMgr.AddNamespace("c", tas.NamespaceURL("AirLineRequestService"));

            foreach (XmlNode ResultList in ResXml.SelectNodes("c:resultlist/c:AirLineOUT[c:onOffGamang='Y']", xnMgr))
            {
                string EasyPayCardCode = Common.EasyPayCardCode(ResultList.SelectSingleNode("c:cardCode", xnMgr).InnerText);

                //이지페이용 카드코드가 없을 경우 제외
                if (!String.IsNullOrWhiteSpace(EasyPayCardCode))
                {
                    NewCard = CardList.AppendChild(Card.Clone());
                    NewCard.SelectSingleNode("airlineCode").InnerText = ResultList.SelectSingleNode("c:airlineCode", xnMgr).InnerText;
                    NewCard.SelectSingleNode("cardCode").InnerText = ResultList.SelectSingleNode("c:cardCode", xnMgr).InnerText;
                    NewCard.SelectSingleNode("cardName").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(ResultList.SelectSingleNode("c:cardName", xnMgr).InnerText.Trim()));
                    NewCard.SelectSingleNode("easypayCode").InnerText = EasyPayCardCode;
                }
            }

            CardList.RemoveChild(Card);

            return XmlDoc.DocumentElement;
        }

        #endregion "자동발권(이니시스 결제) 카드리스트"

        #region "자동발권(이니시스 결제)"

        /// <summary>
        /// 자동발권(이니시스 결제)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">모두투어 주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RIP">요청자IP</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="API">카드구분값 ISP(BC카드), MPI(일반)</param>
        /// <param name="CPR">승인금액</param>
        /// <param name="CIP">할부개월수(EV_install_period)</param>
        /// <param name="ICD">ISP 카드코드(번호) : KVP_CARDCODE</param>
        /// <param name="ISK">ISP 인증키1 : KVP_SESSIONKEY</param>
        /// <param name="IED">ISP 인증키2 : KVP_ENCADTA</param>        
        /// <param name="MCN">MPI 카드번호 : cardno</param>
        /// <param name="MED">MPI 카드 유효기간 : expdt</param>
        /// <param name="MCV">MPI 인증키1 : Cavv</param>
        /// <param name="MXI">MPI 인증키 : xid</param>
        /// <param name="MEC">MPI 인증키 : eci</param>        
        /// <param name="ACN">결제자명(EP_user_nm)</param>        
        /// <param name="ACT">결제자연락처(EP_user_phone2)</param>
        /// <returns></returns>
        [WebMethod(Description = "자동발권(이니시스 결제)")]
        public XmlElement TicketIssuingPayment(int SNM, int OID, int PID, string RIP, int RQR, string RQT, string API, int CPR, string CIP, string ICD, string ISK, string IED, string MCN, string MED, string MCV, string MXI, string MEC, string ACN, string ACT)
        {
            string ErrorText = string.Empty;
            int ServiceNumber = 516;
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
            Int64 LogSequence = 0;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청10", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청11", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청12", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청13", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청14", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청15", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청16", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청17", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = ServiceNumber;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RIP;
                sqlParam[12].Value = RQR;
                sqlParam[13].Value = API;
                sqlParam[14].Value = CPR;
                sqlParam[15].Value = CIP;
                sqlParam[16].Value = ICD;
                sqlParam[17].Value = ISK;
                sqlParam[18].Value = IED;
                sqlParam[19].Value = MCN;
                sqlParam[20].Value = MED;
                sqlParam[21].Value = MCV;
                sqlParam[22].Value = MXI;
                sqlParam[23].Value = MEC;
                sqlParam[24].Value = ACN;
                sqlParam[25].Value = ACT;

                LogSequence = log.LogDBSave(sqlParam);
            }
            catch (Exception ex)
            {
                if (ex.Message.Equals("서비스가 중복 요청되었습니다."))
                    ErrorText = ex.Message;
            }
            finally { }

            try
            {
                XmlDocument XmlTmp = new XmlDocument();
                string Xml = string.Empty;

                Xml += "<TicketIssuingPaymentRQ>";
                Xml += String.Format("<SNM>{0}</SNM>", SNM);
                Xml += String.Format("<OID>{0}</OID>", OID);
                Xml += String.Format("<PID>{0}</PID>", PID);
                Xml += String.Format("<RIP>{0}</RIP>", RIP);
                Xml += String.Format("<RQR>{0}</RQR>", RQR);
                Xml += String.Format("<RQT>{0}</RQT>", RQT);
                Xml += String.Format("<API>{0}</API>", API);
                Xml += String.Format("<CPR>{0}</CPR>", CPR);
                Xml += String.Format("<CIP>{0}</CIP>", CIP);
                Xml += String.Format("<ICD>{0}</ICD>", ICD);
                Xml += String.Format("<ISK>{0}</ISK>", ISK);
                Xml += String.Format("<IED>{0}</IED>", IED);
                Xml += String.Format("<MCN>{0}</MCN>", MCN);
                Xml += String.Format("<MED>{0}</MED>", MED);
                Xml += String.Format("<MCV>{0}</MCV>", MCV);
                Xml += String.Format("<MXI>{0}</MXI>", MXI);
                Xml += String.Format("<MEC>{0}</MEC>", MEC);
                Xml += String.Format("<ACN>{0}</ACN>", ACN);
                Xml += String.Format("<ACT>{0}</ACT>", ACT);
                Xml += "</TicketIssuingPaymentRQ>";

                XmlTmp.LoadXml(Xml);
                cm.XmlFileSave(XmlTmp, mc.Name, "TicketIssuingPaymentRQ", "N", GUID);
            }
            finally { }

            try
            {
                if (String.IsNullOrWhiteSpace(ErrorText))
                {
                    //DB에 저장된 예약정보
                    XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");

                    if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                    {
                        string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
                        string PNR = XmlDBBooking.SelectSingleNode("item3/GDS주문번호").InnerText;
                        string TID = XmlDBBooking.SelectSingleNode("item3/마케팅항공사").InnerText;

                        //결제 요청일 등록
                        PaymentRequestDB(OID, RIP, RQR);

                        if (String.Compare(GDS, "Amadeus", true).Equals(0))
                        {
                            XmlElement ResXml = tas.ApprovalRequestServiceRS(API, PNR, TID, CPR.ToString(), CIP, ICD, ISK.Replace(" ", "+"), IED.Replace(" ", "+"), MCN, MCV, MXI, MEC, GUID);

                            //Response Log(2018-09-11,DB공간부족으로 로그기록 중단)
                            //log.RSLogDBSave(LogSequence, ServiceNumber, ResXml.OuterXml);
                            cm.XmlFileSave(ResXml, mc.Name, "TicketIssuingPaymentRS", "N", GUID);

                            XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                            xnMgr.AddNamespace("c", tas.NamespaceURL("ApprovalRequestService"));

                            if (ResXml.SelectSingleNode("c:ApprovalRequestServiceResponse/c:ResultCd", xnMgr).InnerText.Equals("0"))
                            {
                                TopasPaymentDB(OID, RIP, RQR, ResXml);

                                int idx = AirPaymentDB(OID, GDS, PNR,
                                                ResXml.SelectSingleNode("c:ApprovalRequestServiceResponse/c:vanInfo/c:resCardCateNm", xnMgr).InnerText,
                                                ResXml.SelectSingleNode("c:ApprovalRequestServiceResponse/c:ApvNo", xnMgr).InnerText,
                                                ResXml.SelectSingleNode("c:ApprovalRequestServiceResponse/c:ApvDT", xnMgr).InnerText);

                                return ResXml;
                            }
                            else
                                throw new Exception(ResXml.SelectSingleNode("c:ApprovalRequestServiceResponse/c:ResultMsg", xnMgr).InnerText);
                        }
                        else
                            throw new Exception("이니시스 결제가 지원되지 않는 GDS입니다.");
                    }
                    else
                        throw new Exception("예약 정보가 존재하지 않습니다.");
                }
                else
                    throw new Exception(ErrorText);
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, OID, 0).ToErrors;
            }
        }

        /// <summary>
        /// 고객발권요청일 등록
        /// </summary>
        /// <param name="OID">모두투어 주문번호</param>
        /// <param name="RIP">요청자IP</param>
        /// <param name="RQR">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        protected string PaymentRequestDB(int OID, string RIP, int RQR)
        {
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
            {
                SqlCommand cmd = new SqlCommand
                {
                    Connection = conn,
                    CommandTimeout = 60,
                    CommandType = CommandType.StoredProcedure,
                    CommandText = "DBO.WSV_T_아이템예약_발권요청"
                };

                cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                cmd.Parameters.Add("@수정자", SqlDbType.Int, 0);
                cmd.Parameters.Add("@수정경로", SqlDbType.VarChar, 20);
                cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                cmd.Parameters["@주문번호"].Value = OID;
                cmd.Parameters["@수정자"].Value = RIP;
                cmd.Parameters["@수정경로"].Value = RQR;
                cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();

                    return cmd.Parameters["@에러메시지"].Value.ToString();
                }
                catch (Exception ex)
                {
                    throw new Exception(ex.Message);
                }
                finally
                {
                    conn.Close();
                }
            }
        }

        /// <summary>
        /// 결제정보 저장
        /// </summary>
        /// <param name="OID">모두투어 주문번호</param>
        /// <param name="RIP">요청자IP</param>
        /// <param name="RQR">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="ResXml">결제정보</param>
        /// <returns></returns>
        protected string TopasPaymentDB(int OID, string RIP, int RQR, XmlElement ResXml)
        {
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
            {
                SqlCommand cmd = new SqlCommand
                {
                    Connection = conn,
                    CommandTimeout = 60,
                    CommandType = CommandType.StoredProcedure,
                    CommandText = "DBO.WSV_T_아이템예약_결제"
                };

                cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                cmd.Parameters.Add("@결제", SqlDbType.Xml, -1);
                cmd.Parameters.Add("@수정자", SqlDbType.Int, 0);
                cmd.Parameters.Add("@수정경로", SqlDbType.VarChar, 20);
                cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                cmd.Parameters["@주문번호"].Value = OID;
                cmd.Parameters["@결제"].Value = ResXml.OuterXml;
                cmd.Parameters["@수정자"].Value = RIP;
                cmd.Parameters["@수정경로"].Value = RQR;
                cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();

                    return cmd.Parameters["@에러메시지"].Value.ToString();
                }
                catch (Exception ex)
                {
                    throw new Exception(ex.Message);
                }
                finally
                {
                    conn.Close();
                }
            }
        }

        /// <summary>
        /// 결제 결과 저장
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="GDS">GDS코드</param>
        /// <param name="PNR">PNR번호</param>
        /// <param name="CNM">카드사명</param>
        /// <param name="APN">승인번호</param>
        /// <param name="APD">승인일자</param>
        protected int AirPaymentDB(int OID, string GDS, string PNR, string CNM, string APN, string APD)
        {
            int idx = 0;

            try
            {
                using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand
                    {
                        Connection = conn,
                        CommandType = CommandType.StoredProcedure,
                        CommandText = "DBO.WSV_T_아이템예약_항공사결제정보"
                    })
                    {
                        cmd.Parameters.Add("@주문번호", SqlDbType.Int);
                        cmd.Parameters.Add("@주문아이템번호", SqlDbType.Int);
                        cmd.Parameters.Add("@품목코드", SqlDbType.Char, 2);
                        cmd.Parameters.Add("@GDS코드", SqlDbType.VarChar, 20);
                        cmd.Parameters.Add("@GDS주문번호", SqlDbType.VarChar, 20);
                        cmd.Parameters.Add("@카드사명", SqlDbType.VarChar, 30);
                        cmd.Parameters.Add("@승인번호", SqlDbType.VarChar, 20);
                        cmd.Parameters.Add("@승인일자", SqlDbType.VarChar, 20);
                        cmd.Parameters.Add("@일련번호", SqlDbType.Int);
                        cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                        cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                        cmd.Parameters["@주문번호"].Value = OID;
                        cmd.Parameters["@주문아이템번호"].Value = 0;
                        cmd.Parameters["@품목코드"].Value = "IA";
                        cmd.Parameters["@GDS코드"].Value = GDS;
                        cmd.Parameters["@GDS주문번호"].Value = PNR;
                        cmd.Parameters["@카드사명"].Value = CNM;
                        cmd.Parameters["@승인번호"].Value = APN;
                        cmd.Parameters["@승인일자"].Value = APD;
                        cmd.Parameters["@일련번호"].Direction = ParameterDirection.Output;
                        cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                        cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                        try
                        {
                            conn.Open();
                            cmd.ExecuteNonQuery();

                            if (cmd.Parameters["@결과"].Value.ToString().Equals("S"))
                                idx = Convert.ToInt32(cmd.Parameters["@일련번호"].Value);
                        }
                        catch (Exception ex)
                        {
                            idx = 0;
                            throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, 0);
                        }
                        finally
                        {
                            conn.Close();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, 0);
            }

            return idx;
        }

        #endregion "자동발권(이니시스 결제)"

        #region "자동발권(결제시스템 연동전 실행)"

        //[WebMethod(Description = "항공사별 가맹점 조회")]
        //public XmlElement AirLineRequestServiceRS(string PVC)
        //{
        //    return ToModeAutoTicketingCardRS(tas.AirLineRequestServiceRS(PVC, cm.GetGUID));
        //}
        
        //[WebMethod(Description = "자동발권(결제시스템 연동전 실행)")]
        //public XmlElement AutoTicketing01TESTRS(string PNR, string PVC)
        //{
        //    return AutoTicketing01RS(2, 1743, PNR, PVC, null);
        //}

        /// <summary>
        /// 자동발권(결제시스템 연동전 실행)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "자동발권(결제시스템 연동전 실행)")]
        public XmlElement AutoTicketing01RS(int SNM, int OID, int PID, int RQR, string RQT)
        {
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 350;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RQR;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
			{
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");
                
                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    XmlDocument FareXml = new XmlDocument();
                    FareXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                    return AutoTicketing01RS(cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), RQR, XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText, XmlDBBooking.SelectSingleNode("item3/마케팅항공사").InnerText, FareXml.DocumentElement, LogGUID);
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 350, OID, 0).ToErrors;
            }
        }

        /// <summary>
        /// 자동발권(결제시스템 연동전 실행)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="PNR">PNR</param>
        /// <param name="PVC">Validating Carrier</param>
        /// <param name="FareXml">예약시 저장된 운임정보 XML</param>
        /// <param name="GUID">고유번호</param>
        /// <returns></returns>
        public XmlElement AutoTicketing01RS(int SNM, int RQR, string PNR, string PVC, XmlElement FareXml, string GUID)
        {
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            try
            {
                //결과
                XmlElement ResXml;

                //네임스페이스
                XmlNamespaceManager xnMgr;

                //### 01.세션생성 #####
                XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

                SID = Session.SelectSingleNode("session/sessionId").InnerText;
                SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                //### 02.PNR조회(PNR_Retrieve) #####
                ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                if (ResXml.SelectNodes("m:originDestinationDetails", xnMgr).Count.Equals(0))
                    throw new Exception("예약 정보가 존재하지 않습니다.");

                if (ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA' and m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='P06']]", xnMgr).Count > 0)
                    throw new Exception("이미 이티켓이 발행된 예약입니다.");

                //탑승객수
                int PaxCount = ResXml.SelectNodes("m:travellerInfo/m:passengerData", xnMgr).Count;
                
                //### 03.Check T/A capping(Ticket_DisplayQuota) #####
                ResXml = amd.DisplayQuotaRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), PVC);

                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Ticket_DisplayQuota"));

                if (ResXml.SelectNodes("m:displayQuotaError", xnMgr).Count > 0)
                    throw new Exception(ResXml.SelectSingleNode("m:displayQuotaError/m:errorWarningDescription/m:freeText", xnMgr).InnerText);
                else if (ResXml.SelectNodes("m:tableHeader/m:quotaParameters/m:remainingQuota", xnMgr).Count.Equals(0))
                    throw new Exception("발권 가능한 티켓 수량이 부족합니다.");
                else if (PaxCount > cm.RequestInt(ResXml.SelectSingleNode("m:tableHeader/m:quotaParameters/m:remainingQuota/m:quantityDetails[m:unitQualifier='R']/m:numberOfUnit", xnMgr).InnerText))
                    throw new Exception("발권 가능한 티켓 수량이 부족합니다.");

                //### 04.세션종료 #####
                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"));

                //### 05.결제 가능 카드리스트 #####
                ResXml = ToModeAutoTicketingCardRS(tas.AirLineRequestServiceRS(PVC, String.Concat(GUID, "-05")));

                return ResXml;
            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0).ToErrors;
            }
        }

        /// <summary>
        /// 자동발권(결제시스템 연동전 실행)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="RQR">발권요청자번호(PTID)</param>
        /// <param name="PNR">PNR</param>
        /// <param name="PVC">Validating Carrier</param>
        /// <param name="FareXml">예약시 저장된 운임정보 XML</param>
        /// <param name="GUID">고유번호</param>
        /// <returns></returns>
        //public XmlElement AutoTicketing01RS(int SNM, int RQR, string PNR, string PVC, XmlElement FareXml, string GUID)
        //{
        //    string SID = String.Empty;
        //    string SCT = String.Empty;
        //    int SQN = 0;

        //    try
        //    {
        //        //결과
        //        XmlElement ResXml;
        //        XmlElement ResPricing;
        //        XmlElement ResTst;

        //        //네임스페이스
        //        XmlNamespaceManager xnMgr;
        //        XmlNamespaceManager xnMgrPricing;
        //        XmlNamespaceManager xnMgrTst;

        //        //탑승객수
        //        int PaxCount = 0;

        //        //### 01.세션생성 #####
        //        XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

        //        SID = Session.SelectSingleNode("session/sessionId").InnerText;
        //        SCT = Session.SelectSingleNode("session/securityToken").InnerText;
        //        SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

        //        //### 02.PNR조회(PNR_Retrieve) #####
        //        ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

        //        xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
        //        xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

        //        if (ResXml.SelectNodes("m:originDestinationDetails", xnMgr).Count.Equals(0))
        //            throw new Exception("예약 정보가 존재하지 않습니다.");

        //        if (ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA' and m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='P06']]", xnMgr).Count > 0)
        //            throw new Exception("이미 이티켓이 발행된 예약입니다.");

        //        //예약상태코드(전 여정 'HK'만 가능)
        //        if (ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:relatedProduct/m:status!='HK' or not(m:itineraryReservationInfo)]", xnMgr).Count > 0)
        //            throw new Exception("전 여정의 예약상태가 HK(확정)인 경우에만 자동발권이 가능합니다.");

        //        //한국출발만 가능
        //        if (!Common.KoreaOfAirport(ResXml.SelectSingleNode("m:originDestinationDetails/m:itineraryInfo[1]/m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText))
        //            throw new Exception("해외 출발인 경우에는 자동발권이 불가합니다.");

        //        //### 03.운임Pricing(Fare_PricePNRWithBookingClass) #####
        //        foreach (XmlNode TravellerInfo in ResXml.SelectNodes("m:travellerInfo", xnMgr))
        //        {
        //            string PREF = TravellerInfo.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText;

        //            foreach (XmlNode Passenger in TravellerInfo.SelectNodes("m:passengerData/m:travellerInformation/m:passenger", xnMgr))
        //            {
        //                string PTC = (Passenger.SelectNodes("m:type", xnMgr).Count > 0) ? Passenger.SelectSingleNode("m:type", xnMgr).InnerText : "ADT";
        //                ResPricing = amd.PricePNRWithBookingClassPricing3RS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03_", PREF, PTC), PVC, "", PTC, PREF, (FareXml != null) ? FareXml.SelectSingleNode("paxFareGroup") : null);

        //                xnMgrPricing = new XmlNamespaceManager(ResPricing.OwnerDocument.NameTable);
        //                xnMgrPricing.AddNamespace("m", AmadeusConfig.NamespaceURL("Fare_PricePNRWithBookingClassPricing"));

        //                if (ResPricing.SelectNodes("m:applicationError", xnMgrPricing).Count > 0)
        //                    throw new Exception(ResPricing.SelectSingleNode("m:applicationError/m:errorWarningDescription/m:freeText", xnMgrPricing).InnerText);

        //                //MSP인 경우에만 자동발권 가능
        //                if (ResPricing.SelectSingleNode("m:fareList/m:pricingInformation/m:tstInformation/m:tstIndicator", xnMgrPricing).InnerText != "F" || ResPricing.SelectSingleNode("m:fareList/m:pricingInformation/m:fcmi", xnMgrPricing).InnerText != "N")
        //                    throw new Exception("자동발권이 불가능한 운임입니다(MSP).");

        //                //NTF여부
        //                if (ResPricing.SelectNodes("m:fareList/m:fareIndicators", xnMgrPricing).Count > 0 && ResPricing.SelectNodes("m:fareList/m:fareIndicators/m:fareDetails[m:fareCategory='NTF']", xnMgrPricing).Count > 0)
        //                    throw new Exception("자동발권이 불가능한 운임입니다(NTF).");

        //                //### 04.TST생성(Ticket_CreateTSTFromPricing) #####
        //                ResTst = amd.CreateTSTFromPricingPaxRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04_", PREF, PTC), ResPricing, "Fare_PricePNRWithBookingClassPricing");

        //                xnMgrTst = new XmlNamespaceManager(ResTst.OwnerDocument.NameTable);
        //                xnMgrTst.AddNamespace("m", AmadeusConfig.NamespaceURL("Ticket_CreateTSTFromPricing"));

        //                if (ResTst.SelectNodes("m:applicationError", xnMgrTst).Count > 0)
        //                    throw new Exception(ResTst.SelectSingleNode("m:applicationError/m:errorText/m:errorFreeText", xnMgrTst).InnerText);

        //                PaxCount++;
        //            }
        //        }

        //        //### 05.ReceiveFrom 및 TST저장(PNR_AddMultiElements) #####
        //        amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05"), String.Concat("P-", RQR));

        //        //### 06.TST조회(Ticket_DisplayTST) #####
        //        //ResXml = amd.DisplayTSTRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06"));

        //        //### 07.Check T/A capping(Ticket_DisplayQuota) #####
        //        ResXml = amd.DisplayQuotaRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-07"), PVC);

        //        xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
        //        xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Ticket_DisplayQuota"));

        //        if (ResXml.SelectNodes("m:displayQuotaError", xnMgr).Count > 0)
        //            throw new Exception(ResXml.SelectSingleNode("m:displayQuotaError/m:errorWarningDescription/m:freeText", xnMgr).InnerText);
        //        else if (ResXml.SelectNodes("m:tableHeader/m:quotaParameters/m:remainingQuota", xnMgr).Count.Equals(0))
        //            throw new Exception("발권 가능한 티켓 수량이 부족합니다.");
        //        else if (PaxCount > cm.RequestInt(ResXml.SelectSingleNode("m:tableHeader/m:quotaParameters/m:remainingQuota/m:quantityDetails[m:unitQualifier='R']/m:numberOfUnit", xnMgr).InnerText))
        //            throw new Exception("발권 가능한 티켓 수량이 부족합니다.");

        //        //### 08.PNR조회(PNR_Retrieve) #####
        //        ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-08"), PNR);

        //        //### 09.세션종료 #####
        //        SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-09"));

        //        return ResXml;
        //    }
        //    catch (Exception ex)
        //    {
        //        //### 세션종료 #####
        //        if (SQN > 0)
        //            amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

        //        return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name).ToErrors;
        //    }
        //}

        #endregion "자동발권(결제시스템 연동전 실행)"

        #region "자동발권(결제시스템 연동후 실행)"

        //[WebMethod(Description = "자동발권(결제시스템 연동후 실행)")]
        //public XmlElement AutoTicketing02TESTRS(string PNR, string PVC)
        //{
        //    return AutoTicketing02RS(2, 1743, PNR, PVC, "VI", "4028220015056413", "0720", "0", "12345678", 542400, 0, "HARIUS@MODETOUR.COM");
        //}

        /// <summary>
        /// 자동발권(결제시스템 연동후 실행)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="FOP">결제정보("영어성^영어이름^카드타입^카드번호^유효기간(MMYY)^할부기간^승인번호^카드결제금액^현금결제금액")</param>
        /// <param name="ITREmail">ITR 발송 이메일주소</param>
        /// <returns></returns>
        [WebMethod(Description = "자동발권(결제시스템 연동후 실행)")]
        public XmlElement AutoTicketing02RS(int SNM, int OID, int PID, int RQR, string RQT, string FOP, string ITREmail)
        {
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 351;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RQR;
                sqlParam[12].Value = FOP;
                sqlParam[13].Value = ITREmail;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    //FOP = "KO^JAEYOUNGMR^VI^4028220015056413^0720^0^12345678^1150000^0";
                    string[] FOPInfo = FOP.Split('^');

                    return AutoTicketing02RS(cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), OID, PID, RQR, RQT, XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText, XmlDBBooking.SelectSingleNode("item3/마케팅항공사").InnerText, FOPInfo[2], FOPInfo[3], FOPInfo[4], FOPInfo[5], FOPInfo[6], cm.RequestInt(FOPInfo[7]), cm.RequestInt(FOPInfo[8]), ITREmail, LogGUID);
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 351, OID, 0).ToErrors;
            }
        }

        /// <summary>
        /// 자동발권(결제시스템 연동후 실행)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="PNR">PNR</param>
        /// <param name="PVC">Validating Carrier</param>
        /// <param name="CardType">PNR</param>
        /// <param name="CardNumber">PNR</param>
        /// <param name="CardExpiryDate">PNR</param>
        /// <param name="CardInstalments">PNR</param>
        /// <param name="CardApprovalCode">PNR</param>
        /// <param name="CardAmount">PNR</param>
        /// <param name="CashAmount">PNR</param>
        /// <param name="ITREmail">PNR</param>
        /// <param name="GUID">고유번호</param>
        /// <returns></returns>
        public XmlElement AutoTicketing02RS(int SNM, int OID, int PID, int RQR, string RQT, string PNR, string PVC, string CardType, string CardNumber, string CardExpiryDate, string CardInstalments, string CardApprovalCode, int CardAmount, int CashAmount, string ITREmail, string GUID)
        {
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            //결과
            XmlElement ResXml = null;
            XmlElement ResFOP;
            XmlElement ResTicket;

            //네임스페이스
            XmlNamespaceManager xnMgr;
            XmlNamespaceManager xnMgrFOP;
            XmlNamespaceManager xnMgrTicket;

            try
            {
                //### 01.세션생성 #####
                XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

                SID = Session.SelectSingleNode("session/sessionId").InnerText;
                SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                //### 02.PNR조회(PNR_Retrieve) #####
                ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                if (ResXml.SelectNodes("m:originDestinationDetails", xnMgr).Count.Equals(0))
                    throw new Exception("예약 정보가 존재하지 않습니다.");

                if (ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA' and m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='P06']]", xnMgr).Count > 0)
                    throw new Exception("이미 이티켓이 발행된 예약입니다.");

                int FPi = 1;
                int PaxCardAmount = 0;
                int PaxCashAmount = 0;
                int TotalPayments = 0;

                XmlNode TstData = null;

                foreach (XmlNode Traveller in ResXml.SelectNodes("m:travellerInfo[m:elementManagementPassenger/m:segmentName='NM']", xnMgr))
                {
                    string PaxNumber = Traveller.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText;

                    foreach (XmlNode Passenger in Traveller.SelectNodes("m:passengerData/m:travellerInformation/m:passenger", xnMgr))
                    {
                        string PaxType = (Passenger.SelectNodes("m:type", xnMgr).Count > 0 && Passenger.SelectSingleNode("m:type", xnMgr).InnerText.Equals("INF")) ? "INF" : "PAX";

                        //요금
                        TstData = ResXml.SelectSingleNode(String.Format("m:tstData[m:tstFreetext[m:freetextDetail/m:type='41']/m:longFreetext='{0}' and m:referenceForTstData/m:reference[m:qualifier='PT']/m:number='{1}']", PaxType, PaxNumber), xnMgr);

                        if (TstData != null)
                        {
                            if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FP' and m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}' and starts-with(m:otherDataFreetext/m:longFreetext, '{1}')]", PaxNumber, PaxType), xnMgr).Count.Equals(0))
                            {
                                PaxCardAmount = Convert.ToInt32(TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='T']/m:amount", xnMgr).InnerText);
                                TotalPayments += PaxCardAmount;

                                //### 03.결제(FP)정보 저장(FOP_CreateFormOfPayment) #####
                                ResFOP = amd.CreateFormOfPaymentRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03-", FPi++), PaxType, PaxNumber, PVC, CardType, CardNumber, CardExpiryDate, CardInstalments.ToString(), CardApprovalCode, PaxCardAmount, PaxCashAmount);

                                xnMgrFOP = new XmlNamespaceManager(ResFOP.OwnerDocument.NameTable);
                                xnMgrFOP.AddNamespace("m", AmadeusConfig.NamespaceURL("FOP_CreateFormOfPayment"));

                                if (ResFOP.SelectNodes("m:transmissionError", xnMgrFOP).Count > 0)
                                    throw new Exception(String.Format("PAX {0}{1} : {2}", PaxNumber, PaxType.Equals("INF") ? "(INF)" : "", ResFOP.SelectSingleNode("m:transmissionError/m:errorWarningDescription/m:freeText", xnMgrFOP).InnerText));
                            }
                        }
                        else
                            throw new Exception(String.Format("PNR 정보에 {0}의 운임정보가 존재하지 않습니다.{1}/{2}", PaxType.Equals("INF") ? "유아" : "성인 또는 소아", PaxNumber, PaxType));
                    }
                }

                if (CardAmount + CashAmount < TotalPayments)
                    throw new Exception("결제한 금액이 실제 항공티켓 금액보다 적습니다.");

                //### 04.ReceiveFrom 및 PNR저장(PNR_AddMultiElements) #####
                amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"), String.Concat("P-", RQR));

                //### 05.PNR조회(FOP 확인)(PNR_Retrieve) #####
                ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05"), PNR);
                
                //### 06.이티켓발권(DocIssuance_IssueTicket) #####
                ResTicket = amd.IssueTicketRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06"), PVC);

                xnMgrTicket = new XmlNamespaceManager(ResTicket.OwnerDocument.NameTable);
                xnMgrTicket.AddNamespace("m", AmadeusConfig.NamespaceURL("DocIssuance_IssueTicket"));

                if (ResTicket.SelectSingleNode("m:processingStatus/m:statusCode", xnMgrTicket).InnerText.Equals("X"))
                    throw new Exception(ResTicket.SelectSingleNode("m:errorGroup/m:errorWarningDescription/m:freeText", xnMgrTicket).InnerText.Trim());

                //### 07.ITR(이티켓 이메일 발송) ####
                //ResXml = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-07"), String.Concat("ITR-EML-", ITREmail.ToUpper()));

                //### 08.PNR조회(PNR_Retrieve) #####
                ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-08"), PNR);

                //### 09.세션종료 #####
                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-09"));

                //### 10.제휴사동기화 #####
                //11번가(4924,4929), 티몬(4925,4926), 이베이(5020,5119)(5161,5163)(5162,5164), 네이버(4638)
                if (SNM.Equals(4924) || SNM.Equals(4929) || SNM.Equals(4925) || SNM.Equals(4926) || SNM.Equals(5020) || SNM.Equals(5119) || SNM.Equals(5161) || SNM.Equals(5163) || SNM.Equals(5162) || SNM.Equals(5164) || SNM.Equals(4638))
                    mod.AirTicket(SNM, OID, 0, PID, RQR, RQT);

                return ResXml;
            }
            catch (Exception ex)
            {
                //### FP정보 삭제 #####
                if (SQN > 0)
                {
                    if (ResXml != null)
                    {
                        xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                        xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                        //### 90.기존 결제정보 삭제 #####
                        int x = 1;
                        foreach (XmlNode ElementManagementData in ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv/m:elementManagementData[m:segmentName='FP']", xnMgr))
                        {
                            amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-90-", x++), String.Concat("XE", ElementManagementData.SelectSingleNode("m:lineNumber", xnMgr).InnerText));
                        }

                        //### 91.ReceiveFrom 및 PNR저장(PNR_AddMultiElements) #####
                        amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-91"), "P-Exception");
                    }

                    //### 세션종료 #####
                    SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);
                }
                else
                {
                    //### 90.세션생성 #####
                    XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-90"));

                    SID = Session.SelectSingleNode("session/sessionId").InnerText;
                    SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                    SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                    //### 91.PNR조회(PNR_Retrieve) #####
                    ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-91"), PNR);

                    xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                    xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                    //### 92.기존 결제정보 삭제 #####
                    int x = 1;
                    foreach (XmlNode ElementManagementData in ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv/m:elementManagementData[m:segmentName='FP']", xnMgr))
                    {
                        amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-92-", x++), String.Concat("XE", ElementManagementData.SelectSingleNode("m:lineNumber", xnMgr).InnerText));
                    }

                    //### 93.ReceiveFrom 및 PNR저장(PNR_AddMultiElements) #####
                    amd.AddMultiElementsReceiveFromRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-93"), "P-Exception");

                    //### 94.세션종료 #####
                    SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-94"));
                }

                return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0).ToErrors;
            }
        }

        #endregion "자동발권(결제시스템 연동후 실행)"

        #region "자동발권 통합(자동발권용 Pricing + Command)"

        //[WebMethod(Description = "자동발권 통합(자동발권용 Pricing + Command)")]
        public XmlElement TicketIssuingSemiAutoCombineStringRS(int OID, int PID, string FT, string FM, string FE, string FV, string FP, int RQR, string RQT)
        {
            string LogGUID = cm.GetGUID;

            ////파라미터 로그 기록
            //try
            //{
            //    SqlParameter[] sqlParam = new SqlParameter[] {
            //            new SqlParameter("@서비스번호", SqlDbType.Int, 0),
            //            new SqlParameter("@사이트번호", SqlDbType.Int, 0),
            //            new SqlParameter("@주문번호", SqlDbType.Int, 0),
            //            new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
            //            new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
            //            new SqlParameter("@서버명", SqlDbType.VarChar, 20),
            //            new SqlParameter("@메서드", SqlDbType.VarChar, 10),
            //            new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
            //            new SqlParameter("@GUID", SqlDbType.VarChar, 50),
            //            new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
            //            new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
            //            new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
            //            new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
            //            new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
            //            new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
            //            new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
            //            new SqlParameter("@요청41", SqlDbType.VarChar, -1)
            //        };

            //    sqlParam[0].Value = 362;
            //    sqlParam[1].Value = 0;
            //    sqlParam[2].Value = OID;
            //    sqlParam[3].Value = 0;
            //    sqlParam[4].Value = RQT;
            //    sqlParam[5].Value = Environment.MachineName;
            //    sqlParam[6].Value = hcc.Request.HttpMethod;
            //    sqlParam[7].Value = hcc.Request.UserHostAddress;
            //    sqlParam[8].Value = LogGUID;
            //    sqlParam[9].Value = OID;
            //    sqlParam[10].Value = PID;
            //    sqlParam[11].Value = FT;
            //    sqlParam[12].Value = FM;
            //    sqlParam[13].Value = FE;
            //    sqlParam[14].Value = FV;
            //    sqlParam[15].Value = RQR;
            //    sqlParam[16].Value = FP;

            //    log.LogDBSave(sqlParam);
            //}
            //catch (Exception) { }
            //finally { }
            
            //try
            //{
            //    XmlDocument XmlDoc = new XmlDocument();
            //    XmlDoc.LoadXml(FP);

            //    return TicketIssuingSemiAutoCombine(OID, PID, FT, FM, FE, FV, XmlDoc.DocumentElement, RQR, RQT);
            //}
            //catch (Exception ex)
            //{
            //    return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 362).ToErrors;
            //}
            return null;
        }

        /// <summary>
        /// 자동발권 통합(자동발권용 Pricing + Command)
		/// </summary>
		/// <param name="OID">모두투어 주문번호</param>
		/// <param name="PID">예약자번호(PTID)</param>
		/// <param name="FT">TourCode</param>
		/// <param name="FM">Commission</param>
		/// <param name="FE">Endorsement</param>
		/// <param name="FV">Validating Carrier</param>
        /// <param name="FP">결제요청정보</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기</param>
		/// <returns></returns>
        //[WebMethod(Description = "자동발권 통합(자동발권용 Pricing + Command)")]
        public XmlElement TicketIssuingSemiAutoCombineRS(int OID, int PID, string FT, string FM, string FE, string FV, XmlElement FP, int RQR, string RQT)
        {
            string LogGUID = cm.GetGUID;

            ////파라미터 로그 기록
            //try
            //{
            //    SqlParameter[] sqlParam = new SqlParameter[] {
            //            new SqlParameter("@서비스번호", SqlDbType.Int, 0),
            //            new SqlParameter("@사이트번호", SqlDbType.Int, 0),
            //            new SqlParameter("@주문번호", SqlDbType.Int, 0),
            //            new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
            //            new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
            //            new SqlParameter("@서버명", SqlDbType.VarChar, 20),
            //            new SqlParameter("@메서드", SqlDbType.VarChar, 10),
            //            new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
            //            new SqlParameter("@GUID", SqlDbType.VarChar, 50),
            //            new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
            //            new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
            //            new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
            //            new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
            //            new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
            //            new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
            //            new SqlParameter("@요청41", SqlDbType.VarChar, -1),
            //            new SqlParameter("@요청7", SqlDbType.VarChar, 3000)
            //        };

            //    sqlParam[0].Value = 361;
            //    sqlParam[1].Value = 0;
            //    sqlParam[2].Value = OID;
            //    sqlParam[3].Value = 0;
            //    sqlParam[4].Value = RQT;
            //    sqlParam[5].Value = Environment.MachineName;
            //    sqlParam[6].Value = hcc.Request.HttpMethod;
            //    sqlParam[7].Value = hcc.Request.UserHostAddress;
            //    sqlParam[8].Value = LogGUID;
            //    sqlParam[9].Value = OID;
            //    sqlParam[10].Value = PID;
            //    sqlParam[11].Value = FT;
            //    sqlParam[12].Value = FM;
            //    sqlParam[13].Value = FE;
            //    sqlParam[14].Value = FV;
            //    sqlParam[15].Value = FP.OuterXml;
            //    sqlParam[16].Value = RQR;

            //    log.LogDBSave(sqlParam);
            //}
            //catch (Exception) { }
            //finally { }

            //try
            //{
            //    return TicketIssuingSemiAutoCombine(OID, PID, FT, FM, FE, FV, FP, RQR, RQT);
            //}
            //catch (Exception ex)
            //{
            //    return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 361).ToErrors;
            //}
            return null;
        }

        #endregion "자동발권 통합(자동발권용 Pricing + Command)"

        #endregion "자동발권"

        #region "E-Ticket 조회"

        #region "E-Ticket 조회(PNR정보 이용)"

        /// <summary>
		/// E-Ticket 조회(PNR정보 이용)
		/// </summary>
		/// <param name="OID">주문번호</param>
		/// <param name="PID">예약자번호(PTID)</param>
		/// <returns></returns>
		[WebMethod(Description = "E-Ticket 조회(PNR정보 이용)")]
        public XmlElement SearchETicketRS(int OID, int PID, string RIP)
		{
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 28;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
			{
				//DB에 저장된 예약정보
				XmlElement XmlDBBooking = SearchBookingDB(OID, PID, RIP);

				if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
				{
					int SNM = cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2);
					string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
					string PNR = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;

					if (String.Compare(GDS, "Amadeus", true).Equals(0) || String.Compare(GDS, "Topas", true).Equals(0))
					{
                        return ToModeSearchETicketAmadeus(XmlDBBooking, SearchBookingPNR(SNM, GDS, PNR, LogGUID));
					}
                    else if (String.Compare(GDS, "Abacus", true).Equals(0))
                    {
                        return ToModeSearchETicketAbacus(XmlDBBooking, SearchBookingPNR(SNM, "Abacus_TravelItineraryRead", PNR, LogGUID));
                    }
                    else if (String.Compare(GDS, "Galileo", true).Equals(0))
                    {
                        return ToModeSearchETicketGalileo(XmlDBBooking, SearchBookingPNR(SNM, GDS, PNR, LogGUID), null);
                    }
					else
						throw new Exception("E-Ticket 정보 조회가 지원되지 않는 GDS입니다.");
				}
				else
					throw new Exception("예약 정보가 존재하지 않습니다.");
			}
			catch (Exception ex)
			{
				ex.Data.Clear();
				ex.Data.Add("OID", OID);
				ex.Data.Add("PID", PID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 28, OID, 0).ToErrors;
			}
		}

		/// <summary>
		/// E-Ticket 조회(PNR정보 이용)(저장된 정보이용)
		/// </summary>
		/// <param name="OID">주문번호</param>
		/// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RIP">요청자IP</param>
		/// <returns></returns>
		[WebMethod(Description = "E-Ticket 조회(PNR정보 이용)(저장된 정보이용)")]
        public XmlElement SearchStoredETicketRS(int OID, int PID, string RIP)
		{
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 39;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
			{
				//DB에 저장된 예약정보
				XmlElement XmlDBBooking = SearchBookingDB(OID, PID, RIP);

				if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
				{
					int SNM = cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2);
					string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
					string PNR = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;

					XmlDocument XmlPNR = new XmlDocument();
					XmlPNR.LoadXml(XmlDBBooking.SelectSingleNode("item3/예약XML").InnerText);

					if (String.Compare(GDS, "Amadeus", true).Equals(0) || String.Compare(GDS, "Topas", true).Equals(0))
					{
						return ToModeSearchETicketAmadeus(XmlDBBooking, XmlPNR.DocumentElement);
					}
                    else if (String.Compare(GDS, "Abacus", true).Equals(0))
                    {
                        return ToModeSearchETicketAbacus(XmlDBBooking, XmlPNR.DocumentElement);
                    }
                    else if (String.Compare(GDS, "Galileo", true).Equals(0))
                    {
                        return ToModeSearchETicketGalileo(XmlDBBooking, XmlPNR.DocumentElement, null);
                    }
					else
						throw new Exception("E-Ticket 정보 조회가 지원되지 않는 GDS입니다.");
				}
				else
					throw new Exception("예약 정보가 존재하지 않습니다.");
			}
			catch (Exception ex)
			{
				ex.Data.Clear();
				ex.Data.Add("OID", OID);
				ex.Data.Add("PID", PID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 39, OID, 0).ToErrors;
			}
		}

		/// <summary>
		/// PNR정보로 티켓 이미지 출력
		/// </summary>
		/// <param name="XmlDBBooking">저장된 예약정보</param>
		/// <param name="ResXml">PNR 정보</param>
		/// <returns></returns>
		public XmlElement ToModeSearchETicketAmadeus(XmlElement XmlDBBooking, XmlElement ResXml)
		{
            try
            {
                XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                //오류 결과일 경우 예외 처리
                if (ResXml.SelectNodes("m:applicationError/m:errorText", xnMgr).Count > 0)
                {
                    throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorText/m:errorFreeText", xnMgr).InnerText);
                }

                string ValidatingCarrier = XmlDBBooking.SelectSingleNode("item3/마케팅항공사").InnerText;

                //프로모션
                XmlNode PromItem = null;

                if (XmlDBBooking.SelectNodes("item3/요금XML").Count > 0)
                {
                    XmlDocument XmlProm = new XmlDocument();
                    XmlProm.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                    //모두웨어에서 프로모션 삭제 시 요금조건 정보만 삭제하기 때문에 프로모션 적용 여부 판단시 해당 필드 체크로직 추가(2018-10-15,김경미매니저)
                    PromItem = (!String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item3/요금조건").InnerText) && XmlProm.SelectNodes("priceIndex/promotionInfo").Count > 0) ? XmlProm.SelectSingleNode("priceIndex/promotionInfo") : null;
                }

                //아이템할인금액(이베이용)
                double ItemDiscount = (XmlDBBooking.SelectNodes("item4[구분='ADT' and 취소여부='N']").Count > 0) ? Convert.ToDouble(XmlDBBooking.SelectSingleNode("item4[구분='ADT' and 취소여부='N']/제휴아이템할인요금").InnerText) : 0;

                //통합모드
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.Load(mc.XmlFullPath("SearchETicketRS"));

                XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

                //기본정보
                XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");

                BookingInfo.SelectSingleNode("gds").InnerText = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
                BookingInfo.SelectSingleNode("gds").Attributes.GetNamedItem("id").InnerText = "1A";
                BookingInfo.SelectSingleNode("bookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;
                BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = ResXml.SelectSingleNode("m:pnrHeader/m:reservationInfo/m:reservation[m:companyId='1A']/m:controlNumber", xnMgr).InnerText;
                BookingInfo.SelectSingleNode("modeBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item/예약번호").InnerText;
                BookingInfo.SelectSingleNode("agentBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/주문아이템코드").InnerText;
                BookingInfo.SelectSingleNode("allianceBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/제휴사주문번호").InnerText;
                BookingInfo.SelectSingleNode("bookingCreationDate").InnerText = cm.RequestDateTime(XmlDBBooking.SelectSingleNode("item/예약일").InnerText, "yyyy-MM-dd HH:mm:ss");

                //추가정보
                XmlNode AddInfo = XmlDoc.SelectSingleNode("ResponseDetails/addInfo");
                XmlNode DataElementsMaster = ResXml.SelectSingleNode("m:dataElementsMaster", xnMgr);

                AddInfo.SelectSingleNode("iata").InnerText = (ResXml.SelectNodes("m:securityInformation/m:responsibilityInformation/m:iataCode", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:securityInformation/m:responsibilityInformation/m:iataCode", xnMgr).InnerText : "";
                AddInfo.SelectSingleNode("city").InnerText = (ResXml.SelectNodes("m:securityInformation/m:cityCode", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:securityInformation/m:cityCode", xnMgr).InnerText : "";
                AddInfo.SelectSingleNode("tourCode").InnerText = (DataElementsMaster.SelectNodes("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FT']/m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='12']", xnMgr).Count > 0) ? DataElementsMaster.SelectSingleNode("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FT']/m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='12']/m:longFreetext", xnMgr).InnerText : "";
                AddInfo.SelectSingleNode("commission").InnerText = (DataElementsMaster.SelectNodes("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FM']/m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='11']", xnMgr).Count > 0) ? DataElementsMaster.SelectSingleNode("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FM']/m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='11']/m:longFreetext", xnMgr).InnerText : "";
                AddInfo.SelectSingleNode("endorsement").InnerText = (DataElementsMaster.SelectNodes("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FE']/m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='10']", xnMgr).Count > 0) ? DataElementsMaster.SelectSingleNode("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FE']/m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='10']/m:longFreetext", xnMgr).InnerText : "";
                AddInfo.SelectSingleNode("ticketingCarrier").InnerText = (DataElementsMaster.SelectNodes("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FV']/m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='P18']", xnMgr).Count > 0) ? DataElementsMaster.SelectSingleNode("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FV']/m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='P18']/m:longFreetext", xnMgr).InnerText : "";

                //결제요청정보
                XmlNode PaymentRequest = XmlDoc.SelectSingleNode("ResponseDetails/paymentRequest");
                XmlNode RequestCardInfo = PaymentRequest.SelectSingleNode("cardInfo");
                XmlNode RequestCard = RequestCardInfo.SelectSingleNode("card");
                XmlNode RequestCashInfo = PaymentRequest.SelectSingleNode("cashInfo");
                XmlNode RequestCash = RequestCashInfo.SelectSingleNode("cash");
                XmlNode RequestCouponInfo = PaymentRequest.SelectSingleNode("couponInfo");
                XmlNode RequestCoupon = RequestCouponInfo.SelectSingleNode("coupon");
                XmlNode RequestTasfInfo = PaymentRequest.SelectSingleNode("tasfInfo");
                XmlNode RequestTasf = RequestTasfInfo.SelectSingleNode("tasf");
                XmlNode NewRequestCard;
                XmlNode NewRequestCash;
                XmlNode NewRequestCoupon;
                XmlNode NewRequestTasf;

                if (XmlDBBooking.SelectNodes("item10").Count > 0)
                {
                    foreach (XmlNode PRInfo in XmlDBBooking.SelectNodes("item10"))
                    {
                        string[] PaxInfos = PRInfo.SelectSingleNode("탑승객정보").InnerText.Split(',');
                        double PaxInfosLen = PaxInfos.Length;

                        foreach (string PaxInfo in PaxInfos)
                        {
                            if (PRInfo.SelectSingleNode("카드결제여부").InnerText.Equals("Y"))
                            {
                                NewRequestCard = RequestCardInfo.AppendChild(RequestCard.CloneNode(false));
                                NewRequestCard.Attributes.GetNamedItem("traveler").InnerText = "0";
                                NewRequestCard.Attributes.GetNamedItem("travelerInfo").InnerText = PaxInfo;
                                NewRequestCard.Attributes.GetNamedItem("gross").InnerText = (cm.RequestDouble(PRInfo.SelectSingleNode("카드결제금액").InnerText) / PaxInfosLen).ToString();
                                NewRequestCard.Attributes.GetNamedItem("cnc").InnerText = "KRW";
                                NewRequestCard.Attributes.GetNamedItem("code").InnerText = PRInfo.SelectSingleNode("카드코드").InnerText;
                                NewRequestCard.Attributes.GetNamedItem("name").InnerText = PRInfo.SelectSingleNode("카드종류").InnerText;
                                NewRequestCard.Attributes.GetNamedItem("number").InnerText = PRInfo.SelectSingleNode("카드번호").InnerText;
                                NewRequestCard.Attributes.GetNamedItem("vaildThru").InnerText = PRInfo.SelectSingleNode("유효기간").InnerText;
                                NewRequestCard.Attributes.GetNamedItem("installment").InnerText = PRInfo.SelectSingleNode("할부기간").InnerText;
                                NewRequestCard.Attributes.GetNamedItem("bl").InnerText = PRInfo.SelectSingleNode("BL여부").InnerText;
                                NewRequestCard.Attributes.GetNamedItem("holder").InnerText = PRInfo.SelectSingleNode("소유자명").InnerText;
                                NewRequestCard.Attributes.GetNamedItem("rqt").InnerText = PRInfo.SelectSingleNode("구분").InnerText;
                                NewRequestCard.Attributes.GetNamedItem("rqn").InnerText = PRInfo.SelectSingleNode("요청일련번호").InnerText;
                            }

                            if (PRInfo.SelectSingleNode("계좌이체여부").InnerText.Equals("Y") && cm.RequestDouble(PRInfo.SelectSingleNode("계좌이체금액").InnerText) > 0)
                            {
                                NewRequestCash = RequestCashInfo.AppendChild(RequestCash.CloneNode(false));
                                NewRequestCash.Attributes.GetNamedItem("traveler").InnerText = "0";
                                NewRequestCash.Attributes.GetNamedItem("travelerInfo").InnerText = PaxInfo;
                                NewRequestCash.Attributes.GetNamedItem("gross").InnerText = (cm.RequestDouble(PRInfo.SelectSingleNode("계좌이체금액").InnerText) / PaxInfosLen).ToString();
                                NewRequestCash.Attributes.GetNamedItem("cnc").InnerText = "KRW";
                                NewRequestCash.Attributes.GetNamedItem("bank").InnerText = PRInfo.SelectSingleNode("은행").InnerText;
                                NewRequestCash.Attributes.GetNamedItem("accountNumber").InnerText = PRInfo.SelectSingleNode("계좌번호").InnerText;
                                NewRequestCash.Attributes.GetNamedItem("rqt").InnerText = PRInfo.SelectSingleNode("구분").InnerText;
                                NewRequestCash.Attributes.GetNamedItem("rqn").InnerText = PRInfo.SelectSingleNode("요청일련번호").InnerText;
                            }

                            if (PRInfo.SelectSingleNode("할인쿠폰여부").InnerText.Equals("Y") && cm.RequestDouble(PRInfo.SelectSingleNode("할인쿠폰금액").InnerText) > 0)
                            {
                                NewRequestCoupon = RequestCouponInfo.AppendChild(RequestCoupon.CloneNode(false));
                                NewRequestCoupon.Attributes.GetNamedItem("traveler").InnerText = "0";
                                NewRequestCoupon.Attributes.GetNamedItem("travelerInfo").InnerText = "전체승객";
                                NewRequestCoupon.Attributes.GetNamedItem("gross").InnerText = PRInfo.SelectSingleNode("할인쿠폰금액").InnerText;
                                NewRequestCoupon.Attributes.GetNamedItem("cnc").InnerText = "KRW";
                                NewRequestCoupon.Attributes.GetNamedItem("issueNumber").InnerText = PRInfo.SelectSingleNode("할인발급번호").InnerText;
                                NewRequestCoupon.Attributes.GetNamedItem("rqt").InnerText = PRInfo.SelectSingleNode("구분").InnerText;
                                NewRequestCoupon.Attributes.GetNamedItem("rqn").InnerText = PRInfo.SelectSingleNode("요청일련번호").InnerText;
                            }

                            if (PRInfo.SelectSingleNode("TASF여부").InnerText.Equals("Y") && cm.RequestDouble(PRInfo.SelectSingleNode("TASF금액").InnerText) > 0)
                            {
                                NewRequestTasf = RequestTasfInfo.AppendChild(RequestTasf.CloneNode(false));
                                NewRequestTasf.Attributes.GetNamedItem("traveler").InnerText = "0";
                                NewRequestTasf.Attributes.GetNamedItem("travelerInfo").InnerText = PaxInfo;
                                NewRequestTasf.Attributes.GetNamedItem("gross").InnerText = (cm.RequestDouble(PRInfo.SelectSingleNode("TASF금액").InnerText) / PaxInfosLen).ToString();
                                NewRequestTasf.Attributes.GetNamedItem("cnc").InnerText = "KRW";
                                NewRequestTasf.Attributes.GetNamedItem("installment").InnerText = PRInfo.SelectSingleNode("TASF할부기간").InnerText;
                                NewRequestTasf.Attributes.GetNamedItem("rqt").InnerText = PRInfo.SelectSingleNode("구분").InnerText;
                                NewRequestTasf.Attributes.GetNamedItem("rqn").InnerText = PRInfo.SelectSingleNode("요청일련번호").InnerText;
                            }
                        }
                    }
                }

                RequestCardInfo.RemoveChild(RequestCard);
                RequestCashInfo.RemoveChild(RequestCash);
                RequestCouponInfo.RemoveChild(RequestCoupon);
                RequestTasfInfo.RemoveChild(RequestTasf);

                //여정
                XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
                XmlNode Segment = FlightInfo.SelectSingleNode("seg");
                XmlNode StopSegment = Segment.SelectSingleNode("seg");
                XmlNode NewSegment;
                XmlNode NewStopSegment;
                string DepartureAirport = string.Empty;
                int idx = 1;
                int m = 1;

                foreach (XmlNode ItineraryInfo in ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR' and m:travelProduct/m:boardpointDetail]", xnMgr))
                {
                    NewSegment = FlightInfo.AppendChild(Segment.CloneNode(false));
                    NewSegment.Attributes.GetNamedItem("ref").InnerText = ItineraryInfo.SelectSingleNode("m:elementManagementItinerary/m:reference[m:qualifier='ST']/m:number", xnMgr).InnerText;
                    NewSegment.Attributes.GetNamedItem("dlc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText;
                    NewSegment.Attributes.GetNamedItem("alc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText;
                    NewSegment.Attributes.GetNamedItem("ddt").InnerText = (ItineraryInfo.SelectNodes("m:travelProduct/m:product/m:depDate", xnMgr).Count > 0) ? cm.ConvertToDateTime(ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:depDate", xnMgr).InnerText, ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:depTime", xnMgr).InnerText) : "";
                    NewSegment.Attributes.GetNamedItem("ardt").InnerText = (ItineraryInfo.SelectNodes("m:travelProduct/m:product/m:arrDate", xnMgr).Count > 0) ? cm.ConvertToDateTime(ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:arrDate", xnMgr).InnerText, ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:arrTime", xnMgr).InnerText) : "";
                    NewSegment.Attributes.GetNamedItem("mcc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:companyDetail/m:identification", xnMgr).InnerText;
                    NewSegment.Attributes.GetNamedItem("occ").InnerText = (ItineraryInfo.SelectNodes("m:legInfo/m:legTravelProduct/m:companyDetails/m:operatingCompany", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:legInfo/m:legTravelProduct/m:companyDetails/m:operatingCompany", xnMgr).InnerText : NewSegment.Attributes.GetNamedItem("mcc").InnerText;
                    NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(ItineraryInfo.SelectSingleNode("m:travelProduct/m:productDetails/m:identification", xnMgr).InnerText);
                    NewSegment.Attributes.GetNamedItem("eqt").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:equipment", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:equipment", xnMgr).InnerText : "";
                    NewSegment.Attributes.GetNamedItem("stn").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:numOfStops", xnMgr).Count > 0) ? cm.RequestInt(ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:numOfStops", xnMgr).InnerText).ToString() : "";
                    NewSegment.Attributes.GetNamedItem("rbd").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:productDetails/m:classOfService", xnMgr).InnerText;
                    //NewSegment.Attributes.GetNamedItem("rsc").InnerText = (ItineraryInfo.SelectNodes("m:relatedProduct/m:status", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:relatedProduct/m:status", xnMgr).InnerText : "";
                    NewSegment.Attributes.GetNamedItem("rsc").InnerText = ItineraryStatus(ItineraryInfo, xnMgr);
                    NewSegment.Attributes.GetNamedItem("sto").InnerText = (ResXml.SelectNodes("m:tstData", xnMgr).Count > 0) ? ((ResXml.SelectNodes(String.Format("m:tstData/m:fareBasisInfo/m:fareElement[{0}]/m:connection", m), xnMgr).Count > 0) ? ResXml.SelectSingleNode(String.Format("m:tstData/m:fareBasisInfo/m:fareElement[{0}]/m:connection", m), xnMgr).InnerText : "") : "";
                    m++;

                    if (NewSegment.Attributes.GetNamedItem("stn").InnerText.Equals("1") && ItineraryInfo.SelectNodes("m:legInfo", xnMgr).Count > 0)
                    {
                        XmlNode StopDetails1 = ItineraryInfo.SelectSingleNode("m:legInfo[1]", xnMgr);
                        XmlNode StopDetails2 = ItineraryInfo.SelectSingleNode("m:legInfo[2]", xnMgr);

                        NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                        NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = StopDetails1.SelectSingleNode("m:legTravelProduct/m:boardPointDetails/m:trueLocationId", xnMgr).InnerText;
                        NewStopSegment.Attributes.GetNamedItem("alc").InnerText = StopDetails1.SelectSingleNode("m:legTravelProduct/m:offpointDetails/m:trueLocationId", xnMgr).InnerText;
                        NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(StopDetails1.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureDate", xnMgr).InnerText, StopDetails1.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureTime", xnMgr).InnerText);
                        NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(StopDetails1.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalDate", xnMgr).InnerText, StopDetails1.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalTime", xnMgr).InnerText);

                        NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                        NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = StopDetails2.SelectSingleNode("m:legTravelProduct/m:boardPointDetails/m:trueLocationId", xnMgr).InnerText;
                        NewStopSegment.Attributes.GetNamedItem("alc").InnerText = StopDetails2.SelectSingleNode("m:legTravelProduct/m:offpointDetails/m:trueLocationId", xnMgr).InnerText;
                        NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(StopDetails2.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureDate", xnMgr).InnerText, StopDetails2.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureTime", xnMgr).InnerText);
                        NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(StopDetails2.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalDate", xnMgr).InnerText, StopDetails2.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalTime", xnMgr).InnerText);
                    }

                    if (String.IsNullOrWhiteSpace(DepartureAirport))
                        DepartureAirport = ItineraryInfo.SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText;
                }

                FlightInfo.RemoveChild(Segment);

                //탑승객
                XmlNode TravellerInfo = XmlDoc.SelectSingleNode("ResponseDetails/travellerInfo");
                XmlNode PaxData = TravellerInfo.SelectSingleNode("paxData");
                XmlNode Pax;
                XmlNode Passport;
                XmlNode NewPaxData;
                XmlNode PassengerData;

                string PTNum = string.Empty;
                string[] TmpPaxName;

                idx = 0;

                //성인
                foreach (XmlNode Traveller in ResXml.SelectNodes("m:travellerInfo[m:elementManagementPassenger/m:segmentName='NM'][m:passengerData/m:travellerInformation/m:passenger/m:type!='CHD' or not(m:passengerData/m:travellerInformation/m:passenger/m:type)]", xnMgr))
                {
                    PTNum = Traveller.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText;
                    PassengerData = Traveller.SelectSingleNode("m:passengerData[m:travellerInformation/m:passenger[not(m:type) or m:type!='INF']]", xnMgr);

                    NewPaxData = TravellerInfo.AppendChild(PaxData.CloneNode(true));
                    TmpPaxName = cm.SplitPaxType(PassengerData.SelectSingleNode("m:travellerInformation/m:passenger/m:firstName", xnMgr).InnerText.Replace(" ", ""), false);

                    Pax = NewPaxData.SelectSingleNode("pax");
                    Pax.Attributes.GetNamedItem("ref").InnerText = Traveller.SelectSingleNode("m:elementManagementPassenger/m:lineNumber", xnMgr).InnerText;
                    Pax.Attributes.GetNamedItem("psn").InnerText = PassengerData.SelectSingleNode("m:travellerInformation/m:traveller/m:surname", xnMgr).InnerText;
                    Pax.Attributes.GetNamedItem("pfn").InnerText = TmpPaxName[1];
                    Pax.Attributes.GetNamedItem("ptc").InnerText = "ADT";
                    Pax.Attributes.GetNamedItem("ptl").InnerText = TmpPaxName[0];
                    Pax.Attributes.GetNamedItem("pbd").InnerText = (Traveller.SelectNodes("m:passengerData/m:dateOfBirth", xnMgr).Count > 0) ? cm.ConvertToBirthDate(Traveller.SelectSingleNode("m:passengerData/m:dateOfBirth/m:dateAndTimeDetails[m:qualifier='706']/m:date", xnMgr).InnerText) : "";
                    Pax.Attributes.GetNamedItem("gni").InnerText = "";

                    //여권정보
                    int DocCount = ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:serviceRequest/m:ssr/m:type='DOCS'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr).Count;
                    if (DocCount > 0)
                    {
                        string[] StrDocInfo = ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:serviceRequest/m:ssr/m:type='DOCS'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}'][last()]/m:serviceRequest/m:ssr/m:freeText", PTNum), xnMgr).InnerText.Split('/');

                        if (StrDocInfo[7].Equals(Pax.Attributes.GetNamedItem("psn").InnerText) && StrDocInfo[8].Equals(Pax.Attributes.GetNamedItem("pfn").InnerText))
                        {
                            Passport = NewPaxData.SelectSingleNode("passport");
                            Passport.Attributes.GetNamedItem("id").InnerText = StrDocInfo[2];
                            Passport.Attributes.GetNamedItem("expireDate").InnerText = cm.ConvertToDateTime(StrDocInfo[6]);
                            Passport.Attributes.GetNamedItem("issueCountry").InnerText = StrDocInfo[1];
                            Passport.Attributes.GetNamedItem("holderNationality").InnerText = StrDocInfo[3];
                            Passport.Attributes.GetNamedItem("writeDate").InnerText = "";

                            if (String.IsNullOrWhiteSpace(Pax.Attributes.GetNamedItem("pbd").InnerText))
                                Pax.Attributes.GetNamedItem("pbd").InnerText = cm.ConvertToBirthDate(StrDocInfo[4]);
                        }
                    }

                    //티켓정보
                    if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext[starts-with(., 'PAX')]", PTNum), xnMgr).Count > 0)
                    {
                        NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText = Common.SplitAmadeusTicketNumber(ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext[starts-with(., 'PAX')]", PTNum), xnMgr).InnerText);
                    }

                    idx++;
                }

                //소아
                foreach (XmlNode Traveller in ResXml.SelectNodes("m:travellerInfo[m:passengerData/m:travellerInformation/m:passenger/m:type='CHD']", xnMgr))
                {
                    PTNum = Traveller.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText;

                    NewPaxData = TravellerInfo.AppendChild(PaxData.CloneNode(true));
                    TmpPaxName = cm.SplitPaxType(Traveller.SelectSingleNode("m:passengerData/m:travellerInformation/m:passenger/m:firstName", xnMgr).InnerText.Replace(" ", ""), false);

                    Pax = NewPaxData.SelectSingleNode("pax");
                    Pax.Attributes.GetNamedItem("ref").InnerText = Traveller.SelectSingleNode("m:elementManagementPassenger/m:lineNumber", xnMgr).InnerText;
                    Pax.Attributes.GetNamedItem("psn").InnerText = Traveller.SelectSingleNode("m:passengerData/m:travellerInformation/m:traveller/m:surname", xnMgr).InnerText;
                    Pax.Attributes.GetNamedItem("pfn").InnerText = TmpPaxName[1];
                    Pax.Attributes.GetNamedItem("ptc").InnerText = "CHD";
                    Pax.Attributes.GetNamedItem("ptl").InnerText = TmpPaxName[0];
                    Pax.Attributes.GetNamedItem("pbd").InnerText = (Traveller.SelectNodes("m:passengerData/m:dateOfBirth", xnMgr).Count > 0) ? cm.ConvertToBirthDate(Traveller.SelectSingleNode("m:passengerData/m:dateOfBirth/m:dateAndTimeDetails[m:qualifier='706']/m:date", xnMgr).InnerText) : "";
                    Pax.Attributes.GetNamedItem("gni").InnerText = "";

                    //여권정보
                    if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:serviceRequest/m:ssr/m:type='DOCS'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr).Count > 0)
                    {
                        string[] StrDocInfo = ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:serviceRequest/m:ssr/m:type='DOCS'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:serviceRequest/m:ssr/m:freeText", PTNum), xnMgr).InnerText.Split('/');

                        if (StrDocInfo[7].Equals(Pax.Attributes.GetNamedItem("psn").InnerText) && StrDocInfo[8].Equals(Pax.Attributes.GetNamedItem("pfn").InnerText))
                        {
                            Passport = NewPaxData.SelectSingleNode("passport");
                            Passport.Attributes.GetNamedItem("id").InnerText = StrDocInfo[2];
                            Passport.Attributes.GetNamedItem("expireDate").InnerText = cm.ConvertToDateTime(StrDocInfo[6]);
                            Passport.Attributes.GetNamedItem("issueCountry").InnerText = StrDocInfo[1];
                            Passport.Attributes.GetNamedItem("holderNationality").InnerText = StrDocInfo[3];
                            Passport.Attributes.GetNamedItem("writeDate").InnerText = "";

                            if (String.IsNullOrWhiteSpace(Pax.Attributes.GetNamedItem("pbd").InnerText))
                                Pax.Attributes.GetNamedItem("pbd").InnerText = cm.ConvertToBirthDate(StrDocInfo[4]);
                        }
                    }

                    //티켓정보
                    if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext[starts-with(., 'PAX')]", PTNum), xnMgr).Count > 0)
                    {
                        NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText = Common.SplitAmadeusTicketNumber(ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext[starts-with(., 'PAX')]", PTNum), xnMgr).InnerText);
                    }

                    idx++;
                }

                //유아
                foreach (XmlNode Traveller in ResXml.SelectNodes("m:travellerInfo[m:passengerData/m:travellerInformation/m:passenger/m:type='INF']", xnMgr))
                {
                    PTNum = Traveller.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText;
                    PassengerData = Traveller.SelectSingleNode("m:passengerData[m:travellerInformation/m:passenger/m:type='INF']", xnMgr);

                    NewPaxData = TravellerInfo.AppendChild(PaxData.CloneNode(true));
                    TmpPaxName = cm.SplitPaxType(PassengerData.SelectSingleNode("m:travellerInformation/m:passenger[m:type='INF']/m:firstName", xnMgr).InnerText.Replace(" ", ""), true);

                    Pax = NewPaxData.SelectSingleNode("pax");
                    Pax.Attributes.GetNamedItem("ref").InnerText = (idx + cm.RequestInt(Traveller.SelectSingleNode("m:passengerData/m:travellerInformation/m:passenger/m:infantIndicator", xnMgr).InnerText)).ToString();
                    Pax.Attributes.GetNamedItem("psn").InnerText = (PassengerData.SelectNodes("m:travellerInformation/m:traveller", xnMgr).Count > 0) ? PassengerData.SelectSingleNode("m:travellerInformation/m:traveller/m:surname", xnMgr).InnerText : Traveller.SelectSingleNode("m:passengerData/m:travellerInformation/m:traveller/m:surname", xnMgr).InnerText;
                    Pax.Attributes.GetNamedItem("pfn").InnerText = TmpPaxName[1];
                    Pax.Attributes.GetNamedItem("ptc").InnerText = "INF";
                    Pax.Attributes.GetNamedItem("ptl").InnerText = TmpPaxName[0];
                    Pax.Attributes.GetNamedItem("pbd").InnerText = (Traveller.SelectNodes("m:passengerData/m:dateOfBirth", xnMgr).Count > 0) ? cm.ConvertToBirthDate(PassengerData.SelectSingleNode("m:dateOfBirth/m:dateAndTimeDetails[m:qualifier='706']/m:date", xnMgr).InnerText) : "";
                    Pax.Attributes.GetNamedItem("gni").InnerText = Traveller.SelectSingleNode("m:elementManagementPassenger/m:lineNumber", xnMgr).InnerText;

                    //여권정보
                    int DocCount = ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:serviceRequest/m:ssr/m:type='DOCS'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr).Count;
                    if (DocCount > 0)
                    {
                        string[] StrDocInfo = ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:serviceRequest/m:ssr/m:type='DOCS'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}'][last()]/m:serviceRequest/m:ssr/m:freeText", PTNum), xnMgr).InnerText.Split('/');

                        if (StrDocInfo[7].Equals(Pax.Attributes.GetNamedItem("psn").InnerText) && StrDocInfo[8].Equals(Pax.Attributes.GetNamedItem("pfn").InnerText))
                        {
                            Passport = NewPaxData.SelectSingleNode("passport");
                            Passport.Attributes.GetNamedItem("id").InnerText = StrDocInfo[2];
                            Passport.Attributes.GetNamedItem("expireDate").InnerText = cm.ConvertToDateTime(StrDocInfo[6]);
                            Passport.Attributes.GetNamedItem("issueCountry").InnerText = StrDocInfo[1];
                            Passport.Attributes.GetNamedItem("holderNationality").InnerText = StrDocInfo[3];
                            Passport.Attributes.GetNamedItem("writeDate").InnerText = "";

                            if (String.IsNullOrWhiteSpace(Pax.Attributes.GetNamedItem("pbd").InnerText))
                                Pax.Attributes.GetNamedItem("pbd").InnerText = cm.ConvertToBirthDate(StrDocInfo[4]);
                        }
                    }

                    //티켓정보
                    if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext[starts-with(., 'INF')]", PTNum), xnMgr).Count > 0)
                    {
                        NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText = Common.SplitAmadeusTicketNumber(ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext[starts-with(., 'INF')]", PTNum), xnMgr).InnerText);
                    }

                    idx++;
                }

                TravellerInfo.RemoveChild(PaxData);

                //요금
                XmlNode FareInfo = XmlDoc.SelectSingleNode("ResponseDetails/fareInfo");
                XmlNode Fare = FareInfo.SelectSingleNode("fare");
                XmlNode SubFare = Fare.SelectSingleNode("fare");
                XmlNode PromotionInfo = FareInfo.SelectSingleNode("promotionInfo");
                XmlNode FareCalculation = Fare.SelectSingleNode("fareCalculation");
                XmlNode TourCode = Fare.SelectSingleNode("tourCode");
                XmlNode Commission = Fare.SelectSingleNode("commission");
                XmlNode Endorsement = Fare.SelectSingleNode("endorsement");
                XmlNode TicketingCarrier = Fare.SelectSingleNode("ticketingCarrier");
                XmlNode Traveler = Fare.SelectSingleNode("traveler");
                XmlNode TravelerRef = Traveler.SelectSingleNode("ref");
                XmlNode NewFare;
                XmlNode NewSubFare;
                XmlNode NewTourCode;
                XmlNode NewCommission;
                XmlNode NewEndorsement;
                XmlNode NewTicketingCarrier;
                XmlNode NewTraveler;
                XmlNode NewTravelerRef;

                double FareAmount = 0;
                double SumTax = 0;
                double SumFsc = 0;
                double QCharge = 0;
                double ROE = 0;
                double CalFsc = 0;
                int n = 0;

                //파트너 할인요금
                double PartnerPromotionAmount = 0;
                bool PartnerAdultYN = false;
                bool PartnerChildYN = false;
                bool PartnerInfantYN = false;

                if (PromItem != null)
                {
                    if (PromItem.SelectNodes("item/partnerPromotions").Count > 0 && PromItem.SelectNodes("item/partnerPromotions/promotion").Count > 0)
                    {
                        PartnerPromotionAmount = Convert.ToDouble(PromItem.SelectSingleNode("item/partnerPromotions/promotion").Attributes.GetNamedItem("amount").InnerText);
                        PartnerAdultYN = PromItem.SelectSingleNode("item/partnerPromotions/promotion").Attributes.GetNamedItem("adultYN").InnerText.Equals("Y") ? true : false;
                        PartnerChildYN = PromItem.SelectSingleNode("item/partnerPromotions/promotion").Attributes.GetNamedItem("childYN").InnerText.Equals("Y") ? true : false;
                        PartnerInfantYN = PromItem.SelectSingleNode("item/partnerPromotions/promotion").Attributes.GetNamedItem("infantYN").InnerText.Equals("Y") ? true : false;
                    }
                }

                idx = 0;
                foreach (XmlNode TstData in ResXml.SelectNodes("m:tstData", xnMgr))
                {
                    string PTC = TstData.SelectSingleNode("m:tstFreetext[m:freetextDetail[m:subjectQualifier='3'][m:type='41']]/m:longFreetext", xnMgr).InnerText;

                    if (PTC.Equals("INF"))
                    {
                        PTC = "INF";
                    }
                    else
                    {
                        XmlNode TravellerData = ResXml.SelectSingleNode(String.Format("m:travellerInfo[m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number='{0}']/m:passengerData[1]", TstData.SelectSingleNode("m:referenceForTstData/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText), xnMgr);

                        if (TravellerData.SelectNodes("m:travellerInformation/m:passenger[1]/m:type", xnMgr).Count > 0)
                            PTC = TravellerData.SelectSingleNode("m:travellerInformation/m:passenger[1]/m:type", xnMgr).InnerText;
                        else
                            PTC = "ADT";
                    }

                    //항공원가계산
                    string StrPrimeCost = TstData.SelectSingleNode("m:tstFreetext[m:freetextDetail[m:subjectQualifier='3'][m:type='37']]/m:longFreetext", xnMgr).InnerText;

                    //파트너할인금액
                    double DisPartnerPromotionAmount = (PartnerPromotionAmount > 0) ? (((PTC.Equals("ADT") && PartnerAdultYN) || (PTC.Equals("CHD") && PartnerChildYN) || (PTC.Equals("INF") && PartnerInfantYN)) ? PartnerPromotionAmount : 0) : 0;

                    if (PTC.Equals("ADT") && ItemDiscount > 0)
                        DisPartnerPromotionAmount = DisPartnerPromotionAmount + ItemDiscount;

                    FareAmount = (TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:currencyCode", xnMgr).InnerText != "KRW" && TstData.SelectNodes("m:fareData/m:monetaryInfo[m:qualifier='E']", xnMgr).Count > 0) ? cm.RequestDouble(TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='E']/m:amount", xnMgr).InnerText) : cm.RequestDouble(TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:amount", xnMgr).InnerText);
                    SumTax = 0;
                    SumFsc = 0;

                    foreach (XmlNode TaxFields in TstData.SelectNodes("m:fareData/m:taxFields", xnMgr))
                    {
                        if (TaxFields.SelectSingleNode("m:taxCountryCode", xnMgr).InnerText.Equals("YR") || TaxFields.SelectSingleNode("m:taxCountryCode", xnMgr).InnerText.Equals("YQ"))
                            SumFsc += cm.RequestDouble(TaxFields.SelectSingleNode("m:taxAmount", xnMgr).InnerText);
                        else
                            SumTax += cm.RequestDouble(TaxFields.SelectSingleNode("m:taxAmount", xnMgr).InnerText);
                    }

                    //Q-Charge
                    QCharge = 0;
                    ROE = 0;
                    CalFsc = 0;

                    if (TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:currencyCode", xnMgr).InnerText.Equals("KRW"))
                    {
                        if (TstData.SelectNodes("m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='37']", xnMgr).Count > 0 && TstData.SelectSingleNode("m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='37']/m:longFreetext", xnMgr).InnerText.IndexOf("Q") != -1)
                        {
                            double[] QInfo = Common.GetQCharge(TstData.SelectSingleNode("m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='37']/m:longFreetext", xnMgr).InnerText);
                            QCharge = QInfo[0];
                            ROE = QInfo[1];

                            CalFsc = Common.IntIncrement(QCharge * ROE, 100);
                            SumFsc = Common.GetFuelSurCharge(ValidatingCarrier, SumFsc, CalFsc);

                            if (ValidatingCarrier.Equals("HA") || ValidatingCarrier.Equals("TW"))
                                FareAmount = FareAmount - CalFsc;
                        }
                    }

                    NewFare = FareInfo.InsertBefore(Fare.CloneNode(false), PromotionInfo);
                    NewFare.Attributes.GetNamedItem("ptc").InnerText = PTC;
                    NewFare.Attributes.GetNamedItem("amount").InnerText = TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='T']/m:amount", xnMgr).InnerText;
                    NewFare.Attributes.GetNamedItem("fare").InnerText = FareAmount.ToString();
                    NewFare.Attributes.GetNamedItem("disFare").InnerText = (PromItem == null) ? (FareAmount - DisPartnerPromotionAmount).ToString() : (cm.PromotionFare(FareAmount, NewFare.Attributes.GetNamedItem("ptc").InnerText, PromItem.SelectSingleNode("item")) - DisPartnerPromotionAmount).ToString();
                    NewFare.Attributes.GetNamedItem("tax").InnerText = SumTax.ToString();
                    NewFare.Attributes.GetNamedItem("fsc").InnerText = SumFsc.ToString();
                    NewFare.Attributes.GetNamedItem("disPartner").InnerText = DisPartnerPromotionAmount.ToString();
                    NewFare.Attributes.GetNamedItem("tasf").InnerText = "0";
                    NewFare.Attributes.GetNamedItem("subPrice").InnerText = (cm.RequestInt(NewFare.Attributes.GetNamedItem("disFare").InnerText) + cm.RequestInt(NewFare.Attributes.GetNamedItem("tax").InnerText) + cm.RequestInt(NewFare.Attributes.GetNamedItem("fsc").InnerText)).ToString();
                    NewFare.Attributes.GetNamedItem("price").InnerText = NewFare.Attributes.GetNamedItem("subPrice").InnerText;
                    NewFare.Attributes.GetNamedItem("cnc").InnerText = TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:currencyCode", xnMgr).InnerText;
                    NewFare.Attributes.GetNamedItem("createDate").InnerText = cm.ConvertToDateTime(TstData.SelectSingleNode("m:tstGeneralInformation/m:generalInformation/m:tstCreationDate", xnMgr).InnerText);

                    foreach (XmlNode SegAssociation in TstData.SelectNodes("m:segmentAssociation/m:selection/m:option", xnMgr))
                        NewFare.Attributes.GetNamedItem("calMode").InnerText += String.Concat(String.IsNullOrWhiteSpace(NewFare.Attributes.GetNamedItem("calMode").InnerText) ? "" : " ", SegAssociation.InnerText);

                    if (!Common.KoreaOfAirport(DepartureAirport) || StrPrimeCost.IndexOf("M/IT") != -1)
                        NewFare.Attributes.GetNamedItem("primeFare").InnerText = NewFare.Attributes.GetNamedItem("fare").InnerText;
                    else
                    {
                        Match match = new Regex(@"NUC(?<NUC>[0-9.]+)END.+ROE(?<ROE>[0-9.]+).?", RegexOptions.Singleline).Match(StrPrimeCost);

                        if (match.Success)
                        {
                            if (ValidatingCarrier.Equals("HA") || ValidatingCarrier.Equals("TW"))
                                NewFare.Attributes.GetNamedItem("primeFare").InnerText = (Common.IntIncrement((cm.RequestDouble(match.Groups["NUC"].Value) * cm.RequestDouble(match.Groups["ROE"].Value)), 100) - CalFsc).ToString();
                            else
                                NewFare.Attributes.GetNamedItem("primeFare").InnerText = Common.IntIncrement((cm.RequestDouble(match.Groups["NUC"].Value) * cm.RequestDouble(match.Groups["ROE"].Value)), 100).ToString();
                        }
                        else
                            NewFare.Attributes.GetNamedItem("primeFare").InnerText = NewFare.Attributes.GetNamedItem("fare").InnerText;
                    }

                    n = 0;
                    for (int i = 0; i < TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr).Count; i++)
                    {
                        XmlNode FareElement = TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr)[i];

                        NewSubFare = NewFare.AppendChild(SubFare.CloneNode(false));
                        NewSubFare.Attributes.GetNamedItem("basis").InnerText = String.Concat((FareElement.SelectNodes("m:primaryCode", xnMgr).Count > 0) ? FareElement.SelectSingleNode("m:primaryCode", xnMgr).InnerText : "", (FareElement.SelectNodes("m:fareBasis", xnMgr).Count > 0) ? FareElement.SelectSingleNode("m:fareBasis", xnMgr).InnerText : "");
                        NewSubFare.Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty((FareElement.SelectNodes("m:baggageAllowance", xnMgr).Count > 0) ? FareElement.SelectSingleNode("m:baggageAllowance", xnMgr).InnerText : "");
                        NewSubFare.Attributes.GetNamedItem("nvb").InnerText = (FareElement.SelectNodes("m:notValidBefore", xnMgr).Count > 0) ? cm.ConvertToDateTime(FareElement.SelectSingleNode("m:notValidBefore", xnMgr).InnerText) : "";
                        NewSubFare.Attributes.GetNamedItem("nva").InnerText = (FareElement.SelectNodes("m:notValidAfter", xnMgr).Count > 0) ? cm.ConvertToDateTime(FareElement.SelectSingleNode("m:notValidAfter", xnMgr).InnerText) : "";
                        NewSubFare.Attributes.GetNamedItem("tkd").InnerText = (FareElement.SelectNodes("m:ticketDesignator", xnMgr).Count > 0) ? FareElement.SelectSingleNode("m:ticketDesignator", xnMgr).InnerText : "";

                        if (ResXml.SelectNodes(String.Format("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:reference[m:qualifier='ST' and m:number='{0}']][m:elementManagementItinerary/m:segmentName='AIR'][m:travelProduct/m:boardpointDetail]", TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST']/m:number", xnMgr)[n].InnerText), xnMgr).Count > 0)
                            NewSubFare.Attributes.GetNamedItem("seg").InnerText = TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST']/m:number", xnMgr)[n++].InnerText;
                        else
                        {
                            NewSubFare.Attributes.GetNamedItem("seg").InnerText = TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST']/m:number", xnMgr)[(++n)].InnerText;
                            n++;
                        }
                    }

                    NewFare.AppendChild(FareCalculation.CloneNode(false)).InnerText = StrPrimeCost;

                    string TstPT = string.Empty;
                    string TstST = string.Empty;
                    string DeiPT = string.Empty;
                    string DeiST = string.Empty;

                    foreach (XmlNode RefNumber in TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']/m:number", xnMgr))
                        TstPT += String.Concat(RefNumber.InnerText, "/");

                    foreach (XmlNode RefNumber in TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST']/m:number", xnMgr))
                        TstST += String.Concat(RefNumber.InnerText, "/");

                    if (PTC.Equals("INF"))
                    {
                        //투어코드
                        NewTourCode = NewFare.AppendChild(TourCode.CloneNode(false));
                        if (DataElementsMaster.SelectNodes("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FT']/m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='12']/m:longFreetext[starts-with(., 'INF')]", xnMgr).Count > 0)
                            NewTourCode.InnerText = DataElementsMaster.SelectSingleNode("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FT']/m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='12']/m:longFreetext[starts-with(., 'INF')]", xnMgr).InnerText;

                        //커미션
                        NewCommission = NewFare.AppendChild(Commission.CloneNode(false));
                        if (DataElementsMaster.SelectNodes("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FM']/m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='11']", xnMgr).Count > 0)
                            NewCommission.InnerText = DataElementsMaster.SelectSingleNode("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FM']/m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='11']/m:longFreetext", xnMgr).InnerText;

                        //엔도스
                        DeiPT = string.Empty;
                        DeiST = string.Empty;
                        NewEndorsement = NewFare.AppendChild(Endorsement.CloneNode(false));
                        foreach (XmlNode DataElementsIndiv in DataElementsMaster.SelectNodes("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FE'][m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='10']/m:longFreetext[starts-with(., 'INF')]]", xnMgr))
                        {
                            foreach (XmlNode RefNumber in DataElementsIndiv.SelectNodes("m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number", xnMgr))
                                DeiPT += String.Concat(RefNumber.InnerText, "/");

                            foreach (XmlNode RefNumber in DataElementsIndiv.SelectNodes("m:referenceForDataElement/m:reference[m:qualifier='ST']/m:number", xnMgr))
                                DeiST += String.Concat(RefNumber.InnerText, "/");

                            if (TstPT.Equals(DeiPT) && TstST.Equals(DeiST))
                            {
                                NewEndorsement.InnerText = DataElementsIndiv.SelectSingleNode("m:otherDataFreetext/m:longFreetext", xnMgr).InnerText;
                                break;
                            }
                        }

                        //발권항공사
                        DeiPT = string.Empty;
                        DeiST = string.Empty;
                        NewTicketingCarrier = NewFare.AppendChild(TicketingCarrier.CloneNode(false));
                        foreach (XmlNode DataElementsIndiv in DataElementsMaster.SelectNodes("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FV'][m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='P18']/m:longFreetext[starts-with(., 'INF')]]", xnMgr))
                        {
                            foreach (XmlNode RefNumber in DataElementsIndiv.SelectNodes("m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number", xnMgr))
                                DeiPT += String.Concat(RefNumber.InnerText, "/");

                            foreach (XmlNode RefNumber in DataElementsIndiv.SelectNodes("m:referenceForDataElement/m:reference[m:qualifier='ST']/m:number", xnMgr))
                                DeiST += String.Concat(RefNumber.InnerText, "/");

                            if (TstPT.Equals(DeiPT) && TstST.Equals(DeiST))
                            {
                                NewTicketingCarrier.InnerText = DataElementsIndiv.SelectSingleNode("m:otherDataFreetext/m:longFreetext", xnMgr).InnerText;
                                break;
                            }
                        }

                        //탑승객 참조번호
                        NewTraveler = NewFare.AppendChild(Traveler.CloneNode(false));
                        foreach (XmlNode PaxReference in TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']", xnMgr))
                        {
                            NewTravelerRef = NewTraveler.AppendChild(TravelerRef.CloneNode(false));

                            XmlNode Passenger = ResXml.SelectSingleNode(String.Format("m:travellerInfo[m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number='{0}']/m:passengerData/m:travellerInformation[m:passenger/m:type='INF']", PaxReference.SelectSingleNode("m:number", xnMgr).InnerText), xnMgr);
                            NewTravelerRef.InnerText = TravellerInfo.SelectSingleNode(String.Format("paxData/pax[concat(@psn, @pfn, @ptl)='{0}']", String.Concat(Passenger.SelectSingleNode("m:traveller/m:surname", xnMgr).InnerText, Passenger.SelectSingleNode("m:passenger[m:type='INF']/m:firstName", xnMgr).InnerText.Replace(" ", "")))).Attributes.GetNamedItem("ref").InnerText;
                        }
                    }
                    else
                    {
                        //투어코드
                        NewTourCode = NewFare.AppendChild(TourCode.CloneNode(false));
                        if (DataElementsMaster.SelectNodes("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FT']/m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='12']/m:longFreetext[starts-with(., 'PAX')]", xnMgr).Count > 0)
                            NewTourCode.InnerText = DataElementsMaster.SelectSingleNode("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FT']/m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='12']/m:longFreetext[starts-with(., 'PAX')]", xnMgr).InnerText;

                        //커미션
                        NewCommission = NewFare.AppendChild(Commission.CloneNode(false));
                        if (DataElementsMaster.SelectNodes("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FM']/m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='11']", xnMgr).Count > 0)
                            NewCommission.InnerText = DataElementsMaster.SelectSingleNode("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FM']/m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='11']/m:longFreetext", xnMgr).InnerText;

                        //엔도스
                        DeiPT = string.Empty;
                        DeiST = string.Empty;
                        NewEndorsement = NewFare.AppendChild(Endorsement.CloneNode(false));
                        foreach (XmlNode DataElementsIndiv in DataElementsMaster.SelectNodes("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FE'][m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='10']/m:longFreetext[starts-with(., 'PAX')]]", xnMgr))
                        {
                            foreach (XmlNode RefNumber in DataElementsIndiv.SelectNodes("m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number", xnMgr))
                                DeiPT += String.Concat(RefNumber.InnerText, "/");

                            foreach (XmlNode RefNumber in DataElementsIndiv.SelectNodes("m:referenceForDataElement/m:reference[m:qualifier='ST']/m:number", xnMgr))
                                DeiST += String.Concat(RefNumber.InnerText, "/");

                            if (TstPT.Equals(DeiPT) && TstST.Equals(DeiST))
                            {
                                NewEndorsement.InnerText = DataElementsIndiv.SelectSingleNode("m:otherDataFreetext/m:longFreetext", xnMgr).InnerText;
                                break;
                            }
                        }

                        //발권항공사
                        DeiPT = string.Empty;
                        DeiST = string.Empty;
                        NewTicketingCarrier = NewFare.AppendChild(TicketingCarrier.CloneNode(false));
                        foreach (XmlNode DataElementsIndiv in DataElementsMaster.SelectNodes("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FV'][m:otherDataFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='P18']/m:longFreetext[starts-with(., 'PAX')]]", xnMgr))
                        {
                            foreach (XmlNode RefNumber in DataElementsIndiv.SelectNodes("m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number", xnMgr))
                                DeiPT += String.Concat(RefNumber.InnerText, "/");

                            foreach (XmlNode RefNumber in DataElementsIndiv.SelectNodes("m:referenceForDataElement/m:reference[m:qualifier='ST']/m:number", xnMgr))
                                DeiST += String.Concat(RefNumber.InnerText, "/");

                            if (TstPT.Equals(DeiPT) && TstST.Equals(DeiST))
                            {
                                NewTicketingCarrier.InnerText = DataElementsIndiv.SelectSingleNode("m:otherDataFreetext/m:longFreetext", xnMgr).InnerText;
                                break;
                            }
                        }

                        //탑승객 참조번호
                        NewTraveler = NewFare.AppendChild(Traveler.CloneNode(false));
                        foreach (XmlNode PaxReference in TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']", xnMgr))
                        {
                            NewTravelerRef = NewTraveler.AppendChild(TravelerRef.CloneNode(false));

                            XmlNode Passenger = ResXml.SelectSingleNode(String.Format("m:travellerInfo[m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number='{0}']/m:passengerData/m:travellerInformation[not(m:passenger/m:type) or m:passenger/m:type!='INF']", PaxReference.SelectSingleNode("m:number", xnMgr).InnerText), xnMgr);
                            NewTravelerRef.InnerText = TravellerInfo.SelectSingleNode(String.Format("paxData/pax[concat(@psn, @pfn, @ptl)='{0}']", String.Concat(Passenger.SelectSingleNode("m:traveller/m:surname", xnMgr).InnerText, Passenger.SelectSingleNode("m:passenger[not(m:type) or m:type!='INF']/m:firstName", xnMgr).InnerText.Replace(" ", "")))).Attributes.GetNamedItem("ref").InnerText;
                        }
                    }

                    //발권수수료 적용
                    if (XmlDBBooking.SelectNodes(String.Format("item4[구분='{0}']/발권수수료", NewFare.Attributes.GetNamedItem("ptc").InnerText)).Count > 0)
                    {
                        NewFare.Attributes.GetNamedItem("tasf").InnerText = XmlDBBooking.SelectSingleNode(String.Format("item4[구분='{0}']/발권수수료", NewFare.Attributes.GetNamedItem("ptc").InnerText)).InnerText;
                        NewFare.Attributes.GetNamedItem("price").InnerText = (cm.RequestInt(NewFare.Attributes.GetNamedItem("price").InnerText) + cm.RequestInt(NewFare.Attributes.GetNamedItem("tasf").InnerText)).ToString();
                    }
                }

                FareInfo.RemoveChild(Fare);

                //프로모션
                if (PromItem != null)
                    FareInfo.ReplaceChild(XmlDoc.ImportNode(PromItem, true), PromotionInfo);

                //결제정보
                XmlNode PaymentInfo = XmlDoc.SelectSingleNode("ResponseDetails/paymentInfo");
                XmlNode CardInfo = PaymentInfo.SelectSingleNode("cardInfo");
                XmlNode Card = CardInfo.SelectSingleNode("card");
                XmlNode CashInfo = PaymentInfo.SelectSingleNode("cashInfo");
                XmlNode Cash = CashInfo.SelectSingleNode("cash");
                XmlNode CouponInfo = PaymentInfo.SelectSingleNode("couponInfo");
                XmlNode Coupon = CouponInfo.SelectSingleNode("coupon");
                XmlNode NewCard;
                XmlNode NewCash;
                XmlNode NewCoupon;
                string TravelerNumber = string.Empty;
                string TravelerAmount = string.Empty;
                string CurrencyCode = (FareInfo.SelectNodes("fare").Count > 0) ? FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("cnc").InnerText : "";

                idx = 0;
                foreach (XmlNode PayInfo in DataElementsMaster.SelectNodes("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FP'][m:otherDataFreetext/m:freetextDetail/m:subjectQualifier='3' and m:otherDataFreetext/m:freetextDetail/m:type='16']", xnMgr))
                {
                    string StrPayInfo = PayInfo.SelectSingleNode("m:otherDataFreetext[m:freetextDetail/m:type='16']/m:longFreetext", xnMgr).InnerText;
                    Match match1 = new Regex(@"CC(?<CARD>[A-Z]+[0-9]{4}/[0-9]{4})*", RegexOptions.Singleline).Match(StrPayInfo);
                    Match match2 = new Regex(@"(?<CASH>CASH)", RegexOptions.Singleline).Match(StrPayInfo);
                    Match match3 = new Regex(@"/(?<CNC>[A-Z]{3})(?<GROSS>[0-9]+)$", RegexOptions.Singleline).Match(StrPayInfo);
                    Match match4 = new Regex(@".+\+(?<GBN>[A-Z]{2})", RegexOptions.Singleline).Match(StrPayInfo);

                    foreach (XmlNode RefTraveler in PayInfo.SelectNodes("m:referenceForDataElement/m:reference[m:qualifier='PT']", xnMgr))
                    {
                        if (StrPayInfo.StartsWith("INF"))
                        {
                            TravelerNumber = (idx + cm.RequestInt(ResXml.SelectSingleNode(String.Format("m:travellerInfo[m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number='{0}']/m:passengerData/m:travellerInformation/m:passenger/m:infantIndicator", RefTraveler.SelectSingleNode("m:number", xnMgr).InnerText), xnMgr).InnerText)).ToString();
                        }
                        else
                        {
                            TravelerNumber = ResXml.SelectSingleNode(String.Format("m:travellerInfo/m:elementManagementPassenger[m:reference[m:qualifier='PT']/m:number='{0}']/m:lineNumber", RefTraveler.SelectSingleNode("m:number", xnMgr).InnerText), xnMgr).InnerText;
                            idx++;
                        }

                        TravelerAmount = (FareInfo.SelectNodes(String.Format("fare[traveler/ref='{0}']", TravelerNumber)).Count > 0) ? FareInfo.SelectSingleNode(String.Format("fare[traveler/ref='{0}']", TravelerNumber)).Attributes.GetNamedItem("amount").InnerText : "";

                        if (match1.Success)
                        {
                            NewCard = CardInfo.AppendChild(Card.CloneNode(false));
                            NewCard.Attributes.GetNamedItem("traveler").InnerText = TravelerNumber;
                            NewCard.InnerText = match1.Groups["CARD"].Value;
                            NewCard.Attributes.GetNamedItem("gross").InnerText = (match3.Success) ? ((match4.Success && match4.Groups["GBN"].Value.Equals("CC")) ? match3.Groups["GROSS"].Value : Convert.ToString(cm.RequestDouble(TravelerAmount) - cm.RequestDouble(match3.Groups["GROSS"].Value))) : TravelerAmount;
                            NewCard.Attributes.GetNamedItem("cnc").InnerText = (match3.Success) ? match3.Groups["CNC"].Value : CurrencyCode;
                        }

                        if (match2.Success)
                        {
                            NewCash = CashInfo.AppendChild(Cash.CloneNode(false));
                            NewCash.Attributes.GetNamedItem("traveler").InnerText = TravelerNumber;
                            NewCash.Attributes.GetNamedItem("gross").InnerText = (match3.Success) ? ((match4.Success && match4.Groups["GBN"].Value.Equals("CA")) ? match3.Groups["GROSS"].Value : Convert.ToString(cm.RequestDouble(TravelerAmount) - cm.RequestDouble(match3.Groups["GROSS"].Value))) : TravelerAmount;
                            NewCash.Attributes.GetNamedItem("cnc").InnerText = (match3.Success) ? match3.Groups["CNC"].Value : CurrencyCode;
                        }
                    }
                }

                if (XmlDBBooking.SelectNodes("item12").Count > 0)
                {
                    foreach (XmlNode CPInfo in XmlDBBooking.SelectNodes("item12"))
                    {
                        NewCoupon = CouponInfo.AppendChild(Coupon.CloneNode(false));
                        NewCoupon.Attributes.GetNamedItem("traveler").InnerText = "0";
                        NewCoupon.Attributes.GetNamedItem("gross").InnerText = CPInfo.SelectSingleNode("수납액").InnerText;
                        NewCoupon.Attributes.GetNamedItem("cnc").InnerText = "KRW";
                    }
                }

                CardInfo.RemoveChild(Card);
                CashInfo.RemoveChild(Cash);
                CouponInfo.RemoveChild(Coupon);

                return XmlDoc.DocumentElement;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }
		}

        /// <summary>
        /// PNR정보로 티켓 이미지 출력
        /// </summary>
        /// <param name="XmlDBBooking">저장된 예약정보</param>
        /// <param name="ResXml">PNR 정보</param>
        /// <returns></returns>
        public XmlElement ToModeSearchETicketAbacus(XmlElement XmlDBBooking, XmlElement ResXml)
        {
            if (ResXml.Attributes.GetNamedItem("Version").InnerText.Equals("3.10.0"))
                return ToModeSearchETicketAbacus_NewVersion(XmlDBBooking, ResXml);
            else if (ResXml.Attributes.GetNamedItem("Version").InnerText.Equals("3.8.0"))
                return ToModeSearchETicketAbacus_38Version(XmlDBBooking, ResXml);
            else
                return ToModeSearchETicketAbacus_OldVersion(XmlDBBooking, ResXml);
        }

		/// <summary>
		/// PNR정보로 티켓 이미지 출력(신버전용)
		/// </summary>
		/// <param name="XmlDBBooking">저장된 예약정보</param>
		/// <param name="ResXml">PNR 정보</param>
		/// <returns></returns>
		public XmlElement ToModeSearchETicketAbacus_NewVersion(XmlElement XmlDBBooking, XmlElement ResXml)
		{
			XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
            xnMgr.AddNamespace("stl", AbacusConfig.NamespaceURL("TravelItineraryRead_stl"));
            xnMgr.AddNamespace("tir310", AbacusConfig.NamespaceURL("TravelItineraryRead_tir310"));

			//오류 결과일 경우 예외 처리
            if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
			{
                throw new Exception(ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText);
			}

            XmlNode TravelItinerary = ResXml.SelectSingleNode("tir310:TravelItinerary", xnMgr);
            XmlNode PricedItinerary = (TravelItinerary.SelectNodes("tir310:ItineraryInfo/tir310:ItineraryPricing", xnMgr).Count > 0) ? TravelItinerary.SelectSingleNode("tir310:ItineraryInfo/tir310:ItineraryPricing/tir310:PriceQuote/tir310:PricedItinerary", xnMgr) : null;

			//프로모션
			XmlNode PromItem = null;

			if (XmlDBBooking.SelectNodes("item3/요금XML").Count > 0)
			{
				XmlDocument XmlProm = new XmlDocument();
				XmlProm.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                //모두웨어에서 프로모션 삭제 시 요금조건 정보만 삭제하기 때문에 프로모션 적용 여부 판단시 해당 필드 체크로직 추가(2018-11-26,김경미매니저)
                PromItem = (!String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item3/요금조건").InnerText) && XmlProm.SelectNodes("priceIndex/promotionInfo").Count > 0) ? XmlProm.SelectSingleNode("priceIndex/promotionInfo") : null;
			}

			//통합모드
			XmlDocument XmlDoc = new XmlDocument();
			XmlDoc.Load(mc.XmlFullPath("SearchETicketRS"));

			XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

			//기본정보
			XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");

			BookingInfo.SelectSingleNode("gds").InnerText = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
			BookingInfo.SelectSingleNode("gds").Attributes.GetNamedItem("id").InnerText = "1B";
			BookingInfo.SelectSingleNode("bookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;
            BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = TravelItinerary.SelectSingleNode("tir310:ItineraryRef", xnMgr).Attributes.GetNamedItem("ID").InnerText;
			BookingInfo.SelectSingleNode("modeBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item/예약번호").InnerText;
			BookingInfo.SelectSingleNode("agentBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/주문아이템코드").InnerText;
            BookingInfo.SelectSingleNode("allianceBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/제휴사주문번호").InnerText;
			BookingInfo.SelectSingleNode("bookingCreationDate").InnerText = cm.RequestDateTime(XmlDBBooking.SelectSingleNode("item/예약일").InnerText, "yyyy-MM-dd HH:mm:ss");

			//추가정보
			XmlNode AddInfo = XmlDoc.SelectSingleNode("ResponseDetails/addInfo");

			AddInfo.SelectSingleNode("iata").InnerText = "";
			AddInfo.SelectSingleNode("city").InnerText = "";
			AddInfo.SelectSingleNode("tourCode").InnerText = "";
			AddInfo.SelectSingleNode("commission").InnerText = "";
            AddInfo.SelectSingleNode("endorsement").InnerText = (PricedItinerary != null && PricedItinerary.SelectNodes("tir310:AirItineraryPricingInfo/tir310:PTC_FareBreakdown/tir310:Endorsements[@type='SYSTEM_ENDORSEMENT']", xnMgr).Count > 0) ? PricedItinerary.SelectSingleNode("tir310:AirItineraryPricingInfo/tir310:PTC_FareBreakdown/tir310:Endorsements[@type='SYSTEM_ENDORSEMENT']/tir310:Text", xnMgr).InnerText : "";
            AddInfo.SelectSingleNode("ticketingCarrier").InnerText = (PricedItinerary != null) ? PricedItinerary.Attributes.GetNamedItem("ValidatingCarrier").InnerText : "";

			//결제요청정보
			XmlNode PaymentRequest = XmlDoc.SelectSingleNode("ResponseDetails/paymentRequest");
			XmlNode RequestCardInfo = PaymentRequest.SelectSingleNode("cardInfo");
			XmlNode RequestCard = RequestCardInfo.SelectSingleNode("card");
			XmlNode RequestCashInfo = PaymentRequest.SelectSingleNode("cashInfo");
			XmlNode RequestCash = RequestCashInfo.SelectSingleNode("cash");
			XmlNode RequestTasfInfo = PaymentRequest.SelectSingleNode("tasfInfo");
			XmlNode RequestTasf = RequestTasfInfo.SelectSingleNode("tasf");
			XmlNode NewRequestCard;
			XmlNode NewRequestCash;
			XmlNode NewRequestTasf;

			if (XmlDBBooking.SelectNodes("item10").Count > 0)
			{
				foreach (XmlNode PRInfo in XmlDBBooking.SelectNodes("item10"))
				{
					string[] PaxInfos = PRInfo.SelectSingleNode("탑승객정보").InnerText.Split(',');
					double PaxInfosLen = PaxInfos.Length;

					foreach (string PaxInfo in PaxInfos)
					{
						if (PRInfo.SelectSingleNode("카드결제여부").InnerText.Equals("Y"))
						{
							NewRequestCard = RequestCardInfo.AppendChild(RequestCard.CloneNode(false));
							NewRequestCard.Attributes.GetNamedItem("traveler").InnerText = "0";
							NewRequestCard.Attributes.GetNamedItem("travelerInfo").InnerText = PaxInfo;
							NewRequestCard.Attributes.GetNamedItem("gross").InnerText = (cm.RequestDouble(PRInfo.SelectSingleNode("카드결제금액").InnerText) / PaxInfosLen).ToString();
							NewRequestCard.Attributes.GetNamedItem("cnc").InnerText = "KRW";
							NewRequestCard.Attributes.GetNamedItem("name").InnerText = PRInfo.SelectSingleNode("카드종류").InnerText;
							NewRequestCard.Attributes.GetNamedItem("number").InnerText = PRInfo.SelectSingleNode("카드번호").InnerText;
							NewRequestCard.Attributes.GetNamedItem("vaildThru").InnerText = PRInfo.SelectSingleNode("유효기간").InnerText;
							NewRequestCard.Attributes.GetNamedItem("installment").InnerText = PRInfo.SelectSingleNode("할부기간").InnerText;
							NewRequestCard.Attributes.GetNamedItem("bl").InnerText = PRInfo.SelectSingleNode("BL여부").InnerText;
							NewRequestCard.Attributes.GetNamedItem("holder").InnerText = PRInfo.SelectSingleNode("소유자명").InnerText;
							NewRequestCard.Attributes.GetNamedItem("rqt").InnerText = PRInfo.SelectSingleNode("구분").InnerText;
							NewRequestCard.Attributes.GetNamedItem("rqn").InnerText = PRInfo.SelectSingleNode("요청일련번호").InnerText;
						}

						if (PRInfo.SelectSingleNode("계좌이체여부").InnerText.Equals("Y") && cm.RequestDouble(PRInfo.SelectSingleNode("계좌이체금액").InnerText) > 0)
						{
							NewRequestCash = RequestCashInfo.AppendChild(RequestCash.CloneNode(false));
							NewRequestCash.Attributes.GetNamedItem("traveler").InnerText = "0";
							NewRequestCash.Attributes.GetNamedItem("travelerInfo").InnerText = PaxInfo;
							NewRequestCash.Attributes.GetNamedItem("gross").InnerText = (cm.RequestDouble(PRInfo.SelectSingleNode("계좌이체금액").InnerText) / PaxInfosLen).ToString();
							NewRequestCash.Attributes.GetNamedItem("cnc").InnerText = "KRW";
							NewRequestCash.Attributes.GetNamedItem("bank").InnerText = PRInfo.SelectSingleNode("은행").InnerText;
							NewRequestCash.Attributes.GetNamedItem("accountNumber").InnerText = PRInfo.SelectSingleNode("계좌번호").InnerText;
							NewRequestCash.Attributes.GetNamedItem("rqt").InnerText = PRInfo.SelectSingleNode("구분").InnerText;
							NewRequestCash.Attributes.GetNamedItem("rqn").InnerText = PRInfo.SelectSingleNode("요청일련번호").InnerText;
						}

						if (PRInfo.SelectSingleNode("TASF여부").InnerText.Equals("Y") && cm.RequestDouble(PRInfo.SelectSingleNode("TASF금액").InnerText) > 0)
						{
							NewRequestTasf = RequestTasfInfo.AppendChild(RequestTasf.CloneNode(false));
							NewRequestTasf.Attributes.GetNamedItem("traveler").InnerText = "0";
							NewRequestTasf.Attributes.GetNamedItem("travelerInfo").InnerText = PaxInfo;
							NewRequestTasf.Attributes.GetNamedItem("gross").InnerText = (cm.RequestDouble(PRInfo.SelectSingleNode("TASF금액").InnerText) / PaxInfosLen).ToString();
							NewRequestTasf.Attributes.GetNamedItem("cnc").InnerText = "KRW";
							NewRequestTasf.Attributes.GetNamedItem("installment").InnerText = PRInfo.SelectSingleNode("TASF할부기간").InnerText;
							NewRequestTasf.Attributes.GetNamedItem("rqt").InnerText = PRInfo.SelectSingleNode("구분").InnerText;
							NewRequestTasf.Attributes.GetNamedItem("rqn").InnerText = PRInfo.SelectSingleNode("요청일련번호").InnerText;
						}
					}
				}
			}

			RequestCardInfo.RemoveChild(RequestCard);
			RequestCashInfo.RemoveChild(RequestCash);
			RequestTasfInfo.RemoveChild(RequestTasf);

			//여정
			XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
			XmlNode Segment = FlightInfo.SelectSingleNode("seg");
			XmlNode StopSegment = Segment.SelectSingleNode("seg");
			XmlNode NewSegment;
			int idx = 1;
			int m = 1;
            bool OPEN = false;

            foreach (XmlNode AirNode in TravelItinerary.SelectNodes("tir310:ItineraryInfo/tir310:ReservationItems/tir310:Item/tir310:FlightSegment", xnMgr))
			{
                OPEN = AirNode.Attributes.GetNamedItem("FlightNumber").InnerText.Equals("OPEN") ? true : false;
                
                NewSegment = FlightInfo.AppendChild(Segment.CloneNode(false));
                NewSegment.Attributes.GetNamedItem("ref").InnerText = cm.RequestInt(AirNode.ParentNode.Attributes.GetNamedItem("RPH").InnerText).ToString();
                NewSegment.Attributes.GetNamedItem("dlc").InnerText = AirNode.SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                NewSegment.Attributes.GetNamedItem("alc").InnerText = AirNode.SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(AirNode.Attributes.GetNamedItem("DepartureDateTime").InnerText);
                NewSegment.Attributes.GetNamedItem("ardt").InnerText = OPEN ? "" : cm.ConvertToAbacusDateTime(AirNode.Attributes.GetNamedItem("ArrivalDateTime").InnerText, AirNode.Attributes.GetNamedItem("DepartureDateTime").InnerText);
                NewSegment.Attributes.GetNamedItem("mcc").InnerText = OPEN ? "" : AirNode.SelectSingleNode("tir310:MarketingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText;
                NewSegment.Attributes.GetNamedItem("occ").InnerText = OPEN ? "" : ((AirNode.SelectNodes("tir310:OperatingAirline", xnMgr).Count > 0 && (XmlAttribute)AirNode.SelectSingleNode("tir310:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code") != null) ? AirNode.SelectSingleNode("tir310:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText : NewSegment.Attributes.GetNamedItem("mcc").InnerText);
                NewSegment.Attributes.GetNamedItem("fln").InnerText = OPEN ? "" : Common.ZeroPaddingFlight(AirNode.Attributes.GetNamedItem("FlightNumber").InnerText);
                NewSegment.Attributes.GetNamedItem("eqt").InnerText = (AirNode.SelectNodes("tir310:Equipment", xnMgr).Count > 0) ? AirNode.SelectSingleNode("tir310:Equipment", xnMgr).Attributes.GetNamedItem("AirEquipType").InnerText : "";
                NewSegment.Attributes.GetNamedItem("stn").InnerText = ((XmlAttribute)AirNode.Attributes.GetNamedItem("StopQuantity") != null) ? cm.RequestInt(AirNode.Attributes.GetNamedItem("StopQuantity").InnerText).ToString() : "";
                NewSegment.Attributes.GetNamedItem("rbd").InnerText = AirNode.Attributes.GetNamedItem("ResBookDesigCode").InnerText;
                NewSegment.Attributes.GetNamedItem("rsc").InnerText = Common.BookingStatusCode(AirNode.Attributes.GetNamedItem("Status").InnerText);
				NewSegment.Attributes.GetNamedItem("sto").InnerText = "";
				m++;
			}

			FlightInfo.RemoveChild(Segment);

			//탑승객
			XmlNode TravellerInfo = XmlDoc.SelectSingleNode("ResponseDetails/travellerInfo");
			XmlNode PaxData = TravellerInfo.SelectSingleNode("paxData");
			XmlNode Pax;
			//XmlNode Passport;
            //XmlNode PassengerData;
            XmlNode NewPaxData;

            string NameNumber = string.Empty;
			string[] TmpPaxName;

			idx = 0;
            foreach (XmlNode PersonNameNode in TravelItinerary.SelectNodes("tir310:CustomerInfo/tir310:PersonName[tir310:GivenName]", xnMgr))
			{
                NameNumber = PersonNameNode.Attributes.GetNamedItem("NameNumber").InnerText;

				NewPaxData = TravellerInfo.AppendChild(PaxData.CloneNode(true));
                TmpPaxName = cm.SplitPaxType(PersonNameNode.SelectSingleNode("tir310:GivenName", xnMgr).InnerText.Trim(), (PersonNameNode.Attributes.GetNamedItem("PassengerType").InnerText.Equals("INF") ? true : false));

				Pax = NewPaxData.SelectSingleNode("pax");
                Pax.Attributes.GetNamedItem("ref").InnerText = NameNumber;
                Pax.Attributes.GetNamedItem("psn").InnerText = PersonNameNode.SelectSingleNode("tir310:Surname", xnMgr).InnerText;
				Pax.Attributes.GetNamedItem("pfn").InnerText = TmpPaxName[1];
				Pax.Attributes.GetNamedItem("ptc").InnerText = TmpPaxName[2];
				Pax.Attributes.GetNamedItem("ptl").InnerText = TmpPaxName[0];
				Pax.Attributes.GetNamedItem("pbd").InnerText = "";
				Pax.Attributes.GetNamedItem("gni").InnerText = "";

				////여권정보
                //int DocCount = ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:serviceRequest/m:ssr/m:type='DOCS'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr).Count;
                //if (DocCount > 0)
                //{
                //    string[] StrDocInfo = ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:serviceRequest/m:ssr/m:type='DOCS'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}'][last()]/m:serviceRequest/m:ssr/m:freeText", PTNum), xnMgr).InnerText.Split('/');

                //    if (StrDocInfo[7].Equals(Pax.Attributes.GetNamedItem("psn").InnerText) && StrDocInfo[8].Equals(Pax.Attributes.GetNamedItem("pfn").InnerText))
                //    {
                //        Passport = NewPaxData.SelectSingleNode("passport");
                //        Passport.Attributes.GetNamedItem("id").InnerText = StrDocInfo[2];
                //        Passport.Attributes.GetNamedItem("expireDate").InnerText = cm.ConvertToDateTime(StrDocInfo[6]);
                //        Passport.Attributes.GetNamedItem("issueCountry").InnerText = StrDocInfo[1];
                //        Passport.Attributes.GetNamedItem("holderNationality").InnerText = StrDocInfo[3];
                //        Passport.Attributes.GetNamedItem("writeDate").InnerText = "";

                //        if (String.IsNullOrWhiteSpace(Pax.Attributes.GetNamedItem("pbd").InnerText))
                //            Pax.Attributes.GetNamedItem("pbd").InnerText = cm.ConvertToBirthDate(StrDocInfo[4]);
                //    }
                //}

				////티켓정보
				//if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr).Count > 0)
				//{
				//    NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText = Common.SplitTicketNumber(ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext", PTNum), xnMgr).InnerText);
				//}

				idx++;
			}

			TravellerInfo.RemoveChild(PaxData);

			////요금
			//XmlNode FareInfo = XmlDoc.SelectSingleNode("ResponseDetails/fareInfo");
			//XmlNode Fare = FareInfo.SelectSingleNode("fare");
			//XmlNode SubFare = Fare.SelectSingleNode("fare");
			//XmlNode PromotionInfo = FareInfo.SelectSingleNode("promotionInfo");
			//XmlNode FareCalculation = Fare.SelectSingleNode("fareCalculation");
			//XmlNode Traveler = Fare.SelectSingleNode("traveler");
			//XmlNode TravelerRef = Traveler.SelectSingleNode("ref");
			//XmlNode NewFare;
			//XmlNode NewSubFare;
			//XmlNode NewTraveler;
			//XmlNode NewTravelerRef;

			//double SumTax = 0;
			//double SumFsc = 0;
			//int n = 0;

			//idx = 0;
			//foreach (XmlNode TstData in ResXml.SelectNodes("m:tstData", xnMgr))
			//{
			//    SumTax = 0;
			//    SumFsc = 0;

			//    foreach (XmlNode TaxFields in TstData.SelectNodes("m:fareData/m:taxFields", xnMgr))
			//    {
			//        if (TaxFields.SelectSingleNode("m:taxCountryCode", xnMgr).InnerText.Equals("YR") || TaxFields.SelectSingleNode("m:taxCountryCode", xnMgr).InnerText.Equals("YQ"))
			//            SumFsc += cm.RequestDouble(TaxFields.SelectSingleNode("m:taxAmount", xnMgr).InnerText);
			//        else
			//            SumTax += cm.RequestDouble(TaxFields.SelectSingleNode("m:taxAmount", xnMgr).InnerText);
			//    }

			//    NewFare = FareInfo.InsertBefore(Fare.CloneNode(false), PromotionInfo);
			//    NewFare.Attributes.GetNamedItem("ptc").InnerText = TstData.SelectSingleNode("m:tstFreetext[m:freetextDetail[m:subjectQualifier='3'][m:type='41']]/m:longFreetext", xnMgr).InnerText;
			//    NewFare.Attributes.GetNamedItem("amount").InnerText = TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='T']/m:amount", xnMgr).InnerText;
			//    NewFare.Attributes.GetNamedItem("fare").InnerText = (TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:currencyCode", xnMgr).InnerText != "KRW" && TstData.SelectNodes("m:fareData/m:monetaryInfo[m:qualifier='E']", xnMgr).Count > 0) ? TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='E']/m:amount", xnMgr).InnerText : TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:amount", xnMgr).InnerText;
			//    NewFare.Attributes.GetNamedItem("disFare").InnerText = (PromItem == null || NewFare.Attributes.GetNamedItem("ptc").InnerText.Equals("INF")) ? NewFare.Attributes.GetNamedItem("fare").InnerText : cm.PromotionFare(cm.RequestDouble(NewFare.Attributes.GetNamedItem("fare").InnerText), PromItem.SelectSingleNode("item")).ToString();
			//    NewFare.Attributes.GetNamedItem("tax").InnerText = SumTax.ToString();
			//    NewFare.Attributes.GetNamedItem("fsc").InnerText = SumFsc.ToString();
			//    NewFare.Attributes.GetNamedItem("price").InnerText = (cm.RequestInt(NewFare.Attributes.GetNamedItem("disFare").InnerText) + cm.RequestInt(NewFare.Attributes.GetNamedItem("tax").InnerText) + cm.RequestInt(NewFare.Attributes.GetNamedItem("fsc").InnerText)).ToString();
			//    NewFare.Attributes.GetNamedItem("cnc").InnerText = TstData.SelectSingleNode("m:fareData/m:monetaryInfo[m:qualifier='F']/m:currencyCode", xnMgr).InnerText;
			//    NewFare.Attributes.GetNamedItem("createDate").InnerText = cm.ConvertToDateTime(TstData.SelectSingleNode("m:tstGeneralInformation/m:generalInformation/m:tstCreationDate", xnMgr).InnerText);

			//    foreach (XmlNode SegAssociation in TstData.SelectNodes("m:segmentAssociation/m:selection/m:option", xnMgr))
			//        NewFare.Attributes.GetNamedItem("calMode").InnerText += String.Concat(String.IsNullOrWhiteSpace(NewFare.Attributes.GetNamedItem("calMode").InnerText) ? "" : " ", SegAssociation.InnerText);

			//    //항공원가계산
			//    string StrPrimeCost = TstData.SelectSingleNode("m:tstFreetext[m:freetextDetail[m:subjectQualifier='3'][m:type='37']]/m:longFreetext", xnMgr).InnerText;

			//    if (StrPrimeCost.IndexOf("M/IT") != -1)
			//        NewFare.Attributes.GetNamedItem("primeFare").InnerText = NewFare.Attributes.GetNamedItem("fare").InnerText;
			//    else
			//    {
			//        Match match = new Regex(@"NUC(?<NUC>[0-9.]+)END.+ROE(?<ROE>[0-9.]+).?", RegexOptions.Singleline).Match(StrPrimeCost);
			//        NewFare.Attributes.GetNamedItem("primeFare").InnerText = (match.Success) ? Common.IntCutting((cm.RequestDouble(match.Groups["NUC"].Value) * cm.RequestDouble(match.Groups["ROE"].Value)), 100).ToString() : NewFare.Attributes.GetNamedItem("fare").InnerText;
			//    }

			//    n = 0;
			//    for (int i = 0; i < TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr).Count; i++)
			//    {
			//        XmlNode FareElement = TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr)[i];

			//        NewSubFare = NewFare.AppendChild(SubFare.CloneNode(false));
			//        NewSubFare.Attributes.GetNamedItem("basis").InnerText = String.Concat((FareElement.SelectNodes("m:primaryCode", xnMgr).Count > 0) ? FareElement.SelectSingleNode("m:primaryCode", xnMgr).InnerText : "", (FareElement.SelectNodes("m:fareBasis", xnMgr).Count > 0) ? FareElement.SelectSingleNode("m:fareBasis", xnMgr).InnerText : "");
            //        NewSubFare.Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty((FareElement.SelectNodes("m:baggageAllowance", xnMgr).Count > 0) ? FareElement.SelectSingleNode("m:baggageAllowance", xnMgr).InnerText : "");
			//        NewSubFare.Attributes.GetNamedItem("nvb").InnerText = (FareElement.SelectNodes("m:notValidBefore", xnMgr).Count > 0) ? cm.ConvertToDateTime(FareElement.SelectSingleNode("m:notValidBefore", xnMgr).InnerText) : "";
			//        NewSubFare.Attributes.GetNamedItem("nva").InnerText = (FareElement.SelectNodes("m:notValidAfter", xnMgr).Count > 0) ? cm.ConvertToDateTime(FareElement.SelectSingleNode("m:notValidAfter", xnMgr).InnerText) : "";
			//        NewSubFare.Attributes.GetNamedItem("tkd").InnerText = (FareElement.SelectNodes("m:ticketDesignator", xnMgr).Count > 0) ? FareElement.SelectSingleNode("m:ticketDesignator", xnMgr).InnerText : "";

			//        if (ResXml.SelectNodes(String.Format("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:reference[m:qualifier='ST' and m:number='{0}']][m:elementManagementItinerary/m:segmentName='AIR'][m:travelProduct/m:boardpointDetail]", TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST']/m:number", xnMgr)[n].InnerText), xnMgr).Count > 0)
			//            NewSubFare.Attributes.GetNamedItem("seg").InnerText = TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST']/m:number", xnMgr)[n++].InnerText;
			//        else
			//        {
			//            NewSubFare.Attributes.GetNamedItem("seg").InnerText = TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST']/m:number", xnMgr)[(++n)].InnerText;
			//            n++;
			//        }
			//    }

			//    NewFare.AppendChild(FareCalculation.CloneNode(false)).InnerText = StrPrimeCost;

			//    NewTraveler = NewFare.AppendChild(Traveler.CloneNode(false));

			//    if (NewFare.Attributes.GetNamedItem("ptc").InnerText.Equals("INF"))
			//    {
			//        foreach (XmlNode PaxReference in TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']", xnMgr))
			//        {
			//            NewTravelerRef = NewTraveler.AppendChild(TravelerRef.CloneNode(false));
			//            NewTravelerRef.InnerText = (idx + cm.RequestInt(ResXml.SelectSingleNode(String.Format("m:travellerInfo[m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number='{0}']/m:passengerData/m:travellerInformation/m:passenger/m:infantIndicator", PaxReference.SelectSingleNode("m:number", xnMgr).InnerText), xnMgr).InnerText)).ToString();

			//            idx++;
			//        }
			//    }
			//    else
			//    {
			//        if (ResXml.SelectNodes(String.Format("m:travellerInfo[m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number='{0}']/m:passengerData/m:travellerInformation/m:passenger/m:type", TstData.SelectSingleNode("m:referenceForTstData/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText), xnMgr).Count > 0)
			//            NewFare.Attributes.GetNamedItem("ptc").InnerText = ResXml.SelectSingleNode(String.Format("m:travellerInfo[m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number='{0}']/m:passengerData/m:travellerInformation/m:passenger/m:type", TstData.SelectSingleNode("m:referenceForTstData/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText), xnMgr).InnerText;

			//        foreach (XmlNode PaxReference in TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='PT']", xnMgr))
			//        {
			//            NewTravelerRef = NewTraveler.AppendChild(TravelerRef.CloneNode(false));
			//            NewTravelerRef.InnerText = ResXml.SelectSingleNode(String.Format("m:travellerInfo/m:elementManagementPassenger[m:reference[m:qualifier='PT']/m:number='{0}']/m:lineNumber", PaxReference.SelectSingleNode("m:number", xnMgr).InnerText), xnMgr).InnerText;

			//            idx++;
			//        }
			//    }
			//}

			//FareInfo.RemoveChild(Fare);

			////프로모션
			//if (PromItem != null)
			//    FareInfo.ReplaceChild(XmlDoc.ImportNode(PromItem, true), PromotionInfo);

			////결제정보
			//XmlNode PaymentInfo = XmlDoc.SelectSingleNode("ResponseDetails/paymentInfo");
			//XmlNode CardInfo = PaymentInfo.SelectSingleNode("cardInfo");
			//XmlNode Card = CardInfo.SelectSingleNode("card");
			//XmlNode CashInfo = PaymentInfo.SelectSingleNode("cashInfo");
			//XmlNode Cash = CashInfo.SelectSingleNode("cash");
			//XmlNode NewCard;
			//XmlNode NewCash;
			//string TravelerNumber = string.Empty;
			//string TravelerAmount = string.Empty;
			//string CurrencyCode = (FareInfo.SelectNodes("fare").Count > 0) ? FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("cnc").InnerText : "";

			//idx = 0;
			//foreach (XmlNode PayInfo in DataElementsMaster.SelectNodes("m:dataElementsIndiv[m:elementManagementData/m:segmentName='FP'][m:otherDataFreetext/m:freetextDetail/m:subjectQualifier='3' and m:otherDataFreetext/m:freetextDetail/m:type='16']", xnMgr))
			//{
			//    string StrPayInfo = PayInfo.SelectSingleNode("m:otherDataFreetext[m:freetextDetail/m:type='16']/m:longFreetext", xnMgr).InnerText;
			//    Match match1 = new Regex(@"CC(?<CARD>[A-Z]+[0-9]{4}/[0-9]{4})*", RegexOptions.Singleline).Match(StrPayInfo);
			//    Match match2 = new Regex(@"(?<CASH>CASH)", RegexOptions.Singleline).Match(StrPayInfo);
			//    Match match3 = new Regex(@"/(?<CNC>[A-Z]{3})(?<GROSS>[0-9]+)$", RegexOptions.Singleline).Match(StrPayInfo);
			//    Match match4 = new Regex(@".+\+(?<GBN>[A-Z]{2})", RegexOptions.Singleline).Match(StrPayInfo);

			//    foreach (XmlNode RefTraveler in PayInfo.SelectNodes("m:referenceForDataElement/m:reference[m:qualifier='PT']", xnMgr))
			//    {
			//        if (StrPayInfo.StartsWith("INF"))
			//        {
			//            TravelerNumber = (idx + cm.RequestInt(ResXml.SelectSingleNode(String.Format("m:travellerInfo[m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number='{0}']/m:passengerData/m:travellerInformation/m:passenger/m:infantIndicator", RefTraveler.SelectSingleNode("m:number", xnMgr).InnerText), xnMgr).InnerText)).ToString();
			//        }
			//        else
			//        {
			//            TravelerNumber = ResXml.SelectSingleNode(String.Format("m:travellerInfo/m:elementManagementPassenger[m:reference[m:qualifier='PT']/m:number='{0}']/m:lineNumber", RefTraveler.SelectSingleNode("m:number", xnMgr).InnerText), xnMgr).InnerText;
			//            idx++;
			//        }

			//        TravelerAmount = (FareInfo.SelectNodes(String.Format("fare[traveler/ref='{0}']", TravelerNumber)).Count > 0) ? FareInfo.SelectSingleNode(String.Format("fare[traveler/ref='{0}']", TravelerNumber)).Attributes.GetNamedItem("amount").InnerText : "";

			//        if (match1.Success)
			//        {
			//            NewCard = CardInfo.AppendChild(Card.CloneNode(false));
			//            NewCard.Attributes.GetNamedItem("traveler").InnerText = TravelerNumber;
			//            NewCard.InnerText = match1.Groups["CARD"].Value;
			//            NewCard.Attributes.GetNamedItem("gross").InnerText = (match3.Success) ? ((match4.Success && match4.Groups["GBN"].Value.Equals("CC")) ? match3.Groups["GROSS"].Value : Convert.ToString(cm.RequestDouble(TravelerAmount) - cm.RequestDouble(match3.Groups["GROSS"].Value))) : TravelerAmount;
			//            NewCard.Attributes.GetNamedItem("cnc").InnerText = (match3.Success) ? match3.Groups["CNC"].Value : CurrencyCode;
			//        }

			//        if (match2.Success)
			//        {
			//            NewCash = CashInfo.AppendChild(Cash.CloneNode(false));
			//            NewCash.Attributes.GetNamedItem("traveler").InnerText = TravelerNumber;
			//            NewCash.Attributes.GetNamedItem("gross").InnerText = (match3.Success) ? ((match4.Success && match4.Groups["GBN"].Value.Equals("CA")) ? match3.Groups["GROSS"].Value : Convert.ToString(cm.RequestDouble(TravelerAmount) - cm.RequestDouble(match3.Groups["GROSS"].Value))) : TravelerAmount;
			//            NewCash.Attributes.GetNamedItem("cnc").InnerText = (match3.Success) ? match3.Groups["CNC"].Value : CurrencyCode;
			//        }
			//    }
			//}

			//CardInfo.RemoveChild(Card);
			//CashInfo.RemoveChild(Cash);

			return XmlDoc.DocumentElement;
		}

        /// <summary>
        /// PNR정보로 티켓 이미지 출력(3.8.0 버전용)
        /// </summary>
        /// <param name="XmlDBBooking">저장된 예약정보</param>
        /// <param name="ResXml">PNR 정보</param>
        /// <returns></returns>
        public XmlElement ToModeSearchETicketAbacus_38Version(XmlElement XmlDBBooking, XmlElement ResXml)
        {
            XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
            xnMgr.AddNamespace("stl", AbacusConfig.NamespaceURL("TravelItineraryRead_stl"));
            xnMgr.AddNamespace("tir38", AbacusConfig.NamespaceURL("TravelItineraryRead_tir38"));

            //오류 결과일 경우 예외 처리
            if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
            {
                throw new Exception(ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText);
            }

            XmlNode TravelItinerary = ResXml.SelectSingleNode("tir38:TravelItinerary", xnMgr);
            XmlNode PricedItinerary = (TravelItinerary.SelectNodes("tir38:ItineraryInfo/tir38:ItineraryPricing", xnMgr).Count > 0) ? TravelItinerary.SelectSingleNode("tir38:ItineraryInfo/tir38:ItineraryPricing/tir38:PriceQuote/tir38:PricedItinerary", xnMgr) : null;

            //프로모션
            XmlNode PromItem = null;

            if (XmlDBBooking.SelectNodes("item3/요금XML").Count > 0)
            {
                XmlDocument XmlProm = new XmlDocument();
                XmlProm.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                //모두웨어에서 프로모션 삭제 시 요금조건 정보만 삭제하기 때문에 프로모션 적용 여부 판단시 해당 필드 체크로직 추가(2018-11-26,김경미매니저)
                PromItem = (!String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item3/요금조건").InnerText) && XmlProm.SelectNodes("priceIndex/promotionInfo").Count > 0) ? XmlProm.SelectSingleNode("priceIndex/promotionInfo") : null;
            }

            //통합모드
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchETicketRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            //기본정보
            XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");

            BookingInfo.SelectSingleNode("gds").InnerText = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
            BookingInfo.SelectSingleNode("gds").Attributes.GetNamedItem("id").InnerText = "1B";
            BookingInfo.SelectSingleNode("bookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;
            BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = TravelItinerary.SelectSingleNode("tir38:ItineraryRef", xnMgr).Attributes.GetNamedItem("ID").InnerText;
            BookingInfo.SelectSingleNode("modeBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item/예약번호").InnerText;
            BookingInfo.SelectSingleNode("agentBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/주문아이템코드").InnerText;
            BookingInfo.SelectSingleNode("allianceBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/제휴사주문번호").InnerText;
            BookingInfo.SelectSingleNode("bookingCreationDate").InnerText = cm.RequestDateTime(XmlDBBooking.SelectSingleNode("item/예약일").InnerText, "yyyy-MM-dd HH:mm:ss");

            //추가정보
            XmlNode AddInfo = XmlDoc.SelectSingleNode("ResponseDetails/addInfo");

            AddInfo.SelectSingleNode("iata").InnerText = "";
            AddInfo.SelectSingleNode("city").InnerText = "";
            AddInfo.SelectSingleNode("tourCode").InnerText = "";
            AddInfo.SelectSingleNode("commission").InnerText = "";
            AddInfo.SelectSingleNode("endorsement").InnerText = (PricedItinerary != null && PricedItinerary.SelectNodes("tir38:AirItineraryPricingInfo/tir38:PTC_FareBreakdown/tir38:Endorsements[@type='SYSTEM_ENDORSEMENT']", xnMgr).Count > 0) ? PricedItinerary.SelectSingleNode("tir38:AirItineraryPricingInfo/tir38:PTC_FareBreakdown/tir38:Endorsements[@type='SYSTEM_ENDORSEMENT']/tir38:Text", xnMgr).InnerText : "";
            AddInfo.SelectSingleNode("ticketingCarrier").InnerText = (PricedItinerary != null) ? PricedItinerary.Attributes.GetNamedItem("ValidatingCarrier").InnerText : "";

            //결제요청정보
            XmlNode PaymentRequest = XmlDoc.SelectSingleNode("ResponseDetails/paymentRequest");
            XmlNode RequestCardInfo = PaymentRequest.SelectSingleNode("cardInfo");
            XmlNode RequestCard = RequestCardInfo.SelectSingleNode("card");
            XmlNode RequestCashInfo = PaymentRequest.SelectSingleNode("cashInfo");
            XmlNode RequestCash = RequestCashInfo.SelectSingleNode("cash");
            XmlNode RequestTasfInfo = PaymentRequest.SelectSingleNode("tasfInfo");
            XmlNode RequestTasf = RequestTasfInfo.SelectSingleNode("tasf");
            XmlNode NewRequestCard;
            XmlNode NewRequestCash;
            XmlNode NewRequestTasf;

            if (XmlDBBooking.SelectNodes("item10").Count > 0)
            {
                foreach (XmlNode PRInfo in XmlDBBooking.SelectNodes("item10"))
                {
                    string[] PaxInfos = PRInfo.SelectSingleNode("탑승객정보").InnerText.Split(',');
                    double PaxInfosLen = PaxInfos.Length;

                    foreach (string PaxInfo in PaxInfos)
                    {
                        if (PRInfo.SelectSingleNode("카드결제여부").InnerText.Equals("Y"))
                        {
                            NewRequestCard = RequestCardInfo.AppendChild(RequestCard.CloneNode(false));
                            NewRequestCard.Attributes.GetNamedItem("traveler").InnerText = "0";
                            NewRequestCard.Attributes.GetNamedItem("travelerInfo").InnerText = PaxInfo;
                            NewRequestCard.Attributes.GetNamedItem("gross").InnerText = (cm.RequestDouble(PRInfo.SelectSingleNode("카드결제금액").InnerText) / PaxInfosLen).ToString();
                            NewRequestCard.Attributes.GetNamedItem("cnc").InnerText = "KRW";
                            NewRequestCard.Attributes.GetNamedItem("name").InnerText = PRInfo.SelectSingleNode("카드종류").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("number").InnerText = PRInfo.SelectSingleNode("카드번호").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("vaildThru").InnerText = PRInfo.SelectSingleNode("유효기간").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("installment").InnerText = PRInfo.SelectSingleNode("할부기간").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("bl").InnerText = PRInfo.SelectSingleNode("BL여부").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("holder").InnerText = PRInfo.SelectSingleNode("소유자명").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("rqt").InnerText = PRInfo.SelectSingleNode("구분").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("rqn").InnerText = PRInfo.SelectSingleNode("요청일련번호").InnerText;
                        }

                        if (PRInfo.SelectSingleNode("계좌이체여부").InnerText.Equals("Y") && cm.RequestDouble(PRInfo.SelectSingleNode("계좌이체금액").InnerText) > 0)
                        {
                            NewRequestCash = RequestCashInfo.AppendChild(RequestCash.CloneNode(false));
                            NewRequestCash.Attributes.GetNamedItem("traveler").InnerText = "0";
                            NewRequestCash.Attributes.GetNamedItem("travelerInfo").InnerText = PaxInfo;
                            NewRequestCash.Attributes.GetNamedItem("gross").InnerText = (cm.RequestDouble(PRInfo.SelectSingleNode("계좌이체금액").InnerText) / PaxInfosLen).ToString();
                            NewRequestCash.Attributes.GetNamedItem("cnc").InnerText = "KRW";
                            NewRequestCash.Attributes.GetNamedItem("bank").InnerText = PRInfo.SelectSingleNode("은행").InnerText;
                            NewRequestCash.Attributes.GetNamedItem("accountNumber").InnerText = PRInfo.SelectSingleNode("계좌번호").InnerText;
                            NewRequestCash.Attributes.GetNamedItem("rqt").InnerText = PRInfo.SelectSingleNode("구분").InnerText;
                            NewRequestCash.Attributes.GetNamedItem("rqn").InnerText = PRInfo.SelectSingleNode("요청일련번호").InnerText;
                        }

                        if (PRInfo.SelectSingleNode("TASF여부").InnerText.Equals("Y") && cm.RequestDouble(PRInfo.SelectSingleNode("TASF금액").InnerText) > 0)
                        {
                            NewRequestTasf = RequestTasfInfo.AppendChild(RequestTasf.CloneNode(false));
                            NewRequestTasf.Attributes.GetNamedItem("traveler").InnerText = "0";
                            NewRequestTasf.Attributes.GetNamedItem("travelerInfo").InnerText = PaxInfo;
                            NewRequestTasf.Attributes.GetNamedItem("gross").InnerText = (cm.RequestDouble(PRInfo.SelectSingleNode("TASF금액").InnerText) / PaxInfosLen).ToString();
                            NewRequestTasf.Attributes.GetNamedItem("cnc").InnerText = "KRW";
                            NewRequestTasf.Attributes.GetNamedItem("installment").InnerText = PRInfo.SelectSingleNode("TASF할부기간").InnerText;
                            NewRequestTasf.Attributes.GetNamedItem("rqt").InnerText = PRInfo.SelectSingleNode("구분").InnerText;
                            NewRequestTasf.Attributes.GetNamedItem("rqn").InnerText = PRInfo.SelectSingleNode("요청일련번호").InnerText;
                        }
                    }
                }
            }

            RequestCardInfo.RemoveChild(RequestCard);
            RequestCashInfo.RemoveChild(RequestCash);
            RequestTasfInfo.RemoveChild(RequestTasf);

            //여정
            XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
            XmlNode Segment = FlightInfo.SelectSingleNode("seg");
            XmlNode StopSegment = Segment.SelectSingleNode("seg");
            XmlNode NewSegment;
            int idx = 1;
            int m = 1;
            bool OPEN = false;

            foreach (XmlNode AirNode in TravelItinerary.SelectNodes("tir38:ItineraryInfo/tir38:ReservationItems/tir38:Item/tir38:FlightSegment", xnMgr))
            {
                OPEN = AirNode.Attributes.GetNamedItem("FlightNumber").InnerText.Equals("OPEN") ? true : false;

                NewSegment = FlightInfo.AppendChild(Segment.CloneNode(false));
                NewSegment.Attributes.GetNamedItem("ref").InnerText = cm.RequestInt(AirNode.ParentNode.Attributes.GetNamedItem("RPH").InnerText).ToString();
                NewSegment.Attributes.GetNamedItem("dlc").InnerText = AirNode.SelectSingleNode("tir38:OriginLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                NewSegment.Attributes.GetNamedItem("alc").InnerText = AirNode.SelectSingleNode("tir38:DestinationLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(AirNode.Attributes.GetNamedItem("DepartureDateTime").InnerText);
                NewSegment.Attributes.GetNamedItem("ardt").InnerText = OPEN ? "" : cm.ConvertToAbacusDateTime(AirNode.Attributes.GetNamedItem("ArrivalDateTime").InnerText, AirNode.Attributes.GetNamedItem("DepartureDateTime").InnerText);
                NewSegment.Attributes.GetNamedItem("mcc").InnerText = OPEN ? "" : AirNode.SelectSingleNode("tir38:MarketingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText;
                NewSegment.Attributes.GetNamedItem("occ").InnerText = OPEN ? "" : ((AirNode.SelectNodes("tir38:OperatingAirline", xnMgr).Count > 0 && (XmlAttribute)AirNode.SelectSingleNode("tir38:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code") != null) ? AirNode.SelectSingleNode("tir38:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText : NewSegment.Attributes.GetNamedItem("mcc").InnerText);
                NewSegment.Attributes.GetNamedItem("fln").InnerText = OPEN ? "" : Common.ZeroPaddingFlight(AirNode.Attributes.GetNamedItem("FlightNumber").InnerText);
                NewSegment.Attributes.GetNamedItem("eqt").InnerText = (AirNode.SelectNodes("tir38:Equipment", xnMgr).Count > 0) ? AirNode.SelectSingleNode("tir38:Equipment", xnMgr).Attributes.GetNamedItem("AirEquipType").InnerText : "";
                NewSegment.Attributes.GetNamedItem("stn").InnerText = ((XmlAttribute)AirNode.Attributes.GetNamedItem("StopQuantity") != null) ? cm.RequestInt(AirNode.Attributes.GetNamedItem("StopQuantity").InnerText).ToString() : "";
                NewSegment.Attributes.GetNamedItem("rbd").InnerText = AirNode.Attributes.GetNamedItem("ResBookDesigCode").InnerText;
                NewSegment.Attributes.GetNamedItem("rsc").InnerText = Common.BookingStatusCode(AirNode.Attributes.GetNamedItem("Status").InnerText);
                NewSegment.Attributes.GetNamedItem("sto").InnerText = "";
                m++;
            }

            FlightInfo.RemoveChild(Segment);

            //탑승객
            XmlNode TravellerInfo = XmlDoc.SelectSingleNode("ResponseDetails/travellerInfo");
            XmlNode PaxData = TravellerInfo.SelectSingleNode("paxData");
            XmlNode Pax;
            XmlNode NewPaxData;

            string NameNumber = string.Empty;
            string[] TmpPaxName;

            idx = 0;
            foreach (XmlNode PersonNameNode in TravelItinerary.SelectNodes("tir38:CustomerInfo/tir38:PersonName[tir38:GivenName]", xnMgr))
            {
                NameNumber = PersonNameNode.Attributes.GetNamedItem("NameNumber").InnerText;

                NewPaxData = TravellerInfo.AppendChild(PaxData.CloneNode(true));
                TmpPaxName = cm.SplitPaxType(PersonNameNode.SelectSingleNode("tir38:GivenName", xnMgr).InnerText.Trim(), (PersonNameNode.Attributes.GetNamedItem("PassengerType").InnerText.Equals("INF") ? true : false));

                Pax = NewPaxData.SelectSingleNode("pax");
                Pax.Attributes.GetNamedItem("ref").InnerText = NameNumber;
                Pax.Attributes.GetNamedItem("psn").InnerText = PersonNameNode.SelectSingleNode("tir38:Surname", xnMgr).InnerText;
                Pax.Attributes.GetNamedItem("pfn").InnerText = TmpPaxName[1];
                Pax.Attributes.GetNamedItem("ptc").InnerText = TmpPaxName[2];
                Pax.Attributes.GetNamedItem("ptl").InnerText = TmpPaxName[0];
                Pax.Attributes.GetNamedItem("pbd").InnerText = "";
                Pax.Attributes.GetNamedItem("gni").InnerText = "";

                idx++;
            }

            TravellerInfo.RemoveChild(PaxData);

            return XmlDoc.DocumentElement;
        }

        /// <summary>
        /// PNR정보로 티켓 이미지 출력(구버전용)
        /// </summary>
        /// <param name="XmlDBBooking">저장된 예약정보</param>
        /// <param name="ResXml">PNR 정보</param>
        /// <returns></returns>
        public XmlElement ToModeSearchETicketAbacus_OldVersion(XmlElement XmlDBBooking, XmlElement ResXml)
        {
            XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
            xnMgr.AddNamespace("m", AbacusConfig.NamespaceURL(""));

            //오류 결과일 경우 예외 처리
            if (ResXml.SelectNodes("m:Errors", xnMgr).Count > 0)
            {
                throw new Exception(ResXml.SelectSingleNode("m:Errors/m:Error/m:ErrorInfo/m:Message", xnMgr).InnerText);
            }

            XmlNode TravelItinerary = ResXml.SelectSingleNode("m:TravelItinerary", xnMgr);
            XmlNode PricedItinerary = (TravelItinerary.SelectNodes("m:ItineraryInfo/m:ItineraryPricing", xnMgr).Count > 0) ? TravelItinerary.SelectSingleNode("m:ItineraryInfo/m:ItineraryPricing/m:PriceQuote/m:PricedItinerary", xnMgr) : null;

            //프로모션
            XmlNode PromItem = null;

            if (XmlDBBooking.SelectNodes("item3/요금XML").Count > 0)
            {
                XmlDocument XmlProm = new XmlDocument();
                XmlProm.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                //모두웨어에서 프로모션 삭제 시 요금조건 정보만 삭제하기 때문에 프로모션 적용 여부 판단시 해당 필드 체크로직 추가(2018-11-26,김경미매니저)
                PromItem = (!String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item3/요금조건").InnerText) && XmlProm.SelectNodes("priceIndex/promotionInfo").Count > 0) ? XmlProm.SelectSingleNode("priceIndex/promotionInfo") : null;
            }

            //통합모드
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchETicketRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            //기본정보
            XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");

            BookingInfo.SelectSingleNode("gds").InnerText = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
            BookingInfo.SelectSingleNode("gds").Attributes.GetNamedItem("id").InnerText = "1B";
            BookingInfo.SelectSingleNode("bookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;
            BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = TravelItinerary.SelectSingleNode("m:ItineraryRef", xnMgr).Attributes.GetNamedItem("ID").InnerText;
            BookingInfo.SelectSingleNode("modeBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item/예약번호").InnerText;
            BookingInfo.SelectSingleNode("agentBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/주문아이템코드").InnerText;
            BookingInfo.SelectSingleNode("allianceBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/제휴사주문번호").InnerText;
            BookingInfo.SelectSingleNode("bookingCreationDate").InnerText = cm.RequestDateTime(XmlDBBooking.SelectSingleNode("item/예약일").InnerText, "yyyy-MM-dd HH:mm:ss");

            //추가정보
            XmlNode AddInfo = XmlDoc.SelectSingleNode("ResponseDetails/addInfo");

            AddInfo.SelectSingleNode("iata").InnerText = "";
            AddInfo.SelectSingleNode("city").InnerText = "";
            AddInfo.SelectSingleNode("tourCode").InnerText = "";
            AddInfo.SelectSingleNode("commission").InnerText = "";
            AddInfo.SelectSingleNode("endorsement").InnerText = (PricedItinerary != null && PricedItinerary.SelectNodes("m:AirItineraryPricingInfo/m:PTC_FareBreakdown/m:Endorsements", xnMgr).Count > 0) ? PricedItinerary.SelectSingleNode("m:AirItineraryPricingInfo/m:PTC_FareBreakdown/m:Endorsements/m:Text", xnMgr).InnerText : "";
            AddInfo.SelectSingleNode("ticketingCarrier").InnerText = (PricedItinerary != null) ? PricedItinerary.Attributes.GetNamedItem("ValidatingCarrier").InnerText : "";

            //결제요청정보
            XmlNode PaymentRequest = XmlDoc.SelectSingleNode("ResponseDetails/paymentRequest");
            XmlNode RequestCardInfo = PaymentRequest.SelectSingleNode("cardInfo");
            XmlNode RequestCard = RequestCardInfo.SelectSingleNode("card");
            XmlNode RequestCashInfo = PaymentRequest.SelectSingleNode("cashInfo");
            XmlNode RequestCash = RequestCashInfo.SelectSingleNode("cash");
            XmlNode RequestTasfInfo = PaymentRequest.SelectSingleNode("tasfInfo");
            XmlNode RequestTasf = RequestTasfInfo.SelectSingleNode("tasf");
            XmlNode NewRequestCard;
            XmlNode NewRequestCash;
            XmlNode NewRequestTasf;

            if (XmlDBBooking.SelectNodes("item10").Count > 0)
            {
                foreach (XmlNode PRInfo in XmlDBBooking.SelectNodes("item10"))
                {
                    string[] PaxInfos = PRInfo.SelectSingleNode("탑승객정보").InnerText.Split(',');
                    double PaxInfosLen = PaxInfos.Length;

                    foreach (string PaxInfo in PaxInfos)
                    {
                        if (PRInfo.SelectSingleNode("카드결제여부").InnerText.Equals("Y"))
                        {
                            NewRequestCard = RequestCardInfo.AppendChild(RequestCard.CloneNode(false));
                            NewRequestCard.Attributes.GetNamedItem("traveler").InnerText = "0";
                            NewRequestCard.Attributes.GetNamedItem("travelerInfo").InnerText = PaxInfo;
                            NewRequestCard.Attributes.GetNamedItem("gross").InnerText = (cm.RequestDouble(PRInfo.SelectSingleNode("카드결제금액").InnerText) / PaxInfosLen).ToString();
                            NewRequestCard.Attributes.GetNamedItem("cnc").InnerText = "KRW";
                            NewRequestCard.Attributes.GetNamedItem("name").InnerText = PRInfo.SelectSingleNode("카드종류").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("number").InnerText = PRInfo.SelectSingleNode("카드번호").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("vaildThru").InnerText = PRInfo.SelectSingleNode("유효기간").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("installment").InnerText = PRInfo.SelectSingleNode("할부기간").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("bl").InnerText = PRInfo.SelectSingleNode("BL여부").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("holder").InnerText = PRInfo.SelectSingleNode("소유자명").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("rqt").InnerText = PRInfo.SelectSingleNode("구분").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("rqn").InnerText = PRInfo.SelectSingleNode("요청일련번호").InnerText;
                        }

                        if (PRInfo.SelectSingleNode("계좌이체여부").InnerText.Equals("Y") && cm.RequestDouble(PRInfo.SelectSingleNode("계좌이체금액").InnerText) > 0)
                        {
                            NewRequestCash = RequestCashInfo.AppendChild(RequestCash.CloneNode(false));
                            NewRequestCash.Attributes.GetNamedItem("traveler").InnerText = "0";
                            NewRequestCash.Attributes.GetNamedItem("travelerInfo").InnerText = PaxInfo;
                            NewRequestCash.Attributes.GetNamedItem("gross").InnerText = (cm.RequestDouble(PRInfo.SelectSingleNode("계좌이체금액").InnerText) / PaxInfosLen).ToString();
                            NewRequestCash.Attributes.GetNamedItem("cnc").InnerText = "KRW";
                            NewRequestCash.Attributes.GetNamedItem("bank").InnerText = PRInfo.SelectSingleNode("은행").InnerText;
                            NewRequestCash.Attributes.GetNamedItem("accountNumber").InnerText = PRInfo.SelectSingleNode("계좌번호").InnerText;
                            NewRequestCash.Attributes.GetNamedItem("rqt").InnerText = PRInfo.SelectSingleNode("구분").InnerText;
                            NewRequestCash.Attributes.GetNamedItem("rqn").InnerText = PRInfo.SelectSingleNode("요청일련번호").InnerText;
                        }

                        if (PRInfo.SelectSingleNode("TASF여부").InnerText.Equals("Y") && cm.RequestDouble(PRInfo.SelectSingleNode("TASF금액").InnerText) > 0)
                        {
                            NewRequestTasf = RequestTasfInfo.AppendChild(RequestTasf.CloneNode(false));
                            NewRequestTasf.Attributes.GetNamedItem("traveler").InnerText = "0";
                            NewRequestTasf.Attributes.GetNamedItem("travelerInfo").InnerText = PaxInfo;
                            NewRequestTasf.Attributes.GetNamedItem("gross").InnerText = (cm.RequestDouble(PRInfo.SelectSingleNode("TASF금액").InnerText) / PaxInfosLen).ToString();
                            NewRequestTasf.Attributes.GetNamedItem("cnc").InnerText = "KRW";
                            NewRequestTasf.Attributes.GetNamedItem("installment").InnerText = PRInfo.SelectSingleNode("TASF할부기간").InnerText;
                            NewRequestTasf.Attributes.GetNamedItem("rqt").InnerText = PRInfo.SelectSingleNode("구분").InnerText;
                            NewRequestTasf.Attributes.GetNamedItem("rqn").InnerText = PRInfo.SelectSingleNode("요청일련번호").InnerText;
                        }
                    }
                }
            }

            RequestCardInfo.RemoveChild(RequestCard);
            RequestCashInfo.RemoveChild(RequestCash);
            RequestTasfInfo.RemoveChild(RequestTasf);

            //여정
            XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
            XmlNode Segment = FlightInfo.SelectSingleNode("seg");
            XmlNode StopSegment = Segment.SelectSingleNode("seg");
            XmlNode NewSegment;
            int idx = 1;
            int m = 1;

            foreach (XmlNode ItineraryInfo in TravelItinerary.SelectNodes("m:ItineraryInfo/m:ReservationItems/m:Item/m:Air", xnMgr))
            {
                NewSegment = FlightInfo.AppendChild(Segment.CloneNode(false));
                NewSegment.Attributes.GetNamedItem("ref").InnerText = cm.RequestInt(ItineraryInfo.Attributes.GetNamedItem("RPH").InnerText).ToString();
                NewSegment.Attributes.GetNamedItem("dlc").InnerText = ItineraryInfo.SelectSingleNode("m:DepartureAirport", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                NewSegment.Attributes.GetNamedItem("alc").InnerText = ItineraryInfo.SelectSingleNode("m:ArrivalAirport", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                NewSegment.Attributes.GetNamedItem("ddt").InnerText = ((XmlAttribute)ItineraryInfo.Attributes.GetNamedItem("DepartureDateTime") != null) ? cm.ConvertToDateTime(ItineraryInfo.Attributes.GetNamedItem("DepartureDateTime").InnerText) : "";
                NewSegment.Attributes.GetNamedItem("ardt").InnerText = ((XmlAttribute)ItineraryInfo.Attributes.GetNamedItem("ArrivalDateTime") != null) ? cm.ConvertToDateTime(ItineraryInfo.Attributes.GetNamedItem("ArrivalDateTime").InnerText) : "";
                NewSegment.Attributes.GetNamedItem("mcc").InnerText = ItineraryInfo.SelectSingleNode("m:MarketingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText;
                NewSegment.Attributes.GetNamedItem("occ").InnerText = (ItineraryInfo.SelectNodes("m:OperatingAirline", xnMgr).Count > 0 && (XmlAttribute)ItineraryInfo.SelectSingleNode("m:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code") != null) ? ItineraryInfo.SelectSingleNode("m:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText : NewSegment.Attributes.GetNamedItem("mcc").InnerText;
                NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(ItineraryInfo.Attributes.GetNamedItem("FlightNumber").InnerText);
                NewSegment.Attributes.GetNamedItem("eqt").InnerText = (ItineraryInfo.SelectNodes("m:Equipment", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:Equipment", xnMgr).Attributes.GetNamedItem("AirEquipType").InnerText : "";
                NewSegment.Attributes.GetNamedItem("stn").InnerText = ((XmlAttribute)ItineraryInfo.Attributes.GetNamedItem("StopQuantity") != null) ? cm.RequestInt(ItineraryInfo.Attributes.GetNamedItem("StopQuantity").InnerText).ToString() : "";
                NewSegment.Attributes.GetNamedItem("rbd").InnerText = ItineraryInfo.Attributes.GetNamedItem("ResBookDesigCode").InnerText;
                NewSegment.Attributes.GetNamedItem("rsc").InnerText = ItineraryInfo.Attributes.GetNamedItem("ActionCode").InnerText;
                NewSegment.Attributes.GetNamedItem("sto").InnerText = "";
                m++;
            }

            FlightInfo.RemoveChild(Segment);

            //탑승객
            XmlNode TravellerInfo = XmlDoc.SelectSingleNode("ResponseDetails/travellerInfo");
            XmlNode PaxData = TravellerInfo.SelectSingleNode("paxData");
            XmlNode Pax;
            XmlNode NewPaxData;

            string PTNum = string.Empty;
            string[] TmpPaxName;

            idx = 0;
            foreach (XmlNode Traveller in TravelItinerary.SelectNodes("m:CustomerInfos/m:CustomerInfo/m:Customer/m:PersonName[m:GivenName]", xnMgr))
            {
                PTNum = Traveller.SelectSingleNode("m:TPA_Extensions/m:NameNumber", xnMgr).Attributes.GetNamedItem("Number").InnerText;

                NewPaxData = TravellerInfo.AppendChild(PaxData.CloneNode(true));
                TmpPaxName = cm.SplitPaxType(Traveller.SelectSingleNode("m:GivenName", xnMgr).InnerText.Trim(), (Traveller.Attributes.GetNamedItem("PassengerType").InnerText.EndsWith("INF") ? true : false));

                Pax = NewPaxData.SelectSingleNode("pax");
                Pax.Attributes.GetNamedItem("ref").InnerText = PTNum;
                Pax.Attributes.GetNamedItem("psn").InnerText = Traveller.SelectSingleNode("m:Surname", xnMgr).InnerText;
                Pax.Attributes.GetNamedItem("pfn").InnerText = TmpPaxName[1];
                Pax.Attributes.GetNamedItem("ptc").InnerText = TmpPaxName[2];
                Pax.Attributes.GetNamedItem("ptl").InnerText = TmpPaxName[0];
                Pax.Attributes.GetNamedItem("pbd").InnerText = "";
                Pax.Attributes.GetNamedItem("gni").InnerText = "";

                idx++;
            }

            TravellerInfo.RemoveChild(PaxData);

            return XmlDoc.DocumentElement;
        }

        /// <summary>
        /// PNR정보로 티켓 이미지 출력
        /// </summary>
        /// <param name="XmlDBBooking">저장된 예약정보</param>
        /// <param name="ResXml">PNR 정보</param>
        /// <param name="FqmXml">쿼트발권 정보</param>
        /// <returns></returns>
        public XmlElement ToModeSearchETicketGalileo(XmlElement XmlDBBooking, XmlElement ResXml, XmlElement FqmXml)
        {
            //오류 결과일 경우 예외 처리
            if (!ResXml.SelectSingleNode("ResultErrorNo").InnerText.Equals("0"))
                throw new Exception(ResXml.SelectSingleNode("ResultMsg").InnerText);

            //프로모션
            XmlNode PromItem = null;

            if (XmlDBBooking.SelectNodes("item3/요금XML").Count > 0)
            {
                XmlDocument XmlProm = new XmlDocument();
                XmlProm.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                //모두웨어에서 프로모션 삭제 시 요금조건 정보만 삭제하기 때문에 프로모션 적용 여부 판단시 해당 필드 체크로직 추가(2018-11-26,김경미매니저)
                PromItem = (!String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item3/요금조건").InnerText) && XmlProm.SelectNodes("priceIndex/promotionInfo").Count > 0) ? XmlProm.SelectSingleNode("priceIndex/promotionInfo") : null;
            }
            
            //통합모드
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchETicketRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            //기본정보
            XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");

            BookingInfo.SelectSingleNode("gds").InnerText = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
            BookingInfo.SelectSingleNode("gds").Attributes.GetNamedItem("id").InnerText = "1G";
            BookingInfo.SelectSingleNode("bookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;
            BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = (ResXml.SelectNodes("GenPnrInfo").Count > 0) ? ResXml.SelectSingleNode("GenPnrInfo/PnrAddress").InnerText : ResXml.SelectSingleNode("ReservationData/PnrAddress").InnerText;
            BookingInfo.SelectSingleNode("modeBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item/예약번호").InnerText;
            BookingInfo.SelectSingleNode("agentBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/주문아이템코드").InnerText;
            BookingInfo.SelectSingleNode("allianceBookingNo").InnerText = XmlDBBooking.SelectSingleNode("item3/제휴사주문번호").InnerText;
            BookingInfo.SelectSingleNode("bookingCreationDate").InnerText = cm.RequestDateTime(XmlDBBooking.SelectSingleNode("item/예약일").InnerText, "yyyy-MM-dd HH:mm:ss");

            //추가정보
            XmlNode AddInfo = XmlDoc.SelectSingleNode("ResponseDetails/addInfo");

            AddInfo.SelectSingleNode("iata").InnerText = "";
            AddInfo.SelectSingleNode("city").InnerText = "";
            AddInfo.SelectSingleNode("tourCode").InnerText = "";
            AddInfo.SelectSingleNode("commission").InnerText = "";
            AddInfo.SelectSingleNode("endorsement").InnerText = "";
            AddInfo.SelectSingleNode("ticketingCarrier").InnerText = "";

            //결제요청정보
            XmlNode PaymentRequest = XmlDoc.SelectSingleNode("ResponseDetails/paymentRequest");
            XmlNode RequestCardInfo = PaymentRequest.SelectSingleNode("cardInfo");
            XmlNode RequestCard = RequestCardInfo.SelectSingleNode("card");
            XmlNode RequestCashInfo = PaymentRequest.SelectSingleNode("cashInfo");
            XmlNode RequestCash = RequestCashInfo.SelectSingleNode("cash");
            XmlNode RequestCouponInfo = PaymentRequest.SelectSingleNode("couponInfo");
            XmlNode RequestCoupon = RequestCouponInfo.SelectSingleNode("coupon"); ;
            XmlNode RequestTasfInfo = PaymentRequest.SelectSingleNode("tasfInfo");
            XmlNode RequestTasf = RequestTasfInfo.SelectSingleNode("tasf");
            XmlNode NewRequestCard;
            XmlNode NewRequestCash;
            XmlNode NewRequestCoupon;
            XmlNode NewRequestTasf;

            if (XmlDBBooking.SelectNodes("item10").Count > 0)
            {
                foreach (XmlNode PRInfo in XmlDBBooking.SelectNodes("item10"))
                {
                    string[] PaxInfos = PRInfo.SelectSingleNode("탑승객정보").InnerText.Split(',');
                    double PaxInfosLen = PaxInfos.Length;

                    foreach (string PaxInfo in PaxInfos)
                    {
                        if (PRInfo.SelectSingleNode("카드결제여부").InnerText.Equals("Y"))
                        {
                            NewRequestCard = RequestCardInfo.AppendChild(RequestCard.CloneNode(false));
                            NewRequestCard.Attributes.GetNamedItem("traveler").InnerText = "0";
                            NewRequestCard.Attributes.GetNamedItem("travelerInfo").InnerText = PaxInfo;
                            NewRequestCard.Attributes.GetNamedItem("gross").InnerText = (cm.RequestDouble(PRInfo.SelectSingleNode("카드결제금액").InnerText) / PaxInfosLen).ToString();
                            NewRequestCard.Attributes.GetNamedItem("cnc").InnerText = "KRW";
                            NewRequestCard.Attributes.GetNamedItem("name").InnerText = PRInfo.SelectSingleNode("카드종류").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("number").InnerText = PRInfo.SelectSingleNode("카드번호").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("vaildThru").InnerText = PRInfo.SelectSingleNode("유효기간").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("installment").InnerText = PRInfo.SelectSingleNode("할부기간").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("bl").InnerText = PRInfo.SelectSingleNode("BL여부").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("holder").InnerText = PRInfo.SelectSingleNode("소유자명").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("rqt").InnerText = PRInfo.SelectSingleNode("구분").InnerText;
                            NewRequestCard.Attributes.GetNamedItem("rqn").InnerText = PRInfo.SelectSingleNode("요청일련번호").InnerText;
                        }

                        if (PRInfo.SelectSingleNode("계좌이체여부").InnerText.Equals("Y") && cm.RequestDouble(PRInfo.SelectSingleNode("계좌이체금액").InnerText) > 0)
                        {
                            NewRequestCash = RequestCashInfo.AppendChild(RequestCash.CloneNode(false));
                            NewRequestCash.Attributes.GetNamedItem("traveler").InnerText = "0";
                            NewRequestCash.Attributes.GetNamedItem("travelerInfo").InnerText = PaxInfo;
                            NewRequestCash.Attributes.GetNamedItem("gross").InnerText = (cm.RequestDouble(PRInfo.SelectSingleNode("계좌이체금액").InnerText) / PaxInfosLen).ToString();
                            NewRequestCash.Attributes.GetNamedItem("cnc").InnerText = "KRW";
                            NewRequestCash.Attributes.GetNamedItem("bank").InnerText = PRInfo.SelectSingleNode("은행").InnerText;
                            NewRequestCash.Attributes.GetNamedItem("accountNumber").InnerText = PRInfo.SelectSingleNode("계좌번호").InnerText;
                            NewRequestCash.Attributes.GetNamedItem("rqt").InnerText = PRInfo.SelectSingleNode("구분").InnerText;
                            NewRequestCash.Attributes.GetNamedItem("rqn").InnerText = PRInfo.SelectSingleNode("요청일련번호").InnerText;
                        }

                        if (PRInfo.SelectSingleNode("할인쿠폰여부").InnerText.Equals("Y") && cm.RequestDouble(PRInfo.SelectSingleNode("할인쿠폰금액").InnerText) > 0)
                        {
                            NewRequestCoupon = RequestCouponInfo.AppendChild(RequestCoupon.CloneNode(false));
                            NewRequestCoupon.Attributes.GetNamedItem("traveler").InnerText = "0";
                            NewRequestCoupon.Attributes.GetNamedItem("travelerInfo").InnerText = "전체승객";
                            NewRequestCoupon.Attributes.GetNamedItem("gross").InnerText = PRInfo.SelectSingleNode("할인쿠폰금액").InnerText;
                            NewRequestCoupon.Attributes.GetNamedItem("cnc").InnerText = "KRW";
                            NewRequestCoupon.Attributes.GetNamedItem("issueNumber").InnerText = PRInfo.SelectSingleNode("할인발급번호").InnerText;
                            NewRequestCoupon.Attributes.GetNamedItem("rqt").InnerText = PRInfo.SelectSingleNode("구분").InnerText;
                            NewRequestCoupon.Attributes.GetNamedItem("rqn").InnerText = PRInfo.SelectSingleNode("요청일련번호").InnerText;
                        }

                        if (PRInfo.SelectSingleNode("TASF여부").InnerText.Equals("Y") && cm.RequestDouble(PRInfo.SelectSingleNode("TASF금액").InnerText) > 0)
                        {
                            NewRequestTasf = RequestTasfInfo.AppendChild(RequestTasf.CloneNode(false));
                            NewRequestTasf.Attributes.GetNamedItem("traveler").InnerText = "0";
                            NewRequestTasf.Attributes.GetNamedItem("travelerInfo").InnerText = PaxInfo;
                            NewRequestTasf.Attributes.GetNamedItem("gross").InnerText = (cm.RequestDouble(PRInfo.SelectSingleNode("TASF금액").InnerText) / PaxInfosLen).ToString();
                            NewRequestTasf.Attributes.GetNamedItem("cnc").InnerText = "KRW";
                            NewRequestTasf.Attributes.GetNamedItem("installment").InnerText = PRInfo.SelectSingleNode("TASF할부기간").InnerText;
                            NewRequestTasf.Attributes.GetNamedItem("rqt").InnerText = PRInfo.SelectSingleNode("구분").InnerText;
                            NewRequestTasf.Attributes.GetNamedItem("rqn").InnerText = PRInfo.SelectSingleNode("요청일련번호").InnerText;
                        }
                    }
                }
            }

            RequestCardInfo.RemoveChild(RequestCard);
            RequestCashInfo.RemoveChild(RequestCash);
            RequestCouponInfo.RemoveChild(RequestCoupon);
            RequestTasfInfo.RemoveChild(RequestTasf);

            //여정
            XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
            XmlNode Segment = FlightInfo.SelectSingleNode("seg");
            XmlNode StopSegment = Segment.SelectSingleNode("seg");
            XmlNode NewSegment;
            XmlNode NewStopSegment;

            foreach (XmlNode AirSegDetail in ResXml.SelectNodes("AirSegDetail"))
            {
                NewSegment = FlightInfo.AppendChild(Segment.CloneNode(false));
                NewSegment.Attributes.GetNamedItem("ref").InnerText = AirSegDetail.SelectSingleNode("SegNum").InnerText;
                NewSegment.Attributes.GetNamedItem("dlc").InnerText = AirSegDetail.SelectSingleNode("StartAirp").InnerText;
                NewSegment.Attributes.GetNamedItem("alc").InnerText = AirSegDetail.SelectSingleNode("EndAirp").InnerText;
                NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(AirSegDetail.SelectSingleNode("StartDtTm").InnerText);
                NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(AirSegDetail.SelectSingleNode("EndDtTm").InnerText);
                NewSegment.Attributes.GetNamedItem("mcc").InnerText = AirSegDetail.SelectSingleNode("AirV").InnerText;
                NewSegment.Attributes.GetNamedItem("occ").InnerText = String.IsNullOrWhiteSpace(AirSegDetail.SelectSingleNode("OpAirV").InnerText) ? AirSegDetail.SelectSingleNode("AirV").InnerText : AirSegDetail.SelectSingleNode("OpAirV").InnerText;
                NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(AirSegDetail.SelectSingleNode("FltNum").InnerText);
                NewSegment.Attributes.GetNamedItem("eqt").InnerText = "";
                NewSegment.Attributes.GetNamedItem("stn").InnerText = cm.RequestInt(AirSegDetail.SelectSingleNode("StopCnt").InnerText).ToString();
                NewSegment.Attributes.GetNamedItem("rbd").InnerText = AirSegDetail.SelectSingleNode("BkClass").InnerText;
                NewSegment.Attributes.GetNamedItem("rsc").InnerText = AirSegDetail.SelectSingleNode("Status").InnerText;
                NewSegment.Attributes.GetNamedItem("sto").InnerText = "";

                if (NewSegment.Attributes.GetNamedItem("stn").InnerText.Equals("1"))
                {
                    NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                    NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = NewSegment.Attributes.GetNamedItem("dlc").InnerText;
                    NewStopSegment.Attributes.GetNamedItem("alc").InnerText = AirSegDetail.SelectSingleNode("StopCity1").InnerText;
                    NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = NewSegment.Attributes.GetNamedItem("ddt").InnerText;
                    NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = "";

                    NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                    NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = AirSegDetail.SelectSingleNode("StopCity1").InnerText;
                    NewStopSegment.Attributes.GetNamedItem("alc").InnerText = NewSegment.Attributes.GetNamedItem("alc").InnerText;
                    NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = "";
                    NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = NewSegment.Attributes.GetNamedItem("ardt").InnerText;
                }
            }

            FlightInfo.RemoveChild(Segment);

            //탑승객
            XmlNode TravellerInfo = XmlDoc.SelectSingleNode("ResponseDetails/travellerInfo");
            XmlNode PaxData = TravellerInfo.SelectSingleNode("paxData");
            XmlNode Pax;
            XmlNode NewPaxData;

            foreach (XmlNode PaxFareInfo in ResXml.SelectNodes("PaxFareInfo"))
            {
                NewPaxData = TravellerInfo.AppendChild(PaxData.CloneNode(true));
                
                Pax = NewPaxData.SelectSingleNode("pax");
                Pax.Attributes.GetNamedItem("ref").InnerText = (PaxFareInfo.SelectNodes("AbsNameNum").Count > 0) ? PaxFareInfo.SelectSingleNode("AbsNameNum").InnerText : "";
                Pax.Attributes.GetNamedItem("psn").InnerText = PaxFareInfo.SelectSingleNode("PaxLastName").InnerText;
                Pax.Attributes.GetNamedItem("pfn").InnerText = PaxFareInfo.SelectSingleNode("PaxFirstName").InnerText;
                Pax.Attributes.GetNamedItem("ptc").InnerText = PaxFareInfo.SelectSingleNode("PaxType").InnerText;
                Pax.Attributes.GetNamedItem("ptl").InnerText = PaxFareInfo.SelectSingleNode("PaxTitle").InnerText;
                Pax.Attributes.GetNamedItem("pbd").InnerText = "";
                Pax.Attributes.GetNamedItem("gni").InnerText = "";

                //여권정보

                //티켓정보
                if (PaxFareInfo.SelectNodes("PaxTicketNum").Count > 0)
                    NewPaxData.SelectSingleNode("ticket").Attributes.GetNamedItem("number").InnerText = PaxFareInfo.SelectSingleNode("PaxTicketNum").InnerText;
            }

            TravellerInfo.RemoveChild(PaxData);

            //요금
            if (XmlDBBooking.SelectNodes("item3/요금XML").Count > 0)
            {
                XmlDocument XmlFare = new XmlDocument();
                XmlFare.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);
                
                XmlNode FareInfo = XmlDoc.SelectSingleNode("ResponseDetails/fareInfo");
                XmlNode Fare = FareInfo.SelectSingleNode("fare");
                XmlNode SubFare = Fare.SelectSingleNode("fare");
                XmlNode PromotionInfo = FareInfo.SelectSingleNode("promotionInfo");
                XmlNode FareCalculation = Fare.SelectSingleNode("fareCalculation");
                XmlNode Traveler = Fare.SelectSingleNode("traveler");
                XmlNode TravelerRef = Traveler.SelectSingleNode("ref");
                XmlNode NewFare;

                if (FqmXml != null)
                {
                    XmlDocument XmlBook = new XmlDocument();
                    XmlBook.LoadXml(XmlDBBooking.SelectSingleNode("item3/예약XML").InnerText);

                    XmlNodeList PaxFareInfos = XmlBook.SelectNodes("ReservationProcess/PaxFareInfo");
                    XmlNodeList PaxTaxTotals = FqmXml.SelectNodes("PaxDetails/Pax_TaxTotal");
                    string PTCInfo = string.Empty;

                    if (PaxFareInfos.Count.Equals(PaxTaxTotals.Count))
                    {
                        for (int i = 0; i < PaxFareInfos.Count; i++)
                        {
                            XmlNode PaxFareInfo = PaxFareInfos[i];
                            XmlNode PaxTaxTotal = PaxTaxTotals[i];

                            string PTC = PaxFareInfo.SelectSingleNode("PaxType").InnerText;
                            XmlNode PaxFare = XmlFare.SelectSingleNode(String.Format("priceIndex/paxFareGroup/paxFare[@ptc='{0}']", PTC));

                            //탑승객 타입별 출력
                            if (PTCInfo.IndexOf(PTC).Equals(-1))
                            {
                                //예약시 운임과 현재 항공 운임이 동일한 경우에만 운임 출력
                                //if (PaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText.Equals(PaxTaxTotal.SelectSingleNode("NormalAmount").InnerText))
                                //{
                                    int NormalAmount = Convert.ToInt32(PaxTaxTotal.SelectSingleNode("SaleAmount").InnerText);
                                    int FuelSurCharge = Convert.ToInt32(PaxTaxTotal.SelectSingleNode("Tot_FuelSurCharge").InnerText);
                                    int TaxAmount = Convert.ToInt32(PaxTaxTotal.SelectSingleNode("Tot_TaxQAmount").InnerText) - FuelSurCharge;
                                    int DisFare = (PromItem != null) ? Convert.ToInt32(PaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("disFare").InnerText) : Convert.ToInt32(PaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText);
                                    int TASF = Convert.ToInt32(PaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tasf").InnerText);

                                    NewFare = FareInfo.InsertBefore(Fare.CloneNode(false), PromotionInfo);
                                    NewFare.Attributes.GetNamedItem("ptc").InnerText = PaxFareInfo.SelectSingleNode("PaxType").InnerText;
                                    NewFare.Attributes.GetNamedItem("price").InnerText = (DisFare + TaxAmount + FuelSurCharge + TASF).ToString();
                                    NewFare.Attributes.GetNamedItem("subPrice").InnerText = (DisFare + TaxAmount + FuelSurCharge).ToString();
                                    NewFare.Attributes.GetNamedItem("amount").InnerText = (NormalAmount + TaxAmount + FuelSurCharge).ToString();
                                    NewFare.Attributes.GetNamedItem("fare").InnerText = NormalAmount.ToString();
                                    NewFare.Attributes.GetNamedItem("primeFare").InnerText = NormalAmount.ToString();
                                    NewFare.Attributes.GetNamedItem("disFare").InnerText = DisFare.ToString();
                                    NewFare.Attributes.GetNamedItem("tax").InnerText = TaxAmount.ToString();
                                    NewFare.Attributes.GetNamedItem("fsc").InnerText = FuelSurCharge.ToString();
                                    NewFare.Attributes.GetNamedItem("disPartner").InnerText = "0";
                                    NewFare.Attributes.GetNamedItem("tasf").InnerText = TASF.ToString();
                                    NewFare.Attributes.GetNamedItem("cnc").InnerText = "KRW";
                                    NewFare.Attributes.GetNamedItem("createDate").InnerText = "";
                                    NewFare.Attributes.GetNamedItem("calMode").InnerText = "";

                                    NewFare.AppendChild(XmlDoc.ImportNode(PaxFare.SelectSingleNode("traveler"), true));
                                //}
                            }

                            PTCInfo += String.Concat(PTC, "/");
                        }
                    }
                }

                FareInfo.RemoveChild(Fare);

                //프로모션
                if (PromItem != null && XmlFare.SelectNodes("priceIndex/promotionInfo").Count > 0)
                    FareInfo.ReplaceChild(XmlDoc.ImportNode(XmlFare.SelectSingleNode("priceIndex/promotionInfo"), true), PromotionInfo);

                //결제정보
                XmlNode PaymentInfo = XmlDoc.SelectSingleNode("ResponseDetails/paymentInfo");
                XmlNode CardInfo = PaymentInfo.SelectSingleNode("cardInfo");
                XmlNode Card = CardInfo.SelectSingleNode("card");
                XmlNode CashInfo = PaymentInfo.SelectSingleNode("cashInfo");
                XmlNode Cash = CashInfo.SelectSingleNode("cash");
                XmlNode CouponInfo = PaymentInfo.SelectSingleNode("couponInfo");
                XmlNode Coupon = CouponInfo.SelectSingleNode("coupon");
                
                CardInfo.RemoveChild(Card);
                CashInfo.RemoveChild(Cash);
                CouponInfo.RemoveChild(Coupon);
            }

            return XmlDoc.DocumentElement;
        }

		#endregion "E-Ticket 정보 조회(PNR정보 이용)"

		#region "E-Ticket 조회(PNR정보 이용)(탑승객별 문서출력용)"

        /// <summary>
        /// 탑승객별 E-Ticket 조회(PNR정보 이용)(탑승객별 문서출력용)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="GDS">GDS명</param>
        /// <param name="PNR">PNR번호</param>
        /// <param name="PaxName">탑승객명(ex HONG/GILDONGMR)</param>
        /// <returns></returns>
        [WebMethod(Description = "탑승객별 E-Ticket 조회(PNR정보 이용)(탑승객별 문서출력용)")]
        public XmlElement SearchETicketDocPNRRS(int SNM, string GDS, string PNR, string PaxName)
        {
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 26;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = GDS;
                sqlParam[8].Value = PNR;
                sqlParam[9].Value = PaxName;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
            {
                XmlElement XmlDBBooking = null;
                PaxName = PaxName.Replace(" ", "");

                if (String.Compare(GDS, "Amadeus", true).Equals(0) || String.Compare(GDS, "Topas", true).Equals(0))
                {
                    return ToModeSearchETicketDocAmadeus(XmlDBBooking, SearchBookingPNR(SNM, GDS, PNR, LogGUID), PaxName);
                }
                else if (String.Compare(GDS, "Abacus", true).Equals(0))
                {
                    return ToModeSearchETicketDocAbacus(XmlDBBooking, SearchBookingPNR(SNM, "Abacus_TravelItineraryRead", PNR, LogGUID), PaxName, false);
                }
                else if (String.Compare(GDS, "Galileo", true).Equals(0))
                {
                    //XmlElement ResXml = SearchBookingPNR(SNM, GDS, PNR);

                    //if (ResXml.SelectSingleNode("AirSegDetail/AirV").InnerText.Equals("OZ"))
                    //{
                    //    string GKPNR = string.Empty;

                    //    if (ResXml.SelectNodes("AgentRemarks").Count > 0)
                    //    {
                    //        foreach (XmlNode Remarks in ResXml.SelectNodes("AgentRemarks/Remarks"))
                    //        {
                    //            if (Remarks.InnerText.StartsWith("GKPNR:"))
                    //            {
                    //                GKPNR = Remarks.InnerText.Replace("GKPNR: ", "");
                    //                break;
                    //            }
                    //        }
                    //    }

                    //    if (String.IsNullOrWhiteSpace(GKPNR))
                    //        return ToModeSearchETicketDocGalileo(XmlDBBooking, SearchBookingPNR(SNM, GDS, PNR), PaxName);
                    //    else
                    //        return ToModeSearchETicketDocAbacus(XmlDBBooking, SearchBookingPNR(SNM, "Abacus", GKPNR), PaxName, true);
                    //}
                    //else
                        return ToModeSearchETicketDocGalileo(XmlDBBooking, SearchBookingPNR(SNM, GDS, PNR, LogGUID), PaxName, LogGUID);
                }
                else
                    throw new Exception("E-Ticket 정보 조회가 지원되지 않는 GDS입니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("SNM", SNM);
                ex.Data.Add("GDS", GDS);
                ex.Data.Add("PNR", PNR);
                ex.Data.Add("PaxName", PaxName);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 26, 0, 0).ToErrors;
            }
        }

		/// <summary>
		/// 탑승객별 E-Ticket 조회(PNR정보 이용)(탑승객별 문서출력용)
		/// </summary>
		/// <param name="OID">주문번호</param>
		/// <param name="PID">예약자번호(PTID)</param>
		/// <param name="PaxName">탑승객명(ex HONG/GILDONGMR)</param>
        /// <param name="RIP">요청자IP</param>
		/// <returns></returns>
		[WebMethod(Description = "탑승객별 E-Ticket 조회(PNR정보 이용)(탑승객별 문서출력용)")]
        public XmlElement SearchETicketDocRS(int OID, int PID, string PaxName, string RIP)
        {
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 27;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = PaxName;
                sqlParam[12].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, RIP);

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    XmlElement ModeXml = null;
                    
                    int SNM = cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2);
                    string Gubun = XmlDBBooking.SelectSingleNode("item3/품목코드").InnerText;
                    string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
                    string PNR = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;
                    PaxName = PaxName.Replace(" ", "");

                    if (Gubun.Equals("OA"))
                        XmlDBBooking = null;

                    if (String.Compare(GDS, "Amadeus", true).Equals(0) || String.Compare(GDS, "Topas", true).Equals(0))
                    {
                        ModeXml = ToModeSearchETicketDocAmadeus(XmlDBBooking, SearchBookingPNR(SNM, GDS, PNR, LogGUID), PaxName);
                    }
                    else if (String.Compare(GDS, "Abacus", true).Equals(0))
                    {
                        ModeXml = ToModeSearchETicketDocAbacus(XmlDBBooking, SearchBookingPNR(SNM, "Abacus_TravelItineraryRead", PNR, LogGUID), PaxName, false);
                    }
                    else if (String.Compare(GDS, "Galileo", true).Equals(0))
                    {
                        if (String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item3/GKPNR").InnerText))
                            ModeXml = ToModeSearchETicketDocGalileo(XmlDBBooking, SearchBookingPNR(SNM, GDS, PNR, LogGUID), PaxName, LogGUID);
                        else
                            ModeXml = ToModeSearchETicketDocAbacus(XmlDBBooking, SearchBookingPNR(SNM, "Abacus_TravelItineraryRead", XmlDBBooking.SelectSingleNode("item3/GKPNR").InnerText, LogGUID), PaxName, true);
                    }
                    else
                        throw new Exception("E-Ticket 정보 조회가 지원되지 않는 GDS입니다.");

                    if ((XmlAttribute)ModeXml.SelectSingleNode("agentInfo").Attributes.GetNamedItem("snm") != null)
                    {
                        ModeXml.SelectSingleNode("agentInfo").Attributes.GetNamedItem("snm").InnerText = SNM.ToString();
                        ModeXml.SelectSingleNode("agentInfo").Attributes.GetNamedItem("anm").InnerText = (XmlDBBooking != null) ? XmlDBBooking.SelectSingleNode("item2/거래처번호").InnerText : "";
                    }
                    
                    return ModeXml;
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("PaxName", PaxName);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 27, OID, 0).ToErrors;
            }
		}

        /// <summary>
        /// 탑승객별 E-Ticket 조회(DB정보 이용)(탑승객별 문서출력용)(그룹용)
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="TicketNumber">티켓번호</param>
        /// <param name="RIP">요청자IP</param>
        /// <returns></returns>
        [WebMethod(Description = "탑승객별 E-Ticket 조회(DB정보 이용)(탑승객별 문서출력용)(그룹용)")]
        public XmlElement SearchETicketDocGroupRS(int OID, int PID, string TicketNumber, string RIP)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 548;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = TicketNumber;
                sqlParam[12].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                DataSet ds = new DataSet();

                using (SqlCommand cmd = new SqlCommand())
                {
                    try
                    {
                        using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
                        {
                            SqlDataAdapter adp = new SqlDataAdapter(cmd);

                            cmd.Connection = conn;
                            cmd.CommandTimeout = 60;
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.CommandText = "DBO.WSV_S_아이템예약_단체항공_이티켓";

                            cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@예약자번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@이티켓번호", SqlDbType.VarChar, 20);
                            cmd.Parameters.Add("@요청자IP", SqlDbType.VarChar, 30);

                            cmd.Parameters["@주문번호"].Value = OID;
                            cmd.Parameters["@예약자번호"].Value = PID;
                            cmd.Parameters["@이티켓번호"].Value = TicketNumber;
                            cmd.Parameters["@요청자IP"].Value = String.IsNullOrWhiteSpace(RIP) ? Convert.DBNull : RIP;

                            adp.Fill(ds);
                            adp.Dispose();
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new Exception(ex.ToString());
                    }
                }
                
                if (ds.Tables.Count > 3 && ds.Tables[0].Rows.Count > 0)
                {
                    //통합모드
                    XmlDocument XmlDoc = new XmlDocument();
                    XmlDoc.Load(mc.XmlFullPath("SearchETicketDocRS"));

                    XmlNode ResponseDetails = XmlDoc.SelectSingleNode("ResponseDetails");
                    XmlNode BookingInfo = ResponseDetails.SelectSingleNode("bookingInfo");
                    XmlNode FareInfo = ResponseDetails.SelectSingleNode("fareInfo");
                    XmlNode AgentInfo = ResponseDetails.SelectSingleNode("agentInfo");
                    int SegRef = 1;

                    ResponseDetails.Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

                    BookingInfo.SelectSingleNode("gds").InnerText = ds.Tables[0].Rows[0]["GDS"].ToString();
                    BookingInfo.SelectSingleNode("bookingNo").InnerText = ds.Tables[0].Rows[0]["PNR"].ToString();
                    BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = ds.Tables[0].Rows[0]["PNR2"].ToString();
                    BookingInfo.SelectSingleNode("modeBookingNo").InnerText = ds.Tables[0].Rows[0]["주문번호"].ToString();
                    BookingInfo.SelectSingleNode("agentBookingNo").InnerText = "";
                    BookingInfo.SelectSingleNode("allianceBookingNo").InnerText = "";
                    BookingInfo.SelectSingleNode("bookingCreationDate").InnerText = ds.Tables[0].Rows[0]["예약일"].ToString();
                    BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText = ds.Tables[0].Rows[0]["부킹클래스"].ToString();
                    BookingInfo.SelectSingleNode("bookingClass").InnerText = Common.ServiceClassText("", BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText);
                    BookingInfo.SelectSingleNode("paxName").InnerText = ds.Tables[0].Rows[0]["탑승객명"].ToString();
                    BookingInfo.SelectSingleNode("ticketNumber").InnerText = ds.Tables[0].Rows[0]["티켓번호"].ToString();

                    XmlDocument XmlSeg = new XmlDocument();
                    XmlSeg.LoadXml(ds.Tables[1].Rows[0][0].ToString());

                    foreach (XmlNode Seg in XmlSeg.SelectNodes("flightInfo/seg"))
                    {
                        Seg.Attributes.GetNamedItem("ref").InnerText = (SegRef++).ToString();

                        if (!String.IsNullOrWhiteSpace(Seg.Attributes.GetNamedItem("ddt").InnerText))
                        {
                            string[] DDT = Seg.Attributes.GetNamedItem("ddt").InnerText.Split(' ');
                            Seg.Attributes.GetNamedItem("ddt").InnerText = String.Format("{0} {1}", cm.ConvertToDate(DDT[0]), cm.ConvertToDateTime(DDT[1]));
                        }

                        if (!String.IsNullOrWhiteSpace(Seg.Attributes.GetNamedItem("ardt").InnerText))
                        {
                            string[] ARDT = Seg.Attributes.GetNamedItem("ardt").InnerText.Split(' ');
                            Seg.Attributes.GetNamedItem("ardt").InnerText = String.Format("{0} {1}", cm.ConvertToDate(ARDT[0]), cm.ConvertToDateTime(ARDT[1]));
                        }
                        
                        if (!String.IsNullOrWhiteSpace(Seg.SelectSingleNode("fare").Attributes.GetNamedItem("nva").InnerText))
                            Seg.SelectSingleNode("fare").Attributes.GetNamedItem("nva").InnerText = cm.ConvertToDate(Seg.SelectSingleNode("fare").Attributes.GetNamedItem("nva").InnerText);

                        if (!String.IsNullOrWhiteSpace(Seg.SelectSingleNode("fare").Attributes.GetNamedItem("nvb").InnerText))
                            Seg.SelectSingleNode("fare").Attributes.GetNamedItem("nvb").InnerText = cm.ConvertToDate(Seg.SelectSingleNode("fare").Attributes.GetNamedItem("nvb").InnerText);
                    }

                    ResponseDetails.ReplaceChild(XmlDoc.ImportNode(XmlSeg.SelectSingleNode("flightInfo"), true), ResponseDetails.SelectSingleNode("flightInfo"));

                    AgentInfo.SelectSingleNode("company").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(ds.Tables[2].Rows[0]["거래처명"].ToString()));
                    AgentInfo.SelectSingleNode("name").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(ds.Tables[2].Rows[0]["거래처직원명"].ToString()));
                    AgentInfo.SelectSingleNode("tel").InnerText = String.IsNullOrWhiteSpace(ds.Tables[2].Rows[0]["회사전화"].ToString()) ? ds.Tables[2].Rows[0]["휴대폰"].ToString() : ds.Tables[2].Rows[0]["회사전화"].ToString();

                    return XmlDoc.DocumentElement;
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("TicketNumber", TicketNumber);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 548, OID, 0).ToErrors;
            }
        }

		/// <summary>
		/// PNR정보로 티켓 이미지 출력(Amadeus용)
		/// </summary>
		/// <param name="XmlDBBooking">저장된 예약정보</param>
		/// <param name="ResXml">PNR 정보</param>
		/// <param name="PaxName">탑승객명(ex HONG/GILDONG)</param>
		/// <returns></returns>
		public XmlElement ToModeSearchETicketDocAmadeus(XmlElement XmlDBBooking, XmlElement ResXml, string PaxName)
		{
			XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
			xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

			//오류 결과일 경우 예외 처리
			if (ResXml.SelectNodes("m:applicationError/m:errorText", xnMgr).Count > 0)
			{
				throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorText/m:errorFreeText", xnMgr).InnerText);
			}

			string[] PaxNames = PaxName.Split('/');
            string TstPaxType = "PAX";
            XmlNode TravellerInfo = null;

            foreach (XmlNode TmpTravellerInfo in ResXml.SelectNodes("m:travellerInfo", xnMgr))
            {
                if (TmpTravellerInfo.SelectNodes(String.Format("m:passengerData[m:travellerInformation/m:traveller/m:surname='{0}']", PaxNames[0]), xnMgr).Count > 0)
                {
                    foreach (XmlNode TmpPassenger in TmpTravellerInfo.SelectNodes("m:passengerData/m:travellerInformation/m:passenger", xnMgr))
                    {
                        if (TmpPassenger.SelectSingleNode("m:firstName", xnMgr).InnerText.Replace(" ", "").Equals(PaxNames[1]))
                        {
                            TravellerInfo = TmpTravellerInfo;
                            TstPaxType = (TmpPassenger.SelectNodes("m:type", xnMgr).Count > 0) ? (TmpPassenger.SelectSingleNode("m:type", xnMgr).InnerText.Equals("INF") ? "INF" : "PAX") : "PAX";
                            break;
                        }
                    }
                }
            }
			
			if (TravellerInfo != null)
			{
				string PTNum = TravellerInfo.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText;

				//운임정보
				XmlDocument FareXml = null;
				
                if (XmlDBBooking != null)
                {
                    FareXml = new XmlDocument();
                    FareXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);
                }

				//통합모드
				XmlDocument XmlDoc = new XmlDocument();
				XmlDoc.Load(mc.XmlFullPath("SearchETicketDocRS"));

				XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

				//기본정보
				XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");

				BookingInfo.SelectSingleNode("gds").InnerText = "Amadeus";
                BookingInfo.SelectSingleNode("bookingNo").InnerText = (ResXml.SelectNodes("m:pnrHeader/m:reservationInfo/m:reservation[m:companyId='KE']", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:pnrHeader/m:reservationInfo/m:reservation[m:companyId='KE']/m:controlNumber", xnMgr).InnerText : ResXml.SelectSingleNode("m:pnrHeader/m:reservationInfo/m:reservation[m:companyId='1A']/m:controlNumber", xnMgr).InnerText;
				BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = ResXml.SelectSingleNode("m:pnrHeader/m:reservationInfo/m:reservation[m:companyId='1A']/m:controlNumber", xnMgr).InnerText;
				BookingInfo.SelectSingleNode("modeBookingNo").InnerText = (XmlDBBooking != null) ? XmlDBBooking.SelectSingleNode("item/예약번호").InnerText : "";
				BookingInfo.SelectSingleNode("agentBookingNo").InnerText = (XmlDBBooking != null) ? XmlDBBooking.SelectSingleNode("item3/주문아이템코드").InnerText : "";
                BookingInfo.SelectSingleNode("allianceBookingNo").InnerText = (XmlDBBooking != null) ? XmlDBBooking.SelectSingleNode("item3/제휴사주문번호").InnerText : "";
				BookingInfo.SelectSingleNode("bookingCreationDate").InnerText = (XmlDBBooking != null) ? cm.RequestDateTime(XmlDBBooking.SelectSingleNode("item/예약일").InnerText, "yyyy-MM-dd HH:mm:ss") : "";
                BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText = (XmlDBBooking != null && FareXml.SelectNodes("priceIndex/paxFareGroup/paxFare/segFareGroup").Count > 0) ? Common.ServiceClass(FareXml.SelectSingleNode("priceIndex/paxFareGroup/paxFare/segFareGroup/segFare/fare/cabin").Attributes.GetNamedItem("cabin").InnerText) : ((ResXml.SelectNodes("m:originDestinationDetails", xnMgr).Count > 0 && ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR']/m:cabinDetails", xnMgr).Count > 0 && ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:cabinDetails/m:cabinDetails/m:classDesignator", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR']/m:cabinDetails/m:cabinDetails/m:classDesignator", xnMgr).InnerText : "");
				BookingInfo.SelectSingleNode("bookingClass").InnerText = Common.ServiceClassText("", BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText);
				BookingInfo.SelectSingleNode("paxName").InnerText = PaxName;

				//티켓정보
                if (TstPaxType.Equals("INF"))
                {
                    if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext[starts-with(., 'INF')]", PTNum), xnMgr).Count > 0)
                        BookingInfo.SelectSingleNode("ticketNumber").InnerText = Common.SplitAmadeusTicketNumber(ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext[starts-with(., 'INF')]", PTNum), xnMgr).InnerText);
                }
                else
                {
                    if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext[starts-with(., 'PAX')]", PTNum), xnMgr).Count > 0)
                        BookingInfo.SelectSingleNode("ticketNumber").InnerText = Common.SplitAmadeusTicketNumber(ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext[starts-with(., 'PAX')]", PTNum), xnMgr).InnerText);
                }

				//여정
				XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
				XmlNode Segment = FlightInfo.SelectSingleNode("seg");
				XmlNode StopSegment;
				XmlNode NewSegment;
				XmlNode NewStopSegment;
			
				foreach (XmlNode ItineraryInfo in ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR' and m:travelProduct/m:boardpointDetail]", xnMgr))
				{
                    NewSegment = FlightInfo.AppendChild(Segment.CloneNode(true));
					NewSegment.Attributes.GetNamedItem("ref").InnerText = ItineraryInfo.SelectSingleNode("m:elementManagementItinerary/m:reference[m:qualifier='ST']/m:number", xnMgr).InnerText;
					NewSegment.Attributes.GetNamedItem("ddt").InnerText = (ItineraryInfo.SelectNodes("m:travelProduct/m:product/m:depDate", xnMgr).Count > 0) ? cm.ConvertToDateTime(ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:depDate", xnMgr).InnerText, ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:depTime", xnMgr).InnerText) : "";
					NewSegment.Attributes.GetNamedItem("ardt").InnerText = (ItineraryInfo.SelectNodes("m:travelProduct/m:product/m:arrDate", xnMgr).Count > 0) ? cm.ConvertToDateTime(ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:arrDate", xnMgr).InnerText, ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:arrTime", xnMgr).InnerText) : "";
					NewSegment.Attributes.GetNamedItem("mcc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:companyDetail/m:identification", xnMgr).InnerText;
					NewSegment.Attributes.GetNamedItem("occ").InnerText = (ItineraryInfo.SelectNodes("m:legInfo/m:legTravelProduct/m:companyDetails/m:operatingCompany", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:legInfo/m:legTravelProduct/m:companyDetails/m:operatingCompany", xnMgr).InnerText : NewSegment.Attributes.GetNamedItem("mcc").InnerText;
					NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(ItineraryInfo.SelectSingleNode("m:travelProduct/m:productDetails/m:identification", xnMgr).InnerText);
					NewSegment.Attributes.GetNamedItem("eqt").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:equipment", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:equipment", xnMgr).InnerText : "";
					NewSegment.Attributes.GetNamedItem("stn").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:numOfStops", xnMgr).Count > 0) ? cm.RequestInt(ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:numOfStops", xnMgr).InnerText).ToString() : "";
					NewSegment.Attributes.GetNamedItem("rbd").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:productDetails/m:classOfService", xnMgr).InnerText;
					//NewSegment.Attributes.GetNamedItem("rsc").InnerText = (ItineraryInfo.SelectNodes("m:relatedProduct/m:status", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:relatedProduct/m:status", xnMgr).InnerText : "";
                    NewSegment.Attributes.GetNamedItem("rsc").InnerText = ItineraryStatus(ItineraryInfo, xnMgr);
					NewSegment.Attributes.GetNamedItem("eft").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:duration", xnMgr).Count > 0) ? cm.ConvertToDateTime(ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:duration", xnMgr).InnerText) : "";

					NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText;
					NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminal").InnerText = "";
					NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminalCode").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:departureInformation", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:flightDetail/m:departureInformation/m:departTerminal", xnMgr).InnerText : "";
					NewSegment.SelectSingleNode("departureAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText);

					NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText;
					NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminal").InnerText = "";
					NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminalCode").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:arrivalStationInfo", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:flightDetail/m:arrivalStationInfo/m:terminal", xnMgr).InnerText : "";
					NewSegment.SelectSingleNode("arrivalAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText);

					NewSegment.SelectSingleNode("operatingAirline").InnerText = Common.GetAirlineName("KO", NewSegment.Attributes.GetNamedItem("occ").InnerText);
					NewSegment.SelectSingleNode("marketingAirline").InnerText = Common.GetAirlineName("KO", NewSegment.Attributes.GetNamedItem("mcc").InnerText);
                    NewSegment.SelectSingleNode("equipment").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection((ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:equipment", xnMgr).Count > 0) ? Common.GetEquipmentName(ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:equipment", xnMgr).InnerText) : ""));
                    NewSegment.SelectSingleNode("airlineRefNumber").InnerText = (ItineraryInfo.SelectNodes("m:itineraryReservationInfo/m:reservation/m:controlNumber", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:itineraryReservationInfo/m:reservation/m:controlNumber", xnMgr).InnerText : "";

					StopSegment = NewSegment.SelectSingleNode("legInfo");

					if (NewSegment.Attributes.GetNamedItem("stn").InnerText.Equals("1") && ItineraryInfo.SelectNodes("m:legInfo", xnMgr).Count > 1)
					{
						int i = 0;
						foreach (XmlNode StopDetails in ItineraryInfo.SelectNodes("m:legInfo", xnMgr))
						{
							NewStopSegment = StopSegment.SelectNodes("seg")[i++];
							NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = StopDetails.SelectSingleNode("m:legTravelProduct/m:boardPointDetails/m:trueLocationId", xnMgr).InnerText;
							NewStopSegment.Attributes.GetNamedItem("alc").InnerText = StopDetails.SelectSingleNode("m:legTravelProduct/m:offpointDetails/m:trueLocationId", xnMgr).InnerText;
							NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(StopDetails.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureDate", xnMgr).InnerText, StopDetails.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureTime", xnMgr).InnerText);
							NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(StopDetails.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalDate", xnMgr).InnerText, StopDetails.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalTime", xnMgr).InnerText);
							NewStopSegment.Attributes.GetNamedItem("eft").InnerText = "";
							NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = "";

							if (i.Equals(1))
								NewStopSegment.InnerText = Common.GetAirportName("EN", NewStopSegment.Attributes.GetNamedItem("alc").InnerText);
						}

						StopSegment.SelectNodes("seg")[0].Attributes.GetNamedItem("gwt").InnerText = cm.ElapseFlyingTime(StopSegment.SelectNodes("seg")[0].Attributes.GetNamedItem("ardt").InnerText, StopSegment.SelectNodes("seg")[1].Attributes.GetNamedItem("ddt").InnerText);
					}
					else
						NewSegment.RemoveChild(StopSegment);

					string STNum = ItineraryInfo.SelectSingleNode("m:elementManagementItinerary/m:reference[m:qualifier='ST']/m:number", xnMgr).InnerText;

					foreach (XmlNode TstData in ResXml.SelectNodes(String.Format("m:tstData[m:referenceForTstData/m:reference[m:qualifier='PT' and m:number='{0}']]", PTNum), xnMgr))
					{
                        if (TstData.SelectSingleNode("m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='41']/m:longFreetext", xnMgr).InnerText.Equals(TstPaxType))
                        {
                            XmlNodeList TstDataList = TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST' and m:number != '0']", xnMgr);

                            for (int i = 0; i < TstDataList.Count; i++)
                            {
                                if (TstDataList[i].SelectSingleNode("m:number", xnMgr).InnerText.Equals(STNum))
                                {
                                    XmlNode FareElement = TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr)[i];

                                    NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("basis").InnerText = String.Concat((FareElement.SelectNodes("m:primaryCode", xnMgr).Count > 0) ? FareElement.SelectSingleNode("m:primaryCode", xnMgr).InnerText : "", (FareElement.SelectNodes("m:fareBasis", xnMgr).Count > 0) ? FareElement.SelectSingleNode("m:fareBasis", xnMgr).InnerText : "");
                                    NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty((FareElement.SelectNodes("m:baggageAllowance", xnMgr).Count > 0) ? FareElement.SelectSingleNode("m:baggageAllowance", xnMgr).InnerText : "");
                                    NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("nvb").InnerText = (FareElement.SelectNodes("m:notValidBefore", xnMgr).Count > 0) ? cm.ConvertToDateTime(FareElement.SelectSingleNode("m:notValidBefore", xnMgr).InnerText) : "";
                                    NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("nva").InnerText = (FareElement.SelectNodes("m:notValidAfter", xnMgr).Count > 0) ? cm.ConvertToDateTime(FareElement.SelectSingleNode("m:notValidAfter", xnMgr).InnerText) : "";
                                    break;
                                }
                            }
                        }
					}

					//좌석
					if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:seatPaxInfo/m:crossRef/m:reference[m:qualifier='PT']/m:number='{0}'][m:referenceForDataElement/m:reference[m:qualifier='ST']/m:number='{1}']", PTNum, STNum), xnMgr).Count > 0)
						NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("seat").InnerText = ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:referenceForDataElement/m:reference[m:qualifier='ST']/m:number='{0}']/m:serviceRequest/m:ssrb[m:crossRef='{1}']/m:data", STNum, PTNum), xnMgr).InnerText;

                    //캐빈클래스
                    if (ItineraryInfo.SelectNodes("m:cabinDetails", xnMgr).Count > 0)
                    {
                        NewSegment.SelectSingleNode("cabin").Attributes.GetNamedItem("code").InnerText = ItineraryInfo.SelectSingleNode("m:cabinDetails/m:cabinDetails/m:classDesignator", xnMgr).InnerText;
                        NewSegment.SelectSingleNode("cabin").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(Common.ServiceClassText("A", NewSegment.SelectSingleNode("cabin").Attributes.GetNamedItem("code").InnerText)));
                    }

                    //티켓정보
                    if (TstPaxType.Equals("INF"))
                    {
                        if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement[m:reference[m:qualifier='PT' and m:number='{0}'] and m:reference[m:qualifier='ST' and m:number='{1}']]]/m:otherDataFreetext/m:longFreetext[starts-with(., 'INF')]", PTNum, STNum), xnMgr).Count > 0)
                            NewSegment.SelectSingleNode("ticketNumber").InnerText = Common.SplitAmadeusTicketNumber(ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement[m:reference[m:qualifier='PT' and m:number='{0}'] and m:reference[m:qualifier='ST' and m:number='{1}']]]/m:otherDataFreetext/m:longFreetext[starts-with(., 'INF')]", PTNum, STNum), xnMgr).InnerText);
                    }
                    else
                    {
                        if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement[m:reference[m:qualifier='PT' and m:number='{0}'] and m:reference[m:qualifier='ST' and m:number='{1}']]]/m:otherDataFreetext/m:longFreetext[starts-with(., 'PAX')]", PTNum, STNum), xnMgr).Count > 0)
                            NewSegment.SelectSingleNode("ticketNumber").InnerText = Common.SplitAmadeusTicketNumber(ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement[m:reference[m:qualifier='PT' and m:number='{0}'] and m:reference[m:qualifier='ST' and m:number='{1}']]]/m:otherDataFreetext/m:longFreetext[starts-with(., 'PAX')]", PTNum, STNum), xnMgr).InnerText);
                    }
				}

                FlightInfo.RemoveChild(Segment);

                if (XmlDBBooking != null)
                {
                    //운임정보
                    XmlNode PaxItem = XmlDBBooking.SelectSingleNode(String.Format("item4[영문성명='{0}']", cm.SplitPaxType(PaxName.Trim(), false)[1]));
                    XmlNode FareInfo = XmlDoc.SelectSingleNode("ResponseDetails/fareInfo");

                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("amount").InnerText = (cm.RequestInt(PaxItem.SelectSingleNode("총요금").InnerText) + cm.RequestInt(PaxItem.SelectSingleNode("취급수수료").InnerText)).ToString();
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("fare").InnerText = PaxItem.SelectSingleNode("항공료").InnerText;
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("tax").InnerText = PaxItem.SelectSingleNode("TAX").InnerText;
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("fsc").InnerText = PaxItem.SelectSingleNode("유류할증료").InnerText;
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("tasf").InnerText = (cm.RequestInt(PaxItem.SelectSingleNode("발권수수료").InnerText) + cm.RequestInt(PaxItem.SelectSingleNode("취급수수료").InnerText)).ToString();
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("cnc").InnerText = "KRW";
                    FareInfo.SelectSingleNode("payment").InnerText = (XmlDBBooking.SelectNodes("item5").Count > 0 && Convert.ToInt32(XmlDBBooking.SelectSingleNode("item5/수납액").InnerText) > 0) ? ((XmlDBBooking.SelectNodes("item6").Count > 0 && (XmlDBBooking.SelectNodes("item7").Count > 0 || XmlDBBooking.SelectNodes("item8").Count > 0)) ? "CARD + CASH" : ((XmlDBBooking.SelectNodes("item6").Count > 0) ? "CARD" : "CASH")) : "";

                    if (XmlDBBooking.SelectNodes("item6").Count > 0)
                    {
                        foreach (XmlNode Item6 in XmlDBBooking.SelectNodes("item6"))
                        {
                            if (!String.IsNullOrWhiteSpace(FareInfo.SelectSingleNode("payment").Attributes.GetNamedItem("cardNo").InnerText))
                                FareInfo.SelectSingleNode("payment").Attributes.GetNamedItem("cardNo").InnerText += ",";

                            FareInfo.SelectSingleNode("payment").Attributes.GetNamedItem("cardNo").InnerText += Item6.SelectSingleNode("카드번호").InnerText;
                        }
                    }

                    //담당여행사
                    XmlNode AgentInfo = XmlDoc.SelectSingleNode("ResponseDetails/agentInfo");

                    AgentInfo.SelectSingleNode("company").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(XmlDBBooking.SelectSingleNode("item2/거래처명").InnerText));
                    AgentInfo.SelectSingleNode("name").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(XmlDBBooking.SelectSingleNode("item2/거래처직원명").InnerText));
                    AgentInfo.SelectSingleNode("tel").InnerText = (String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item2/회사전화").InnerText)) ? XmlDBBooking.SelectSingleNode("item2/휴대폰").InnerText : XmlDBBooking.SelectSingleNode("item2/회사전화").InnerText;
                }

				return XmlDoc.DocumentElement;
			}
			else
				throw new Exception("탑승객 정보가 일치하지 않습니다.");
		}

		/// <summary>
		/// PNR정보로 티켓 이미지 출력(Abacus용)
		/// </summary>
		/// <param name="XmlDBBooking">저장된 예약정보</param>
		/// <param name="ResXml">PNR 정보</param>
        /// <param name="PaxName">탑승객명(ex HONG/GILDONGMR)</param>
        /// <param name="GKPNR">GKPNR 여부</param>
		/// <returns></returns>
		public XmlElement ToModeSearchETicketDocAbacus(XmlElement XmlDBBooking, XmlElement ResXml, string PaxName, bool GKPNR)
		{
            XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
            xnMgr.AddNamespace("stl", AbacusConfig.NamespaceURL("TravelItineraryRead_stl"));
            xnMgr.AddNamespace("tir310", AbacusConfig.NamespaceURL("TravelItineraryRead_tir310"));

			//오류 결과일 경우 예외 처리
            if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
			{
                throw new Exception(ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText);
			}

			string[] PaxNames = PaxName.Split('/');
            XmlNode TravelItinerary = ResXml.SelectSingleNode("tir310:TravelItinerary", xnMgr);
            XmlNode PersonNameNode = TravelItinerary.SelectSingleNode("tir310:CustomerInfo/tir310:PersonName[tir310:Surname='" + PaxNames[0] + "'][translate(tir310:GivenName,' ', '')='" + PaxNames[1] + "']", xnMgr);

            if (PersonNameNode != null)
			{
                string NameNumber = PersonNameNode.Attributes.GetNamedItem("NameNumber").InnerText;
                bool Infant = PersonNameNode.Attributes.GetNamedItem("PassengerType").InnerText.Equals("INF") ? true : false;

                if (Infant)
                {
                    foreach (XmlNode NameService in TravelItinerary.SelectNodes(String.Format("tir310:SpecialServiceInfo/tir310:Service[@SSR_Code='SSR'and @SSR_Type='INFT']"), xnMgr))
                    {
                        if (NameService.SelectSingleNode("tir310:Text", xnMgr).InnerText.IndexOf(String.Format("/{0}/{1}/", PersonNameNode.SelectSingleNode("tir310:Surname", xnMgr).InnerText, PersonNameNode.SelectSingleNode("tir310:GivenName", xnMgr).InnerText)) != -1)
                        {
                            NameNumber = NameService.SelectSingleNode("tir310:PersonName", xnMgr).Attributes.GetNamedItem("NameNumber").InnerText;
                            break;
                        }
                    }
                }
                
                XmlNode AirItineraryPricingInfo = (TravelItinerary.SelectNodes("tir310:ItineraryInfo/tir310:ItineraryPricing", xnMgr).Count > 0) ? TravelItinerary.SelectSingleNode(String.Format("tir310:ItineraryInfo/tir310:ItineraryPricing/tir310:PriceQuote/tir310:PricedItinerary/tir310:AirItineraryPricingInfo[tir310:PassengerTypeQuantity/@Code='{0}']", PersonNameNode.Attributes.GetNamedItem("PassengerType").InnerText), xnMgr) : null;

				//운임정보
				XmlDocument FareXml = null;

                if (XmlDBBooking != null)
                {
                    FareXml = new XmlDocument();
                    FareXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);
                }

				//통합모드
				XmlDocument XmlDoc = new XmlDocument();
				XmlDoc.Load(mc.XmlFullPath("SearchETicketDocRS"));

				XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

				//기본정보
				XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");

				BookingInfo.SelectSingleNode("gds").InnerText = "Abacus";
                BookingInfo.SelectSingleNode("bookingNo").InnerText = TravelItinerary.SelectSingleNode("tir310:ItineraryRef", xnMgr).Attributes.GetNamedItem("ID").InnerText;
                BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = BookingInfo.SelectSingleNode("bookingNo").InnerText;
                BookingInfo.SelectSingleNode("modeBookingNo").InnerText = (XmlDBBooking != null) ? XmlDBBooking.SelectSingleNode("item/예약번호").InnerText : "";
				BookingInfo.SelectSingleNode("agentBookingNo").InnerText = (XmlDBBooking != null) ? XmlDBBooking.SelectSingleNode("item3/주문아이템코드").InnerText : "";
                BookingInfo.SelectSingleNode("allianceBookingNo").InnerText = (XmlDBBooking != null) ? XmlDBBooking.SelectSingleNode("item3/제휴사주문번호").InnerText : "";
				BookingInfo.SelectSingleNode("bookingCreationDate").InnerText = (XmlDBBooking != null) ? cm.RequestDateTime(XmlDBBooking.SelectSingleNode("item/예약일").InnerText, "yyyy-MM-dd HH:mm:ss") : "";
				BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText = (XmlDBBooking != null) ? Common.ServiceClass(FareXml.SelectSingleNode("priceIndex/paxFareGroup/paxFare/segFareGroup/segFare/fare/cabin").Attributes.GetNamedItem("cabin").InnerText) : "";
                BookingInfo.SelectSingleNode("bookingClass").InnerText = Common.ServiceClassText(((XmlDBBooking != null) ? XmlDBBooking.SelectSingleNode("item3/GDS구분").InnerText : ""), BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText);
				BookingInfo.SelectSingleNode("paxName").InnerText = PaxName;
			    
                //티켓정보
                if (TravelItinerary.SelectNodes("tir310:SpecialServiceInfo", xnMgr).Count > 0 && TravelItinerary.SelectNodes("tir310:SpecialServiceInfo/tir310:Service[@SSR_Code='SSR' and @SSR_Type='TKNE']", xnMgr).Count > 0)
                {
                    foreach (XmlNode TicketInfoService in TravelItinerary.SelectNodes(String.Format("tir310:SpecialServiceInfo/tir310:Service[@SSR_Code='SSR'and @SSR_Type='TKNE' and tir310:PersonName/@NameNumber='{0}']", NameNumber), xnMgr))
                    {
                        string TicketNumber = Common.SplitAbacusTicketNumber(TicketInfoService.SelectSingleNode("tir310:Text", xnMgr).InnerText);
                        bool TicketVoid = Common.AbacusVoidTicket(TravelItinerary.SelectNodes("tir310:ItineraryInfo/tir310:Ticketing[starts-with(@eTicketNumber, 'TV')]", xnMgr), TicketNumber.Replace("INF", ""));

                        if (Infant)
                        {
                            if (TicketNumber.StartsWith("INF"))
                            {
                                TicketNumber = TicketNumber.Replace("INF", "");

                                if (!TicketVoid && BookingInfo.SelectSingleNode("ticketNumber").InnerText.IndexOf(TicketNumber).Equals(-1))
                                {
                                    if (!String.IsNullOrWhiteSpace(BookingInfo.SelectSingleNode("ticketNumber").InnerText))
                                        BookingInfo.SelectSingleNode("ticketNumber").InnerText += "/";

                                    BookingInfo.SelectSingleNode("ticketNumber").InnerText += TicketNumber;
                                }
                            }
                        }
                        else
                        {
                            if (!TicketNumber.StartsWith("INF"))
                            {
                                if (!TicketVoid && BookingInfo.SelectSingleNode("ticketNumber").InnerText.IndexOf(TicketNumber).Equals(-1))
                                {
                                    if (!String.IsNullOrWhiteSpace(BookingInfo.SelectSingleNode("ticketNumber").InnerText))
                                        BookingInfo.SelectSingleNode("ticketNumber").InnerText += "/";

                                    BookingInfo.SelectSingleNode("ticketNumber").InnerText += TicketNumber;
                                }
                            }
                        }
                    }
                }

				//여정
				XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
				XmlNode Segment = FlightInfo.SelectSingleNode("seg");
				XmlNode StopSegment = Segment.SelectSingleNode("seg");
				XmlNode NewSegment;
				XmlNode NewStopSegment;

                XmlNodeList ItineraryInfo = TravelItinerary.SelectNodes("tir310:ItineraryInfo/tir310:ReservationItems/tir310:Item/tir310:FlightSegment", xnMgr);

				for (int i = 0; i < ItineraryInfo.Count; i++)
				{
					NewSegment = FlightInfo.AppendChild(Segment.CloneNode(true));
					StopSegment = NewSegment.SelectSingleNode("legInfo");

                    if (ItineraryInfo.Count > (i + 1) && ItineraryInfo[i].Attributes.GetNamedItem("SegmentNumber").InnerText.Equals(ItineraryInfo[(i + 1)].Attributes.GetNamedItem("SegmentNumber").InnerText))
					{
                        NewSegment.Attributes.GetNamedItem("ref").InnerText = cm.RequestInt(ItineraryInfo[i].Attributes.GetNamedItem("SegmentNumber").InnerText).ToString();
                        NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("DepartureDateTime").InnerText);
                        NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToAbacusDateTime(ItineraryInfo[(i + 1)].Attributes.GetNamedItem("ArrivalDateTime").InnerText, ItineraryInfo[(i + 1)].Attributes.GetNamedItem("DepartureDateTime").InnerText);
                        NewSegment.Attributes.GetNamedItem("mcc").InnerText = ItineraryInfo[i].SelectSingleNode("tir310:MarketingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText;
                        NewSegment.Attributes.GetNamedItem("occ").InnerText = (ItineraryInfo[i].SelectNodes("tir310:OperatingAirline", xnMgr).Count > 0 && (XmlAttribute)ItineraryInfo[i].SelectSingleNode("tir310:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code") != null) ? ItineraryInfo[i].SelectSingleNode("tir310:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText : NewSegment.Attributes.GetNamedItem("mcc").InnerText;
                        NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(ItineraryInfo[i].Attributes.GetNamedItem("FlightNumber").InnerText);
                        NewSegment.Attributes.GetNamedItem("eqt").InnerText = (ItineraryInfo[i].SelectNodes("tir310:Equipment", xnMgr).Count > 0) ? ItineraryInfo[i].SelectSingleNode("tir310:Equipment", xnMgr).Attributes.GetNamedItem("AirEquipType").InnerText : "";
                        NewSegment.Attributes.GetNamedItem("stn").InnerText = "1";
						NewSegment.Attributes.GetNamedItem("rbd").InnerText = ItineraryInfo[i].Attributes.GetNamedItem("ResBookDesigCode").InnerText;
                        NewSegment.Attributes.GetNamedItem("rsc").InnerText = (GKPNR && ItineraryInfo[i].Attributes.GetNamedItem("Status").InnerText.Equals("NO")) ? "HK" : ItineraryInfo[i].Attributes.GetNamedItem("Status").InnerText;
                        NewSegment.Attributes.GetNamedItem("eft").InnerText = ((XmlAttribute)ItineraryInfo[i].Attributes.GetNamedItem("ElapsedTime") != null) ? cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("ElapsedTime").InnerText.Replace(".", "")) : "";

                        NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText = ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                        NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminal").InnerText = ((XmlAttribute)ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("Terminal") != null) ? ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("Terminal").InnerText : "";
                        NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminalCode").InnerText = ((XmlAttribute)ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("TerminalCode") != null) ? ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("TerminalCode").InnerText : "";
						NewSegment.SelectSingleNode("departureAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText);

                        NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText = ItineraryInfo[(i + 1)].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                        NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminal").InnerText = ((XmlAttribute)ItineraryInfo[(i + 1)].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("Terminal") != null) ? ItineraryInfo[(i + 1)].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("Terminal").InnerText : "";
                        NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminalCode").InnerText = ((XmlAttribute)ItineraryInfo[(i + 1)].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("TerminalCode") != null) ? ItineraryInfo[(i + 1)].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("TerminalCode").InnerText : "";
						NewSegment.SelectSingleNode("arrivalAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText);

						//기착정보
						NewStopSegment = StopSegment.SelectNodes("seg")[0];
                        NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("alc").InnerText = ItineraryInfo[i].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
						NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("DepartureDateTime").InnerText);
                        NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToAbacusDateTime(ItineraryInfo[i].Attributes.GetNamedItem("ArrivalDateTime").InnerText, ItineraryInfo[i].Attributes.GetNamedItem("DepartureDateTime").InnerText);
						NewStopSegment.Attributes.GetNamedItem("eft").InnerText = "";
						NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = "";
						NewStopSegment.InnerText = Common.GetAirportName("EN", NewStopSegment.Attributes.GetNamedItem("alc").InnerText);

						NewStopSegment = StopSegment.SelectNodes("seg")[1];
                        NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = ItineraryInfo[(i + 1)].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("alc").InnerText = ItineraryInfo[(i + 1)].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
						NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(ItineraryInfo[(i + 1)].Attributes.GetNamedItem("DepartureDateTime").InnerText);
                        NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToAbacusDateTime(ItineraryInfo[(i + 1)].Attributes.GetNamedItem("ArrivalDateTime").InnerText, ItineraryInfo[(i + 1)].Attributes.GetNamedItem("DepartureDateTime").InnerText);
						NewStopSegment.Attributes.GetNamedItem("eft").InnerText = "";
						NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = "";

						StopSegment.SelectNodes("seg")[0].Attributes.GetNamedItem("gwt").InnerText = cm.ElapseFlyingTime(StopSegment.SelectNodes("seg")[0].Attributes.GetNamedItem("ardt").InnerText, StopSegment.SelectNodes("seg")[1].Attributes.GetNamedItem("ddt").InnerText);
						NewSegment.Attributes.GetNamedItem("eft").InnerText = cm.SumElapseFlyingTime(cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("ElapsedTime").InnerText.Replace(".", "")), cm.ConvertToDateTime(ItineraryInfo[(i + 1)].Attributes.GetNamedItem("ElapsedTime").InnerText.Replace(".", "")), StopSegment.SelectNodes("seg")[0].Attributes.GetNamedItem("gwt").InnerText);

						i++;
					}
					else
					{
                        NewSegment.Attributes.GetNamedItem("ref").InnerText = cm.RequestInt(ItineraryInfo[i].Attributes.GetNamedItem("SegmentNumber").InnerText).ToString();
						NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("DepartureDateTime").InnerText);
                        NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToAbacusDateTime(ItineraryInfo[i].Attributes.GetNamedItem("ArrivalDateTime").InnerText, ItineraryInfo[i].Attributes.GetNamedItem("DepartureDateTime").InnerText);
                        NewSegment.Attributes.GetNamedItem("mcc").InnerText = ItineraryInfo[i].SelectSingleNode("tir310:MarketingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText;
                        NewSegment.Attributes.GetNamedItem("occ").InnerText = (ItineraryInfo[i].SelectNodes("tir310:OperatingAirline", xnMgr).Count > 0 && (XmlAttribute)ItineraryInfo[i].SelectSingleNode("tir310:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code") != null) ? ItineraryInfo[i].SelectSingleNode("tir310:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText : NewSegment.Attributes.GetNamedItem("mcc").InnerText;
						NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(ItineraryInfo[i].Attributes.GetNamedItem("FlightNumber").InnerText);
                        NewSegment.Attributes.GetNamedItem("eqt").InnerText = (ItineraryInfo[i].SelectNodes("tir310:Equipment", xnMgr).Count > 0) ? ItineraryInfo[i].SelectSingleNode("tir310:Equipment", xnMgr).Attributes.GetNamedItem("AirEquipType").InnerText : "";
						NewSegment.Attributes.GetNamedItem("stn").InnerText = "0";
						NewSegment.Attributes.GetNamedItem("rbd").InnerText = ItineraryInfo[i].Attributes.GetNamedItem("ResBookDesigCode").InnerText;
                        NewSegment.Attributes.GetNamedItem("rsc").InnerText = (GKPNR && ItineraryInfo[i].Attributes.GetNamedItem("Status").InnerText.Equals("NO")) ? "HK" : ItineraryInfo[i].Attributes.GetNamedItem("Status").InnerText;
						NewSegment.Attributes.GetNamedItem("eft").InnerText = ((XmlAttribute)ItineraryInfo[i].Attributes.GetNamedItem("ElapsedTime") != null) ? cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("ElapsedTime").InnerText.Replace(".", "")) : "";

                        NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText = ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                        NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminal").InnerText = ((XmlAttribute)ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("Terminal") != null) ? ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("Terminal").InnerText : "";
                        NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminalCode").InnerText = ((XmlAttribute)ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("TerminalCode") != null) ? ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("TerminalCode").InnerText : "";
						NewSegment.SelectSingleNode("departureAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText);

                        NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText = ItineraryInfo[i].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                        NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminal").InnerText = ((XmlAttribute)ItineraryInfo[i].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("Terminal") != null) ? ItineraryInfo[i].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("Terminal").InnerText : "";
                        NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminalCode").InnerText = ((XmlAttribute)ItineraryInfo[i].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("TerminalCode") != null) ? ItineraryInfo[i].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("TerminalCode").InnerText : "";
						NewSegment.SelectSingleNode("arrivalAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText);

						NewSegment.RemoveChild(StopSegment);
					}

					NewSegment.SelectSingleNode("operatingAirline").InnerText = Common.GetAirlineName("KO", NewSegment.Attributes.GetNamedItem("occ").InnerText);
                    NewSegment.SelectSingleNode("marketingAirline").InnerText = Common.GetAirlineName("KO", NewSegment.Attributes.GetNamedItem("mcc").InnerText);
					NewSegment.SelectSingleNode("equipment").InnerText = "";

                    if (ItineraryInfo[i].SelectNodes("tir310:SupplierRef", xnMgr).Count > 0)
                        NewSegment.SelectSingleNode("airlineRefNumber").InnerText = (ItineraryInfo[i].SelectSingleNode("tir310:SupplierRef", xnMgr).Attributes.GetNamedItem("ID").InnerText.IndexOf('*') != -1) ? ItineraryInfo[i].SelectSingleNode("tir310:SupplierRef", xnMgr).Attributes.GetNamedItem("ID").InnerText.Split('*')[1] : ItineraryInfo[i].SelectSingleNode("tir310:SupplierRef", xnMgr).Attributes.GetNamedItem("ID").InnerText;
                    else if (ItineraryInfo[i].SelectNodes("tir310:OperatingAirlineRecord", xnMgr).Count > 0)
                        NewSegment.SelectSingleNode("airlineRefNumber").InnerText = ItineraryInfo[i].SelectSingleNode("tir310:OperatingAirlineRecord", xnMgr).Attributes.GetNamedItem("ID").InnerText;
                    else
                        NewSegment.SelectSingleNode("airlineRefNumber").InnerText = "";

                    if (AirItineraryPricingInfo != null)
                    {
                        XmlNode FlightSegment = AirItineraryPricingInfo.SelectSingleNode(String.Format("tir310:PTC_FareBreakdown/tir310:FlightSegment[normalize-space(@SegmentNumber)='{0}']", NewSegment.Attributes.GetNamedItem("ref").InnerText), xnMgr);

                        if (FlightSegment != null)
                        {
                            NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("basis").InnerText = FlightSegment.SelectSingleNode("tir310:FareBasis", xnMgr).Attributes.GetNamedItem("Code").InnerText;
                            NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty((FlightSegment.SelectNodes("tir310:BaggageAllowance", xnMgr).Count > 0) ? FlightSegment.SelectSingleNode("tir310:BaggageAllowance", xnMgr).Attributes.GetNamedItem("Number").InnerText : "");
                            NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("nvb").InnerText = (FlightSegment.SelectNodes("tir310:ValidityDates/tir310:NotValidBefore", xnMgr).Count > 0) ? FlightSegment.SelectSingleNode("tir310:ValidityDates/tir310:NotValidBefore", xnMgr).InnerText.Substring(0, 10) : "";
                            NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("nva").InnerText = (FlightSegment.SelectNodes("tir310:ValidityDates/tir310:NotValidAfter", xnMgr).Count > 0) ? FlightSegment.SelectSingleNode("tir310:ValidityDates/tir310:NotValidAfter", xnMgr).InnerText.Substring(0, 10) : "";
                            NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("seat").InnerText = "";
                        }
                    }

                    if (ItineraryInfo[i].SelectNodes("tir310:Cabin", xnMgr).Count > 0)
                    {
                        NewSegment.SelectSingleNode("cabin").Attributes.GetNamedItem("code").InnerText = ItineraryInfo[i].SelectSingleNode("tir310:Cabin", xnMgr).Attributes.GetNamedItem("Code").InnerText;
                        NewSegment.SelectSingleNode("cabin").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(Common.ServiceClassText("S", NewSegment.SelectSingleNode("cabin").Attributes.GetNamedItem("code").InnerText)));
                    }

                    if (TravelItinerary.SelectNodes("tir310:SpecialServiceInfo", xnMgr).Count > 0 && TravelItinerary.SelectNodes("tir310:SpecialServiceInfo/tir310:Service[@SSR_Code='SSR' and @SSR_Type='TKNE']", xnMgr).Count > 0)
                    {
                        foreach (XmlNode TicketInfoService in TravelItinerary.SelectNodes(String.Format("tir310:SpecialServiceInfo/tir310:Service[@SSR_Code='SSR'and @SSR_Type='TKNE' and tir310:PersonName/@NameNumber='{0}']", NameNumber), xnMgr))
                        {
                            if (TicketInfoService.SelectSingleNode("tir310:Text", xnMgr).InnerText.IndexOf(String.Concat(NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText, NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText)) != -1)
                            {
                                string TicketNumber = Common.SplitAbacusTicketNumber(TicketInfoService.SelectSingleNode("tir310:Text", xnMgr).InnerText);
                                
                                if (!Common.AbacusVoidTicket(TravelItinerary.SelectNodes("tir310:ItineraryInfo/tir310:Ticketing[starts-with(@eTicketNumber, 'TV')]", xnMgr), TicketNumber.Replace("INF", "")))
                                {
                                    if (Infant)
                                    {
                                        if (TicketNumber.StartsWith("INF"))
                                        {
                                            NewSegment.SelectSingleNode("ticketNumber").InnerText = TicketNumber.Replace("INF", "");
                                        }
                                    }
                                    else
                                    {
                                        if (!TicketNumber.StartsWith("INF"))
                                        {
                                            NewSegment.SelectSingleNode("ticketNumber").InnerText = TicketNumber;
                                        }
                                    }
                                }
                            }
                        }
                    }
				}

				FlightInfo.RemoveChild(Segment);

                if (XmlDBBooking != null)
                {
                    //운임정보
                    XmlNode PaxItem = XmlDBBooking.SelectSingleNode(String.Format("item4[영문성명='{0}']", cm.SplitPaxType(PaxName.Trim(), false)[1]));
                    XmlNode FareInfo = XmlDoc.SelectSingleNode("ResponseDetails/fareInfo");

                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("amount").InnerText = (cm.RequestInt(PaxItem.SelectSingleNode("총요금").InnerText) + cm.RequestInt(PaxItem.SelectSingleNode("취급수수료").InnerText)).ToString();
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("fare").InnerText = PaxItem.SelectSingleNode("항공료").InnerText;
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("tax").InnerText = PaxItem.SelectSingleNode("TAX").InnerText;
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("fsc").InnerText = PaxItem.SelectSingleNode("유류할증료").InnerText;
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("tasf").InnerText = (cm.RequestInt(PaxItem.SelectSingleNode("발권수수료").InnerText) + cm.RequestInt(PaxItem.SelectSingleNode("취급수수료").InnerText)).ToString();
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("cnc").InnerText = "KRW";
                    FareInfo.SelectSingleNode("payment").InnerText = (XmlDBBooking.SelectNodes("item5").Count > 0 && Convert.ToInt32(XmlDBBooking.SelectSingleNode("item5/수납액").InnerText) > 0) ? ((XmlDBBooking.SelectNodes("item6").Count > 0 && (XmlDBBooking.SelectNodes("item7").Count > 0 || XmlDBBooking.SelectNodes("item8").Count > 0)) ? "CARD + CASH" : ((XmlDBBooking.SelectNodes("item6").Count > 0) ? "CARD" : "CASH")) : "";

                    //담당여행사
                    XmlNode AgentInfo = XmlDoc.SelectSingleNode("ResponseDetails/agentInfo");

                    AgentInfo.SelectSingleNode("company").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(XmlDBBooking.SelectSingleNode("item2/거래처명").InnerText));
                    AgentInfo.SelectSingleNode("name").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(XmlDBBooking.SelectSingleNode("item2/거래처직원명").InnerText));
                    AgentInfo.SelectSingleNode("tel").InnerText = (String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item2/회사전화").InnerText)) ? XmlDBBooking.SelectSingleNode("item2/휴대폰").InnerText : XmlDBBooking.SelectSingleNode("item2/회사전화").InnerText;
                }
                
				return XmlDoc.DocumentElement;
			}
			else
				throw new Exception("탑승객 정보가 일치하지 않습니다.");
		}

        /// <summary>
        /// PNR정보로 티켓 이미지 출력(Abacus용)(구버전용)
        /// </summary>
        /// <param name="XmlDBBooking">저장된 예약정보</param>
        /// <param name="ResXml">PNR 정보</param>
        /// <param name="PaxName">탑승객명(ex HONG/GILDONGMR)</param>
        /// <returns></returns>
        public XmlElement ToModeSearchETicketDocAbacus_OldVersion(XmlElement XmlDBBooking, XmlElement ResXml, string PaxName)
        {
            XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
            xnMgr.AddNamespace("m", AbacusConfig.NamespaceURL(""));

            //오류 결과일 경우 예외 처리
            if (ResXml.SelectNodes("m:Errors", xnMgr).Count > 0)
            {
                throw new Exception(ResXml.SelectSingleNode("m:Errors/m:Error/m:ErrorInfo/m:Message", xnMgr).InnerText);
            }

            string[] PaxNames = PaxName.Split('/');
            XmlNode TravelItinerary = ResXml.SelectSingleNode("m:TravelItinerary", xnMgr);
            XmlNode PersonName = TravelItinerary.SelectSingleNode("m:CustomerInfos/m:CustomerInfo/m:Customer/m:PersonName[m:Surname='" + PaxNames[0] + "'][translate(m:GivenName,' ', '')='" + PaxNames[1] + "']", xnMgr);

            if (PersonName != null)
            {
                XmlNode AirItineraryPricingInfo = (TravelItinerary.SelectNodes("m:ItineraryInfo/m:ItineraryPricing", xnMgr).Count > 0) ? TravelItinerary.SelectSingleNode(String.Format("m:ItineraryInfo/m:ItineraryPricing/m:PriceQuote/m:PricedItinerary/m:AirItineraryPricingInfo[m:PTC_FareBreakdown/m:PassengerTypeQuantity/@Code='{0}']", PersonName.Attributes.GetNamedItem("PassengerType").InnerText), xnMgr) : null;

                //운임정보
                XmlDocument FareXml = null;

                if (XmlDBBooking != null)
                {
                    FareXml = new XmlDocument();
                    FareXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);
                }

                //통합모드
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.Load(mc.XmlFullPath("SearchETicketDocRS"));

                XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

                //기본정보
                XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");

                BookingInfo.SelectSingleNode("gds").InnerText = "Abacus";
                BookingInfo.SelectSingleNode("bookingNo").InnerText = TravelItinerary.SelectSingleNode("m:ItineraryRef", xnMgr).Attributes.GetNamedItem("ID").InnerText;
                BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = BookingInfo.SelectSingleNode("bookingNo").InnerText;
                BookingInfo.SelectSingleNode("modeBookingNo").InnerText = (XmlDBBooking != null) ? XmlDBBooking.SelectSingleNode("item/예약번호").InnerText : "";
                BookingInfo.SelectSingleNode("agentBookingNo").InnerText = (XmlDBBooking != null) ? XmlDBBooking.SelectSingleNode("item3/주문아이템코드").InnerText : "";
                BookingInfo.SelectSingleNode("allianceBookingNo").InnerText = (XmlDBBooking != null) ? XmlDBBooking.SelectSingleNode("item3/제휴사주문번호").InnerText : "";
                BookingInfo.SelectSingleNode("bookingCreationDate").InnerText = (XmlDBBooking != null) ? cm.RequestDateTime(XmlDBBooking.SelectSingleNode("item/예약일").InnerText, "yyyy-MM-dd HH:mm:ss") : "";
                BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText = (XmlDBBooking != null) ? Common.ServiceClass(FareXml.SelectSingleNode("priceIndex/paxFareGroup/paxFare/segFareGroup/segFare/fare/cabin").Attributes.GetNamedItem("cabin").InnerText) : "";
                BookingInfo.SelectSingleNode("bookingClass").InnerText = Common.ServiceClassText(((XmlDBBooking != null) ? XmlDBBooking.SelectSingleNode("item3/GDS구분").InnerText : ""), BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText);
                BookingInfo.SelectSingleNode("paxName").InnerText = PaxName;

                //티켓정보
                if (TravelItinerary.SelectNodes("m:SpecialServices", xnMgr).Count > 0 && TravelItinerary.SelectNodes("m:SpecialServices/m:Service[@SSRCode='SSR']", xnMgr).Count > 0)
                {
                    if (TravelItinerary.SelectNodes("m:SpecialServices/m:Service[@SSRCode='SSR']/m:TPA_Extensions", xnMgr).Count > 0)
                    {
                        bool Infant = (PersonName.SelectNodes("m:TPA_Extensions/m:Infant", xnMgr).Count > 0) ? ((PersonName.SelectSingleNode("m:TPA_Extensions/m:Infant", xnMgr).Attributes.GetNamedItem("Ind").InnerText.Equals("true", StringComparison.OrdinalIgnoreCase)) ? true : false) : false;
                        string NameNumber = string.Empty;

                        if (Infant)
                        {
                            foreach (XmlNode NameService in TravelItinerary.SelectNodes(String.Format("m:SpecialServices/m:Service[@SSRCode='SSR'and m:TPA_Extensions[m:SSRType='INFT']]"), xnMgr))
                            {
                                if (NameService.SelectSingleNode("m:Text", xnMgr).InnerText.IndexOf(String.Format("/{0}/{1}/", PersonName.SelectSingleNode("m:Surname", xnMgr).InnerText, PersonName.SelectSingleNode("m:GivenName", xnMgr).InnerText)) != -1)
                                {
                                    NameNumber = NameService.SelectSingleNode("m:TPA_Extensions/m:Name", xnMgr).Attributes.GetNamedItem("Number").InnerText;
                                    break;
                                }
                            }
                        }
                        else
                            NameNumber = PersonName.SelectSingleNode("m:TPA_Extensions/m:NameNumber", xnMgr).Attributes.GetNamedItem("Number").InnerText;

                        foreach (XmlNode TicketInfoService in TravelItinerary.SelectNodes(String.Format("m:SpecialServices/m:Service[@SSRCode='SSR'and m:TPA_Extensions[m:SSRType='TKNE' and m:Name/@Number='{0}']]", NameNumber), xnMgr))
                        {
                            string TicketNumber = Common.SplitAbacusTicketNumber(TicketInfoService.SelectSingleNode("m:Text", xnMgr).InnerText);
                            bool TicketVoid = Common.AbacusVoidTicket(TravelItinerary.SelectNodes("m:ItineraryInfo/m:Ticketing[starts-with(@eTicketNumber, 'TV')]", xnMgr), TicketNumber.Replace("INF", ""));

                            if (Infant)
                            {
                                if (TicketNumber.StartsWith("INF"))
                                {
                                    TicketNumber = TicketNumber.Replace("INF", "");

                                    if (!TicketVoid && BookingInfo.SelectSingleNode("ticketNumber").InnerText.IndexOf(TicketNumber).Equals(-1))
                                    {
                                        if (!String.IsNullOrWhiteSpace(BookingInfo.SelectSingleNode("ticketNumber").InnerText))
                                            BookingInfo.SelectSingleNode("ticketNumber").InnerText += "/";

                                        BookingInfo.SelectSingleNode("ticketNumber").InnerText += TicketNumber;
                                    }
                                }
                            }
                            else
                            {
                                if (!TicketNumber.StartsWith("INF"))
                                {
                                    if (!TicketVoid && BookingInfo.SelectSingleNode("ticketNumber").InnerText.IndexOf(TicketNumber).Equals(-1))
                                    {
                                        if (!String.IsNullOrWhiteSpace(BookingInfo.SelectSingleNode("ticketNumber").InnerText))
                                            BookingInfo.SelectSingleNode("ticketNumber").InnerText += "/";

                                        BookingInfo.SelectSingleNode("ticketNumber").InnerText += TicketNumber;
                                    }
                                }
                            }
                        }
                    }
                }

                //여정
                XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
                XmlNode Segment = FlightInfo.SelectSingleNode("seg");
                XmlNode StopSegment = Segment.SelectSingleNode("seg");
                XmlNode NewSegment;
                XmlNode NewStopSegment;

                XmlNodeList ItineraryInfo = TravelItinerary.SelectNodes("m:ItineraryInfo/m:ReservationItems/m:Item/m:Air", xnMgr);

                for (int i = 0; i < ItineraryInfo.Count; i++)
                {
                    NewSegment = FlightInfo.AppendChild(Segment.CloneNode(true));
                    StopSegment = NewSegment.SelectSingleNode("legInfo");

                    if (ItineraryInfo.Count > (i + 1) && ItineraryInfo[i].Attributes.GetNamedItem("RPH").InnerText.Equals(ItineraryInfo[(i + 1)].Attributes.GetNamedItem("RPH").InnerText))
                    {
                        NewSegment.Attributes.GetNamedItem("ref").InnerText = cm.RequestInt(ItineraryInfo[i].Attributes.GetNamedItem("RPH").InnerText).ToString();
                        NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("DepartureDateTime").InnerText);
                        NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(ItineraryInfo[(i + 1)].Attributes.GetNamedItem("ArrivalDateTime").InnerText);
                        NewSegment.Attributes.GetNamedItem("mcc").InnerText = ItineraryInfo[i].SelectSingleNode("m:MarketingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText;
                        NewSegment.Attributes.GetNamedItem("occ").InnerText = (ItineraryInfo[i].SelectNodes("m:OperatingAirline", xnMgr).Count > 0 && (XmlAttribute)ItineraryInfo[i].SelectSingleNode("m:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code") != null) ? ItineraryInfo[i].SelectSingleNode("m:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText : NewSegment.Attributes.GetNamedItem("mcc").InnerText;
                        NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(ItineraryInfo[i].Attributes.GetNamedItem("FlightNumber").InnerText);
                        NewSegment.Attributes.GetNamedItem("eqt").InnerText = (ItineraryInfo[i].SelectNodes("m:Equipment", xnMgr).Count > 0) ? ItineraryInfo[i].SelectSingleNode("m:Equipment", xnMgr).Attributes.GetNamedItem("AirEquipType").InnerText : "";
                        NewSegment.Attributes.GetNamedItem("stn").InnerText = "1";
                        NewSegment.Attributes.GetNamedItem("rbd").InnerText = ItineraryInfo[i].Attributes.GetNamedItem("ResBookDesigCode").InnerText;
                        NewSegment.Attributes.GetNamedItem("rsc").InnerText = ItineraryInfo[i].Attributes.GetNamedItem("ActionCode").InnerText;
                        NewSegment.Attributes.GetNamedItem("eft").InnerText = "";

                        NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText = ItineraryInfo[i].SelectSingleNode("m:DepartureAirport", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                        NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminal").InnerText = ((XmlAttribute)ItineraryInfo[i].SelectSingleNode("m:DepartureAirport", xnMgr).Attributes.GetNamedItem("Terminal") != null) ? ItineraryInfo[i].SelectSingleNode("m:DepartureAirport", xnMgr).Attributes.GetNamedItem("Terminal").InnerText : "";
                        NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminalCode").InnerText = ((XmlAttribute)ItineraryInfo[i].SelectSingleNode("m:DepartureAirport", xnMgr).Attributes.GetNamedItem("TerminalCode") != null) ? ItineraryInfo[i].SelectSingleNode("m:DepartureAirport", xnMgr).Attributes.GetNamedItem("TerminalCode").InnerText : "";
                        NewSegment.SelectSingleNode("departureAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText);

                        NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText = ItineraryInfo[(i + 1)].SelectSingleNode("m:ArrivalAirport", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                        NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminal").InnerText = ((XmlAttribute)ItineraryInfo[(i + 1)].SelectSingleNode("m:ArrivalAirport", xnMgr).Attributes.GetNamedItem("Terminal") != null) ? ItineraryInfo[(i + 1)].SelectSingleNode("m:ArrivalAirport", xnMgr).Attributes.GetNamedItem("Terminal").InnerText : "";
                        NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminalCode").InnerText = ((XmlAttribute)ItineraryInfo[(i + 1)].SelectSingleNode("m:ArrivalAirport", xnMgr).Attributes.GetNamedItem("TerminalCode") != null) ? ItineraryInfo[(i + 1)].SelectSingleNode("m:ArrivalAirport", xnMgr).Attributes.GetNamedItem("TerminalCode").InnerText : "";
                        NewSegment.SelectSingleNode("arrivalAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText);

                        //기착정보
                        NewStopSegment = StopSegment.SelectNodes("seg")[0];
                        NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = ItineraryInfo[i].SelectSingleNode("m:DepartureAirport", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("alc").InnerText = ItineraryInfo[i].SelectSingleNode("m:ArrivalAirport", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("DepartureDateTime").InnerText);
                        NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("ArrivalDateTime").InnerText);
                        NewStopSegment.Attributes.GetNamedItem("eft").InnerText = "";
                        NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = "";
                        NewStopSegment.InnerText = Common.GetAirportName("EN", NewStopSegment.Attributes.GetNamedItem("alc").InnerText);

                        NewStopSegment = StopSegment.SelectNodes("seg")[1];
                        NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = ItineraryInfo[(i + 1)].SelectSingleNode("m:DepartureAirport", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("alc").InnerText = ItineraryInfo[(i + 1)].SelectSingleNode("m:ArrivalAirport", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(ItineraryInfo[(i + 1)].Attributes.GetNamedItem("DepartureDateTime").InnerText);
                        NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(ItineraryInfo[(i + 1)].Attributes.GetNamedItem("ArrivalDateTime").InnerText);
                        NewStopSegment.Attributes.GetNamedItem("eft").InnerText = "";
                        NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = "";

                        StopSegment.SelectNodes("seg")[0].Attributes.GetNamedItem("gwt").InnerText = cm.ElapseFlyingTime(StopSegment.SelectNodes("seg")[0].Attributes.GetNamedItem("ardt").InnerText, StopSegment.SelectNodes("seg")[1].Attributes.GetNamedItem("ddt").InnerText);
                        NewSegment.Attributes.GetNamedItem("eft").InnerText = cm.SumElapseFlyingTime(cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("ElapsedTime").InnerText.Replace(".", "")), cm.ConvertToDateTime(ItineraryInfo[(i + 1)].Attributes.GetNamedItem("ElapsedTime").InnerText.Replace(".", "")), StopSegment.SelectNodes("seg")[0].Attributes.GetNamedItem("gwt").InnerText);

                        i++;
                    }
                    else
                    {
                        NewSegment.Attributes.GetNamedItem("ref").InnerText = cm.RequestInt(ItineraryInfo[i].Attributes.GetNamedItem("RPH").InnerText).ToString();
                        NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("DepartureDateTime").InnerText);
                        NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("ArrivalDateTime").InnerText);
                        NewSegment.Attributes.GetNamedItem("mcc").InnerText = ItineraryInfo[i].SelectSingleNode("m:MarketingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText;
                        NewSegment.Attributes.GetNamedItem("occ").InnerText = (ItineraryInfo[i].SelectNodes("m:OperatingAirline", xnMgr).Count > 0 && (XmlAttribute)ItineraryInfo[i].SelectSingleNode("m:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code") != null) ? ItineraryInfo[i].SelectSingleNode("m:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText : NewSegment.Attributes.GetNamedItem("mcc").InnerText;
                        NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(ItineraryInfo[i].Attributes.GetNamedItem("FlightNumber").InnerText);
                        NewSegment.Attributes.GetNamedItem("eqt").InnerText = (ItineraryInfo[i].SelectNodes("m:Equipment", xnMgr).Count > 0) ? ItineraryInfo[i].SelectSingleNode("m:Equipment", xnMgr).Attributes.GetNamedItem("AirEquipType").InnerText : "";
                        NewSegment.Attributes.GetNamedItem("stn").InnerText = "0";
                        NewSegment.Attributes.GetNamedItem("rbd").InnerText = ItineraryInfo[i].Attributes.GetNamedItem("ResBookDesigCode").InnerText;
                        NewSegment.Attributes.GetNamedItem("rsc").InnerText = ItineraryInfo[i].Attributes.GetNamedItem("ActionCode").InnerText;
                        NewSegment.Attributes.GetNamedItem("eft").InnerText = cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("ElapsedTime").InnerText.Replace(".", ""));

                        NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText = ItineraryInfo[i].SelectSingleNode("m:DepartureAirport", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                        NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminal").InnerText = ((XmlAttribute)ItineraryInfo[i].SelectSingleNode("m:DepartureAirport", xnMgr).Attributes.GetNamedItem("Terminal") != null) ? ItineraryInfo[i].SelectSingleNode("m:DepartureAirport", xnMgr).Attributes.GetNamedItem("Terminal").InnerText : "";
                        NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminalCode").InnerText = ((XmlAttribute)ItineraryInfo[i].SelectSingleNode("m:DepartureAirport", xnMgr).Attributes.GetNamedItem("TerminalCode") != null) ? ItineraryInfo[i].SelectSingleNode("m:DepartureAirport", xnMgr).Attributes.GetNamedItem("TerminalCode").InnerText : "";
                        NewSegment.SelectSingleNode("departureAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText);

                        NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText = ItineraryInfo[i].SelectSingleNode("m:ArrivalAirport", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                        NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminal").InnerText = ((XmlAttribute)ItineraryInfo[i].SelectSingleNode("m:ArrivalAirport", xnMgr).Attributes.GetNamedItem("Terminal") != null) ? ItineraryInfo[i].SelectSingleNode("m:ArrivalAirport", xnMgr).Attributes.GetNamedItem("Terminal").InnerText : "";
                        NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminalCode").InnerText = ((XmlAttribute)ItineraryInfo[i].SelectSingleNode("m:ArrivalAirport", xnMgr).Attributes.GetNamedItem("TerminalCode") != null) ? ItineraryInfo[i].SelectSingleNode("m:ArrivalAirport", xnMgr).Attributes.GetNamedItem("TerminalCode").InnerText : "";
                        NewSegment.SelectSingleNode("arrivalAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText);

                        NewSegment.RemoveChild(StopSegment);
                    }

                    NewSegment.SelectSingleNode("operatingAirline").InnerText = Common.GetAirlineName("KO", NewSegment.Attributes.GetNamedItem("occ").InnerText);
                    NewSegment.SelectSingleNode("marketingAirline").InnerText = Common.GetAirlineName("KO", NewSegment.Attributes.GetNamedItem("mcc").InnerText);
                    NewSegment.SelectSingleNode("equipment").InnerText = "";
                    NewSegment.SelectSingleNode("airlineRefNumber").InnerText = (ItineraryInfo[i].SelectSingleNode("m:TPA_Extensions/m:AirlineRef", xnMgr).Attributes.GetNamedItem("ID").InnerText.IndexOf('*') != -1) ? ItineraryInfo[i].SelectSingleNode("m:TPA_Extensions/m:AirlineRef", xnMgr).Attributes.GetNamedItem("ID").InnerText.Split('*')[1] : ItineraryInfo[i].SelectSingleNode("m:TPA_Extensions/m:AirlineRef", xnMgr).Attributes.GetNamedItem("ID").InnerText;

                    if (AirItineraryPricingInfo != null)
                    {
                        XmlNode FlightSegment = AirItineraryPricingInfo.SelectSingleNode(String.Format("m:PTC_FareBreakdown/m:FlightSegment[normalize-space(@RPH)='{0}']", NewSegment.Attributes.GetNamedItem("ref").InnerText), xnMgr);

                        if (FlightSegment != null)
                        {
                            NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("basis").InnerText = FlightSegment.SelectSingleNode("m:FareBasisCode", xnMgr).InnerText;
                            NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty("");
                            NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("nvb").InnerText = (FlightSegment.SelectNodes("m:ValidityDates/m:NotValidBefore", xnMgr).Count > 0) ? FlightSegment.SelectSingleNode("m:ValidityDates/m:NotValidBefore", xnMgr).InnerText.Substring(0, 10) : "";
                            NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("nva").InnerText = (FlightSegment.SelectNodes("m:ValidityDates/m:NotValidAfter", xnMgr).Count > 0) ? FlightSegment.SelectSingleNode("m:ValidityDates/m:NotValidAfter", xnMgr).InnerText.Substring(0, 10) : "";
                            NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("seat").InnerText = "";
                        }
                    }
                }

                FlightInfo.RemoveChild(Segment);

                if (XmlDBBooking != null)
                {
                    //운임정보
                    XmlNode PaxItem = XmlDBBooking.SelectSingleNode(String.Format("item4[영문성명='{0}']", cm.SplitPaxType(PaxName.Trim(), false)[1]));
                    XmlNode FareInfo = XmlDoc.SelectSingleNode("ResponseDetails/fareInfo");

                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("amount").InnerText = (cm.RequestInt(PaxItem.SelectSingleNode("총요금").InnerText) + cm.RequestInt(PaxItem.SelectSingleNode("취급수수료").InnerText)).ToString();
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("fare").InnerText = PaxItem.SelectSingleNode("항공료").InnerText;
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("tax").InnerText = PaxItem.SelectSingleNode("TAX").InnerText;
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("fsc").InnerText = PaxItem.SelectSingleNode("유류할증료").InnerText;
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("tasf").InnerText = (cm.RequestInt(PaxItem.SelectSingleNode("발권수수료").InnerText) + cm.RequestInt(PaxItem.SelectSingleNode("취급수수료").InnerText)).ToString();
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("cnc").InnerText = "KRW";
                    FareInfo.SelectSingleNode("payment").InnerText = (XmlDBBooking.SelectNodes("item5").Count > 0 && Convert.ToInt32(XmlDBBooking.SelectSingleNode("item5/수납액").InnerText) > 0) ? ((XmlDBBooking.SelectNodes("item6").Count > 0 && (XmlDBBooking.SelectNodes("item7").Count > 0 || XmlDBBooking.SelectNodes("item8").Count > 0)) ? "CARD + CASH" : ((XmlDBBooking.SelectNodes("item6").Count > 0) ? "CARD" : "CASH")) : "";

                    //담당여행사
                    XmlNode AgentInfo = XmlDoc.SelectSingleNode("ResponseDetails/agentInfo");

                    AgentInfo.SelectSingleNode("company").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(XmlDBBooking.SelectSingleNode("item2/거래처명").InnerText));
                    AgentInfo.SelectSingleNode("name").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(XmlDBBooking.SelectSingleNode("item2/거래처직원명").InnerText));
                    AgentInfo.SelectSingleNode("tel").InnerText = (String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item2/회사전화").InnerText)) ? XmlDBBooking.SelectSingleNode("item2/휴대폰").InnerText : XmlDBBooking.SelectSingleNode("item2/회사전화").InnerText;
                }

                return XmlDoc.DocumentElement;
            }
            else
                throw new Exception("탑승객 정보가 일치하지 않습니다.");
        }

        /// <summary>
        /// PNR정보로 티켓 이미지 출력(Galileo용)
        /// </summary>
        /// <param name="XmlDBBooking">저장된 예약정보</param>
        /// <param name="ResXml">PNR 정보</param>
        /// <param name="ETicketXml">ETicket 정보</param>
        /// <param name="PaxName">탑승객명(ex HONG/GILDONGMR)</param>
        /// <param name="GUID">고유번호</param>
        /// <returns></returns>
        public XmlElement ToModeSearchETicketDocGalileo(XmlElement XmlDBBooking, XmlElement ResXml, string PaxName, string GUID)
        {
            //오류 결과일 경우 예외 처리
            if (!ResXml.SelectSingleNode("ResultErrorNo").InnerText.Equals("0"))
                throw new Exception(ResXml.SelectSingleNode("ResultMsg").InnerText);

            string[] PaxNames = PaxName.Split('/');
            XmlNode PaxFareInfo = ResXml.SelectSingleNode("PaxFareInfo[PaxLastName='" + PaxNames[0] + "'][translate(PaxFirstName,' ', '')='" + cm.SplitPaxType(PaxNames[1].Trim(), false)[1] + "']");

            if (PaxFareInfo != null)
            {
                //이티켓정보
                XmlElement ETicketXml = null;
                string TicketNumber = (PaxFareInfo.SelectNodes("PaxTicketNum").Count > 0) ? PaxFareInfo.SelectSingleNode("PaxTicketNum").InnerText : "";

                if (!String.IsNullOrWhiteSpace(TicketNumber))
                {
                    if (!ResXml.SelectSingleNode("AirSegDetail/AirV").InnerText.Equals("OZ"))
                    {
                        if (XmlDBBooking != null)
                        {
                            if (String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item3/GKPNR").InnerText))
                                ETicketXml = gas.ETicketInfoDisplayRS(XmlDBBooking.SelectSingleNode("item/예약번호").InnerText, ResXml.SelectSingleNode("GenPnrInfo/PnrAddress").InnerText, TicketNumber, PaxFareInfo.SelectSingleNode("AbsNameNum").InnerText, "G", GUID);
                            else
                                ETicketXml = gas.ETicketInfoDisplayRS(XmlDBBooking.SelectSingleNode("item/예약번호").InnerText, XmlDBBooking.SelectSingleNode("item3/GKPNR").InnerText, TicketNumber, PaxFareInfo.SelectSingleNode("AbsNameNum").InnerText, "B", GUID);
                        }
                        else
                            ETicketXml = gas.ETicketInfoDisplayRS("0", ResXml.SelectSingleNode("GenPnrInfo/PnrAddress").InnerText, TicketNumber, PaxFareInfo.SelectSingleNode("AbsNameNum").InnerText, "G", GUID);
                    }
                }
                
                //운임정보
                XmlDocument FareXml = null;

                if (XmlDBBooking != null)
                {
                    FareXml = new XmlDocument();
                    FareXml.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);
                }

                //통합모드
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.Load(mc.XmlFullPath("SearchETicketDocRS"));

                XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;
                
                //기본정보
                XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");

                BookingInfo.SelectSingleNode("gds").InnerText = "Galileo";
                BookingInfo.SelectSingleNode("bookingNo").InnerText = ResXml.SelectSingleNode("GenPnrInfo/PnrAddress").InnerText;
                BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = BookingInfo.SelectSingleNode("bookingNo").InnerText;
                BookingInfo.SelectSingleNode("modeBookingNo").InnerText = (XmlDBBooking != null) ? XmlDBBooking.SelectSingleNode("item/예약번호").InnerText : "";
                BookingInfo.SelectSingleNode("agentBookingNo").InnerText = (XmlDBBooking != null) ? XmlDBBooking.SelectSingleNode("item3/주문아이템코드").InnerText : "";
                BookingInfo.SelectSingleNode("allianceBookingNo").InnerText = (XmlDBBooking != null) ? XmlDBBooking.SelectSingleNode("item3/제휴사주문번호").InnerText : "";
                BookingInfo.SelectSingleNode("bookingCreationDate").InnerText = (XmlDBBooking != null) ? cm.RequestDateTime(XmlDBBooking.SelectSingleNode("item/예약일").InnerText, "yyyy-MM-dd HH:mm:ss") : "";
                BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText = (XmlDBBooking != null) ? Common.ServiceClass(FareXml.SelectSingleNode("priceIndex/paxFareGroup/paxFare/segFareGroup/segFare/fare/cabin").Attributes.GetNamedItem("cabin").InnerText) : "";
                BookingInfo.SelectSingleNode("bookingClass").InnerText = Common.ServiceClassText(((XmlDBBooking != null) ? XmlDBBooking.SelectSingleNode("item3/GDS구분").InnerText : ""), BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText);
                BookingInfo.SelectSingleNode("paxName").InnerText = PaxName;
                BookingInfo.SelectSingleNode("ticketNumber").InnerText = TicketNumber;

                //여정
                XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
                XmlNode Segment = FlightInfo.SelectSingleNode("seg");
                XmlNode StopSegment = Segment.SelectSingleNode("seg");
                XmlNode NewSegment;
                XmlNode NewStopSegment;
                int idx = 1;

                if (ETicketXml != null)
                {
                    foreach (XmlNode AirSegDetail in ETicketXml.SelectNodes("EtrFltInfo/AirSegInfo"))
                    {
                        NewSegment = FlightInfo.AppendChild(Segment.CloneNode(true));
                        StopSegment = NewSegment.SelectSingleNode("legInfo");

                        NewSegment.Attributes.GetNamedItem("ref").InnerText = (idx++).ToString();
                        NewSegment.Attributes.GetNamedItem("ddt").InnerText = String.Format("{0} {1}", cm.ConvertToDateTime(AirSegDetail.SelectSingleNode("StartDt").InnerText), cm.ConvertToDateTime(AirSegDetail.SelectSingleNode("StartTm").InnerText));
                        NewSegment.Attributes.GetNamedItem("ardt").InnerText = String.Format("{0} {1}", cm.ConvertToDateTime(AirSegDetail.SelectSingleNode("EndDt").InnerText), cm.ConvertToDateTime(AirSegDetail.SelectSingleNode("EndTm").InnerText));
                        NewSegment.Attributes.GetNamedItem("mcc").InnerText = AirSegDetail.SelectSingleNode("AirV").InnerText;
                        NewSegment.Attributes.GetNamedItem("occ").InnerText = String.IsNullOrWhiteSpace(AirSegDetail.SelectSingleNode("OpAirV").InnerText) ? AirSegDetail.SelectSingleNode("AirV").InnerText : AirSegDetail.SelectSingleNode("OpAirV").InnerText;
                        NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(AirSegDetail.SelectSingleNode("FltNum").InnerText);
                        NewSegment.Attributes.GetNamedItem("eqt").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("stn").InnerText = AirSegDetail.SelectNodes("ViaCity").Count.ToString();
                        NewSegment.Attributes.GetNamedItem("rbd").InnerText = AirSegDetail.SelectSingleNode("BIC").InnerText;
                        NewSegment.Attributes.GetNamedItem("rsc").InnerText = AirSegDetail.SelectSingleNode("Status").InnerText;
                        NewSegment.Attributes.GetNamedItem("eft").InnerText = cm.ConvertToDateTime(AirSegDetail.SelectSingleNode("FltTm").InnerText);

                        NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText = AirSegDetail.SelectSingleNode("StartAirp").InnerText;
                        NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminal").InnerText = AirSegDetail.SelectSingleNode("StartTerm").InnerText;
                        NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminalCode").InnerText = "";
                        NewSegment.SelectSingleNode("departureAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText);

                        NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText = AirSegDetail.SelectSingleNode("EndAirp").InnerText;
                        NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminal").InnerText = AirSegDetail.SelectSingleNode("EndTerm").InnerText;
                        NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminalCode").InnerText = "";
                        NewSegment.SelectSingleNode("arrivalAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText);

                        //기착정보
                        if (NewSegment.Attributes.GetNamedItem("stn").InnerText.Equals("1"))
                        {
                            NewStopSegment = StopSegment.SelectNodes("seg")[0];
                            NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("alc").InnerText = AirSegDetail.SelectSingleNode("ViaCity/ViaInfoArray/ViaPort").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = NewSegment.Attributes.GetNamedItem("ddt").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = "";
                            NewStopSegment.Attributes.GetNamedItem("eft").InnerText = "";
                            NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = "";
                            //NewStopSegment.InnerText = String.Format("{0} / {1}", AirSegDetail.SelectSingleNode("ViaCity/ViaInfoArray/ViaCityName").InnerText, AirSegDetail.SelectSingleNode("ViaCity/ViaInfoArray/ViaPortName").InnerText);
                            NewStopSegment.InnerText = Common.GetAirportName("EN", NewStopSegment.Attributes.GetNamedItem("alc").InnerText);

                            NewStopSegment = StopSegment.SelectNodes("seg")[1];
                            NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = AirSegDetail.SelectSingleNode("ViaCity/ViaInfoArray/ViaPort").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("alc").InnerText = NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = "";
                            NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = NewSegment.Attributes.GetNamedItem("ardt").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("eft").InnerText = "";
                            NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = "";

                            StopSegment.SelectNodes("seg")[0].Attributes.GetNamedItem("gwt").InnerText = "";
                        }
                        else
                            NewSegment.RemoveChild(StopSegment);

                        NewSegment.SelectSingleNode("operatingAirline").InnerText = Common.GetAirlineName("KO", NewSegment.Attributes.GetNamedItem("occ").InnerText);
                        NewSegment.SelectSingleNode("marketingAirline").InnerText = Common.GetAirlineName("KO", NewSegment.Attributes.GetNamedItem("mcc").InnerText);
                        NewSegment.SelectSingleNode("equipment").InnerText = "";
                        NewSegment.SelectSingleNode("airlineRefNumber").InnerText = AirSegDetail.SelectSingleNode("VndRecLoc").InnerText;

                        NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("basis").InnerText = AirSegDetail.SelectSingleNode("FIC").InnerText;
                        NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty(String.Concat(AirSegDetail.SelectSingleNode("AllowCnt").InnerText, AirSegDetail.SelectSingleNode("AllowInd").InnerText));
                        NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("nvb").InnerText = cm.ConvertToDateTime(AirSegDetail.SelectSingleNode("NotValidBeforeDt").InnerText);
                        NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("nva").InnerText = cm.ConvertToDateTime(AirSegDetail.SelectSingleNode("NotValidAfterDt").InnerText);
                        NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("seat").InnerText = AirSegDetail.SelectSingleNode("SeatLocn").InnerText;

                        NewSegment.SelectSingleNode("cabin").Attributes.GetNamedItem("code").InnerText = "";
                        NewSegment.SelectSingleNode("cabin").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(AirSegDetail.SelectSingleNode("BicDetailKor").InnerText));

                        NewSegment.SelectSingleNode("ticketNumber").InnerText = TicketNumber;
                    }
                }
                else
                {
                    foreach (XmlNode AirSegDetail in ResXml.SelectNodes("AirSegDetail"))
                    {
                        NewSegment = FlightInfo.AppendChild(Segment.CloneNode(true));
                        StopSegment = NewSegment.SelectSingleNode("legInfo");

                        NewSegment.Attributes.GetNamedItem("ref").InnerText = AirSegDetail.SelectSingleNode("SegNum").InnerText;
                        NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(AirSegDetail.SelectSingleNode("StartDtTm").InnerText);
                        NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(AirSegDetail.SelectSingleNode("EndDtTm").InnerText);
                        NewSegment.Attributes.GetNamedItem("mcc").InnerText = AirSegDetail.SelectSingleNode("AirV").InnerText;
                        NewSegment.Attributes.GetNamedItem("occ").InnerText = String.IsNullOrWhiteSpace(AirSegDetail.SelectSingleNode("OpAirV").InnerText) ? AirSegDetail.SelectSingleNode("AirV").InnerText : AirSegDetail.SelectSingleNode("OpAirV").InnerText;
                        NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(AirSegDetail.SelectSingleNode("FltNum").InnerText);
                        NewSegment.Attributes.GetNamedItem("eqt").InnerText = "";
                        NewSegment.Attributes.GetNamedItem("stn").InnerText = cm.RequestInt(AirSegDetail.SelectSingleNode("StopCnt").InnerText).ToString();
                        NewSegment.Attributes.GetNamedItem("rbd").InnerText = AirSegDetail.SelectSingleNode("BkClass").InnerText;
                        NewSegment.Attributes.GetNamedItem("rsc").InnerText = AirSegDetail.SelectSingleNode("Status").InnerText;
                        NewSegment.Attributes.GetNamedItem("eft").InnerText = cm.ConvertToDateTime(AirSegDetail.SelectSingleNode("FltTm").InnerText);

                        NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText = AirSegDetail.SelectSingleNode("StartAirp").InnerText;
                        NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminal").InnerText = "";
                        NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminalCode").InnerText = "";
                        NewSegment.SelectSingleNode("departureAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText);

                        NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText = AirSegDetail.SelectSingleNode("EndAirp").InnerText;
                        NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminal").InnerText = "";
                        NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminalCode").InnerText = "";
                        NewSegment.SelectSingleNode("arrivalAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText);

                        //기착정보
                        if (NewSegment.Attributes.GetNamedItem("stn").InnerText.Equals("1"))
                        {
                            NewStopSegment = StopSegment.SelectNodes("seg")[0];
                            NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("alc").InnerText = AirSegDetail.SelectSingleNode("StopCity1").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = NewSegment.Attributes.GetNamedItem("ddt").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = "";
                            NewStopSegment.Attributes.GetNamedItem("eft").InnerText = "";
                            NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = "";
                            NewStopSegment.InnerText = Common.GetAirportName("EN", NewStopSegment.Attributes.GetNamedItem("alc").InnerText);

                            NewStopSegment = StopSegment.SelectNodes("seg")[1];
                            NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = AirSegDetail.SelectSingleNode("StopCity1").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("alc").InnerText = NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = "";
                            NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = NewSegment.Attributes.GetNamedItem("ardt").InnerText;
                            NewStopSegment.Attributes.GetNamedItem("eft").InnerText = "";
                            NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = "";

                            StopSegment.SelectNodes("seg")[0].Attributes.GetNamedItem("gwt").InnerText = AirSegDetail.SelectSingleNode("StopCity1Tm").InnerText;
                        }
                        else
                            NewSegment.RemoveChild(StopSegment);

                        NewSegment.SelectSingleNode("operatingAirline").InnerText = Common.GetAirlineName("KO", NewSegment.Attributes.GetNamedItem("occ").InnerText);
                        NewSegment.SelectSingleNode("marketingAirline").InnerText = Common.GetAirlineName("KO", NewSegment.Attributes.GetNamedItem("mcc").InnerText);
                        NewSegment.SelectSingleNode("equipment").InnerText = "";
                        NewSegment.SelectSingleNode("airlineRefNumber").InnerText = AirSegDetail.SelectSingleNode("VndRecLoc").InnerText;

                        NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("basis").InnerText = "";
                        NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty("");
                        NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("nvb").InnerText = "";
                        NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("nva").InnerText = "";
                        NewSegment.SelectSingleNode("fare").Attributes.GetNamedItem("seat").InnerText = "";

                        NewSegment.SelectSingleNode("cabin").Attributes.GetNamedItem("code").InnerText = AirSegDetail.SelectSingleNode("BkClassGrade").InnerText;
                        NewSegment.SelectSingleNode("cabin").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(Common.ServiceClassText("G", NewSegment.SelectSingleNode("cabin").Attributes.GetNamedItem("code").InnerText)));

                        NewSegment.SelectSingleNode("ticketNumber").InnerText = TicketNumber;
                    }
                }

                FlightInfo.RemoveChild(Segment);

                if (XmlDBBooking != null)
                {
                    //운임정보
                    XmlNode PaxItem = XmlDBBooking.SelectSingleNode(String.Format("item4[영문성명='{0}']", cm.SplitPaxType(PaxName.Trim(), false)[1]));
                    XmlNode FareInfo = XmlDoc.SelectSingleNode("ResponseDetails/fareInfo");

                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("amount").InnerText = (cm.RequestInt(PaxItem.SelectSingleNode("총요금").InnerText) + cm.RequestInt(PaxItem.SelectSingleNode("취급수수료").InnerText)).ToString();
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("fare").InnerText = PaxItem.SelectSingleNode("항공료").InnerText;
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("tax").InnerText = PaxItem.SelectSingleNode("TAX").InnerText;
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("fsc").InnerText = PaxItem.SelectSingleNode("유류할증료").InnerText;
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("tasf").InnerText = (cm.RequestInt(PaxItem.SelectSingleNode("발권수수료").InnerText) + cm.RequestInt(PaxItem.SelectSingleNode("취급수수료").InnerText)).ToString();
                    FareInfo.SelectSingleNode("fare").Attributes.GetNamedItem("cnc").InnerText = "KRW";
                    FareInfo.SelectSingleNode("payment").InnerText = (XmlDBBooking.SelectNodes("item5").Count > 0 && Convert.ToInt32(XmlDBBooking.SelectSingleNode("item5/수납액").InnerText) > 0) ? ((XmlDBBooking.SelectNodes("item6").Count > 0 && (XmlDBBooking.SelectNodes("item7").Count > 0 || XmlDBBooking.SelectNodes("item8").Count > 0)) ? "CARD + CASH" : ((XmlDBBooking.SelectNodes("item6").Count > 0) ? "CARD" : "CASH")) : "";

                    //담당여행사
                    XmlNode AgentInfo = XmlDoc.SelectSingleNode("ResponseDetails/agentInfo");

                    AgentInfo.SelectSingleNode("company").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(XmlDBBooking.SelectSingleNode("item2/거래처명").InnerText));
                    AgentInfo.SelectSingleNode("name").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(XmlDBBooking.SelectSingleNode("item2/거래처직원명").InnerText));
                    AgentInfo.SelectSingleNode("tel").InnerText = (String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item2/회사전화").InnerText)) ? XmlDBBooking.SelectSingleNode("item2/휴대폰").InnerText : XmlDBBooking.SelectSingleNode("item2/회사전화").InnerText;
                }

                return XmlDoc.DocumentElement;
            }
            else
                throw new Exception("탑승객 정보가 일치하지 않습니다.");
        }

		#endregion "E-Ticket 조회(PNR정보 이용)(탑승객별 문서출력용)"

        #region "E-Ticket 조회(PNR정보 이용)(PNR 단위 출력)"

        /// <summary>
        /// PNR 리스트(DB)
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <returns></returns>
        //[WebMethod(Description = "PNR 리스트(DB)PNR 리스트(DB)")]
        public XmlElement SearchBookingPNRDB(int OID, int PID)
        {
            XmlDocument XmlDoc = new XmlDocument();

            using (SqlCommand cmd = new SqlCommand())
            {
                using (SqlDataAdapter adp = new SqlDataAdapter(cmd))
                {
                    using (DataSet ds = new DataSet("bookingInfo"))
                    {
                        cmd.Connection = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString);
                        cmd.CommandTimeout = 60;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "DBO.WSV_S_아이템예약_항공_PNR정보";

                        cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                        cmd.Parameters.Add("@예약자번호", SqlDbType.Int, 0);
                        cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                        cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                        cmd.Parameters["@주문번호"].Value = OID;
                        cmd.Parameters["@예약자번호"].Value = PID;
                        cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                        cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                        adp.Fill(ds, "item");

                        XmlDoc.LoadXml(ds.GetXml());
                        ds.Clear();
                    }
                }
            }

            return XmlDoc.DocumentElement;
        }

        /// <summary>
        /// E-Ticket 조회(PNR정보 이용)(PNR 단위 문서출력용)(그룹용)
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="PNR">PNR번호</param>
        /// <param name="RIP">요청자IP</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "E-Ticket 조회(PNR정보 이용)(PNR 단위 문서출력용)(그룹용)")]
        public XmlElement SearchETicketDocGroupPNRRS(int OID, int PID, string PNR, string RIP, string RQT)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 625;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = PNR;
                sqlParam[11].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //PNR 리스트
                XmlElement XmlDBBooking = SearchBookingPNRDB(OID, PID);

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item").Count > 0)
                {
                    XmlElement ResXml = null;
                    string PNR1 = PNR.Replace("-", "");

                    foreach (XmlNode BookItem in XmlDBBooking.SelectNodes("item"))
                    {
                        string PNR2 = BookItem.SelectSingleNode("PNR").InnerText;

                        if (PNR1.Equals(PNR2.Replace("-", "")))
                        {
                            int SNM = cm.RequestInt(BookItem.SelectSingleNode("사이트번호").InnerText, 67);
                            string GDS = BookItem.SelectSingleNode("GDS").InnerText;
                            string GDSType = BookItem.SelectSingleNode("GDS구분").InnerText;
                            string TicketList = BookItem.SelectSingleNode("티켓번호").InnerText;
                            string CreateDate = BookItem.SelectSingleNode("예약일").InnerText;
                            
                            if (String.Compare(GDS, "Amadeus", true).Equals(0))
                            {
                                ResXml = ToModeSearchETicketDocGroupAmadeus(SearchBookingPNR(SNM, GDS, PNR, LogGUID), OID, TicketList, CreateDate, GDSType);
                            }
                            else if (String.Compare(GDS, "Abacus", true).Equals(0))
                            {
                                ResXml = ToModeSearchETicketDocGroupAbacus(SearchBookingPNR(SNM, "Abacus_TravelItineraryRead", PNR, LogGUID), OID, TicketList, CreateDate, GDSType, String.IsNullOrWhiteSpace(BookItem.SelectSingleNode("GKPNR").InnerText) ? false : true);
                            }
                            else
                                throw new Exception("E-Ticket 정보 조회가 지원되지 않는 GDS입니다.");
                        }
                    }

                    return ResXml;
                }
                else
                    throw new Exception("PNR 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("PNR", PNR);
                ex.Data.Add("RIP", RIP);
                ex.Data.Add("RQT", RQT);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 625, OID, 0).ToErrors;
            }
        }

        /// <summary>
        /// PNR정보로 티켓 이미지 출력(Amadeus용)
        /// </summary>
        /// <param name="ResXml">PNR 정보</param>
        /// <param name="OID">주문번호</param>
        /// <param name="TicketList">티켓번호 리스트</param>
        /// <param name="CreateDate">예약일</param>
        /// <param name="GDSType">서비스구분(MPIS:아마데우스, FMS:세이버, BFM:세이버)</param>
        /// <returns></returns>
        public XmlElement ToModeSearchETicketDocGroupAmadeus(XmlElement ResXml, int OID, string TicketList, string CreateDate, string GDSType)
        {
            XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
            xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

            //오류 결과일 경우 예외 처리
            if (ResXml.SelectNodes("m:applicationError/m:errorText", xnMgr).Count > 0)
            {
                throw new Exception(ResXml.SelectSingleNode("m:applicationError/m:errorText/m:errorFreeText", xnMgr).InnerText);
            }

            //통합모드
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchETicketDocGroupPNRRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            //기본정보
            XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");

            BookingInfo.SelectSingleNode("gds").InnerText = "Amadeus";
            BookingInfo.SelectSingleNode("bookingNo").InnerText = (ResXml.SelectNodes("m:pnrHeader/m:reservationInfo/m:reservation[m:companyId='KE']", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:pnrHeader/m:reservationInfo/m:reservation[m:companyId='KE']/m:controlNumber", xnMgr).InnerText : ResXml.SelectSingleNode("m:pnrHeader/m:reservationInfo/m:reservation[m:companyId='1A']/m:controlNumber", xnMgr).InnerText;
            BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = ResXml.SelectSingleNode("m:pnrHeader/m:reservationInfo/m:reservation[m:companyId='1A']/m:controlNumber", xnMgr).InnerText;
            BookingInfo.SelectSingleNode("modeBookingNo").InnerText = OID.ToString();
            BookingInfo.SelectSingleNode("bookingCreationDate").InnerText = CreateDate;
            BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText = (ResXml.SelectNodes("m:originDestinationDetails", xnMgr).Count > 0 && ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR']/m:cabinDetails", xnMgr).Count > 0 && ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo/m:cabinDetails/m:cabinDetails/m:classDesignator", xnMgr).Count > 0) ? ResXml.SelectSingleNode("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR']/m:cabinDetails/m:cabinDetails/m:classDesignator", xnMgr).InnerText : "";
            BookingInfo.SelectSingleNode("bookingClass").InnerText = Common.ServiceClassText(GDSType, BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText);

            //여정
            XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
            XmlNode Segment = FlightInfo.SelectSingleNode("seg");
            XmlNode StopSegment;
            XmlNode NewSegment;
            XmlNode NewStopSegment;

            foreach (XmlNode ItineraryInfo in ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR' and m:travelProduct/m:boardpointDetail]", xnMgr))
            {
                NewSegment = FlightInfo.AppendChild(Segment.CloneNode(true));
                NewSegment.Attributes.GetNamedItem("ref").InnerText = ItineraryInfo.SelectSingleNode("m:elementManagementItinerary/m:reference[m:qualifier='ST']/m:number", xnMgr).InnerText;
                NewSegment.Attributes.GetNamedItem("ddt").InnerText = (ItineraryInfo.SelectNodes("m:travelProduct/m:product/m:depDate", xnMgr).Count > 0) ? cm.ConvertToDateTime(ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:depDate", xnMgr).InnerText, ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:depTime", xnMgr).InnerText) : "";
                NewSegment.Attributes.GetNamedItem("ardt").InnerText = (ItineraryInfo.SelectNodes("m:travelProduct/m:product/m:arrDate", xnMgr).Count > 0) ? cm.ConvertToDateTime(ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:arrDate", xnMgr).InnerText, ItineraryInfo.SelectSingleNode("m:travelProduct/m:product/m:arrTime", xnMgr).InnerText) : "";
                NewSegment.Attributes.GetNamedItem("mcc").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:companyDetail/m:identification", xnMgr).InnerText;
                NewSegment.Attributes.GetNamedItem("occ").InnerText = (ItineraryInfo.SelectNodes("m:legInfo/m:legTravelProduct/m:companyDetails/m:operatingCompany", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:legInfo/m:legTravelProduct/m:companyDetails/m:operatingCompany", xnMgr).InnerText : NewSegment.Attributes.GetNamedItem("mcc").InnerText;
                NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(ItineraryInfo.SelectSingleNode("m:travelProduct/m:productDetails/m:identification", xnMgr).InnerText);
                NewSegment.Attributes.GetNamedItem("eqt").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:equipment", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:equipment", xnMgr).InnerText : "";
                NewSegment.Attributes.GetNamedItem("stn").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:numOfStops", xnMgr).Count > 0) ? cm.RequestInt(ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:numOfStops", xnMgr).InnerText).ToString() : "";
                NewSegment.Attributes.GetNamedItem("rbd").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:productDetails/m:classOfService", xnMgr).InnerText;
                //NewSegment.Attributes.GetNamedItem("rsc").InnerText = (ItineraryInfo.SelectNodes("m:relatedProduct/m:status", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:relatedProduct/m:status", xnMgr).InnerText : "";
                NewSegment.Attributes.GetNamedItem("rsc").InnerText = ItineraryStatus(ItineraryInfo, xnMgr);
                NewSegment.Attributes.GetNamedItem("eft").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:duration", xnMgr).Count > 0) ? cm.ConvertToDateTime(ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:duration", xnMgr).InnerText) : "";

                NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:boardpointDetail/m:cityCode", xnMgr).InnerText;
                NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminal").InnerText = "";
                NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminalCode").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:departureInformation", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:flightDetail/m:departureInformation/m:departTerminal", xnMgr).InnerText : "";
                NewSegment.SelectSingleNode("departureAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText);

                NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText = ItineraryInfo.SelectSingleNode("m:travelProduct/m:offpointDetail/m:cityCode", xnMgr).InnerText;
                NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminal").InnerText = "";
                NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminalCode").InnerText = (ItineraryInfo.SelectNodes("m:flightDetail/m:arrivalStationInfo", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:flightDetail/m:arrivalStationInfo/m:terminal", xnMgr).InnerText : "";
                NewSegment.SelectSingleNode("arrivalAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText);

                NewSegment.SelectSingleNode("operatingAirline").InnerText = Common.GetAirlineName("KO", NewSegment.Attributes.GetNamedItem("occ").InnerText);
                NewSegment.SelectSingleNode("marketingAirline").InnerText = Common.GetAirlineName("KO", NewSegment.Attributes.GetNamedItem("mcc").InnerText);
                NewSegment.SelectSingleNode("equipment").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection((ItineraryInfo.SelectNodes("m:flightDetail/m:productDetails/m:equipment", xnMgr).Count > 0) ? Common.GetEquipmentName(ItineraryInfo.SelectSingleNode("m:flightDetail/m:productDetails/m:equipment", xnMgr).InnerText) : ""));
                NewSegment.SelectSingleNode("airlineRefNumber").InnerText = (ItineraryInfo.SelectNodes("m:itineraryReservationInfo/m:reservation/m:controlNumber", xnMgr).Count > 0) ? ItineraryInfo.SelectSingleNode("m:itineraryReservationInfo/m:reservation/m:controlNumber", xnMgr).InnerText : "";

                StopSegment = NewSegment.SelectSingleNode("legInfo");

                if (NewSegment.Attributes.GetNamedItem("stn").InnerText.Equals("1") && ItineraryInfo.SelectNodes("m:legInfo", xnMgr).Count > 1)
                {
                    int i = 0;
                    foreach (XmlNode StopDetails in ItineraryInfo.SelectNodes("m:legInfo", xnMgr))
                    {
                        NewStopSegment = StopSegment.SelectNodes("seg")[i++];
                        NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = StopDetails.SelectSingleNode("m:legTravelProduct/m:boardPointDetails/m:trueLocationId", xnMgr).InnerText;
                        NewStopSegment.Attributes.GetNamedItem("alc").InnerText = StopDetails.SelectSingleNode("m:legTravelProduct/m:offpointDetails/m:trueLocationId", xnMgr).InnerText;
                        NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(StopDetails.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureDate", xnMgr).InnerText, StopDetails.SelectSingleNode("m:legTravelProduct/m:flightDate/m:departureTime", xnMgr).InnerText);
                        NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(StopDetails.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalDate", xnMgr).InnerText, StopDetails.SelectSingleNode("m:legTravelProduct/m:flightDate/m:arrivalTime", xnMgr).InnerText);
                        NewStopSegment.Attributes.GetNamedItem("eft").InnerText = "";
                        NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = "";

                        if (i.Equals(1))
                            NewStopSegment.InnerText = Common.GetAirportName("EN", NewStopSegment.Attributes.GetNamedItem("alc").InnerText);
                    }

                    StopSegment.SelectNodes("seg")[0].Attributes.GetNamedItem("gwt").InnerText = cm.ElapseFlyingTime(StopSegment.SelectNodes("seg")[0].Attributes.GetNamedItem("ardt").InnerText, StopSegment.SelectNodes("seg")[1].Attributes.GetNamedItem("ddt").InnerText);
                }
                else
                    NewSegment.RemoveChild(StopSegment);

                //캐빈클래스
                if (ItineraryInfo.SelectNodes("m:cabinDetails", xnMgr).Count > 0)
                {
                    NewSegment.SelectSingleNode("cabin").Attributes.GetNamedItem("code").InnerText = ItineraryInfo.SelectSingleNode("m:cabinDetails/m:cabinDetails/m:classDesignator", xnMgr).InnerText;
                    NewSegment.SelectSingleNode("cabin").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(Common.ServiceClassText("A", NewSegment.SelectSingleNode("cabin").Attributes.GetNamedItem("code").InnerText)));
                }

                //운임정보
                XmlNode FareInfo = NewSegment.SelectSingleNode("fareInfo");
                XmlNode Fare = FareInfo.SelectSingleNode("fare");
                XmlNode NewFare;

                if (ResXml.SelectNodes("m:tstData", xnMgr).Count > 0)
                {
                    string STNum = ItineraryInfo.SelectSingleNode("m:elementManagementItinerary/m:reference[m:qualifier='ST']/m:number", xnMgr).InnerText;

                    foreach (XmlNode TstData in ResXml.SelectNodes(String.Format("m:tstData[m:referenceForTstData/m:reference[m:qualifier='ST' and m:number='{0}']]", STNum), xnMgr))
                    {
                        XmlNodeList TstDataList = TstData.SelectNodes("m:referenceForTstData/m:reference[m:qualifier='ST' and m:number != '0']", xnMgr);

                        for (int i = 0; i < TstDataList.Count; i++)
                        {
                            if (TstDataList[i].SelectSingleNode("m:number", xnMgr).InnerText.Equals(STNum))
                            {
                                XmlNode FareElement = TstData.SelectNodes("m:fareBasisInfo/m:fareElement", xnMgr)[i];
                                
                                NewFare = FareInfo.AppendChild(Fare.CloneNode(true));
                                NewFare.Attributes.GetNamedItem("ptc").InnerText = (FareElement.SelectNodes("m:ticketDesignator", xnMgr).Count > 0) ? FareElement.SelectSingleNode("m:ticketDesignator", xnMgr).InnerText : TstData.SelectSingleNode("m:tstFreetext[m:freetextDetail/m:subjectQualifier='3' and m:freetextDetail/m:type='41']/m:longFreetext", xnMgr).InnerText;
                                NewFare.Attributes.GetNamedItem("basis").InnerText = String.Concat((FareElement.SelectNodes("m:primaryCode", xnMgr).Count > 0) ? FareElement.SelectSingleNode("m:primaryCode", xnMgr).InnerText : "", (FareElement.SelectNodes("m:fareBasis", xnMgr).Count > 0) ? FareElement.SelectSingleNode("m:fareBasis", xnMgr).InnerText : "");
                                NewFare.Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty((FareElement.SelectNodes("m:baggageAllowance", xnMgr).Count > 0) ? FareElement.SelectSingleNode("m:baggageAllowance", xnMgr).InnerText : "");
                                NewFare.Attributes.GetNamedItem("nvb").InnerText = (FareElement.SelectNodes("m:notValidBefore", xnMgr).Count > 0) ? cm.ConvertToDateTime(FareElement.SelectSingleNode("m:notValidBefore", xnMgr).InnerText) : "";
                                NewFare.Attributes.GetNamedItem("nva").InnerText = (FareElement.SelectNodes("m:notValidAfter", xnMgr).Count > 0) ? cm.ConvertToDateTime(FareElement.SelectSingleNode("m:notValidAfter", xnMgr).InnerText) : "";
                            }
                        }
                    }

                    FareInfo.RemoveChild(Fare);
                }
                else
                    NewSegment.RemoveChild(FareInfo);
            }

            FlightInfo.RemoveChild(Segment);

            //탑승객
            XmlNode TravellerInfo = XmlDoc.SelectSingleNode("ResponseDetails/travellerInfo");
            XmlNode Traveller = TravellerInfo.SelectSingleNode("traveller");
            XmlNode NewTraveller;

            foreach (XmlNode TmpTravellerInfo in ResXml.SelectNodes("m:travellerInfo[m:elementManagementPassenger/m:segmentName='NM']", xnMgr))
            {
                XmlNode TravellerInformation = TmpTravellerInfo.SelectSingleNode("m:passengerData/m:travellerInformation", xnMgr);

                string PTNum = TmpTravellerInfo.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText;
                string TstPaxType = (TravellerInformation.SelectNodes("m:passenger/m:type", xnMgr).Count > 0) ? (TravellerInformation.SelectSingleNode("m:passenger/m:type", xnMgr).InnerText.Equals("INF") ? "INF" : "PAX") : "PAX";

                if (ResXml.SelectNodes("m:tstData", xnMgr).Count > 0)
                {
                    XmlNode TstData = ResXml.SelectSingleNode(String.Format("m:tstData[m:referenceForTstData/m:reference[m:qualifier='PT' and m:number='{0}']]", PTNum), xnMgr);
                    
                    if (TstData.SelectNodes("m:fareBasisInfo/m:fareElement/m:ticketDesignator", xnMgr).Count > 0)
                        TstPaxType = TstData.SelectSingleNode("m:fareBasisInfo/m:fareElement/m:ticketDesignator", xnMgr).InnerText;
                }

                NewTraveller = TravellerInfo.AppendChild(Traveller.CloneNode(true));
                NewTraveller.Attributes.GetNamedItem("ptc").InnerText = TstPaxType;
                NewTraveller.Attributes.GetNamedItem("infant").InnerText = TstPaxType.Equals("INF") ? "Y" : "N";
                NewTraveller.SelectSingleNode("name").InnerText = String.Format("{0}/{1}", TravellerInformation.SelectSingleNode("m:traveller/m:surname", xnMgr).InnerText, TravellerInformation.SelectSingleNode("m:passenger/m:firstName", xnMgr).InnerText.Replace(" ", ""));

                //티켓정보
                if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr).Count > 0)
                {
                    if (TstPaxType.Equals("INF"))
                        NewTraveller.SelectSingleNode("ticketNumber").InnerText = Common.SplitAmadeusTicketNumber(ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext[starts-with(., 'INF')]", PTNum), xnMgr).InnerText);
                    else
                        NewTraveller.SelectSingleNode("ticketNumber").InnerText = Common.SplitAmadeusTicketNumber(ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']/m:otherDataFreetext/m:longFreetext", PTNum), xnMgr).InnerText);
                }

                //요청 주문번호에 예약된 명단만 출력(동명이인이 있을 수 있어 티켓번호로 비교)
                int TKOK = 0;
                foreach (string TN in NewTraveller.SelectSingleNode("ticketNumber").InnerText.Split('/'))
                {
                    if (TicketList.IndexOf(TN.Trim()) != -1)
                    {
                        TKOK++;
                        break;
                    }
                }

                if (TKOK.Equals(0))
                    TravellerInfo.RemoveChild(NewTraveller);

                //좌석
                if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:seatPaxInfo/m:crossRef/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr).Count > 0)
                {
                    XmlNodeList DataElementsIndiv = ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:seatPaxInfo/m:crossRef/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr);
                    
                    XmlNode SeatInfo = NewTraveller.SelectSingleNode("seatInfo");
                    XmlNode Seat = SeatInfo.SelectSingleNode("seat");
                    XmlNode NewSeat;
                    
                    int i = 1;

                    foreach (XmlNode TmpItineraryInfo in ResXml.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR' and m:travelProduct/m:boardpointDetail]", xnMgr))
                    {
                        string STNum = TmpItineraryInfo.SelectSingleNode("m:elementManagementItinerary/m:reference[m:qualifier='ST']/m:number", xnMgr).InnerText;

                        NewSeat = SeatInfo.AppendChild(Seat.CloneNode(true));
                        NewSeat.Attributes.GetNamedItem("ref").InnerText = (i++).ToString();

                        if (ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:seatPaxInfo/m:crossRef/m:reference[m:qualifier='PT']/m:number='{0}'][m:referenceForDataElement/m:reference[m:qualifier='ST']/m:number='{1}']", PTNum, STNum), xnMgr).Count > 0)
                            NewSeat.InnerText = ResXml.SelectSingleNode(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:referenceForDataElement/m:reference[m:qualifier='ST']/m:number='{0}']/m:serviceRequest/m:ssrb[m:crossRef='{1}']/m:data", STNum, PTNum), xnMgr).InnerText;
                        else
                            SeatInfo.RemoveChild(NewSeat);
                    }

                    SeatInfo.RemoveChild(Seat);
                }
                else
                    NewTraveller.SelectSingleNode("seatInfo").RemoveAll();
            }

            TravellerInfo.RemoveChild(Traveller);
            
            return XmlDoc.DocumentElement;
        }

        /// <summary>
        /// PNR정보로 티켓 이미지 출력(Abacus용)
        /// </summary>
        /// <param name="ResXml">PNR 정보</param>
        /// <param name="OID">주문번호</param>
        /// <param name="TicketList">티켓번호 리스트</param>
        /// <param name="CreateDate">예약일</param>
        /// <param name="GDSType">서비스구분(MPIS:아마데우스, FMS:세이버, BFM:세이버)</param>
        /// <param name="GKPNR">GKPNR 여부</param>
        /// <returns></returns>
        public XmlElement ToModeSearchETicketDocGroupAbacus(XmlElement ResXml, int OID, string TicketList, string CreateDate, string GDSType, bool GKPNR)
        {
            XmlNamespaceManager xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
            xnMgr.AddNamespace("stl", AbacusConfig.NamespaceURL("TravelItineraryRead_stl"));
            xnMgr.AddNamespace("tir310", AbacusConfig.NamespaceURL("TravelItineraryRead_tir310"));

            //오류 결과일 경우 예외 처리
            if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
            {
                throw new Exception(ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText);
            }

            XmlNode TravelItinerary = ResXml.SelectSingleNode("tir310:TravelItinerary", xnMgr);
            
            //통합모드
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchETicketDocGroupPNRRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            //기본정보
            XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");

            BookingInfo.SelectSingleNode("gds").InnerText = "Abacus";
            BookingInfo.SelectSingleNode("bookingNo").InnerText = TravelItinerary.SelectSingleNode("tir310:ItineraryRef", xnMgr).Attributes.GetNamedItem("ID").InnerText;
            BookingInfo.SelectSingleNode("bookingNo").Attributes.GetNamedItem("pnr").InnerText = BookingInfo.SelectSingleNode("bookingNo").InnerText;
            BookingInfo.SelectSingleNode("modeBookingNo").InnerText = OID.ToString();
            BookingInfo.SelectSingleNode("bookingCreationDate").InnerText = CreateDate;
            BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText = "";
            BookingInfo.SelectSingleNode("bookingClass").InnerText = Common.ServiceClassText(GDSType, BookingInfo.SelectSingleNode("bookingClass").Attributes.GetNamedItem("code").InnerText);

            //여정
            XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
            XmlNode Segment = FlightInfo.SelectSingleNode("seg");
            XmlNode StopSegment = Segment.SelectSingleNode("seg");
            XmlNode NewSegment;
            XmlNode NewStopSegment;
            
            XmlNodeList ItineraryInfo = TravelItinerary.SelectNodes("tir310:ItineraryInfo/tir310:ReservationItems/tir310:Item/tir310:FlightSegment", xnMgr);

            for (int i = 0; i < ItineraryInfo.Count; i++)
            {
                NewSegment = FlightInfo.AppendChild(Segment.CloneNode(true));
                StopSegment = NewSegment.SelectSingleNode("legInfo");

                if (ItineraryInfo.Count > (i + 1) && ItineraryInfo[i].Attributes.GetNamedItem("SegmentNumber").InnerText.Equals(ItineraryInfo[(i + 1)].Attributes.GetNamedItem("SegmentNumber").InnerText))
                {
                    NewSegment.Attributes.GetNamedItem("ref").InnerText = cm.RequestInt(ItineraryInfo[i].Attributes.GetNamedItem("SegmentNumber").InnerText).ToString();
                    NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("DepartureDateTime").InnerText);
                    NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToAbacusDateTime(ItineraryInfo[(i + 1)].Attributes.GetNamedItem("ArrivalDateTime").InnerText, ItineraryInfo[(i + 1)].Attributes.GetNamedItem("DepartureDateTime").InnerText);
                    NewSegment.Attributes.GetNamedItem("mcc").InnerText = ItineraryInfo[i].SelectSingleNode("tir310:MarketingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText;
                    NewSegment.Attributes.GetNamedItem("occ").InnerText = (ItineraryInfo[i].SelectNodes("tir310:OperatingAirline", xnMgr).Count > 0 && (XmlAttribute)ItineraryInfo[i].SelectSingleNode("tir310:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code") != null) ? ItineraryInfo[i].SelectSingleNode("tir310:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText : NewSegment.Attributes.GetNamedItem("mcc").InnerText;
                    NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(ItineraryInfo[i].Attributes.GetNamedItem("FlightNumber").InnerText);
                    NewSegment.Attributes.GetNamedItem("eqt").InnerText = (ItineraryInfo[i].SelectNodes("tir310:Equipment", xnMgr).Count > 0) ? ItineraryInfo[i].SelectSingleNode("tir310:Equipment", xnMgr).Attributes.GetNamedItem("AirEquipType").InnerText : "";
                    NewSegment.Attributes.GetNamedItem("stn").InnerText = "1";
                    NewSegment.Attributes.GetNamedItem("rbd").InnerText = ItineraryInfo[i].Attributes.GetNamedItem("ResBookDesigCode").InnerText;
                    NewSegment.Attributes.GetNamedItem("rsc").InnerText = (GKPNR && ItineraryInfo[i].Attributes.GetNamedItem("Status").InnerText.Equals("NO")) ? "HK" : ItineraryInfo[i].Attributes.GetNamedItem("Status").InnerText;
                    NewSegment.Attributes.GetNamedItem("eft").InnerText = ((XmlAttribute)ItineraryInfo[i].Attributes.GetNamedItem("ElapsedTime") != null) ? cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("ElapsedTime").InnerText) : "";

                    NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText = ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                    NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminal").InnerText = ((XmlAttribute)ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("Terminal") != null) ? ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("Terminal").InnerText : "";
                    NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminalCode").InnerText = ((XmlAttribute)ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("TerminalCode") != null) ? ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("TerminalCode").InnerText : "";
                    NewSegment.SelectSingleNode("departureAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText);

                    NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText = ItineraryInfo[(i + 1)].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                    NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminal").InnerText = ((XmlAttribute)ItineraryInfo[(i + 1)].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("Terminal") != null) ? ItineraryInfo[(i + 1)].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("Terminal").InnerText : "";
                    NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminalCode").InnerText = ((XmlAttribute)ItineraryInfo[(i + 1)].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("TerminalCode") != null) ? ItineraryInfo[(i + 1)].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("TerminalCode").InnerText : "";
                    NewSegment.SelectSingleNode("arrivalAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText);

                    //기착정보
                    NewStopSegment = StopSegment.SelectNodes("seg")[0];
                    NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                    NewStopSegment.Attributes.GetNamedItem("alc").InnerText = ItineraryInfo[i].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                    NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("DepartureDateTime").InnerText);
                    NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToAbacusDateTime(ItineraryInfo[i].Attributes.GetNamedItem("ArrivalDateTime").InnerText, ItineraryInfo[i].Attributes.GetNamedItem("DepartureDateTime").InnerText);
                    NewStopSegment.Attributes.GetNamedItem("eft").InnerText = "";
                    NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = "";
                    NewStopSegment.InnerText = Common.GetAirportName("EN", NewStopSegment.Attributes.GetNamedItem("alc").InnerText);

                    NewStopSegment = StopSegment.SelectNodes("seg")[1];
                    NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = ItineraryInfo[(i + 1)].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                    NewStopSegment.Attributes.GetNamedItem("alc").InnerText = ItineraryInfo[(i + 1)].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                    NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(ItineraryInfo[(i + 1)].Attributes.GetNamedItem("DepartureDateTime").InnerText);
                    NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToAbacusDateTime(ItineraryInfo[(i + 1)].Attributes.GetNamedItem("ArrivalDateTime").InnerText, ItineraryInfo[(i + 1)].Attributes.GetNamedItem("DepartureDateTime").InnerText);
                    NewStopSegment.Attributes.GetNamedItem("eft").InnerText = "";
                    NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = "";

                    StopSegment.SelectNodes("seg")[0].Attributes.GetNamedItem("gwt").InnerText = cm.ElapseFlyingTime(StopSegment.SelectNodes("seg")[0].Attributes.GetNamedItem("ardt").InnerText, StopSegment.SelectNodes("seg")[1].Attributes.GetNamedItem("ddt").InnerText);
                    NewSegment.Attributes.GetNamedItem("eft").InnerText = cm.SumElapseFlyingTime(cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("ElapsedTime").InnerText.Replace(".", "")), cm.ConvertToDateTime(ItineraryInfo[(i + 1)].Attributes.GetNamedItem("ElapsedTime").InnerText.Replace(".", "")), StopSegment.SelectNodes("seg")[0].Attributes.GetNamedItem("gwt").InnerText);

                    i++;
                }
                else
                {
                    NewSegment.Attributes.GetNamedItem("ref").InnerText = cm.RequestInt(ItineraryInfo[i].Attributes.GetNamedItem("SegmentNumber").InnerText).ToString();
                    NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("DepartureDateTime").InnerText);
                    NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToAbacusDateTime(ItineraryInfo[i].Attributes.GetNamedItem("ArrivalDateTime").InnerText, ItineraryInfo[i].Attributes.GetNamedItem("DepartureDateTime").InnerText);
                    NewSegment.Attributes.GetNamedItem("mcc").InnerText = ItineraryInfo[i].SelectSingleNode("tir310:MarketingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText;
                    NewSegment.Attributes.GetNamedItem("occ").InnerText = (ItineraryInfo[i].SelectNodes("tir310:OperatingAirline", xnMgr).Count > 0 && (XmlAttribute)ItineraryInfo[i].SelectSingleNode("tir310:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code") != null) ? ItineraryInfo[i].SelectSingleNode("tir310:OperatingAirline", xnMgr).Attributes.GetNamedItem("Code").InnerText : NewSegment.Attributes.GetNamedItem("mcc").InnerText;
                    NewSegment.Attributes.GetNamedItem("fln").InnerText = Common.ZeroPaddingFlight(ItineraryInfo[i].Attributes.GetNamedItem("FlightNumber").InnerText);
                    NewSegment.Attributes.GetNamedItem("eqt").InnerText = (ItineraryInfo[i].SelectNodes("tir310:Equipment", xnMgr).Count > 0) ? ItineraryInfo[i].SelectSingleNode("tir310:Equipment", xnMgr).Attributes.GetNamedItem("AirEquipType").InnerText : "";
                    NewSegment.Attributes.GetNamedItem("stn").InnerText = "0";
                    NewSegment.Attributes.GetNamedItem("rbd").InnerText = ItineraryInfo[i].Attributes.GetNamedItem("ResBookDesigCode").InnerText;
                    NewSegment.Attributes.GetNamedItem("rsc").InnerText = (GKPNR && ItineraryInfo[i].Attributes.GetNamedItem("Status").InnerText.Equals("NO")) ? "HK" : ItineraryInfo[i].Attributes.GetNamedItem("Status").InnerText;
                    NewSegment.Attributes.GetNamedItem("eft").InnerText = ((XmlAttribute)ItineraryInfo[i].Attributes.GetNamedItem("ElapsedTime") != null) ? cm.ConvertToDateTime(ItineraryInfo[i].Attributes.GetNamedItem("ElapsedTime").InnerText) : "";

                    NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText = ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                    NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminal").InnerText = ((XmlAttribute)ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("Terminal") != null) ? ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("Terminal").InnerText : "";
                    NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("terminalCode").InnerText = ((XmlAttribute)ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("TerminalCode") != null) ? ItineraryInfo[i].SelectSingleNode("tir310:OriginLocation", xnMgr).Attributes.GetNamedItem("TerminalCode").InnerText : "";
                    NewSegment.SelectSingleNode("departureAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("departureAirport").Attributes.GetNamedItem("code").InnerText);

                    NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText = ItineraryInfo[i].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("LocationCode").InnerText;
                    NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminal").InnerText = ((XmlAttribute)ItineraryInfo[i].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("Terminal") != null) ? ItineraryInfo[i].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("Terminal").InnerText : "";
                    NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("terminalCode").InnerText = ((XmlAttribute)ItineraryInfo[i].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("TerminalCode") != null) ? ItineraryInfo[i].SelectSingleNode("tir310:DestinationLocation", xnMgr).Attributes.GetNamedItem("TerminalCode").InnerText : "";
                    NewSegment.SelectSingleNode("arrivalAirport").InnerText = Common.GetAirportName("EN", NewSegment.SelectSingleNode("arrivalAirport").Attributes.GetNamedItem("code").InnerText);

                    NewSegment.RemoveChild(StopSegment);
                }

                NewSegment.SelectSingleNode("operatingAirline").InnerText = Common.GetAirlineName("KO", NewSegment.Attributes.GetNamedItem("occ").InnerText);
                NewSegment.SelectSingleNode("marketingAirline").InnerText = Common.GetAirlineName("KO", NewSegment.Attributes.GetNamedItem("mcc").InnerText);
                NewSegment.SelectSingleNode("equipment").InnerText = "";

                if (ItineraryInfo[i].SelectNodes("tir310:SupplierRef", xnMgr).Count > 0)
                    NewSegment.SelectSingleNode("airlineRefNumber").InnerText = (ItineraryInfo[i].SelectSingleNode("tir310:SupplierRef", xnMgr).Attributes.GetNamedItem("ID").InnerText.IndexOf('*') != -1) ? ItineraryInfo[i].SelectSingleNode("tir310:SupplierRef", xnMgr).Attributes.GetNamedItem("ID").InnerText.Split('*')[1] : ItineraryInfo[i].SelectSingleNode("tir310:SupplierRef", xnMgr).Attributes.GetNamedItem("ID").InnerText;
                else if (ItineraryInfo[i].SelectNodes("tir310:OperatingAirlineRecord", xnMgr).Count > 0)
                    NewSegment.SelectSingleNode("airlineRefNumber").InnerText = ItineraryInfo[i].SelectSingleNode("tir310:OperatingAirlineRecord", xnMgr).Attributes.GetNamedItem("ID").InnerText;
                else
                    NewSegment.SelectSingleNode("airlineRefNumber").InnerText = "";

                //운임정보
                XmlNode FareInfo = NewSegment.SelectSingleNode("fareInfo");
                XmlNode Fare = FareInfo.SelectSingleNode("fare");
                XmlNode NewFare;

                if (TravelItinerary.SelectNodes("tir310:ItineraryInfo/tir310:ItineraryPricing", xnMgr).Count > 0)
                {
                    foreach (XmlNode PriceQuote in TravelItinerary.SelectNodes("tir310:ItineraryInfo/tir310:ItineraryPricing/tir310:PriceQuote", xnMgr))
                    {
                        XmlNode FlightSegment = PriceQuote.SelectSingleNode(String.Format("tir310:PricedItinerary/tir310:AirItineraryPricingInfo/tir310:PTC_FareBreakdown/tir310:FlightSegment[normalize-space(@SegmentNumber)='{0}']", NewSegment.Attributes.GetNamedItem("ref").InnerText), xnMgr);

                        if (FlightSegment != null)
                        {
                            NewFare = FareInfo.AppendChild(Fare.CloneNode(true));
                            NewFare.Attributes.GetNamedItem("ptc").InnerText = PriceQuote.SelectSingleNode("tir310:PricedItinerary/tir310:AirItineraryPricingInfo/tir310:PassengerTypeQuantity", xnMgr).Attributes.GetNamedItem("Code").InnerText;
                            NewFare.Attributes.GetNamedItem("basis").InnerText = FlightSegment.SelectSingleNode("tir310:FareBasis", xnMgr).Attributes.GetNamedItem("Code").InnerText;
                            NewFare.Attributes.GetNamedItem("baggage").InnerText = Common.BaggageEmpty((FlightSegment.SelectNodes("tir310:BaggageAllowance", xnMgr).Count > 0) ? FlightSegment.SelectSingleNode("tir310:BaggageAllowance", xnMgr).Attributes.GetNamedItem("Number").InnerText : "");
                            NewFare.Attributes.GetNamedItem("nvb").InnerText = (FlightSegment.SelectNodes("tir310:ValidityDates/tir310:NotValidBefore", xnMgr).Count > 0) ? FlightSegment.SelectSingleNode("tir310:ValidityDates/tir310:NotValidBefore", xnMgr).InnerText.Substring(0, 10) : "";
                            NewFare.Attributes.GetNamedItem("nva").InnerText = (FlightSegment.SelectNodes("tir310:ValidityDates/tir310:NotValidAfter", xnMgr).Count > 0) ? FlightSegment.SelectSingleNode("tir310:ValidityDates/tir310:NotValidAfter", xnMgr).InnerText.Substring(0, 10) : "";
                        }
                    }

                    FareInfo.RemoveChild(Fare);
                }
                else
                    NewSegment.RemoveChild(FareInfo);
            }

            FlightInfo.RemoveChild(Segment);

            //탑승객
            XmlNode TravellerInfo = XmlDoc.SelectSingleNode("ResponseDetails/travellerInfo");
            XmlNode Traveller = TravellerInfo.SelectSingleNode("traveller");
            XmlNode NewTraveller;

            foreach (XmlNode PersonNameNode in TravelItinerary.SelectNodes("tir310:CustomerInfo/tir310:PersonName[tir310:GivenName]", xnMgr))
            {
                string NameNumber = PersonNameNode.Attributes.GetNamedItem("NameNumber").InnerText;
                bool Infant = PersonNameNode.Attributes.GetNamedItem("PassengerType").InnerText.Equals("INF") ? true : false;

                NewTraveller = TravellerInfo.AppendChild(Traveller.CloneNode(true));
                NewTraveller.Attributes.GetNamedItem("ptc").InnerText = PersonNameNode.Attributes.GetNamedItem("PassengerType").InnerText;
                NewTraveller.Attributes.GetNamedItem("infant").InnerText = Infant ? "Y" : "N";
                NewTraveller.SelectSingleNode("name").InnerText = String.Format("{0}/{1}", PersonNameNode.SelectSingleNode("tir310:Surname", xnMgr).InnerText, PersonNameNode.SelectSingleNode("tir310:GivenName", xnMgr).InnerText);
                
                //티켓정보
                if (TravelItinerary.SelectNodes("tir310:SpecialServiceInfo", xnMgr).Count > 0 && TravelItinerary.SelectNodes("tir310:SpecialServiceInfo[tir310:Service/@SSR_Code='SSR' and tir310:Service/@SSR_Type='TKNE']", xnMgr).Count > 0)
                {
                    if (Infant)
                    {
                        foreach (XmlNode NameService in TravelItinerary.SelectNodes(String.Format("tir310:SpecialServiceInfo/tir310:Service[@SSR_Code='SSR'and @SSR_Type='INFT']"), xnMgr))
                        {
                            if (NameService.SelectSingleNode("tir310:Text", xnMgr).InnerText.IndexOf(String.Format("/{0}/{1}/", PersonNameNode.SelectSingleNode("tir310:Surname", xnMgr).InnerText, PersonNameNode.SelectSingleNode("tir310:GivenName", xnMgr).InnerText)) != -1)
                            {
                                NameNumber = NameService.SelectSingleNode("tir310:PersonName", xnMgr).Attributes.GetNamedItem("NameNumber").InnerText;
                                break;
                            }
                        }
                    }

                    foreach (XmlNode TicketInfoService in TravelItinerary.SelectNodes(String.Format("tir310:SpecialServiceInfo/tir310:Service[@SSR_Code='SSR'and @SSR_Type='TKNE' and tir310:PersonName/@NameNumber='{0}']", NameNumber), xnMgr))
                    {
                        string TicketNumber = Common.SplitAbacusTicketNumber(TicketInfoService.SelectSingleNode("tir310:Text", xnMgr).InnerText);
                        bool TicketVoid = Common.AbacusVoidTicket(TravelItinerary.SelectNodes("tir310:ItineraryInfo/tir310:Ticketing[starts-with(@eTicketNumber, 'TV')]", xnMgr), TicketNumber.Replace("INF", ""));

                        if (Infant)
                        {
                            if (TicketNumber.StartsWith("INF"))
                            {
                                TicketNumber = TicketNumber.Replace("INF", "");

                                if (!TicketVoid && NewTraveller.SelectSingleNode("ticketNumber").InnerText.IndexOf(TicketNumber).Equals(-1))
                                {
                                    if (!String.IsNullOrWhiteSpace(NewTraveller.SelectSingleNode("ticketNumber").InnerText))
                                        NewTraveller.SelectSingleNode("ticketNumber").InnerText += "/";

                                    NewTraveller.SelectSingleNode("ticketNumber").InnerText += TicketNumber;
                                }
                            }
                        }
                        else
                        {
                            if (!TicketNumber.StartsWith("INF"))
                            {
                                if (!TicketVoid && NewTraveller.SelectSingleNode("ticketNumber").InnerText.IndexOf(TicketNumber).Equals(-1))
                                {
                                    if (!String.IsNullOrWhiteSpace(NewTraveller.SelectSingleNode("ticketNumber").InnerText))
                                        NewTraveller.SelectSingleNode("ticketNumber").InnerText += "/";

                                    NewTraveller.SelectSingleNode("ticketNumber").InnerText += TicketNumber;
                                }
                            }
                        }
                    }
                }

                //요청 주문번호에 예약된 명단만 출력(동명이인이 있을 수 있어 티켓번호로 비교)
                int TKOK = 0;
                foreach (string TN in NewTraveller.SelectSingleNode("ticketNumber").InnerText.Split('/'))
                {
                    if (TicketList.IndexOf(TN.Trim()) != -1)
                    {
                        TKOK++;
                        break;
                    }
                }

                if (TKOK.Equals(0))
                    TravellerInfo.RemoveChild(NewTraveller);
                else
                    NewTraveller.SelectSingleNode("seatInfo").RemoveAll();
            }

            TravellerInfo.RemoveChild(Traveller);

            return XmlDoc.DocumentElement;
        }

        #endregion "E-Ticket 조회(PNR정보 이용)(PNR 단위 출력)"

        #region "E-Ticket 조회(문서출력용)"

        /// <summary>
		/// E-Ticket 조회(문서출력용)
		/// </summary>
		/// <param name="SNM">사이트번호</param>
		/// <param name="PNR">PNR번호</param>
		/// <param name="TicketNumber">이티켓번호</param>
		/// <returns></returns>
		//[WebMethod(Description = "E-Ticket 조회(문서출력용)")]
		public XmlElement SearchETicketCouponRS(int SNM, string PNR, string TicketNumber)
		{
			string GUID = cm.GetGUID;
			string SID = String.Empty;
			string SCT = String.Empty;
			int SQN = 0;

			try
			{
				//결과
				XmlElement ResXml;

				//네임스페이스
				XmlNamespaceManager xnMgr;
				
				//### 01.세션생성 #####
				XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

				SID = Session.SelectSingleNode("session/sessionId").InnerText;
				SCT = Session.SelectSingleNode("session/securityToken").InnerText;
				SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

				//### 02.PNR조회(PNR_Retrieve) #####
				ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

				//### 02.이티켓정보(Ticket_ProcessEDoc) #####
				ResXml = amd.ProcessEDocRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), TicketNumber);

				//오류 결과일 경우 예외 처리
				xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
				xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Ticket_ProcessEDoc"));

				if (ResXml.SelectNodes("m:error", xnMgr).Count > 0)
				{
					throw new Exception(ResXml.SelectSingleNode("m:textInfo/m:freeText", xnMgr).InnerText);
				}

				//### 03.세션종료 #####
				SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"));

				return ResXml;
			}
			catch (Exception ex)
			{
				//### 세션종료 #####
				if (SQN > 0)
					amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSExceptionMode(ex, hcc, GUID, "AirService", MethodBase.GetCurrentMethod().Name, 0, 0, 0).ToErrors;
			}
		}

		#endregion "E-Ticket 조회(문서출력용)"

        #region "E-TicketNumber 리스트"

        /// <summary>
        /// E-TicketNumber 리스트
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="PNR">PNR번호</param>
        /// <returns></returns>
        //[WebMethod(Description = "E-TicketNumber 리스트")]
        public XmlElement ETicketNumberListRS(int SNM, string PNR)
        {
            string GUID = cm.GetGUID;
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            try
            {
                string XmlData = string.Empty;

                //결과
                XmlElement ResXml;

                //네임스페이스
                XmlNamespaceManager xnMgr;

                //### 01.세션생성 #####
                XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

                SID = Session.SelectSingleNode("session/sessionId").InnerText;
                SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                //### 02.PNR조회(PNR_Retrieve) #####
                ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                //탑승객 기준
                XmlData += "<travellerInfo>";

                foreach (XmlNode TravellerInfo in ResXml.SelectNodes("m:travellerInfo[m:elementManagementPassenger/m:segmentName='NM']", xnMgr))
                {
                    string PTNum = TravellerInfo.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText;

                    foreach (XmlNode Passenger in TravellerInfo.SelectNodes("m:passengerData/m:travellerInformation/m:passenger", xnMgr))
                    {
                        string PaxType = (Passenger.SelectNodes("m:type", xnMgr).Count > 0 && Passenger.SelectSingleNode("m:type", xnMgr).InnerText.Equals("INF")) ? "INF" : "PAX";
                        string TicketNumber = string.Empty;
                        string CpnStatus = string.Empty;
                        string CouponGroup = string.Empty;

                        XmlNodeList DataElementsIndiv = ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA' or m:elementManagementData/m:segmentName='FHE'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr);

                        foreach (XmlNode TmpDataElementsIndiv in DataElementsIndiv)
                        {
                            if (TmpDataElementsIndiv.SelectSingleNode("m:otherDataFreetext/m:longFreetext", xnMgr).InnerText.StartsWith(PaxType))
                            {
                                TicketNumber = Common.SplitAmadeusTicketNumber(TmpDataElementsIndiv.SelectSingleNode("m:otherDataFreetext/m:longFreetext", xnMgr).InnerText);

                                if (!String.IsNullOrWhiteSpace(TicketNumber))
                                {
                                    CouponGroup += "<couponGroup>";
                                    CouponGroup += String.Format("<ticketNumber>{0}</ticketNumber>", TicketNumber);
                                    CouponGroup += "</couponGroup>";
                                }
                            }
                        }

                        XmlData += String.Format("<traveller ref=\"\"><surname>{0}</surname><firstName>{1}</firstName><type>{2}</type>{3}</traveller>", Passenger.ParentNode.SelectSingleNode("m:traveller/m:surname", xnMgr).InnerText, Passenger.SelectSingleNode("m:firstName", xnMgr).InnerText.Replace(" ", ""), (Passenger.SelectNodes("m:type", xnMgr).Count > 0 ? Passenger.SelectSingleNode("m:type", xnMgr).InnerText : "ADT"), CouponGroup);
                    }
                }

                XmlData += "</travellerInfo>";

                //### 05.세션종료 #####
                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05"));

                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.LoadXml(String.Format("<ticketInfo><pnr>{0}</pnr>{1}</ticketInfo>", PNR, XmlData));

                return XmlDoc.DocumentElement;
            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0);
            }
        }

        /// <summary>
        /// E-TicketNumber 리스트
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="PNR">PNR번호</param>
        /// <returns></returns>
        //[WebMethod(Description = "E-TicketNumber 리스트")]
        public XmlElement ETicketNumberStatusListRS(int SNM, string PNR)
        {
            string GUID = cm.GetGUID;
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            try
            {
                string XmlData = string.Empty;

                //결과
                XmlElement ResXml;
                XmlElement ResCoupon;

                //네임스페이스
                XmlNamespaceManager xnMgr;
                XmlNamespaceManager xnMgrCoupon;

                //### 01.세션생성 #####
                XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

                SID = Session.SelectSingleNode("session/sessionId").InnerText;
                SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                //### 02.PNR조회(PNR_Retrieve) #####
                ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                ////티켓번호 기준
                //XmlData += "<orderByTicket>";

                //foreach (XmlNode DataElementsIndiv in ResXml.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA' or m:elementManagementData/m:segmentName='FHE']", xnMgr))
                //{
                //    string TicketInfo = DataElementsIndiv.SelectSingleNode("m:otherDataFreetext/m:longFreetext", xnMgr).InnerText;

                //    XmlNode TravellerInfo = ResXml.SelectSingleNode(String.Format("m:travellerInfo[m:elementManagementPassenger/m:reference[m:qualifier='PT' and m:number='{0}']]", DataElementsIndiv.SelectSingleNode("m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText), xnMgr);
                //    XmlNode Passenger = null;

                //    if (TicketInfo.StartsWith("INF"))
                //        Passenger = TravellerInfo.SelectSingleNode("m:passengerData/m:travellerInformation/m:passenger[m:type='INF']", xnMgr);
                //    else
                //        Passenger = TravellerInfo.SelectSingleNode("m:passengerData/m:travellerInformation/m:passenger[not(m:type) or m:type!='INF']", xnMgr);

                //    if (Passenger != null)
                //        XmlData += String.Format("<traveller><surname>{0}</surname><firstName>{1}</firstName><type>{2}</type><ticketNumber>{3}</ticketNumber></traveller>", Passenger.ParentNode.SelectSingleNode("m:traveller/m:surname", xnMgr).InnerText, Passenger.SelectSingleNode("m:firstName", xnMgr).InnerText.Replace(" ", ""), (Passenger.SelectNodes("m:type", xnMgr).Count > 0 ? Passenger.SelectSingleNode("m:type", xnMgr).InnerText : "ADT"), Common.SplitAmadeusTicketNumber(TicketInfo));
                //    else
                //        XmlData += String.Format("<traveller><surname></surname><firstName></firstName><type></type><ticketNumber>{0}</ticketNumber></traveller>", Common.SplitAmadeusTicketNumber(TicketInfo));
                //}

                //XmlData += "</orderByTicket>";

                //탑승객 기준
                XmlData += "<travellerInfo>";

                foreach (XmlNode TravellerInfo in ResXml.SelectNodes("m:travellerInfo[m:elementManagementPassenger/m:segmentName='NM']", xnMgr))
                {
                    string PTNum = TravellerInfo.SelectSingleNode("m:elementManagementPassenger/m:reference[m:qualifier='PT']/m:number", xnMgr).InnerText;

                    foreach (XmlNode Passenger in TravellerInfo.SelectNodes("m:passengerData/m:travellerInformation/m:passenger", xnMgr))
                    {
                        string PaxType = (Passenger.SelectNodes("m:type", xnMgr).Count > 0 && Passenger.SelectSingleNode("m:type", xnMgr).InnerText.Equals("INF")) ? "INF" : "PAX";
                        string TicketNumber = string.Empty;
                        string CpnStatus = string.Empty;
                        string CouponGroup = string.Empty;

                        XmlNodeList DataElementsIndiv = ResXml.SelectNodes(String.Format("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='FA' or m:elementManagementData/m:segmentName='FHE'][m:referenceForDataElement/m:reference[m:qualifier='PT']/m:number='{0}']", PTNum), xnMgr);

                        foreach (XmlNode TmpDataElementsIndiv in DataElementsIndiv)
                        {
                            if (TmpDataElementsIndiv.SelectSingleNode("m:otherDataFreetext/m:longFreetext", xnMgr).InnerText.StartsWith(PaxType))
                            {
                                TicketNumber = Common.SplitAmadeusTicketNumber(TmpDataElementsIndiv.SelectSingleNode("m:otherDataFreetext/m:longFreetext", xnMgr).InnerText);

                                if (!String.IsNullOrWhiteSpace(TicketNumber))
                                {
                                    //### 03.이티켓정보(Ticket_ProcessEDoc) #####
                                    ResCoupon = amd.ProcessEDocRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03_", TicketNumber), TicketNumber.Split('-')[0]);

                                    //오류 결과일 경우 예외 처리
                                    xnMgrCoupon = new XmlNamespaceManager(ResCoupon.OwnerDocument.NameTable);
                                    xnMgrCoupon.AddNamespace("m", AmadeusConfig.NamespaceURL("Ticket_ProcessEDoc"));

                                    if (ResCoupon.SelectNodes("m:error", xnMgrCoupon).Count > 0)
                                    {
                                        CouponGroup += "<couponGroup>";
                                        CouponGroup += String.Format("<ticketNumber>{0}</ticketNumber>", TicketNumber);
                                        CouponGroup += "<cpnStatus>ERR</cpnStatus>";
                                        CouponGroup += "</couponGroup>";
                                    }
                                    else
                                    {
                                        foreach (XmlNode DocDetailsGroup in ResCoupon.SelectNodes("m:docGroup/m:docDetailsGroup", xnMgrCoupon))
                                        {
                                            CouponGroup += "<couponGroup>";
                                            CouponGroup += String.Format("<ticketNumber>{0}</ticketNumber>", DocDetailsGroup.SelectSingleNode("m:docInfo/m:documentDetails/m:number", xnMgrCoupon).InnerText);

                                            CpnStatus = "";

                                            foreach (XmlNode TmpCouponGroup in DocDetailsGroup.SelectNodes("m:couponGroup", xnMgrCoupon))
                                                CpnStatus += String.Format("<cpnStatus number=\"{0}\" dlc=\"{1}\" alc=\"{2}\" fln=\"{3}\">{4}</cpnStatus>", TmpCouponGroup.SelectSingleNode("m:couponInfo/m:couponDetails/m:cpnNumber", xnMgrCoupon).InnerText, TmpCouponGroup.SelectSingleNode("m:leg/m:boardPointDetails/m:trueLocationId", xnMgrCoupon).InnerText, TmpCouponGroup.SelectSingleNode("m:leg/m:offpointDetails/m:trueLocationId", xnMgrCoupon).InnerText, String.Concat(TmpCouponGroup.SelectSingleNode("m:leg/m:companyDetails/m:marketingCompany", xnMgrCoupon).InnerText, Common.ZeroPaddingFlight(TmpCouponGroup.SelectSingleNode("m:leg/m:flightIdentification/m:flightNumber", xnMgrCoupon).InnerText)), TmpCouponGroup.SelectSingleNode("m:couponInfo/m:couponDetails/m:cpnStatus", xnMgrCoupon).InnerText);

                                            CouponGroup += CpnStatus;
                                            CouponGroup += "</couponGroup>";
                                        }
                                    }
                                }
                            }
                        }

                        XmlData += String.Format("<traveller><surname>{0}</surname><firstName>{1}</firstName><type>{2}</type>{3}</traveller>", Passenger.ParentNode.SelectSingleNode("m:traveller/m:surname", xnMgr).InnerText, Passenger.SelectSingleNode("m:firstName", xnMgr).InnerText.Replace(" ", ""), (Passenger.SelectNodes("m:type", xnMgr).Count > 0 ? Passenger.SelectSingleNode("m:type", xnMgr).InnerText : "ADT"), CouponGroup);
                    }
                }

                XmlData += "</travellerInfo>";

                //### 05.세션종료 #####
                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05"));

                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.LoadXml(String.Format("<ticketInfo><pnr>{0}</pnr>{1}</ticketInfo>", PNR, XmlData));

                return XmlDoc.DocumentElement;

            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0);
            }
        }

        #endregion "E-TicketNumber 리스트"

        #endregion "E-Ticket 조회"

        #region "E-Ticket VOID"

        /// <summary>
        /// E-Ticket VOID
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="TicketNumber">이티켓번호</param>
        /// <returns></returns>
        //[WebMethod(Description = "E-Ticket VOID")]
        //public XmlElement ETicketVoidRS(int OID, int PID, string TicketNumber)
        //{
        //    try
        //    {
        //        //DB에 저장된 예약정보
        //        XmlElement XmlDBBooking = SearchBookingDB(OID, PID);

        //        if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
        //        {
        //            return ETicketVoidRS(cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText, TicketNumber);
        //        }
        //        else
        //            throw new Exception("예약 정보가 존재하지 않습니다.");
        //    }
        //    catch (Exception ex)
        //    {
        //        return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name).ToErrors;
        //    }
        //}

		/// <summary>
		/// E-Ticket VOID
		/// </summary>
		/// <param name="SNM">사이트번호</param>
		/// <param name="PNR">PNR번호</param>
		/// <param name="TicketNumber">이티켓번호</param>
		/// <returns></returns>
        [WebMethod(Description = "E-Ticket VOID")]
        public XmlElement ETicketVoidRS(int SNM, string PNR, string TicketNumber)
        {
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
            string SID = String.Empty;
            string SCT = String.Empty;
            int SQN = 0;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 355;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = PNR;
                sqlParam[8].Value = TicketNumber;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //결과
                XmlElement ResXml;

                //네임스페이스
                XmlNamespaceManager xnMgr;

                //### 01.세션생성 #####
                XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

                SID = Session.SelectSingleNode("session/sessionId").InnerText;
                SCT = Session.SelectSingleNode("session/securityToken").InnerText;
                SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

                //### 02.PNR조회(PNR_Retrieve) #####
                ResXml = amd.RetrieveRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), PNR);

                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                string CRC = ResXml.SelectSingleNode("m:sbrCreationPosDetails/m:sbrPreferences/m:userPreferences/m:codedCountry", xnMgr).InnerText;
                
                //### 03.이티켓정보(Ticket_ProcessEDoc) #####
                ResXml = amd.ProcessEDocRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), TicketNumber);

                //오류 결과일 경우 예외 처리
                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Ticket_ProcessEDoc"));

                if (ResXml.SelectNodes("m:error", xnMgr).Count > 0)
                {
                    throw new Exception(ResXml.SelectSingleNode("m:textInfo/m:freeText", xnMgr).InnerText);
                }

                //Coupon Status 체크
                if (ResXml.SelectNodes("m:docGroup/m:docDetailsGroup/m:couponGroup[m:couponInfo/m:couponDetails/m:cpnStatus!='I']", xnMgr).Count > 0)
                {
                    throw new Exception("해당 티켓은 보이드 할 수 없습니다.");
                }

                //### 04.이티켓보이드(Ticket_CancelDocument) #####
                ResXml = amd.CancelDocumentRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"), SNM, CRC, TicketNumber);

                //오류 결과일 경우 예외 처리
                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Ticket_CancelDocument"));

                if (ResXml.SelectSingleNode("m:transactionResults/m:responseDetails/m:statusCode", xnMgr).InnerText.Equals("X"))
                {
                    throw new Exception(ResXml.SelectSingleNode("m:transactionResults/m:errorGroup/m:errorWarningDescription/m:freeText", xnMgr).InnerText);
                }

                //### 05.세션종료 #####
                SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05"));

                return ResXml;
            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (SQN > 0)
                    amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 355, 0, 0).ToErrors;
            }
        }

		#endregion "E-Ticket VOID"

        #region "ETicket 이메일 발송"

        //[WebMethod(Description = "E-Ticket/Receipt 발송 정보 복호화")]
        public string ETicketMINFODec(string MINFO)
        {
            return new AES256Cipher().AESDecrypt(AES256Cipher.KeyName(2), MINFO);
        }

        /// <summary>
        /// E-Ticket/Receipt 발송 정보 조회
        /// </summary>
        /// <param name="IDX">일련번호</param>
        /// <param name="GUID">고유번호</param>
        /// <returns></returns>
        //[WebMethod(Description = "E-Ticket/Receipt 발송 정보 조회")]
        public string SearchETicketForm(int IDX, string GUID)
        {
            try
            {
                string ITEM = string.Empty;
                string KIND = string.Empty;
                string BookerName = string.Empty;
                string AgentNumber = string.Empty;
                string AgentName = string.Empty;
                string PaxName = string.Empty;
                string TicketNumber = string.Empty;
                string MKEY = string.Empty;
                string MINFO = string.Empty;

                using (SqlCommand cmd = new SqlCommand())
                {
                    SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["WSVLOG"].ConnectionString);
                    SqlDataReader dr = null;

                    cmd.Connection = conn;
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = "DBO.WSV_S_이티켓발송";

                    cmd.Parameters.Add("@일련번호", SqlDbType.Int, 0);
                    cmd.Parameters.Add("@고유번호", SqlDbType.Char, 32);
                    cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                    cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                    cmd.Parameters["@일련번호"].Value = IDX;
                    cmd.Parameters["@고유번호"].Value = GUID;
                    cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                    cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                    try
                    {
                        conn.Open();
                        dr = cmd.ExecuteReader();

                        if (dr.Read())
                        {
                            ITEM = dr["품목코드"].ToString();
                            KIND = dr["구분"].ToString();
                            AgentNumber = dr["거래처번호"].ToString();
                            BookerName = dr["예약자명"].ToString();
                            AgentName = dr["거래처명"].ToString();
                            PaxName = dr["고객명"].ToString();
                            TicketNumber = dr["티켓번호"].ToString();
                            MKEY = dr["고유키"].ToString();
                            MINFO = dr["파라미터"].ToString();
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new Exception(ex.ToString());
                    }
                    finally
                    {
                        dr.Dispose();
                        dr.Close();
                        conn.Close();
                    }
                }

                if (KIND.Equals("RC"))
                    return String.Format("http://airservice2.modetour.com/ETicket/ReceiptEmailPage.aspx?MINFO={0}&ANM={1}&BookerName={2}", Server.UrlEncode(aes.AESEncrypt(AES256Cipher.KeyName(2), MINFO)), Server.UrlEncode(AgentName), Server.UrlEncode(BookerName));
                else
                {
                    if (ITEM.Equals("GA"))
                        return String.Format("http://airservice2.modetour.com/ETicket/ETicketEmailPage.aspx?MINFO={0}&ANM={1}&PaxName={2}&TicketNumber={3}", Server.UrlEncode(aes.AESEncrypt(AES256Cipher.KeyName(2), MINFO)), Server.UrlEncode(AgentName), Server.UrlEncode(PaxName), Server.UrlEncode(TicketNumber));
                    else
                        return String.Format("http://airservice2.modetour.com/ETicket/ETicketEmailPage.aspx?MINFO={0}&ANM={1}&PaxName={2}&AID={3}", Server.UrlEncode(aes.AESEncrypt(AES256Cipher.KeyName(2), MINFO)), Server.UrlEncode(AgentName), Server.UrlEncode(PaxName), AgentNumber);
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }
        }

        /// <summary>
        /// E-Ticket/Receipt 발송 정보 저장
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="ITEM">품목코드(IA:해외항공, GA:그룹항공, DA:국내항공)</param>
        /// <param name="KIND">구분(ET:이티켓, RC:영수증)</param>
        /// <param name="GDS">GDS명</param>
        /// <param name="PNR">PNR번호</param>
        /// <param name="PaxName">탑승객명(ex HONG/GILDONGMR)</param>
        /// <param name="TicketNumber">티켓번호</param>
        /// <param name="EMail">이티켓을 받을 이메일주소</param>
        /// <param name="AgentInfo">거래처정보(ex 거래처명 거래처직원명 (tel 연락처))(공백일 경우에는 모두투어 정보 출력)</param>
        /// <param name="Logo">Logo URL(로고 미출력시에는 'X' 입력, 공백일 경우에는 모두투어 로고 출력)</param>
        /// <param name="RIP">요청자IP</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="URL">이티켓 URL</param>
        /// <returns></returns>
        //[WebMethod(Description = "E-Ticket/Receipt 발송 정보 저장")]
        public string SendETicketDocDB(int SNM, int OID, int PID, string ITEM, string KIND, string GDS, string PNR, string PaxName, string TicketNumber, string EMail, string AgentInfo, string Logo, string RIP, int RQR, string RQT, string URL)
        {
            try
            {
                string BookerName = string.Empty;
                string AgentNumber = string.Empty;
                string AgentName = string.Empty;
                string MKEY = string.Empty;
                string MINFO = string.Empty;
                
                using (SqlCommand cmd = new SqlCommand())
                {
                    SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["WSVLOG"].ConnectionString);
                    SqlDataReader dr = null;

                    cmd.Connection = conn;
                    cmd.CommandTimeout = 30;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = "DBO.WSV_T_이티켓발송";

                    cmd.Parameters.Add("@품목코드", SqlDbType.Char, 2);
                    cmd.Parameters.Add("@구분", SqlDbType.Char, 2);
                    cmd.Parameters.Add("@사이트번호", SqlDbType.Int, 0);
                    cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                    cmd.Parameters.Add("@주문아이템번호", SqlDbType.Int, 0);
                    cmd.Parameters.Add("@예약자번호", SqlDbType.Int, 0);
                    cmd.Parameters.Add("@GDS", SqlDbType.VarChar, 10);
                    cmd.Parameters.Add("@PNR", SqlDbType.VarChar, 10);
                    cmd.Parameters.Add("@탑승객명", SqlDbType.NVarChar, 100);
                    cmd.Parameters.Add("@티켓번호", SqlDbType.VarChar, 20);
                    cmd.Parameters.Add("@거래처정보", SqlDbType.VarChar, 100);
                    cmd.Parameters.Add("@로고", SqlDbType.VarChar, 500);
                    cmd.Parameters.Add("@이메일", SqlDbType.VarChar, 50);
                    cmd.Parameters.Add("@URL", SqlDbType.VarChar, 500);
                    cmd.Parameters.Add("@요청자IP", SqlDbType.VarChar, 20);
                    cmd.Parameters.Add("@요청자번호", SqlDbType.Int, 0);
                    cmd.Parameters.Add("@요청단말기", SqlDbType.VarChar, 20);
                    cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                    cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                    cmd.Parameters["@품목코드"].Value = ITEM;
                    cmd.Parameters["@구분"].Value = KIND;
                    cmd.Parameters["@사이트번호"].Value = SNM;
                    cmd.Parameters["@주문번호"].Value = OID;
                    cmd.Parameters["@주문아이템번호"].Value = Convert.DBNull;
                    cmd.Parameters["@예약자번호"].Value = PID;
                    cmd.Parameters["@GDS"].Value = GDS;
                    cmd.Parameters["@PNR"].Value = PNR;
                    cmd.Parameters["@탑승객명"].Value = PaxName;
                    cmd.Parameters["@티켓번호"].Value = TicketNumber;
                    cmd.Parameters["@거래처정보"].Value = AgentInfo;
                    cmd.Parameters["@로고"].Value = Logo;
                    cmd.Parameters["@이메일"].Value = EMail;
                    cmd.Parameters["@URL"].Value = URL;
                    cmd.Parameters["@요청자IP"].Value = RIP;
                    cmd.Parameters["@요청자번호"].Value = RQR;
                    cmd.Parameters["@요청단말기"].Value = RQT;
                    cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                    cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                    try
                    {
                        conn.Open();
                        dr = cmd.ExecuteReader();

                        if (dr.Read())
                        {
                            AgentNumber = dr["거래처번호"].ToString();
                            BookerName = dr["예약자명"].ToString();
                            AgentName = dr["거래처명"].ToString();
                            MKEY = dr["고유키"].ToString();
                            MINFO = dr["파라미터"].ToString();
                        }
                    }
                    catch (Exception ex)
                    {
                        throw new Exception(ex.ToString());
                    }
                    finally
                    {
                        dr.Dispose();
                        dr.Close();
                        conn.Close();
                    }
                }

                if (KIND.Equals("RC"))
                    return String.Format("http://airservice2.modetour.com/ETicket/ReceiptEmailPage.aspx?MINFO={0}&ANM={1}&BookerName={2}", Server.UrlEncode(aes.AESEncrypt(AES256Cipher.KeyName(2), MINFO)), Server.UrlEncode(AgentName), Server.UrlEncode(BookerName));
                else
                {
                    if (ITEM.Equals("GA"))
                        return String.Format("http://airservice2.modetour.com/ETicket/ETicketEmailPage.aspx?MINFO={0}&ANM={1}&PaxName={2}&TicketNumber={3}", Server.UrlEncode(aes.AESEncrypt(AES256Cipher.KeyName(2), MINFO)), Server.UrlEncode(AgentName), Server.UrlEncode(PaxName), Server.UrlEncode(TicketNumber));
                    else
                        return String.Format("http://airservice2.modetour.com/ETicket/ETicketEmailPage.aspx?MINFO={0}&ANM={1}&PaxName={2}&AID={3}", Server.UrlEncode(aes.AESEncrypt(AES256Cipher.KeyName(2), MINFO)), Server.UrlEncode(AgentName), Server.UrlEncode(PaxName), AgentNumber);
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString());
            }
        }

        /// <summary>
        /// 탑승객별 E-Ticket 이메일 발송용 양식
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="GDS">GDS명</param>
        /// <param name="PNR">PNR번호</param>
        /// <param name="PaxName">탑승객명(ex HONG/GILDONGMR)</param>
        /// <param name="EMail">이티켓을 받을 이메일주소</param>
        /// <param name="AgentInfo">거래처정보(ex 거래처명 거래처직원명 (tel 연락처))(공백일 경우에는 모두투어 정보 출력)</param>
        /// <param name="Logo">Logo URL(로고 미출력시에는 'X' 입력, 공백일 경우에는 모두투어 로고 출력)</param>
        /// <param name="RIP">요청자IP</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "탑승객별 E-Ticket 이메일 발송용 양식")]
        public string SendETicketForm(int SNM, int OID, int PID, string GDS, string PNR, string PaxName, string EMail, string AgentInfo, string Logo, string RIP, int RQR, string RQT)
        {
            int ServiceNumber = 520;
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청10", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = ServiceNumber;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = GDS;
                sqlParam[12].Value = PNR;
                sqlParam[13].Value = PaxName;
                sqlParam[14].Value = EMail;
                sqlParam[15].Value = AgentInfo;
                sqlParam[16].Value = Logo;
                sqlParam[17].Value = RIP;
                sqlParam[18].Value = RQR;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                string URL = string.Empty;
                
                if (String.IsNullOrWhiteSpace(PaxName))
                    throw new Exception("탑승객명을 입력하세요.");
                else if (String.IsNullOrWhiteSpace(EMail))
                    throw new Exception("이티켓을 수신할 이메일 주소를 입력하세요.");

                if (OID > 0 && PID > 0)
                    URL = String.Format("http://airservice2.modetour.com/ETicket/ETicket.aspx?OID={0}&PID={1}&PaxName={2}&AgentInfo={3}&Logo={4}&RIP=", OID, PID, PaxName, AgentInfo, Logo);
                else if (SNM > 0 && !String.IsNullOrWhiteSpace(GDS) && !String.IsNullOrWhiteSpace(PNR))
                    URL = String.Format("http://airservice2.modetour.com/ETicket/ETicket.aspx?SNM={0}&GDS={1}&PNR={2}&PaxName={3}&AgentInfo={4}&Logo={5}&RIP=", SNM, GDS, PNR, PaxName, AgentInfo, Logo);
                else
                    throw new Exception("OID와 PID를 모두 입력하거나, SNM, GDS, PNR을 모두 입력해야 합니다.");
                
                return SendETicketDocDB(SNM, OID, PID, "IA", "ET", GDS, PNR, PaxName, "", EMail, AgentInfo, Logo, RIP, RQR, RQT, URL);
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, OID, 0).ToString;
            }
        }

        /// <summary>
        /// 탑승객별 E-Ticket 이메일 발송용 양식(그룹용)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="PaxName">탑승객명(ex HONG/GILDONGMR)</param>
        /// <param name="TicketNumber">티켓번호</param>
        /// <param name="EMail">이티켓을 받을 이메일주소</param>
        /// <param name="RIP">요청자IP</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "탑승객별 E-Ticket 이메일 발송용 양식(그룹용)")]
        public string SendETicketGroupForm(int SNM, int OID, int PID, string PaxName, string TicketNumber, string EMail, string RIP, int RQR, string RQT)
        {
            int ServiceNumber = 547;
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = ServiceNumber;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = PaxName;
                sqlParam[12].Value = TicketNumber;
                sqlParam[13].Value = EMail;
                sqlParam[14].Value = RIP;
                sqlParam[15].Value = RQR;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                string URL = string.Empty;

                if (String.IsNullOrWhiteSpace(TicketNumber))
                    throw new Exception("13자리 티켓번호를 입력하세요.");
                else if (String.IsNullOrWhiteSpace(EMail))
                    throw new Exception("이티켓을 수신할 이메일 주소를 입력하세요.");

                if (OID > 0 && PID > 0)
                    URL = String.Format("http://airservice2.modetour.com/ETicket/ETicket.aspx?OID={0}&PID={1}&PaxName={2}&TicketNumber={3}&Item=GA&RIP=", OID, PID, PaxName, TicketNumber);
                else
                    throw new Exception("OID와 PID를 모두 입력해야 합니다.");

                return SendETicketDocDB(SNM, OID, PID, "GA", "ET", "", "", PaxName, TicketNumber, EMail, "", "", RIP, RQR, RQT, URL);
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, OID, 0).ToString;
            }
        }

        /// <summary>
        /// 탑승객별 E-Ticket 이메일 발송용 양식
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="GDS">GDS명</param>
        /// <param name="PNR">PNR번호</param>
        /// <param name="PaxName">탑승객명(ex HONG/GILDONGMR)</param>
        /// <param name="EMail">이티켓을 받을 이메일주소</param>
        /// <param name="AgentInfo">거래처정보(ex 거래처명 거래처직원명 (tel 연락처))(공백일 경우에는 모두투어 정보 출력)</param>
        /// <param name="Logo">Logo URL(로고 미출력시에는 'X' 입력, 공백일 경우에는 모두투어 로고 출력)</param>
        /// <param name="RIP">요청자IP</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "탑승객별 E-Ticket 이메일 발송")]
        public XmlElement SendETicketRS(int SNM, int OID, int PID, string GDS, string PNR, string PaxName, string EMail, string AgentInfo, string Logo, string RIP, int RQR, string RQT)
        {
            int ServiceNumber = 519;
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청8", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청9", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청10", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = ServiceNumber;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = GDS;
                sqlParam[12].Value = PNR;
                sqlParam[13].Value = PaxName;
                sqlParam[14].Value = EMail;
                sqlParam[15].Value = AgentInfo;
                sqlParam[16].Value = Logo;
                sqlParam[17].Value = RIP;
                sqlParam[18].Value = RQR;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
            {
                return new ModeWebService.MailService.MailService().EMailSend("", "", "mailsender@modetour.com", "(주)모두투어네트워크[발신전용메일]", EMail, "", String.Concat(PaxName, "님의 전자항공권 발행확인서/e-Ticket Itinerary & Receipt 입니다."), "", "", SendETicketForm(SNM, OID, PID, GDS, PNR, PaxName, EMail, AgentInfo, Logo, RIP, RQR, RQT));
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, OID, 0).ToErrors;
            }
        }

        /// <summary>
        /// 탑승객별 E-Ticket 이메일 발송
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="PaxName">탑승객명(ex HONG/GILDONGMR)</param>
        /// <param name="TicketNumber">티켓번호</param>
        /// <param name="EMail">ITR을 받을 이메일주소</param>
        /// <returns></returns>
        [WebMethod(Description = "탑승객별 E-Ticket 이메일 발송")]
        public XmlElement SendETicketDocRS(int OID, int PID, string PaxName, string TicketNumber, string EMail)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 43;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = PaxName;
                sqlParam[12].Value = EMail;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                return new ModeWebService.MailService.MailService().EMailSend("", "", "mailsender@modetour.com", "(주)모두투어네트워크[발신전용메일]", EMail, "", String.Concat(PaxName, "님의 전자항공권 발행확인서/e-Ticket Itinerary & Receipt 입니다."), "", "", SendETicketDocDB(0, OID, PID, "IA", "ET", "", "", PaxName, TicketNumber, EMail, "", "", "", 0, "", String.Format("http://airservice2.modetour.com/ETicket/ETicket.aspx?OID={0}&PID={1}&PaxName={2}&TicketNumber={3}&RIP=", OID, PID, PaxName, TicketNumber)));
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("PaxName", PaxName);
                ex.Data.Add("EMail", EMail);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 43, OID, 0).ToErrors;
            }
        }

        /// <summary>
        /// 탑승객별 E-Ticket 이메일 발송(거래처정보 직접 셋팅)
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="PaxName">탑승객명(ex HONG/GILDONGMR)</param>
        /// <param name="EMail">ITR을 받을 이메일주소</param>
        /// <param name="AgentInfo">거래처정보(ex 거래처명 거래처직원명 (tel 연락처))</param>
        /// <returns></returns>
        [WebMethod(Description = "탑승객별 E-Ticket 이메일 발송(거래처정보 직접 셋팅)")]
        public XmlElement SendETicketDoc2RS(int OID, int PID, string PaxName, string EMail, string AgentInfo)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 476;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = PaxName;
                sqlParam[12].Value = EMail;
                sqlParam[13].Value = AgentInfo;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //return new ModeWebService.MailService.MailService().EMailSend("", "", "mailsender@modetour.com", "(주)모두투어네트워크[발신전용메일]", EMail, "", String.Concat(PaxName, "님의 전자항공권 발행확인서/e-Ticket Itinerary & Receipt 입니다."), "", "", String.Format("http://airservice2.modetour.com/ETicket/ETicket.aspx?OID={0}&PID={1}&PaxName={2}&AgentInfo={3}&RIP=", OID, PID, PaxName, AgentInfo));
                return new ModeWebService.MailService.MailService().EMailSend("", "", "mailsender@modetour.com", "(주)모두투어네트워크[발신전용메일]", EMail, "", String.Concat(PaxName, "님의 전자항공권 발행확인서/e-Ticket Itinerary & Receipt 입니다."), "", "", SendETicketDocDB(0, OID, PID, "IA", "ET", "", "", PaxName, "", EMail, AgentInfo, "", "", 0, "", String.Format("http://airservice2.modetour.com/ETicket/ETicket.aspx?OID={0}&PID={1}&PaxName={2}&AgentInfo={3}&RIP=", OID, PID, PaxName, AgentInfo)));
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("PaxName", PaxName);
                ex.Data.Add("EMail", EMail);
                ex.Data.Add("AgentInfo", AgentInfo);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 476, OID, 0).ToErrors;
            }
        }

        /// <summary>
        /// 탑승객별 E-Ticket 이메일 발송(PNR정보 이용)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="GDS">GDS명</param>
        /// <param name="PNR">PNR번호</param>
        /// <param name="PaxName">탑승객명(ex HONG/GILDONGMR)</param>
        /// <param name="TicketNumber">티켓번호</param>
        /// <param name="EMail">ITR을 받을 이메일주소</param>
        /// <returns></returns>
        [WebMethod(Description = "탑승객별 E-Ticket 이메일 발송")]
        public XmlElement SendETicketDocPNRRS(int SNM, string GDS, string PNR, string PaxName, string TicketNumber, string EMail)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 42;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = GDS;
                sqlParam[8].Value = PNR;
                sqlParam[9].Value = PaxName;
                sqlParam[10].Value = EMail;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                return new ModeWebService.MailService.MailService().EMailSend("", "", "mailsender@modetour.com", "(주)모두투어네트워크[발신전용메일]", EMail, "", String.Concat(PaxName, "님의 전자항공권 발행확인서/e-Ticket Itinerary & Receipt 입니다."), "", "", SendETicketDocDB(SNM, 0, 0, "IA", "ET", GDS, PNR, PaxName, TicketNumber, EMail, "", "", "", 0, "", String.Format("http://airservice2.modetour.com/ETicket/ETicket.aspx?SNM={0}&GDS={1}&PNR={2}&PaxName={3}&TicketNumber={4}&RIP=", SNM, GDS, PNR, PaxName, TicketNumber)));
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("SNM", SNM);
                ex.Data.Add("GDS", GDS);
                ex.Data.Add("PNR", PNR);
                ex.Data.Add("PaxName", PaxName);
                ex.Data.Add("EMail", EMail);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 42, 0, 0).ToErrors;
            }
        }

        /// <summary>
        /// 탑승객별 E-Ticket 이메일 발송(PNR정보 이용)(거래처정보 직접 셋팅)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="GDS">GDS명</param>
        /// <param name="PNR">PNR번호</param>
        /// <param name="PaxName">탑승객명(ex HONG/GILDONGMR)</param>
        /// <param name="EMail">ITR을 받을 이메일주소</param>
        /// <param name="AgentInfo">거래처정보(ex 거래처명 거래처직원명 (tel 연락처))</param>
        /// <returns></returns>
        [WebMethod(Description = "탑승객별 E-Ticket 이메일 발송(PNR정보 이용)(거래처정보 직접 셋팅)")]
        public XmlElement SendETicketDocPNR2RS(int SNM, string GDS, string PNR, string PaxName, string EMail, string AgentInfo)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 475;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = GDS;
                sqlParam[8].Value = PNR;
                sqlParam[9].Value = PaxName;
                sqlParam[10].Value = EMail;
                sqlParam[11].Value = AgentInfo;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //return new ModeWebService.MailService.MailService().EMailSend("", "", "mailsender@modetour.com", "(주)모두투어네트워크[발신전용메일]", EMail, "", String.Concat(PaxName, "님의 전자항공권 발행확인서/e-Ticket Itinerary & Receipt 입니다."), "", "", String.Format("http://airservice2.modetour.com/ETicket/ETicket.aspx?SNM={0}&GDS={1}&PNR={2}&PaxName={3}&AgentInfo={4}&RIP=", SNM, GDS, PNR, PaxName, AgentInfo));
                return new ModeWebService.MailService.MailService().EMailSend("", "", "mailsender@modetour.com", "(주)모두투어네트워크[발신전용메일]", EMail, "", String.Concat(PaxName, "님의 전자항공권 발행확인서/e-Ticket Itinerary & Receipt 입니다."), "", "", SendETicketDocDB(SNM, 0, 0, "IA", "ET", GDS, PNR, PaxName, "", EMail, AgentInfo, "", "", 0, "", String.Format("http://airservice2.modetour.com/ETicket/ETicket.aspx?SNM={0}&GDS={1}&PNR={2}&PaxName={3}&AgentInfo={4}&RIP=", SNM, GDS, PNR, PaxName, AgentInfo)));
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("SNM", SNM);
                ex.Data.Add("GDS", GDS);
                ex.Data.Add("PNR", PNR);
                ex.Data.Add("PaxName", PaxName);
                ex.Data.Add("EMail", EMail);
                ex.Data.Add("AgentInfo", AgentInfo);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 475, 0, 0).ToErrors;
            }
        }

        #endregion "ETicket 이메일 발송"

        #region "카드전표 이메일 발송"

        /// <summary>
        /// 카드전표 이메일 발송용 양식
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="EMail">이티켓을 받을 이메일주소</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "카드전표 이메일 발송용 양식")]
        public XmlElement SendReceiptForm(int SNM, int OID, int PID, string EMail, int RQR, string RQT)
        {
            int ServiceNumber = 531;
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = ServiceNumber;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = EMail;
                sqlParam[12].Value = RQR;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                string URL = string.Empty;

                if (String.IsNullOrWhiteSpace(EMail))
                    throw new Exception("카드전표를 수신할 이메일 주소를 입력하세요.");

                if (OID > 0 && PID > 0)
                    URL = String.Format("http://airservice2.modetour.com/ETicket/Receipt.aspx?OID={0}&PID={1}", OID, PID);
                else
                    throw new Exception("OID와 PID를 모두 입력해야 합니다.");

                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.LoadXml(String.Format("<receipt><![CDATA[{0}]]></receipt>", SendETicketDocDB(SNM, OID, PID, "IA", "RC", "", "", "", "", EMail, "", "", "", RQR, RQT, URL)));

                return XmlDoc.DocumentElement;
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, ServiceNumber, OID, 0).ToErrors;
            }
        }

        #endregion "카드전표 이메일 발송"

        #region "ITR"

        //[WebMethod(Description = "ITR 발행")]
		public string ITRSend(int SNM, string PNR, string EMail, string GUID)
		{
			string SID = String.Empty;
			string SCT = String.Empty;
			int SQN = 0;

			try
			{
				//결과
				XmlElement ResXml;

				//### 01.세션생성 #####
				XmlElement Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));

				SID = Session.SelectSingleNode("session/sessionId").InnerText;
				SCT = Session.SelectSingleNode("session/securityToken").InnerText;
				SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

				//### 02.PNR조회(Command_Cryptic) #####
				ResXml = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), String.Concat("RT", PNR));

				//### 03.ITR발행(Command_Cryptic) #####
				ResXml = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), String.Concat("ITR-EML-", EMail.ToUpper()));

				//### 04.세션종료 #####
				SQN = amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"));

				return "ITINERARY RECEIPT EMAIL SENT";
			}
			catch (Exception ex)
			{
				//### 세션종료 #####
				if (SQN > 0)
					amd.SignOut(SID, (++SQN).ToString(), SCT, GUID);

                return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0).Message;
			}
		}

		/// <summary>
		/// ITR 발송
		/// </summary>
		/// <param name="OID">모두투어 주문번호</param>
		/// <param name="PID">예약자번호(PTID)</param>
		/// <param name="EMail">ITR을 받을 이메일주소</param>
		/// <returns></returns>
		[WebMethod(Description = "ITR 발송")]
		public string SendITR(int OID, int PID, string EMail)
		{
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 44;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = EMail;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
			{
				//DB에 저장된 예약정보
				XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");

				if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
				{
					if (String.Compare(XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText, "Amadeus", true).Equals(0))
                        return ITRSend(cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText, EMail, LogGUID);
					else
						throw new Exception("서비스가 제공되지 않는 GDS입니다.");
				}
				else
					throw new Exception("예약 정보가 존재하지 않습니다.");
			}
			catch (Exception ex)
			{
				ex.Data.Clear();
				ex.Data.Add("OID", OID);
				ex.Data.Add("PID", PID);
				ex.Data.Add("EMail", EMail);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 44, OID, 0).Message;
			}
		}

		/// <summary>
		/// ITR(E-Ticket) 조회
		/// </summary>
		/// <param name="OID">모두투어 주문번호</param>
		/// <param name="PID">예약자번호(PTID)</param>
		/// <param name="PAX">승객명(PNR에 기재된 것과 동일하게 입력)(ex: HONG/GILDONGMR, Title 포함)</param>
		/// <param name="SDate">여정의 첫번째 출발일</param>
		/// <param name="EML">ITR 발송 여부</param>
		/// <returns>E-Ticket URL</returns>
		[WebMethod(Description = "ITR 조회")]
		public string SearchITR(int OID, int PID, string PAX, string SDate, string EML)
		{
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 34;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = PAX;
                sqlParam[12].Value = SDate;
                sqlParam[13].Value = EML;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
			{
				//DB에 저장된 예약정보
				XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");

				if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
				{
					string PNR = XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText;

					if (String.Compare(XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText, "Amadeus", true).Equals(0))
					{
						if (EML.Equals("Y"))
						{
                            //ITRSend(cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), PNR, XmlDBBooking.SelectSingleNode("item1/이메일").InnerText, LogGUID);
                            ITRSend(cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), PNR, "HARIUS@MODETOUR.COM", LogGUID);
						}

						return amd.SearchDocData(0, "ITR", "URL", PNR, "", PAX, (cm.IsDateTime(SDate)) ? cm.AbacusDateTime(SDate) : "");
					}
					else
						throw new Exception("서비스가 제공되지 않는 GDS입니다.");
				}
				else
					throw new Exception("예약 정보가 존재하지 않습니다.");
			}
			catch (Exception ex)
			{
				ex.Data.Clear();
				ex.Data.Add("OID", OID);
				ex.Data.Add("PID", PID);
				ex.Data.Add("PAX", PAX);
				ex.Data.Add("SDate", SDate);
				ex.Data.Add("EML", EML);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 34, OID, 0).Message;
			}
		}

        #endregion "ITR"

        #region "Agent Coupon 조회"

        /// <summary>
        /// Agent Coupon 조회
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="TicketNumber">티켓번호</param>
        /// <returns></returns>
        [WebMethod(Description = "Agent Coupon 조회")]
        public string SearchAgentCoupon(int OID, int PID, string TicketNumber)
        {
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 356;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = TicketNumber;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    if (String.Compare(XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText, "Amadeus", true).Equals(0))
                    {
                        return amd.SearchDocData(cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), "TKT", "URL", "", TicketNumber, "", "");
                    }
                    else
                        throw new Exception("서비스가 제공되지 않는 GDS입니다.");
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("TicketNumber", TicketNumber);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 356, OID, 0).Message;
            }
        }

        #endregion "Agent Coupon 조회"

        #region "프로모션"

        /// <summary>
		/// 프로모션 리스트
		/// </summary>
		/// <param name="SNM">사이트 번호</param>
		/// <param name="DLC">출발지 공항 코드</param>
		/// <param name="ALC">도착지 공항 코드</param>
		/// <param name="ROT">구간(OW:편도, RT:왕복, DT:출도착이원구간, MD:다구간)></param>
		/// <param name="DTD">출발일(YYYY-MM-DD)</param>
		/// <param name="ARD">도착일(YYYY-MM-DD)</param>
		/// <param name="OPN">오픈여부(YN)</param>
		/// <param name="CCD">캐빈 클래스(Y:일반석, C:비즈니스석, F:일등석)</param>
		/// <param name="PTC">탑승객 타입 코드</param>
		/// <returns></returns>
		public static XmlElement SearchPromotionList(int SNM, string DLC, string ALC, string ROT, string DTD, string ARD, string OPN, string CCD, string PTC)
		{
			XmlDocument XmlDoc = new XmlDocument();

            using (SqlCommand cmd = new SqlCommand())
            {
                using (SqlDataAdapter adp = new SqlDataAdapter(cmd))
                {
                    using (DataSet ds = new DataSet("promotionInfo"))
                    {
                        cmd.Connection = new SqlConnection(ConfigurationManager.ConnectionStrings["NEWEAGLE"].ConnectionString);
                        cmd.CommandTimeout = 60;
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.CommandText = "DBO.WSP_S_항공할인2";

                        cmd.Parameters.Add("@SNM", SqlDbType.Int, 0);
                        cmd.Parameters.Add("@DLC", SqlDbType.VarChar, 20);
                        cmd.Parameters.Add("@ALC", SqlDbType.VarChar, 20);
                        cmd.Parameters.Add("@ROT", SqlDbType.Char, 2);
                        cmd.Parameters.Add("@DTD", SqlDbType.VarChar, 20);
                        cmd.Parameters.Add("@ARD", SqlDbType.VarChar, 20);
                        cmd.Parameters.Add("@OPN", SqlDbType.Char, 1);
                        cmd.Parameters.Add("@CCD", SqlDbType.Char, 1);
                        cmd.Parameters.Add("@PTC", SqlDbType.Char, 3);

                        cmd.Parameters["@SNM"].Value = SNM;
                        cmd.Parameters["@DLC"].Value = DLC;
                        cmd.Parameters["@ALC"].Value = ALC;
                        cmd.Parameters["@ROT"].Value = ROT;
                        cmd.Parameters["@DTD"].Value = DTD;
                        cmd.Parameters["@ARD"].Value = ARD;
                        cmd.Parameters["@OPN"].Value = OPN;
                        cmd.Parameters["@CCD"].Value = CCD;
                        cmd.Parameters["@PTC"].Value = PTC;

                        adp.Fill(ds, "item");

                        XmlDoc.LoadXml(ds.GetXml().Replace(" xml:space=\"preserve\"", "").Replace("&lt;", "<").Replace("&gt;", ">"));
                        ds.Clear();
                    }
                }
            }

			return XmlDoc.DocumentElement;
		}

		/// <summary>
		/// 프로모션 상세정보
		/// </summary>
		/// <param name="PMID">프로모션 번호</param>
		/// <returns></returns>
		[WebMethod(Description = "프로모션 상세정보")]
		public XmlElement SearchPromotionDetail(int PMID)
		{
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 35;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = PMID;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                XmlDocument XmlDoc = new XmlDocument();

                using (SqlCommand cmd = new SqlCommand())
                {
                    using (SqlDataAdapter adp = new SqlDataAdapter(cmd))
                    {
                        using (DataSet ds = new DataSet("promotionInfo"))
                        {
                            cmd.Connection = new SqlConnection(ConfigurationManager.ConnectionStrings["NEWEAGLE"].ConnectionString);
                            cmd.CommandTimeout = 60;
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.CommandText = "DBO.WSP_S_항공할인_할인번호";

                            cmd.Parameters.Add("@할인번호", SqlDbType.Int, 0);
                            cmd.Parameters["@할인번호"].Value = PMID;

                            adp.Fill(ds, "item");

                            XmlDoc.LoadXml(ds.GetXml().Replace(" xml:space=\"preserve\"", ""));
                            ds.Clear();
                        }
                    }
                }

                return XmlDoc.DocumentElement;
            }
            catch (Exception ex)
            {
                return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0).ToErrors;
            }
		}

		#endregion "프로모션"

        #region "카드인증"

        /// <summary>
        /// 이니시스 카드 인증
        /// </summary>
        /// <param name="Owner">소유자명</param>
        /// <param name="CardNumber">카드번호</param>
        /// <param name="ValidThru">유효기간(YYYYMM OR YYMM)</param>
        /// <param name="IDNumbers">개인(생년월일 6자리)(YYMMDD) / 법인(사업자번호 10자리)</param>
        /// <param name="Password">비밀번호 앞2자리</param>
        /// <returns></returns>
        [WebMethod(Description = "이니시스 카드 인증(CRS)")]
        public XmlElement CardCheckInicis(string Owner, string CardNumber, string ValidThru, string IDNumbers, string Password)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 354;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = Owner;
                sqlParam[8].Value = CardNumber;
                sqlParam[9].Value = ValidThru;
                sqlParam[10].Value = IDNumbers;
                sqlParam[11].Value = Password;

                log.LogDBSave(sqlParam);
            }
            finally { }

            try
            {
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.LoadXml(String.Format("<m:CardCheckInicis xmlns:m=\"http://tempuri.org/\"><m:CNM>{0}</m:CNM><m:CDN>{1}</m:CDN><m:CVT>{2}</m:CVT><m:CJN>{3}</m:CJN><m:CPW>{4}</m:CPW></m:CardCheckInicis>", Owner, CardNumber, ValidThru, IDNumbers, Password));

                return new AirWebService.InicisWEB.ModeCrsService().ServiceRQ(XmlDoc.DocumentElement);
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 354, 0, 0).ToErrors;
            }
        }

        /// <summary>
        /// 이니시스 카드 인증
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="Owner">소유자명</param>
        /// <param name="CardNumber">카드번호</param>
        /// <param name="ValidThru">유효기간(YYYYMM OR YYMM OR MM/YY)</param>
        /// <param name="IDNumbers">개인(생년월일 6자리)(YYMMDD) / 법인(사업자번호 10자리)</param>
        /// <param name="Password">비밀번호 앞2자리</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="RIP">요청자IP</param>
        /// <returns></returns>
        [WebMethod(Description = "이니시스 카드 인증(WEB)")]
        public XmlElement CardCheckInicis2(int SNM, string Owner, string CardNumber, string ValidThru, string IDNumbers, string Password, string RQT, string RIP)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 660;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = RQT;
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = Owner;
                sqlParam[8].Value = CardNumber;
                sqlParam[9].Value = ValidThru;
                sqlParam[10].Value = IDNumbers;
                sqlParam[11].Value = Password;
                sqlParam[12].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            finally { }

            try
            {
                string ExpY = string.Empty;
                string ExpM = string.Empty;

                if (ValidThru.IndexOf('/') != -1)
                {
                    ExpY = ValidThru.Substring(3, 2);
                    ExpM = ValidThru.Substring(0, 2);
                }
                else
                {
                    ExpY = ValidThru.Length.Equals(6) ? ValidThru.Substring(2, 2) : ValidThru.Substring(0, 2);
                    ExpM = ValidThru.Length.Equals(6) ? ValidThru.Substring(4, 2) : ValidThru.Substring(2, 2);
                }

                return XmlRequest.SendJsonToXml("https://credit.modetour.com/api/CardCheck", "POST", String.Format("{{\"Name\":\"{0}\",\"CardNo\":\"{1}\",\"ExpM\":\"{2}\",\"ExpY\":\"{3}\",\"Auth1\":\"{4}\",\"Auth2\":\"{5}\",\"Uip\":\"{6}\"}}", aes.AESEncrypt("2", Owner), aes.AESEncrypt("2", CardNumber), aes.AESEncrypt("2", ExpM), aes.AESEncrypt("2", ExpY), aes.AESEncrypt("2", IDNumbers), aes.AESEncrypt("2", Password), aes.AESEncrypt("2", RIP)));
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 660, 0, 0).ToErrors;
            }
        }

        /// <summary>
        /// 카드사 BIN번호 조회
        /// </summary>
        /// <param name="CardNumber">카드번호(하이픈 제외, 최대 앞 7자리까지)</param>
        /// <returns></returns>
        [WebMethod(Description = "카드사 BIN번호 조회")]
        public XmlElement CardCheckBin(string CardNumber)
        {
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 353;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = CardNumber;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
            {
                XmlDocument XmlDoc = new XmlDocument();

                using (SqlCommand cmd = new SqlCommand())
                {
                    using (SqlDataAdapter adp = new SqlDataAdapter(cmd))
                    {
                        using (DataSet ds = new DataSet("cardInfo"))
                        {
                            cmd.Connection = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString);
                            cmd.CommandTimeout = 60;
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.CommandText = "DBO.WSV_S_카드사정보";

                            cmd.Parameters.Add("@카드번호", SqlDbType.VarChar, 5);
                            cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                            cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                            cmd.Parameters["@카드번호"].Value = Common.ConvertToOnlyNumber(CardNumber);
                            cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                            adp.Fill(ds, "card");

                            XmlDoc.LoadXml(ds.GetXml().Replace(" xml:space=\"preserve\"", ""));
                            ds.Clear();
                        }
                    }
                }

                return XmlDoc.DocumentElement;
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 353, 0, 0).ToErrors;
            }
        }

        #endregion "카드인증"

        #region "이메일 발송"

        /// <summary>
		/// 예약에 대한 이메일 리스트
		/// </summary>
		/// <param name="OID">모두투어 주문번호</param>
		/// <param name="PID">예약자 PTID</param>
		/// <returns></returns>
		private XmlElement BookEmailList(int OID, int PID)
		{
			XmlDocument XmlEmail = new XmlDocument();

			string conStr = ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString;
			SqlConnection conn = new SqlConnection(conStr);
			SqlCommand cmd = new SqlCommand();

			cmd.Connection = conn;
			cmd.CommandTimeout = 60;
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "DBO.WSV_S_예약이메일";

			cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
			cmd.Parameters.Add("@예약자번호", SqlDbType.Int, 0);

			cmd.Parameters["@주문번호"].Value = OID;
			cmd.Parameters["@예약자번호"].Value = PID;

			try
			{
				conn.Open();
				XmlEmail.LoadXml(cmd.ExecuteScalar().ToString());
			}
			finally { conn.Close(); }

			return XmlEmail.DocumentElement;
		}

		/// <summary>
		/// 예약내용 이메일 발송
		/// </summary>
		/// <param name="OID">모두투어 주문번호</param>
		/// <param name="PID">예약자 PTID</param>
		/// <param name="Title">이메일 제목</param>
		/// <param name="URL">이메일내용으로 변환시킬 웹페이지</param>
		/// <returns></returns>
		[WebMethod(Description = "예약내용 이메일 발송")]
		public XmlElement BookingEMailSend(int OID, int PID, string Title, string URL)
		{
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 4;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = Title;
                sqlParam[12].Value = URL;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            return new ModeWebService.MailService.MailService().EMailSendOnly2("IA2", "", BookEmailList(OID, PID), cm.RequestString(Title, "해외항공이 예약되었습니다."), "", "", URL);
		}

		/// <summary>
		/// 이메일 발송
		/// </summary>
		/// <param name="SiteNo">웹사이트 번호</param>
		/// <param name="FromAddr">발신자 이메일 주소</param>
		/// <param name="FromName">발신자 이름</param>
		/// <param name="ToAddr">수신자 이메일 주소(하나 이상일 경우 콤마(,)로 구분)</param>
		/// <param name="ToName">수신자 이름(하나 이상일 경우 콤마(,)로 구분)</param>
		/// <param name="Subject">이메일 제목</param>
		/// <param name="BodyText">TEXT 형태의 본문</param>
		/// <param name="BodyHtml">HTML 형태의 본문</param>
		/// <param name="BodyUrl">URL을 통한 본문 스크랩</param>
		/// <returns></returns>
		[WebMethod(Description = "이메일 발송")]
		public XmlElement EMailSend(string SiteNo, string FromAddr, string FromName, string ToAddr, string ToName, string Subject, string BodyText, string BodyHtml, string BodyUrl)
		{
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청6", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청41", SqlDbType.VarChar, -1),
                        new SqlParameter("@요청7", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 13;
                sqlParam[1].Value = cm.RequestInt(SiteNo);
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = FromAddr;
                sqlParam[8].Value = FromName;
                sqlParam[9].Value = ToAddr;
                sqlParam[10].Value = ToName;
                sqlParam[11].Value = Subject;
                sqlParam[12].Value = BodyText;
                sqlParam[13].Value = BodyHtml;
                sqlParam[14].Value = BodyUrl;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            return new ModeWebService.MailService.MailService().EMailSend("IA2", SiteNo, FromAddr, FromName, ToAddr, ToName, Subject, BodyText, BodyHtml, BodyUrl);
		}

		#endregion "이메일 발송"

		#region "TL계산"

        //[WebMethod(Description = "")]
        public string ATLPNRTest(int SNM, string GDS, string PNR)
        {
            return SelectATL(0, 0, GDS, SearchBookingPNR(SNM, GDS, PNR, cm.GetGUID))[1];
        }

		//[WebMethod(Description = "")]
		public string ATLTest()
		{
			string StrGDS = string.Empty;
			string StrXml = string.Empty;
			string TLResult = string.Empty;

			using (SqlCommand cmd = new SqlCommand())
			{
				SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["SERVICELOG"].ConnectionString);
				SqlDataReader dr = null;

				cmd.Connection = conn;
				cmd.CommandTimeout = 60;
				cmd.CommandType = CommandType.Text;
				//cmd.CommandText = String.Format("SELECT * FROM DBO.TL오류 WHERE 등록일 > '{0}' AND (ADTK > '' OR ATL > '')", DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd"));
                //cmd.CommandText = "SELECT * FROM PNR정보 WHERE GDS='Amadeus' AND PNR = '0333-6855'";
                //cmd.CommandText = "SELECT * FROM PNR정보 WHERE GDS='Abacus' AND PNR = 'OFXYXD'";
                cmd.CommandText = "SELECT * FROM PNR정보 WHERE 일련번호 = 558440";

				try
				{
					conn.Open();
					dr = cmd.ExecuteReader();

					while (dr.Read())
					{
						XmlDocument XmlDoc = new XmlDocument();
						XmlDoc.LoadXml(dr["DATA"].ToString());

						TLResult = String.Concat(TLResult, SelectATL(0, 0, dr["GDS"].ToString(), XmlDoc.DocumentElement)[1], "<br />");
					}
				}
				catch (Exception ex)
				{
					StrXml = ex.Message;
				}
				finally
				{
					dr.Dispose();
					dr.Close();
					conn.Close();
				}
			}

			return TLResult;
		}

        //[WebMethod(Description = "")]
        public string ATLTest(string StrADTK)
        {
            string ATL = string.Empty;
            string TmpATL = string.Empty;
            string TmpATL1 = string.Empty;
            string TmpATL2 = string.Empty;
            string TmpATL3 = string.Empty;
            string CreateDateTime = DateTime.Now.AddMinutes(-30).ToString("yyyy-MM-dd");

            if (!String.IsNullOrWhiteSpace(StrADTK))
            {
                foreach (string ATLText in StrADTK.Split('|'))
                {
                    if (!String.IsNullOrWhiteSpace(ATLText))
                    {
                        String[] Pattern = {
												@"\s(?<TL>[0-9]{2}[A-Z]{3})\s[^GMT|\d]",							//_06SEP_												
                                                @"\s(?<TL>[0-9]{2}[A-Z]{3}).$",										//_03SEP1                                                
                                                @"\s[A-Z]{0,3}(?<TL>[0-9]{2}[A-Z]{3}[0-9]{2,4}/[0-9]{4})\s",	    //_SEL06SEP14/1302_
								                @"\s(?<TL>[0-9]{4}[\s|/][0-9]{2}[A-Z]{3}[0-9]{2,4})\s",				//_2359 04SEP14_, _2359/18SEP2014_
								                @"\s(?<TL>[0-9]{2}[A-Z]{3}[0-9]{2}\s[0-9]{2}\s?[0-9]{2})\S*\s",     //_11SEP14 1600_, _07SEP14 1500KR_, _02OCT14 14 00_, _01NOV15 1238SELKR_
								                @"\s(?<TL>[0-9]{4}\s[A-Z]{3}\s[0-9]{2}\s[0-9]{1,2}\s[0-9]{1,2})$",	//_2014_SEP_10_7_42_
                                                @"\s(?<TL>[0-9]{2}[A-Z]{3}[\s|/][0-9]{4})\s[^GMT]",	        		//_04SEP 0000_
								                @"\s\S*(?<TL>[0-9]{4}/[0-9]{2}[A-Z]{3})\s",							//_1600/03SEP_, _BJS2255/10SEP_
                                                @"\s\S*(?<TL>[0-9]{4}/[0-9]{1,2}[A-Z]{3})\S*",						//_1600/03SEP/_
                                                @"\s(?<TL>[0-9]{4}\s[A-Z]{3}\s[0-9]{2}[A-Z]{3})\s",				    //_1612 TUL 06JUL_
								                @"\s(?<TL>[0-9]{4}/[0-9]{2}[A-Z]{3})/",								//_0945/08SEP/
								                @"\s(?<TL>[0-9]{2}[A-Z]{3}[/|:][0-9]{4})$",							//_08SEP/1200, _10SEP:1800
								                @"\s[A-Z]?(?<TL>[0-9]{2}[A-Z]{3})$",								//_E23DEC
								                @"\s\S{13}(?<TL>[0-9]{2}[A-Z]{3})\s",								//_ICNTPECI0161B09OCT_
								                @"\s[A-Z]{1}(?<TL>[0-9]{2}[A-Z]{3})[A-Z]{2}\s",						//_B15SEPBY_
                                                @"\s(?<TL>[0-9]{2}[A-Z]{3}[0-9]{2})$",								//_08MAY16
								                @"\s(?<TL>[0-9]{4}[\w|\s]*TIME\s[0-9]{1,2}[A-Z]{3})\s",				//_2359 KOREAN STANDARD TIME 7SEP_
                                                @"\s(?<TL>[0-9]{4}/[0-9]{2}[A-Z]{3})$",		    					//_1600/03SEP
                                                @"\s(?<TL>[0-9]{2}[A-Z]{3}[\s|/][0-9]{4}Z)",	        			//_04SEP 1137Z, _06SEP/0800Z
                                                @"\s[A-Z]{0,3}(?<TL>[0-9]{2}[A-Z]{3}[0-9]{2,4}/[0-9]{4}Z)[\w|\s]*",	//_SEL17SEP2014/1459ZKK1_, _SEL17SEP2014/1459Z, _06SEP14/1302Z_
								                @"\s(?<TL>[0-9]{2}[A-Z]{3}\sGMT\s[0-9]{4})\s",			    		//_01OCT GMT 2359_
                                                @"\s(?<TL>[0-9]{2}[A-Z]{3}[0-9]{2}\s[0-9]{4}GMT)\s",                //_04SEP14 2359GMT_
                                                @"\s(?<TL>[0-9]{2}[A-Z]{3}[0-9]{4}\s[0-9]{4}\sGMT[0-9]{1,2})",      //_21OCT2015 1725 GMT0
                                                @"[\S|\s](?<TL>[0-9]{2}[A-Z]{3}[0-9]{4}[\s|/][0-9]{4})[\S|\s]",     //_03NOV2016/1307/_
                                                @"\s(?<TL>[0-9]{2}[A-Z]{3}[\s|/][0-9]{4}\sGMT)\s",	       			//_04SEP 0000 GMT_
                                                @"\s(?<TL>[0-9]{1,2}H)\sAFTER\s"                                    //_48H AFTER_
												};

                        foreach (string pattern in Pattern)
                        {
                            Regex regex = new Regex(pattern, RegexOptions.Singleline);
                            Match match = regex.Match(ATLText);

                            while (match.Success)
                            {
                                TmpATL1 = match.Groups["TL"].Value;

                                if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}\sGMT\s[0-9]{4}$"))		    //01OCT GMT 2359
                                {
                                    string[] SplitATL = TmpATL1.Split(' ');
                                    TmpATL2 = cm.ConvertToGMP(String.Format("{0} {1}", cm.ConvertToDate(SplitATL[0], CreateDateTime), cm.ConvertToDateTime(SplitATL[2])), 9);
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}\s[0-9]{4}\sGMT$"))		//03SEP 0807 GMT
                                {
                                    string[] SplitATL = TmpATL1.Split(' ');
                                    TmpATL2 = cm.ConvertToGMP(String.Format("{0} {1}", cm.ConvertToDate(SplitATL[0], CreateDateTime), cm.ConvertToDateTime(SplitATL[1])), 9);
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}[0-9]{2}\s[0-9]{4}GMT$")) //02SEP14 2217GMT
                                {
                                    string[] SplitATL = TmpATL1.Split(' ');
                                    TmpATL2 = cm.ConvertToGMP(String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[0]), cm.ConvertToDateTime(SplitATL[1].Substring(0, 4))), 9);
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}[0-9]{4}\s[0-9]{4}\sGMT[0-9]{1,2}$")) //21OCT2015 1725 GMT0 
                                {
                                    string[] SplitATL = TmpATL1.Split(' ');
                                    TmpATL2 = cm.ConvertToGMP(String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[0]), cm.ConvertToDateTime(SplitATL[1])), (9 - cm.RequestInt(SplitATL[2].Substring(3))));
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}[0-9]{2,4}/[0-9]{4}Z$"))	//17SEP2014/1459Z or 17SEP14/1459Z
                                {
                                    string[] SplitATL = TmpATL1.Split('/');
                                    TmpATL2 = cm.ConvertToGMP(String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[0]), cm.ConvertToDateTime(SplitATL[1].Substring(0, 4))), 9);
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}\s[0-9]{4}Z$"))	        //24OCT 1423Z
                                {
                                    string[] SplitATL = TmpATL1.Split(' ');
                                    TmpATL2 = cm.ConvertToGMP(String.Format("{0} {1}", cm.ConvertToDate(SplitATL[0], CreateDateTime), cm.ConvertToDateTime(SplitATL[1].Substring(0, 4))), 9);
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}[0-9]{4}/[0-9]{4}$"))	//17SEP2014/1459
                                {
                                    string[] SplitATL = TmpATL1.Split('/');
                                    TmpATL2 = String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[0]), cm.ConvertToDateTime(SplitATL[1]));
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}[0-9]{2}\s[0-9]{4}$"))	//02SEP14 2217
                                {
                                    string[] SplitATL = TmpATL1.Split(' ');
                                    TmpATL2 = String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[0]), cm.ConvertToDateTime(SplitATL[1]));
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}[0-9]{2}\s[0-9]{1,2}\s[0-9]{1,2}$"))	//09OCT14 14 00 
                                {
                                    string[] SplitATL = TmpATL1.Split(' ');
                                    TmpATL2 = String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[0]), cm.ConvertToDateTime(String.Concat(cm.NumPosition(SplitATL[1], 2), cm.NumPosition(SplitATL[2], 2))));
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}[0-9]{2}/[0-9]{4}$"))	//06SEP14/1302
                                {
                                    string[] SplitATL = TmpATL1.Split('/');
                                    TmpATL2 = String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[0]), cm.ConvertToDateTime(SplitATL[1]));
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{4}/[0-9]{2}[A-Z]{3}[0-9]{4}$"))	//2359/24SEP2014
                                {
                                    string[] SplitATL = TmpATL1.Split('/');
                                    TmpATL2 = String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[1]), cm.ConvertToDateTime(SplitATL[0]));
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{4}\s[0-9]{2}[A-Z]{3}[0-9]{2}$"))	//2359 04SEP14
                                {
                                    string[] SplitATL = TmpATL1.Split(' ');
                                    TmpATL2 = String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[1]), cm.ConvertToDateTime(SplitATL[0]));
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{4}/[0-9]{2}[A-Z]{3}[0-9]{2}$"))	//2359/04SEP14
                                {
                                    string[] SplitATL = TmpATL1.Split('/');
                                    TmpATL2 = String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[1]), cm.ConvertToDateTime(SplitATL[0]));
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}\s[0-9]{4}$"))			//03SEP 0807
                                {
                                    string[] SplitATL = TmpATL1.Split(' ');
                                    TmpATL2 = String.Format("{0} {1}", cm.ConvertToDate(SplitATL[0], CreateDateTime), cm.ConvertToDateTime(SplitATL[1]));
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}/[0-9]{4}$"))			//06SEP/0700
                                {
                                    string[] SplitATL = TmpATL1.Split('/');
                                    TmpATL2 = String.Format("{0} {1}", cm.ConvertToDate(SplitATL[0], CreateDateTime), cm.ConvertToDateTime(SplitATL[1]));
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{4}/[0-9]{1,2}[A-Z]{3}$"))			//1855/03SEP
                                {
                                    string[] SplitATL = TmpATL1.Split('/');
                                    TmpATL2 = String.Format("{0} {1}", cm.ConvertToDate(SplitATL[1].PadLeft(5, '0'), CreateDateTime), cm.ConvertToDateTime(SplitATL[0]));
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{4}\s[A-Z]{3}\s[0-9]{2}\s[0-9]{1,2}\s[0-9]{1,2}$")) //2014 SEP 10 7 42
                                {
                                    string[] SplitATL = TmpATL1.Split(' ');
                                    TmpATL2 = String.Format("{0} {1}", cm.ConvertToDateTime(String.Concat(SplitATL[2], SplitATL[1], SplitATL[0])), cm.ConvertToDateTime(String.Concat(cm.NumPosition(SplitATL[3], 2), cm.NumPosition(SplitATL[4], 2))));
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{4}\sKOREAN\sSTANDARD\sTIME\s[0-9]{1,2}[A-Z]{3}$")) //_2359 KOREAN STANDARD TIME 7SEP_
                                {
                                    string[] SplitATL = TmpATL1.Split(' ');
                                    TmpATL2 = String.Format("{0} {1}", cm.ConvertToDate(cm.NumPosition(SplitATL[4], 5), CreateDateTime), cm.ConvertToDateTime(SplitATL[0]));
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{4}\s[A-Z]{3}\s[0-9]{2}[A-Z]{3}$")) //_1612 TUL 06JUL_
                                {
                                    string[] SplitATL = TmpATL1.Split(' ');
                                    TmpATL2 = String.Format("{0} {1}", cm.ConvertToDate(SplitATL[2], CreateDateTime), cm.ConvertToDateTime(SplitATL[0]));
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}[0-9]{2}$"))				//08MAY16
                                {
                                    TmpATL2 = String.Concat(cm.ConvertToDate(TmpATL1, CreateDateTime), " 23:59");
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}$"))						//01DEC
                                {
                                    TmpATL2 = String.Concat(cm.ConvertToDate(TmpATL1, CreateDateTime), " 23:59");
                                }
                                else if (Regex.IsMatch(TmpATL1, @"^[0-9]{1,2}H$"))     						//48H
                                {
                                    TmpATL2 = Convert.ToDateTime(CreateDateTime).AddHours(cm.ExtractNumber(TmpATL1)).ToString("yyyy-MM-dd HH:mm");
                                }

                                if (String.IsNullOrWhiteSpace(ATL))
                                    ATL = TmpATL2;
                                else
                                {
                                    ATL = cm.DateDiff("m", ATL, TmpATL2) > 0 ? ATL : TmpATL2;
                                }

                                match = match.NextMatch();
                            }
                        }
                    }
                }
            }

            return String.Format("TmpATL1: {0}, TmpATL2: {1}, ATL: {2}", TmpATL1, TmpATL2, ATL);
        }

        //[WebMethod(Description = "")]
        public string SelectATLBaseTEST()
        {
            int OID = 28714592;
            int IBN = 0;
            int PID = 2456381;
            string GDS = "Galileo";
            string DBUpdate = "N";
            

            XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.LoadXml(XmlDBBooking.SelectSingleNode("item3/예약XML").InnerText);
            XmlElement PNRInfo = XmlDoc.DocumentElement;

            return SelectATLBase(OID, IBN, GDS, DBUpdate, PNRInfo);
        }

        /// <summary>
        /// 항공사 TL 구하기(ORIGINAL)
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="IBN">주문아이템번호</param>
        /// <param name="GDS">GDS코드</param>
        /// <param name="DBUpdate">DB 업데이트 실행 여부</param>
        /// <param name="PNRInfo">PNR 정보</param>
        /// <returns>항공사 TL</returns>
        public string SelectATLBase(int OID, int IBN, string GDS, string DBUpdate, XmlElement PNRInfo)
        {
            string ATL = string.Empty;
            string TmpATL = string.Empty;
            string TmpATL1 = string.Empty;
            string TmpATL2 = string.Empty;
            string TmpATL3 = string.Empty;
            string StrADTK = string.Empty;
            string CreateDateTime = string.Empty;

            try
            {
                XmlNamespaceManager xnMgr = new XmlNamespaceManager(PNRInfo.OwnerDocument.NameTable);

                if (String.Compare(GDS, "Abacus", true).Equals(0))
                {
                    if (PNRInfo.Attributes.GetNamedItem("Version").InnerText.Equals("3.10.0"))
                    {
                        xnMgr.AddNamespace("stl", AbacusConfig.NamespaceURL("TravelItineraryRead_stl"));
                        xnMgr.AddNamespace("tir310", AbacusConfig.NamespaceURL("TravelItineraryRead_tir310"));

                        CreateDateTime = cm.ConvertToDateTime(PNRInfo.SelectSingleNode("tir310:TravelItinerary/tir310:ItineraryRef/tir310:Source", xnMgr).Attributes.GetNamedItem("CreateDateTime").InnerText);

                        if (PNRInfo.SelectNodes("tir310:TravelItinerary/tir310:SpecialServiceInfo", xnMgr).Count > 0)
                        {
                            if (PNRInfo.SelectNodes("tir310:TravelItinerary/tir310:SpecialServiceInfo/tir310:Service[@SSR_Code='SSR' and @SSR_Type='ADTK']", xnMgr).Count > 0)
                                StrADTK = PNRInfo.SelectSingleNode("tir310:TravelItinerary/tir310:SpecialServiceInfo/tir310:Service[@SSR_Code='SSR' and @SSR_Type='ADTK']/tir310:Text", xnMgr).InnerText;
                            if (PNRInfo.SelectNodes("tir310:TravelItinerary/tir310:SpecialServiceInfo/tir310:Service[@SSR_Code='SSR' and @SSR_Type='TKNA']", xnMgr).Count > 0)
                                StrADTK += String.Concat(PNRInfo.SelectSingleNode("tir310:TravelItinerary/tir310:SpecialServiceInfo/tir310:Service[@SSR_Code='SSR' and @SSR_Type='TKNA']/tir310:Text", xnMgr).InnerText, "|");
                            if (PNRInfo.SelectNodes("tir310:TravelItinerary/tir310:SpecialServiceInfo/tir310:Service[@SSR_Code='SSR' and @SSR_Type='OTHS']", xnMgr).Count > 0)
                                StrADTK += String.Concat(PNRInfo.SelectSingleNode("tir310:TravelItinerary/tir310:SpecialServiceInfo/tir310:Service[@SSR_Code='SSR' and @SSR_Type='OTHS']/tir310:Text", xnMgr).InnerText, "|");
                        }
                    }
                    else if (PNRInfo.Attributes.GetNamedItem("Version").InnerText.Equals("1.19.0"))
                    {
                        xnMgr.AddNamespace("stl19", AbacusConfig.NamespaceURL("GetReservation_stl19"));
                        xnMgr.AddNamespace("or114", AbacusConfig.NamespaceURL("GetReservation_or114"));

                        CreateDateTime = cm.ConvertToDateTime(PNRInfo.SelectSingleNode("stl19:Reservation/stl19:BookingDetails/stl19:CreationTimestamp", xnMgr).InnerText);

                        if (PNRInfo.SelectNodes("stl19:Reservation/stl19:GenericSpecialRequests", xnMgr).Count > 0)
                        {
                            foreach (XmlNode SSR in PNRInfo.SelectNodes("stl19:Reservation/stl19:GenericSpecialRequests[stl19:Code='ADTK' or stl19:Code='TKNA' or stl19:Code='OTHS']", xnMgr))
                                StrADTK += String.Concat(SSR.SelectSingleNode("stl19:FreeText", xnMgr).InnerText, "|");
                        }
                    }
                    else
                    {
                        xnMgr.AddNamespace("m", AbacusConfig.NamespaceURL(""));

                        if (PNRInfo.SelectNodes("m:TravelItinerary/m:UpdatedBy", xnMgr).Count > 0)
                            CreateDateTime = cm.ConvertToDateTime(PNRInfo.SelectSingleNode("m:TravelItinerary/m:UpdatedBy", xnMgr).Attributes.GetNamedItem("CreateDateTime").InnerText);

                        if (PNRInfo.SelectNodes("m:TravelItinerary/m:SpecialServices", xnMgr).Count > 0)
                        {
                            if (PNRInfo.SelectNodes("m:TravelItinerary/m:SpecialServices/m:Service[@SSRCode='SSR' and m:TPA_Extensions/m:SSRType='ADTK']", xnMgr).Count > 0)
                                StrADTK = PNRInfo.SelectSingleNode("m:TravelItinerary/m:SpecialServices/m:Service[@SSRCode='SSR' and m:TPA_Extensions/m:SSRType='ADTK']/m:Text", xnMgr).InnerText;
                            if (PNRInfo.SelectNodes("m:TravelItinerary/m:SpecialServices/m:Service[@SSRCode='SSR' and m:TPA_Extensions/m:SSRType='TKNA']", xnMgr).Count > 0)
                                StrADTK += String.Concat(PNRInfo.SelectSingleNode("m:TravelItinerary/m:SpecialServices/m:Service[@SSRCode='SSR' and m:TPA_Extensions/m:SSRType='TKNA']/m:Text", xnMgr).InnerText, "|");
                        }
                    }
                }
                else if (String.Compare(GDS, "Galileo", true).Equals(0))
                {
                    if (!String.IsNullOrWhiteSpace(PNRInfo.SelectSingleNode("GenPnrInfo/AirTLDate").InnerText))
                        ATL = String.Format("{0} {1}", cm.ConvertToDateTime(PNRInfo.SelectSingleNode("GenPnrInfo/AirTLDate").InnerText), cm.ConvertToDateTime(PNRInfo.SelectSingleNode("GenPnrInfo/AirTLTime").InnerText));
                }
                else if (String.Compare(GDS, "Amadeus", true).Equals(0))
                {
                    xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                    CreateDateTime = String.Format("{0} {1}", cm.ConvertToDateTime(PNRInfo.SelectSingleNode("m:securityInformation/m:secondRpInformation/m:creationDate", xnMgr).InnerText), cm.ConvertToDateTime(PNRInfo.SelectSingleNode("m:securityInformation/m:secondRpInformation/m:creationTime", xnMgr).InnerText));

                    if (PNRInfo.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='OPC']/m:optionElement", xnMgr).Count > 0 && PNRInfo.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='OPC']/m:optionElement", xnMgr).Count > 0)
                        TmpATL3 = String.Format("{0} {1}", cm.ConvertToDateTime(PNRInfo.SelectSingleNode("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='OPC']/m:optionElement/m:optionElementInfo/m:date", xnMgr).InnerText), cm.ConvertToDateTime(PNRInfo.SelectSingleNode("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='OPC']/m:optionElement/m:optionElementInfo/m:time", xnMgr).InnerText));
                    if (PNRInfo.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='OPW']/m:optionElement", xnMgr).Count > 0 && PNRInfo.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='OPW']/m:optionElement", xnMgr).Count > 0)
                        StrADTK = PNRInfo.SelectSingleNode("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='OPW']/m:optionElement/m:optionElementInfo/m:freetext", xnMgr).InnerText;
                    if (PNRInfo.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='SSR']/m:serviceRequest", xnMgr).Count > 0)
                    {
                        foreach (XmlNode SSR in PNRInfo.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='SSR']/m:serviceRequest/m:ssr[m:type='ADTK']", xnMgr))
                            StrADTK += String.Concat(SSR.SelectSingleNode("m:freeText", xnMgr).InnerText, "|");

                        foreach (XmlNode SSR in PNRInfo.SelectNodes("m:dataElementsMaster/m:dataElementsIndiv[m:elementManagementData/m:segmentName='SSR']/m:serviceRequest/m:ssr[m:type='OTHS']", xnMgr))
                            StrADTK += String.Concat(SSR.SelectSingleNode("m:freeText", xnMgr).InnerText, "|");
                    }
                }

                if (!String.IsNullOrWhiteSpace(StrADTK))
                {
                    foreach (string ATLText in StrADTK.Split('|'))
                    {
                        if (!String.IsNullOrWhiteSpace(ATLText))
                        {
                            String[] Pattern = {
												@"\s(?<TL>[0-9]{2}[A-Z]{3})\s[^GMT|\d]",							//_06SEP_												
                                                @"\s(?<TL>[0-9]{2}[A-Z]{3}).$",										//_03SEP1                                                
                                                @"\s[A-Z]{0,3}(?<TL>[0-9]{2}[A-Z]{3}[0-9]{2,4}/[0-9]{4})\s",	    //_SEL06SEP14/1302_
								                @"\s(?<TL>[0-9]{4}[\s|/][0-9]{2}[A-Z]{3}[0-9]{2,4})\s",				//_2359 04SEP14_, _2359/18SEP2014_
								                @"\s(?<TL>[0-9]{2}[A-Z]{3}[0-9]{2}\s[0-9]{2}\s?[0-9]{2})\S*\s",     //_11SEP14 1600_, _07SEP14 1500KR_, _02OCT14 14 00_, _01NOV15 1238SELKR_
								                @"\s(?<TL>[0-9]{4}\s[A-Z]{3}\s[0-9]{2}\s[0-9]{1,2}\s[0-9]{1,2})$",	//_2014_SEP_10_7_42_
                                                @"\s(?<TL>[0-9]{2}[A-Z]{3}[\s|/][0-9]{4})\s[^GMT]",	        		//_04SEP 0000_
								                @"\s\S*(?<TL>[0-9]{4}/[0-9]{2}[A-Z]{3})\s",							//_1600/03SEP_, _BJS2255/10SEP_
                                                @"\s\S*(?<TL>[0-9]{4}/[0-9]{1,2}[A-Z]{3})\S*",						//_1600/03SEP/_
                                                @"\s(?<TL>[0-9]{4}\s[A-Z]{3}\s[0-9]{2}[A-Z]{3})\s",				    //_1612 TUL 06JUL_
								                @"\s(?<TL>[0-9]{4}/[0-9]{2}[A-Z]{3})/",								//_0945/08SEP/
								                @"\s(?<TL>[0-9]{2}[A-Z]{3}[/|:][0-9]{4})$",							//_08SEP/1200, _10SEP:1800
								                @"\s[A-Z]?(?<TL>[0-9]{2}[A-Z]{3})$",								//_E23DEC
								                @"\s\S{13}(?<TL>[0-9]{2}[A-Z]{3})\s",								//_ICNTPECI0161B09OCT_
								                @"\s[A-Z]{1}(?<TL>[0-9]{2}[A-Z]{3})[A-Z]{2}\s",						//_B15SEPBY_
                                                @"\s(?<TL>[0-9]{2}[A-Z]{3}[0-9]{2})$",								//_08MAY16
								                @"\s(?<TL>[0-9]{4}[\w|\s]*TIME\s[0-9]{1,2}[A-Z]{3})\s",				//_2359 KOREAN STANDARD TIME 7SEP_
                                                @"\s(?<TL>[0-9]{4}/[0-9]{2}[A-Z]{3})$",		    					//_1600/03SEP
                                                @"\s(?<TL>[0-9]{2}[A-Z]{3}[\s|/][0-9]{4}Z)",	        			//_04SEP 1137Z, _06SEP/0800Z
                                                @"\s[A-Z]{0,3}(?<TL>[0-9]{2}[A-Z]{3}[0-9]{2,4}/[0-9]{4}Z)[\w|\s]*",	//_SEL17SEP2014/1459ZKK1_, _SEL17SEP2014/1459Z, _06SEP14/1302Z_
								                @"\s(?<TL>[0-9]{2}[A-Z]{3}\sGMT\s[0-9]{4})\s",			    		//_01OCT GMT 2359_
                                                @"\s(?<TL>[0-9]{2}[A-Z]{3}[0-9]{2}\s[0-9]{4}GMT)\s",                //_04SEP14 2359GMT_
                                                @"\s(?<TL>[0-9]{2}[A-Z]{3}[0-9]{4}\s[0-9]{4}\sGMT[0-9]{1,2})",      //_21OCT2015 1725 GMT0
                                                @"[\S|\s](?<TL>[0-9]{2}[A-Z]{3}[0-9]{4}[\s|/][0-9]{4})[\S|\s]",     //_03NOV2016/1307/_
                                                @"\s(?<TL>[0-9]{2}[A-Z]{3}[\s|/][0-9]{4}\sGMT)\s",	       			//_04SEP 0000 GMT_
                                                @"\s(?<TL>[0-9]{1,2}H)\sAFTER\s"                                    //_48H AFTER_
												};

                            foreach (string pattern in Pattern)
                            {
                                Regex regex = new Regex(pattern, RegexOptions.Singleline);
                                Match match = regex.Match(ATLText);

                                while (match.Success)
                                {
                                    TmpATL1 = match.Groups["TL"].Value;

                                    if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}\sGMT\s[0-9]{4}$"))		    //01OCT GMT 2359
                                    {
                                        string[] SplitATL = TmpATL1.Split(' ');
                                        TmpATL2 = cm.ConvertToGMP(String.Format("{0} {1}", cm.ConvertToDate(SplitATL[0], CreateDateTime), cm.ConvertToDateTime(SplitATL[2])), 9);
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}\s[0-9]{4}\sGMT$"))		//03SEP 0807 GMT
                                    {
                                        string[] SplitATL = TmpATL1.Split(' ');
                                        TmpATL2 = cm.ConvertToGMP(String.Format("{0} {1}", cm.ConvertToDate(SplitATL[0], CreateDateTime), cm.ConvertToDateTime(SplitATL[1])), 9);
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}[0-9]{2}\s[0-9]{4}GMT$")) //02SEP14 2217GMT
                                    {
                                        string[] SplitATL = TmpATL1.Split(' ');
                                        TmpATL2 = cm.ConvertToGMP(String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[0]), cm.ConvertToDateTime(SplitATL[1].Substring(0, 4))), 9);
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}[0-9]{4}\s[0-9]{4}\sGMT[0-9]{1,2}$")) //21OCT2015 1725 GMT0 
                                    {
                                        string[] SplitATL = TmpATL1.Split(' ');
                                        TmpATL2 = cm.ConvertToGMP(String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[0]), cm.ConvertToDateTime(SplitATL[1])), (9 - cm.RequestInt(SplitATL[2].Substring(3))));
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}[0-9]{2,4}/[0-9]{4}Z$"))	//17SEP2014/1459Z or 17SEP14/1459Z
                                    {
                                        string[] SplitATL = TmpATL1.Split('/');
                                        TmpATL2 = cm.ConvertToGMP(String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[0]), cm.ConvertToDateTime(SplitATL[1].Substring(0, 4))), 9);
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}\s[0-9]{4}Z$"))	        //24OCT 1423Z
                                    {
                                        string[] SplitATL = TmpATL1.Split(' ');
                                        TmpATL2 = cm.ConvertToGMP(String.Format("{0} {1}", cm.ConvertToDate(SplitATL[0], CreateDateTime), cm.ConvertToDateTime(SplitATL[1].Substring(0, 4))), 9);
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}[0-9]{4}/[0-9]{4}$"))	//17SEP2014/1459
                                    {
                                        string[] SplitATL = TmpATL1.Split('/');
                                        TmpATL2 = String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[0]), cm.ConvertToDateTime(SplitATL[1]));
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}[0-9]{2}\s[0-9]{4}$"))	//02SEP14 2217
                                    {
                                        string[] SplitATL = TmpATL1.Split(' ');
                                        TmpATL2 = String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[0]), cm.ConvertToDateTime(SplitATL[1]));
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}[0-9]{2}\s[0-9]{1,2}\s[0-9]{1,2}$"))	//09OCT14 14 00 
                                    {
                                        string[] SplitATL = TmpATL1.Split(' ');
                                        TmpATL2 = String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[0]), cm.ConvertToDateTime(String.Concat(cm.NumPosition(SplitATL[1], 2), cm.NumPosition(SplitATL[2], 2))));
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}[0-9]{2}/[0-9]{4}$"))	//06SEP14/1302
                                    {
                                        string[] SplitATL = TmpATL1.Split('/');
                                        TmpATL2 = String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[0]), cm.ConvertToDateTime(SplitATL[1]));
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{4}/[0-9]{2}[A-Z]{3}[0-9]{4}$"))	//2359/24SEP2014
                                    {
                                        string[] SplitATL = TmpATL1.Split('/');
                                        TmpATL2 = String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[1]), cm.ConvertToDateTime(SplitATL[0]));
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{4}\s[0-9]{2}[A-Z]{3}[0-9]{2}$"))	//2359 04SEP14
                                    {
                                        string[] SplitATL = TmpATL1.Split(' ');
                                        TmpATL2 = String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[1]), cm.ConvertToDateTime(SplitATL[0]));
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{4}/[0-9]{2}[A-Z]{3}[0-9]{2}$"))	//2359/04SEP14
                                    {
                                        string[] SplitATL = TmpATL1.Split('/');
                                        TmpATL2 = String.Format("{0} {1}", cm.ConvertToDateTime(SplitATL[1]), cm.ConvertToDateTime(SplitATL[0]));
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}\s[0-9]{4}$"))			//03SEP 0807
                                    {
                                        string[] SplitATL = TmpATL1.Split(' ');
                                        TmpATL2 = String.Format("{0} {1}", cm.ConvertToDate(SplitATL[0], CreateDateTime), cm.ConvertToDateTime(SplitATL[1]));
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}/[0-9]{4}$"))			//06SEP/0700
                                    {
                                        string[] SplitATL = TmpATL1.Split('/');
                                        TmpATL2 = String.Format("{0} {1}", cm.ConvertToDate(SplitATL[0], CreateDateTime), cm.ConvertToDateTime(SplitATL[1]));
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{4}/[0-9]{1,2}[A-Z]{3}$"))			//1855/03SEP
                                    {
                                        string[] SplitATL = TmpATL1.Split('/');
                                        TmpATL2 = String.Format("{0} {1}", cm.ConvertToDate(SplitATL[1].PadLeft(5, '0'), CreateDateTime), cm.ConvertToDateTime(SplitATL[0]));
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{4}\s[A-Z]{3}\s[0-9]{2}\s[0-9]{1,2}\s[0-9]{1,2}$")) //2014 SEP 10 7 42
                                    {
                                        string[] SplitATL = TmpATL1.Split(' ');
                                        TmpATL2 = String.Format("{0} {1}", cm.ConvertToDateTime(String.Concat(SplitATL[2], SplitATL[1], SplitATL[0])), cm.ConvertToDateTime(String.Concat(cm.NumPosition(SplitATL[3], 2), cm.NumPosition(SplitATL[4], 2))));
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{4}\sKOREAN\sSTANDARD\sTIME\s[0-9]{1,2}[A-Z]{3}$")) //_2359 KOREAN STANDARD TIME 7SEP_
                                    {
                                        string[] SplitATL = TmpATL1.Split(' ');
                                        TmpATL2 = String.Format("{0} {1}", cm.ConvertToDate(cm.NumPosition(SplitATL[4], 5), CreateDateTime), cm.ConvertToDateTime(SplitATL[0]));
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{4}\s[A-Z]{3}\s[0-9]{2}[A-Z]{3}$")) //_1612 TUL 06JUL_
                                    {
                                        string[] SplitATL = TmpATL1.Split(' ');
                                        TmpATL2 = String.Format("{0} {1}", cm.ConvertToDate(SplitATL[2], CreateDateTime), cm.ConvertToDateTime(SplitATL[0]));
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}[0-9]{2}$"))				//08MAY16
                                    {
                                        TmpATL2 = String.Concat(cm.ConvertToDate(TmpATL1, CreateDateTime), " 23:59");
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{2}[A-Z]{3}$"))						//01DEC
                                    {
                                        TmpATL2 = String.Concat(cm.ConvertToDate(TmpATL1, CreateDateTime), " 23:59");
                                    }
                                    else if (Regex.IsMatch(TmpATL1, @"^[0-9]{1,2}H$"))     						//48H
                                    {
                                        TmpATL2 = Convert.ToDateTime(CreateDateTime).AddHours(cm.ExtractNumber(TmpATL1)).ToString("yyyy-MM-dd HH:mm");
                                    }

                                    if (String.IsNullOrWhiteSpace(ATL))
                                        ATL = TmpATL2;
                                    else
                                    {
                                        ATL = cm.DateDiff("m", ATL, TmpATL2) > 0 ? ATL : TmpATL2;
                                    }

                                    match = match.NextMatch();
                                }
                            }
                        }
                    }
                }

                if (!String.IsNullOrWhiteSpace(TmpATL3))
                {
                    if (String.IsNullOrWhiteSpace(ATL))
                        ATL = TmpATL3;
                    else
                        ATL = cm.DateDiff("m", ATL, TmpATL3) > 0 ? ATL : TmpATL3;
                }
            }
            catch (Exception ex)
            {
                new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, IBN);
            }

            if (DBUpdate.Equals("Y"))
            {
                if (!String.IsNullOrWhiteSpace(ATL) && cm.IsDateTime(ATL))
                    ATLDBSave(OID, IBN, ATL);
                //사용중지(2018-05-21)
                //else
                //    TLErrorDBSave(GDS, StrADTK, ATL, PNRInfo);
            }

            return ATL;
        }

		/// <summary>
		/// 항공사 TL 구하기(모두투어 기본 조건 포함)
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="IBN">주문아이템번호</param>
        /// <param name="GDS">GDS코드</param>
		/// <param name="PNRInfo">PNR 정보</param>
		/// <returns></returns>
        public string[] SelectATL(int OID, int IBN, string GDS, XmlElement PNRInfo)
		{
            string[] ATL = new String[2] { "", "" };
			string TmpATL = string.Empty;

            ATL[0] = SelectATLBase(OID, IBN, GDS, "Y", PNRInfo);

            //TL을 1시간 전으로 셋팅(2015-04-27,김지영과장요청)
            //TL을 2시간 전으로 셋팅(2015-10-27,김승미과장요청)
            if (!String.IsNullOrWhiteSpace(ATL[0]) && cm.IsDateTime(ATL[0]))
            {
                //전 여정이 대한항공(KE)이면서 4일 이내 출발인 경우 항공사 TL 그대로 설정(2019-10-22,김지영팀장)
                bool CheckKE = false;

                if (String.Compare(GDS, "Amadeus", true).Equals(0))
                {
                    XmlNamespaceManager xnMgr = new XmlNamespaceManager(PNRInfo.OwnerDocument.NameTable);
                    xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("PNR_Reply"));

                    //KE 여부
                    if (PNRInfo.SelectNodes("m:originDestinationDetails/m:itineraryInfo[m:elementManagementItinerary/m:segmentName='AIR'][m:travelProduct/m:companyDetail/m:identification != 'KE']", xnMgr).Count.Equals(0))
                        CheckKE = true;

                    //4일 이내 출발 여부
                    if (cm.DateDiff("d", DateTime.Now.ToString("yyyy-MM-dd"), cm.ConvertToDateTime(PNRInfo.SelectSingleNode("m:originDestinationDetails/m:itineraryInfo[1]/m:travelProduct/m:product/m:depDate", xnMgr).InnerText)) < 4)
                        CheckKE = true;
                }
                else if (String.Compare(GDS, "Galileo", true).Equals(0))
                {
                    //KE 여부
                    if (PNRInfo.SelectNodes("AirSegDetail[AirV != 'KE']").Count.Equals(0))
                        CheckKE = true;

                    //4일 이내 출발 여부
                    if (cm.DateDiff("d", DateTime.Now.ToString("yyyy-MM-dd"), cm.ConvertToDateTime(PNRInfo.SelectSingleNode("AirSegDetail[1]/StartDtTm").InnerText)) < 4)
                        CheckKE = true;
                }

                if (CheckKE)
                    ATL[1] = ATL[0];
                else
                {
                    ATL[1] = Convert.ToDateTime(ATL[0]).AddHours(-2).ToString("yyyy-MM-dd HH:mm");
                    TmpATL = ATL[1];

                    //TL이 토/일/공휴일인 경우 16시까지로 제한
                    string[] ATLDate = ATL[1].Split(' ');

                    if (Convert.ToInt32(ATLDate[1].Replace(":", "")) > 1600)
                    {
                        if (!cm.WorkdayYN(ATLDate[0]))
                            ATL[1] = String.Concat(ATLDate[0], " 16:00");
                    }

                    //최종 TL이 현재시간보다 빠르면 바로 전단계TL(TL 2시간 전 셋팅)로 변경(2015-05-12,정성하과장요청)
                    if (cm.DateDiff("m", ATL[1], DateTime.Now.ToString("yyyy-MM-dd HH:mm")) > 0)
                    {
                        ATL[1] = TmpATL;
                    }
                }
            }

            ////TL을 무조건 2시간 전으로 셋팅(2015-12-22,정성하과장요청)
            //if (!String.IsNullOrWhiteSpace(ATL[0]) && cm.IsDateTime(ATL[0]))
            //{
            //    ATL[1] = Convert.ToDateTime(ATL[0]).AddHours(-2).ToString("yyyy-MM-dd HH:mm");
            //}

            return ATL;
		}

        /// <summary>
        /// 항공사 TL 저장
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="IBN">주문아이템번호</param>
        /// <param name="TL">항공사TL</param>
        public void ATLDBSave(int OID, int IBN, string TL)
        {
            try
            {
                if (OID > 0 || IBN > 0)
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
                        {
                            cmd.Connection = conn;
                            cmd.CommandTimeout = 30;
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.CommandText = "DBO.WSV_T_아이템예약_해외항공_항공사TL";

                            cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@주문아이템번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@항공사TL", SqlDbType.DateTime, 0);
                            cmd.Parameters.Add("@수정자", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@수정경로", SqlDbType.VarChar, 20);
                            cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                            cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                            cmd.Parameters["@주문번호"].Value = OID;
                            cmd.Parameters["@주문아이템번호"].Value = IBN;
                            cmd.Parameters["@항공사TL"].Value = Convert.ToDateTime(TL);
                            cmd.Parameters["@수정자"].Value = 1743;
                            cmd.Parameters["@수정경로"].Value = "WEBSERVICE";
                            cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                            try
                            {
                                conn.Open();
                                cmd.ExecuteNonQuery();
                            }
                            finally
                            {
                                conn.Close();
                            }
                        }
                    }
                }
            }
            catch (Exception) { }
        }

		/// <summary>
		/// TL 계산 오류시 DB로 저장
		/// </summary>
		/// <param name="GDS">구분</param>
		/// <param name="ADTK">ADTK 텍스트</param>
		/// <param name="ATL">계산된 항공사TL</param>
		/// <param name="PNRInfo">PNR 정보</param>
		public void TLErrorDBSave(string GDS, string ADTK, string ATL, XmlElement PNRInfo)
		{
			try
			{
				using (SqlCommand cmd = new SqlCommand())
				{
					using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["SERVICELOG"].ConnectionString))
					{
						cmd.Connection = conn;
						cmd.CommandTimeout = 10;
						cmd.CommandType = CommandType.StoredProcedure;
						cmd.CommandText = "DBO.WSV_T_아이템예약_해외항공_TL오류";

						cmd.Parameters.Add("@GDS", SqlDbType.VarChar, 10);
						cmd.Parameters.Add("@ADTK", SqlDbType.VarChar, 500);
						cmd.Parameters.Add("@ATL", SqlDbType.VarChar, 20);
						cmd.Parameters.Add("@DATA", SqlDbType.Xml, -1);
						cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
						cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

						cmd.Parameters["@GDS"].Value = GDS;
						cmd.Parameters["@ADTK"].Value = ADTK;
						cmd.Parameters["@ATL"].Value = ATL;
						cmd.Parameters["@DATA"].Value = PNRInfo.OuterXml;
						cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
						cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

						try
						{
							conn.Open();
							cmd.ExecuteNonQuery();
						}
						finally
						{
							conn.Close();
						}
					}
				}
			}
			catch (Exception) { }
		}

		#endregion "TL계산"

        #region "투어마일리지"

        /// <summary>
		/// 투어마일리지 예상 적립액
		/// </summary>
		/// <param name="AdultFare">성인요금</param>
		/// <param name="ChildFare">소아요금</param>
		/// <param name="InfantFare">유아요금</param>
		/// <returns></returns>
		[WebMethod(Description = "투어마일리지 예상 적립액")]
		public XmlElement TourMileageExpected(int AdultFare, int ChildFare, int InfantFare)
		{
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 47;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = AdultFare;
                sqlParam[8].Value = ChildFare;
                sqlParam[9].Value = InfantFare;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
			{
				XmlDocument XmlDoc = new XmlDocument();
				XmlDoc.Load(mc.XmlFullPath("TourMileage"));

				XmlDoc.SelectSingleNode("TourMileage").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;
				XmlDoc.SelectSingleNode("TourMileage/item").InnerText = "IA";
				XmlDoc.SelectSingleNode("TourMileage/mileage/adult").InnerText = "0";
				XmlDoc.SelectSingleNode("TourMileage/mileage/child").InnerText = "0";
				XmlDoc.SelectSingleNode("TourMileage/mileage/infant").InnerText = "0";

				using (SqlCommand cmd = new SqlCommand())
				{
					SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString);
					SqlDataReader dr = null;

					cmd.Connection = conn;
					cmd.CommandTimeout = 60;
					cmd.CommandType = CommandType.StoredProcedure;
					cmd.CommandText = "DBO.WSV_S_아이템예약_마일리지_예상적립액";

					cmd.Parameters.Add("@품목코드", SqlDbType.Char, 2);
					cmd.Parameters.Add("@성인요금", SqlDbType.Int, 0);
					cmd.Parameters.Add("@소아요금", SqlDbType.Int, 0);
					cmd.Parameters.Add("@유아요금", SqlDbType.Int, 0);
					cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
					cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

					cmd.Parameters["@품목코드"].Value = "IA";
					cmd.Parameters["@성인요금"].Value = AdultFare;
					cmd.Parameters["@소아요금"].Value = ChildFare;
					cmd.Parameters["@유아요금"].Value = InfantFare;
					cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
					cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

					try
					{
						conn.Open();
						dr = cmd.ExecuteReader();

						if (dr.Read())
						{
							XmlDoc.SelectSingleNode("TourMileage/mileage/adult").InnerText = dr["성인적립액"].ToString();
							XmlDoc.SelectSingleNode("TourMileage/mileage/child").InnerText = dr["소아적립액"].ToString();
							XmlDoc.SelectSingleNode("TourMileage/mileage/infant").InnerText = dr["유아적립액"].ToString();
						}
					}
					catch (Exception)
					{
						throw;
					}
					finally
					{
						dr.Dispose();
						dr.Close();
						conn.Close();
					}
				}

				return XmlDoc.DocumentElement;
			}
			catch (Exception ex)
			{
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 47, 0, 0).ToErrors;
			}
		}

        #endregion "투어마일리지"

        #region "예약번호 저장"

        /// <summary>
        /// PNR에 모두투어 예약번호 추가
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <returns></returns>
        [WebMethod(Description = "PNR에 모두투어 예약번호 추가")]
        public XmlElement AddBookingNumberPNR(int OID, int PID)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 349;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = "";
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");
                
                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    if (XmlDBBooking.SelectSingleNode("item/취소").InnerText.Equals("Y"))
                        throw new Exception("취소된 예약입니다.");
                    else if (cm.DateDiff("d", XmlDBBooking.SelectSingleNode("item3/서비스S").InnerText.Substring(0, 10), DateTime.Now.ToString("yyyy-MM-dd")) > 0)
                        throw new Exception("출발일이 지난 경우에는 예약번호를 추가할 수 없습니다.");
                    else
                    {
                        string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
                        
                        if (String.Compare(GDS, "Amadeus", true).Equals(0) || String.Compare(GDS, "Topas", true).Equals(0))
                            return AmadeusAddBookingNumberPNR(cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), OID, XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText, LogGUID);
                        else if (String.Compare(GDS, "Abacus", true).Equals(0))
                            return AbacusAddBookingNumberPNR(OID, XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText, LogGUID);
                        else if (String.Compare(GDS, "Galileo", true).Equals(0))
                            return GalileoAddBookingNumberPNR(OID, XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText, LogGUID);
                        else
				            throw new Exception("GDS 정보가 없습니다.");
                    }
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 349, OID, 0).ToErrors;
            }
        }

        public XmlElement AmadeusAddBookingNumberPNR(int SNM, int OID, string PNR, string GUID)
        {
            if (String.IsNullOrWhiteSpace(GUID))
                GUID = cm.GetGUID;
            
            XmlElement XmlElem;
            XmlNamespaceManager xnMgr;

            XmlNode Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));
            string SID = Session.SelectSingleNode("session/sessionId").InnerText;
            string SCT = Session.SelectSingleNode("session/securityToken").InnerText;
            int SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

            XmlElem = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), String.Concat("RT", PNR));

            xnMgr = new XmlNamespaceManager(XmlElem.OwnerDocument.NameTable);
            xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));

            if (XmlElem.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText.IndexOf("MODETOUR ORDER NO:").Equals(-1))
            {
                amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), String.Format("RM MODETOUR ORDER NO: {0}", OID));
                XmlElem = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"), "ER");

                xnMgr = new XmlNamespaceManager(XmlElem.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));

                if (XmlElem.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText.IndexOf("WARNING") != -1 || XmlElem.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText.IndexOf("SIMULTANEOUS") != -1)
                {
                    XmlElem = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05"), "ER");
                }
            }

            amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06"));

            return XmlElem;
        }

        public XmlElement AbacusAddBookingNumberPNR(int OID, string PNR, string GUID)
        {
            if (String.IsNullOrWhiteSpace(GUID))
                GUID = cm.GetGUID;

            XmlElement XmlElem;
            XmlNamespaceManager xnMgr;

            XmlNode Session = aas.SessionCreate();
            string CID = Session.ChildNodes[0].InnerText;
            string STK = Session.ChildNodes[1].InnerText;

            XmlElem = aas.AbacusCommand(CID, STK, String.Format("*{0}", PNR), GUID);

            xnMgr = new XmlNamespaceManager(XmlElem.OwnerDocument.NameTable);
            xnMgr.AddNamespace("m", AbacusConfig.NamespaceURL(""));

            if (XmlElem.SelectSingleNode("m:Response", xnMgr).InnerText.IndexOf("MODETOUR ORDER NO:").Equals(-1))
            {
                aas.AbacusCommand(CID, STK, String.Format("5 MODETOUR ORDER NO: {0}", OID), GUID);
                XmlElem = aas.AbacusCommand(CID, STK, "E", GUID);
            }

            aas.SessionClose(CID, STK);

            return XmlElem;
        }

        public XmlElement GalileoAddBookingNumberPNR(int OID, string PNR, string GUID)
        {
            if (String.IsNullOrWhiteSpace(GUID))
                GUID = cm.GetGUID;

            XmlElement XmlElem;
            string Token = gas.SessionStartRS(GUID).SelectSingleNode("ResultMsg").InnerText;

            XmlElem = gas.TerminalSubmitRS(Token, String.Format("*{0}", PNR), GUID);

            if (XmlElem.SelectSingleNode("EntryResponse").InnerText.IndexOf("MODETOUR ORDER NO:").Equals(-1))
                XmlElem = gas.RemarksAddRS(OID.ToString(), PNR, "0", String.Format("MODETOUR ORDER NO: {0}", OID), GUID);

            gas.SessionEndRS(Token, GUID);

            return XmlElem;
        }

        #endregion "예약번호 저장"

        #region "PNR 정보 캐싱"

        /// <summary>
        /// PNR 정보 캐싱
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="MID">수정자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILE/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "PNR 정보 캐싱")]
        public XmlElement CachingPNR(int OID, int PID, int MID, string RQT)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 352;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = MID;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");
                XmlElement XmlRes = null;

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    XmlRes = SearchBookingPNR(cm.RequestInt(XmlDBBooking.SelectSingleNode("item/사이트번호").InnerText, 2), XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText, XmlDBBooking.SelectSingleNode("item3/항공사PNR").InnerText, LogGUID);

                    if (XmlRes.SelectNodes("errorMessageText").Count.Equals(0))
                    {
                        try
                        {
                            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
                            {
                                SqlCommand cmd = new SqlCommand
                                {
                                    Connection = conn,
                                    CommandTimeout = 60,
                                    CommandType = CommandType.StoredProcedure,
                                    CommandText = "DBO.WSV_T_아이템예약_예약XML_수정"
                                };

                                cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                                cmd.Parameters.Add("@예약", SqlDbType.Xml, -1);
                                cmd.Parameters.Add("@수정자", SqlDbType.Int, 0);
                                cmd.Parameters.Add("@수정경로", SqlDbType.VarChar, 20);
                                cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                                cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                                cmd.Parameters["@주문번호"].Value = OID;
                                cmd.Parameters["@예약"].Value = XmlRes.OuterXml;
                                cmd.Parameters["@수정자"].Value = MID;
                                cmd.Parameters["@수정경로"].Value = String.IsNullOrWhiteSpace(RQT) ? "WEBSERVICE" : RQT;
                                cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                                cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                                try
                                {
                                    conn.Open();
                                    cmd.ExecuteNonQuery();

                                    if (cmd.Parameters["@결과"].Value.ToString() != "S")
                                        throw new Exception(cmd.Parameters["@에러메시지"].Value.ToString());
                                }
                                catch (Exception ex)
                                {
                                    throw new Exception(ex.Message);
                                }
                                finally
                                {
                                    conn.Close();
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, 0);
                        }
                    }

                    return XmlRes;
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 352, OID, 0).ToErrors;
            }
        }

        #endregion "PNR 정보 캐싱"

        #region "역큐잉"

        /// <summary>
        /// 모두투어 PNR을 대리점에서 사용 가능하도록 권한을 넘겨주고, PNR에 해당 대리점의 연락처 등록
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="PNR">PNR No.</param>
        /// <param name="OfficeId">여행사 Office ID</param>
        /// <param name="GUID">고유번호</param>
        /// <param name="TEL">대리점 연락처</param>
        /// <returns></returns>
        public XmlElement AmadeusQTransferAddTel(int SNM, string PNR, string OfficeId, string GUID, string TEL)
        {
            XmlElement XmlElem;
            XmlNode Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));
            string SID = Session.SelectSingleNode("session/sessionId").InnerText;
            string SCT = Session.SelectSingleNode("session/securityToken").InnerText;
            int SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

            amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), String.Concat("RT", PNR));
            amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), String.Format("AP {0}", TEL));
            amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"), String.Format("ES {0} -B", OfficeId));
            XmlElem = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05"), "ER");

            XmlNamespaceManager xnMgr = new XmlNamespaceManager(XmlElem.OwnerDocument.NameTable);
            xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));

            if (XmlElem.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText.IndexOf("WARNING") != -1 || XmlElem.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText.IndexOf("SIMULTANEOUS") != -1)
            {
                XmlElem = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06"), "ER");
            }

            amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-07"));

            return XmlElem;
        }

        /// <summary>
        /// 모두투어 PNR을 대리점에서 사용 가능하도록 권한을 넘겨줌
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="PNR">PNR No.</param>
        /// <param name="OfficeId">여행사 Office ID</param>
        /// <param name="GUID">고유번호</param>
        /// <remarks>
        /// ① RT 1234-5678
        /// ② ES SELKP3300-B
        /// ③ ER
        /// </remarks>
        /// <returns></returns>
        //[WebMethod(Description = "QTransfer(Amadeus 큐잉전용)(모두투어 PNR을 대리점에서 사용 가능하도록 권한을 넘겨줌)")]
        public XmlElement AmadeusQTransfer(int SNM, string PNR, string OfficeId, string GUID)
        {
            XmlElement XmlElem;
            XmlNode Session = amd.Authenticate(SNM, String.Concat(GUID, "-01"));
            string SID = Session.SelectSingleNode("session/sessionId").InnerText;
            string SCT = Session.SelectSingleNode("session/securityToken").InnerText;
            int SQN = cm.RequestInt(Session.SelectSingleNode("session/sequenceNumber").InnerText, 1);

            amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-02"), String.Concat("RT", PNR));
            amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-03"), String.Concat("ES", OfficeId, "-B"));
            XmlElem = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-04"), "ER");

            XmlNamespaceManager xnMgr = new XmlNamespaceManager(XmlElem.OwnerDocument.NameTable);
            xnMgr.AddNamespace("m", AmadeusConfig.NamespaceURL("Command_Cryptic"));

            if (XmlElem.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText.IndexOf("WARNING") != -1 || XmlElem.SelectSingleNode("m:longTextString/m:textStringDetails", xnMgr).InnerText.IndexOf("SIMULTANEOUS") != -1)
            {
                XmlElem = amd.CommandCrypticRS(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-05"), "ER");
            }

            amd.SignOut(SID, (++SQN).ToString(), SCT, String.Concat(GUID, "-06"));

            return XmlElem;
        }

        /// <summary>
        /// 모두투어 PNR을 대리점에서 사용 가능하도록 권한을 넘겨줌
        /// </summary>
        /// <param name="PNR">PNR No.</param>
        /// <param name="DKCode">여행사 DK Code</param>
        /// <param name="GUID">고유번호</param>
        /// <remarks>
        /// ① *JNWXSB
        /// ② DKJ2GD00 OR (5WT-MD3D/ON)
        /// ③ E
        /// </remarks>
        /// <returns></returns>
        //[WebMethod(Description = "QTransfer(Abacus 큐잉전용)(모두투어 PNR을 대리점에서 사용 가능하도록 권한을 넘겨줌)")]
        public XmlElement AbacusQTransfer(string PNR, string DKCode, string GUID)
        {
            XmlElement XmlElem;
            XmlNode Session = aas.SessionCreate();
            string CID = Session.ChildNodes[0].InnerText;
            string STK = Session.ChildNodes[1].InnerText;

            aas.AbacusCommand(CID, STK, String.Concat("*", PNR), GUID);
            aas.AbacusCommand(CID, STK, String.Concat("DK", DKCode), GUID);
            XmlElem = aas.AbacusCommand(CID, STK, "E", GUID);

            aas.SessionClose(CID, STK);

            return XmlElem;
        }

        /// <summary>
        /// 모두투어 PNR을 대리점에서 사용 가능하도록 권한을 넘겨줌
        /// </summary>
        /// <param name="PNR">PNR No.</param>
        /// <param name="PCC">여행사 PCC</param>
        /// <param name="GUID">고유번호</param>
        /// <remarks>
        /// ① *JNWXSB
        /// ② SI9
        /// ③ W/GS/A/A1B2/ALLOTH/PNRNEW
        /// ④ E
        /// </remarks>
        /// <returns></returns>
        //[WebMethod(Description = "QTransfer(Abacus 큐잉전용)(모두투어 PNR을 대리점에서 사용 가능하도록 권한을 넘겨줌)")]
        public XmlElement AbacusQTransferPCC(string PNR, string PCC, string GUID)
        {
            XmlElement XmlElem;
            XmlNode Session = aas.SessionCreate();
            string CID = Session.ChildNodes[0].InnerText;
            string STK = Session.ChildNodes[1].InnerText;

            aas.AbacusCommand(CID, STK, String.Concat("*", PNR), GUID);
            aas.AbacusCommand(CID, STK, "SI9", GUID);
            aas.AbacusCommand(CID, STK, String.Format("W/GS/A/{0}/ALLOTH/PNRNEW", PCC), GUID);
            XmlElem = aas.AbacusCommand(CID, STK, "E", GUID);

            aas.SessionClose(CID, STK);

            return XmlElem;
        }

        #endregion "역큐잉"

        #region "부가서비스"

        #region "부가서비스 조회"

        /// <summary>
        /// 부가서비스 리스트 조회
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="SSCD">부가서비스 코드(프로모션이 적용된 경우)</param>
        /// <param name="OID">주문번호</param>
        /// <returns></returns>
        [WebMethod(Description = "부가서비스 리스트 조회")]
        public XmlElement SupplementaryServiceList(int SNM, string RQT, string SSCD, int OID)
        {
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 456;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = SSCD;
                sqlParam[10].Value = OID;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            DataSet ds = null;
            int BookingSiteNo = 0;                      //사이트번호
            int BookingAgentNo = 0;                     //거래처번호
            string ValidatingCarrier = string.Empty;    //발권항공사
            string DepartureDate = string.Empty;        //출발일
            string DepartureAirport = string.Empty;     //출발공항
            string TripType = string.Empty;             //여정타입
            string BookingRQT = string.Empty;           //요청단말기
            string BookingDate = string.Empty;          //예약일
            string CancelFlag = string.Empty;           //취소여부
            int Quantity = 0;                           //신청수량

            try
            {
                using (ds = new DataSet())
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
                        {
                            SqlDataAdapter adp = new SqlDataAdapter(cmd);

                            cmd.Connection = conn;
                            cmd.CommandTimeout = 60;
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.CommandText = "DBO.WSV_S_아이템예약_부가서비스_리스트";

                            cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@사이트번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@거래처번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@발권항공사", SqlDbType.Char, 2);
                            cmd.Parameters.Add("@출발일", SqlDbType.VarChar, 12);
                            cmd.Parameters.Add("@출발공항", SqlDbType.Char, 3);
                            cmd.Parameters.Add("@여정타입", SqlDbType.Char, 2);
                            cmd.Parameters.Add("@요청단말기", SqlDbType.VarChar, 20);
                            cmd.Parameters.Add("@예약일", SqlDbType.VarChar, 10);
                            cmd.Parameters.Add("@취소여부", SqlDbType.Char, 1);
                            cmd.Parameters.Add("@인원수", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@할인부가서비스", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                            cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                            cmd.Parameters["@주문번호"].Value = OID;
                            cmd.Parameters["@사이트번호"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@거래처번호"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@발권항공사"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@출발일"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@출발공항"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@여정타입"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@요청단말기"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@예약일"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@취소여부"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@인원수"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@할인부가서비스"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                            adp.Fill(ds);

                            if (!String.IsNullOrWhiteSpace(cmd.Parameters["@사이트번호"].Value.ToString()))
                            {
                                BookingSiteNo = Convert.ToInt32(cmd.Parameters["@사이트번호"].Value);
                                BookingAgentNo = Convert.ToInt32(cmd.Parameters["@거래처번호"].Value);
                                ValidatingCarrier = cmd.Parameters["@발권항공사"].Value.ToString();
                                DepartureDate = cmd.Parameters["@출발일"].Value.ToString();
                                DepartureAirport = cmd.Parameters["@출발공항"].Value.ToString();
                                TripType = cmd.Parameters["@여정타입"].Value.ToString();
                                BookingRQT = cmd.Parameters["@요청단말기"].Value.ToString();
                                BookingDate = cmd.Parameters["@예약일"].Value.ToString();
                                CancelFlag = cmd.Parameters["@취소여부"].Value.ToString();
                                Quantity = Convert.ToInt32(cmd.Parameters["@인원수"].Value);

                                if (String.IsNullOrWhiteSpace(SSCD))
                                {
                                    if (!Convert.ToInt32(cmd.Parameters["@할인부가서비스"].Value).Equals(0))
                                        SSCD = cmd.Parameters["@할인부가서비스"].Value.ToString();
                                }
                            }

                            adp.Dispose();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 456, OID, 0).ToErrors;
            }
            
            try
            {
                #region "예외사항"

                //사이트제한 해제(2016-06-20,정성하과장)
                //사용불가 사이트(홈플러스(항공),스카이스캐너,삼성카드(항공),삼성카드(항공_복지몰),위메프(해외항공),라이나생명(항공권),NV모두투어(항공),카카오(국제선),카약(국제선),신한카드(항공),BIZMODE 국제선항공)
                //string ExceptSite = "/4657/4664/4837/4578/4547/4681/4907/4680/4638/4716/4713/4820/4715/4735/";

                //요청 또는 예약 사이트
                //if (ExceptSite.IndexOf(SNM.ToString()) != -1 || ExceptSite.IndexOf(BookingSiteNo.ToString()) != -1)
                //    throw new Exception("부가서비스 사용이 허용되지 않은 사이트입니다.");
                
                //취소된 예약
                if (CancelFlag.Equals("Y"))
                    throw new Exception("취소된 예약은 부가서비스를 신청할 수 없습니다.");

                //해외출발 불가
                if (!Common.KoreaOfAirport(DepartureAirport))
                    throw new Exception("해외 출발인 경우 부가서비스를 신청할 수 없습니다.");
                
                //왕복 예약만 가능(오픈 예약은 가능)
                if (!TripType.Equals("RT"))
                    throw new Exception("왕복 여정인 경우에만 부가서비스를 신청할 수 있습니다.");

                if (cm.DateDiff("d", BookingDate, "2016-03-01") > 0)
                    throw new Exception("2016년 3월 1일 이후 예약부터 부가서비스를 신청할 수 있습니다.");

                //출발일이 2017/01/31 까지인 경우에만 부가서비스 신청 가능(2016-10-05,송인혁차장)
                //if (cm.DateDiff("d", DepartureDate, "2017-01-31") < 0)
                //    throw new Exception("2017년 1월 31일까지 출발인 경우에만 부가서비스를 신청할 수 있습니다.");

                //출발일이 2017/12/31 까지인 경우에만 부가서비스 신청 가능(2017-10-24,송인혁차장)
                if (cm.DateDiff("d", DepartureDate, "2017-12-31") < 0)
                    throw new Exception("2017년 12월 31일까지 출발인 경우에만 부가서비스를 신청할 수 있습니다.");

                if (ds.Tables.Count.Equals(0))
                    throw new Exception("신청 가능한 부가서비스가 없습니다.");
                
                ////오픈이벤트(2016-03-07 ~ 2016-03-24) 기간중에는 닷컴모바일(3915)만 부가서비스 노출
                //if (cm.DateDiff("d", DateTime.Now.ToString("yyyy-MM-dd"), "2016-03-24") >= 0)
                //{
                //    if (!(BookingSiteNo.Equals(3915) && BookingRQT.StartsWith("MOBILE")))
                //        throw new Exception("오픈 이벤트 기간(2016/03/07 ~ 2016/03/24)에는 모두닷컴(모바일) 예약에 한해서만 부가서비스를 신청할 수 있습니다.");
                //
                //    if (cm.DateDiff("d", DepartureDate, "2016-03-16") > 0 || cm.DateDiff("d", DepartureDate, "2016-08-31") < 0)
                //        throw new Exception("2016/03/16 ~ 2016/08/31 사이에 출발하는 경우에만 부가서비스를 신청할 수 있습니다.");
                //}
                //else
                //    throw new Exception("부가서비스를 신청할 수 있는 대상이 아닙니다.");

                #endregion "예외사항"

                #region "이벤트(프로모션)"

                string EventTitle = string.Empty;
                string EventMessage = string.Empty;
                double EventDiscountRate = 0;
                double EventDiscountPrice = 0;
                bool EventApply = false;

                //모두닷컴(모바일)(3915)
                //if (BookingSiteNo.Equals(3915))
                //{
                //    if (cm.DateDiff("d", DateTime.Now.ToString("yyyy-MM-dd"), "2016-03-24") >= 0)
                //    {
                //        EventTitle = "오픈이벤트";
                //        EventMessage = "오픈 이벤트 기간(2016/03/07 ~ 2016/03/24)에는 모두닷컴(모바일) 예약에 한해서 부가서비스를 무료로 제공(단, 2016/03/16 ~ 2016/08/31 사이 출발인 경우에 한함)";
                //        EventDiscountRate = 100;
                //        EventDiscountPrice = 0;
                //        EventApply = true;
                //    }
                //}

                #endregion "이벤트(프로모션)"

                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.Load(mc.XmlFullPath("SupplementaryServiceList"));

                XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

                XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");

                BookingInfo.SelectSingleNode("modeBookingNo").Attributes.GetNamedItem("siteNo").InnerText = BookingSiteNo.ToString();
                BookingInfo.SelectSingleNode("modeBookingNo").Attributes.GetNamedItem("agnetNo").InnerText = BookingAgentNo.ToString();
                BookingInfo.SelectSingleNode("modeBookingNo").Attributes.GetNamedItem("creationDate").InnerText = BookingDate.ToString();
                BookingInfo.SelectSingleNode("modeBookingNo").Attributes.GetNamedItem("rqt").InnerText = BookingRQT.ToString();
                BookingInfo.SelectSingleNode("modeBookingNo").Attributes.GetNamedItem("cancel").InnerText = CancelFlag.ToString();
                BookingInfo.SelectSingleNode("modeBookingNo").InnerText = OID.ToString();
                BookingInfo.SelectSingleNode("bookingAirline").Attributes.GetNamedItem("code").InnerText = ValidatingCarrier;
                BookingInfo.SelectSingleNode("bookingRtg").Attributes.GetNamedItem("type").InnerText = TripType;
                BookingInfo.SelectSingleNode("bookingRtg").Attributes.GetNamedItem("departureAirport").InnerText = DepartureAirport;
                BookingInfo.SelectSingleNode("bookingRtg").Attributes.GetNamedItem("departureDate").InnerText = DepartureDate;

                XmlNode SupplementaryService = XmlDoc.SelectSingleNode("ResponseDetails/supplementaryService");
                XmlNode Service = SupplementaryService.SelectSingleNode("service");
                XmlNode NewService = null;
                bool Allow = true;

                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        double Cost = Convert.ToDouble(dr["금액"]);
                        string SServiceCode = dr["부가서비스번호"].ToString();
                        EventDiscountPrice = Convert.ToDouble(dr["할인금액"]);
                        Allow = true;

                        //닷컴(2/3915)인 경우 컨시어지서비스(부가서비스번호:6)는 출발일이 2017-03-06 ~ 2017-06-30 인 경우에만 신청 가능(2017-03-03,김승미차장)
                        if (SServiceCode.Equals("6") && (BookingSiteNo.Equals(2) || BookingSiteNo.Equals(3915)))
                        {
                            if (cm.DateDiff("d", DepartureDate, "2017-03-06") > 0 || cm.DateDiff("d", DepartureDate, "2017-06-30") < 0)
                                Allow = false;
                        }
                        
                        if (Allow)
                        {
                            //서비스 추가
                            NewService = SupplementaryService.AppendChild(Service.CloneNode(true));
                            NewService.Attributes.GetNamedItem("code").InnerText = SServiceCode;
                            NewService.SelectSingleNode("name").InnerText = dr["서비스명"].ToString();
                            NewService.SelectSingleNode("summary").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(dr["서비스설명"].ToString()));
                            NewService.SelectSingleNode("description").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(dr["비고사항"].ToString()));

                            //프로모션 금액 설정
                            if (!String.IsNullOrWhiteSpace(SSCD) && SSCD.Equals(SServiceCode))
                            {
                                NewService.SelectSingleNode("price").Attributes.GetNamedItem("amount").InnerText = "0";
                                NewService.SelectSingleNode("price").Attributes.GetNamedItem("cost").InnerText = Cost.ToString();
                                NewService.SelectSingleNode("price").Attributes.GetNamedItem("discount").InnerText = Cost.ToString();
                                NewService.SelectSingleNode("price").Attributes.GetNamedItem("quantity").InnerText = Quantity.ToString();
                                NewService.SelectSingleNode("price").Attributes.GetNamedItem("sellingPrice").InnerText = "0";
                                NewService.SelectSingleNode("price/eventTitle").InnerText = "프로모션 적용";
                                NewService.SelectSingleNode("price").RemoveChild(NewService.SelectSingleNode("price/eventMessage"));
                            }
                            else
                            {
                                ////프로모션이 적용된 부가서비스만 출력(2016-03-29,송민혁과장)(2016-06-20 해제,송민혁과장)
                                //SupplementaryService.RemoveChild(NewService);

                                if (EventDiscountRate > 0)
                                {
                                    EventDiscountPrice = Cost * (EventDiscountRate / 100);
                                }

                                NewService.SelectSingleNode("price").Attributes.GetNamedItem("amount").InnerText = Convert.ToString(Cost - EventDiscountPrice);
                                NewService.SelectSingleNode("price").Attributes.GetNamedItem("cost").InnerText = Cost.ToString();
                                NewService.SelectSingleNode("price").Attributes.GetNamedItem("discount").InnerText = EventDiscountPrice.ToString();
                                NewService.SelectSingleNode("price").Attributes.GetNamedItem("quantity").InnerText = Quantity.ToString();
                                NewService.SelectSingleNode("price").Attributes.GetNamedItem("sellingPrice").InnerText = ((Cost - EventDiscountPrice) * Quantity).ToString();

                                if (EventApply)
                                {
                                    NewService.SelectSingleNode("price/eventTitle").InnerText = EventTitle;

                                    if (String.IsNullOrWhiteSpace(EventMessage))
                                        NewService.SelectSingleNode("price").RemoveChild(NewService.SelectSingleNode("price/eventMessage"));
                                    else
                                        NewService.SelectSingleNode("price/eventMessage").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(EventMessage));
                                }
                                else
                                {
                                    NewService.SelectSingleNode("price").RemoveChild(NewService.SelectSingleNode("price/eventTitle"));
                                    NewService.SelectSingleNode("price").RemoveChild(NewService.SelectSingleNode("price/eventMessage"));
                                }
                            }
                        }
                    }
                }

                SupplementaryService.RemoveChild(Service);

                return XmlDoc.DocumentElement;
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 456, OID, 0).ToErrors;
            }
        }

        #endregion "부가서비스 조회"

        #region "부가서비스 예약"

        /// <summary>
        /// 부가서비스 예약
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="ANM">거래처번호</param>
        /// <param name="RID">예약자 PTID</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="RQU">요청URL</param>
        /// <param name="OID">주문번호</param>
        /// <param name="SXL">선택한 서비스를 <supplementaryService>~<supplementaryService>노드에 삽입한 XML</param>
        /// <returns></returns>
        [WebMethod(Description = "부가서비스 예약")]
        public XmlElement AddBookingSupplementaryService(int SNM, int ANM, int RID, string RQT, string RQU, int OID, string SXL)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청41", SqlDbType.VarChar, -1)
                    };

                sqlParam[0].Value = 457;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = ANM;
                sqlParam[10].Value = RID;
                sqlParam[11].Value = RQU;
                sqlParam[12].Value = OID;
                sqlParam[13].Value = SXL;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            //유효성 체크
            try
            {
                string VaSXL = SXL.ToUpper();

                if (String.IsNullOrWhiteSpace(SXL))
                    throw new Exception("부가서비스 정보가 없습니다.");

                if (VaSXL.IndexOf("?XML") != -1 || VaSXL.IndexOf("!DOCTYPE") != -1)
                    throw new Exception("올바르지 않은 정보입니다.");
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 457, OID, 0).ToErrors;
            }

            return AddBookingSupplementaryServiceDB(OID, RID, SXL, "", RQT, RQU, "");
        }

        /// <summary>
        /// 부가서비스 예약(CRS용)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="RequestNumber">요청일련번호</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="RQU">요청URL</param>
        /// <param name="RIP">요청자IP</param>
        /// <returns></returns>
        [WebMethod(Description = "부가서비스 예약(CRS용)")]
        public XmlElement AddBookingSupplementaryServiceRequest(int SNM, int OID, int RequestNumber, string RQT, string RQU, string RIP)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 460;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = RequestNumber;
                sqlParam[11].Value = RQU;
                sqlParam[12].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            DataSet ds = null;
            int BookingSiteNo = 0;      //사이트번호
            int BookingAgentNo = 0;     //거래처번호
            int Quantity = 0;           //신청수량
            int RID = 0;                //예약자번호
            string RPC = string.Empty;  //대표자 휴대폰

            try
            {
                using (ds = new DataSet())
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
                        {
                            SqlDataAdapter adp = new SqlDataAdapter(cmd);

                            cmd.Connection = conn;
                            cmd.CommandTimeout = 60;
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.CommandText = "DBO.WSV_S_아이템예약_부가서비스_요청리스트";

                            cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@요청일련번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@사이트번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@거래처번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@예약자번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@인원수", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                            cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                            cmd.Parameters["@주문번호"].Value = OID;
                            cmd.Parameters["@요청일련번호"].Value = RequestNumber;
                            cmd.Parameters["@사이트번호"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@거래처번호"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@예약자번호"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@인원수"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                            adp.Fill(ds);

                            if (cmd.Parameters["@결과"].Value.ToString().Equals("F"))
                                throw new Exception(cmd.Parameters["@에러메시지"].Value.ToString());
                            else
                            {
                                if (!String.IsNullOrWhiteSpace(cmd.Parameters["@사이트번호"].Value.ToString()))
                                {
                                    BookingSiteNo = Convert.ToInt32(cmd.Parameters["@사이트번호"].Value);
                                    BookingAgentNo = Convert.ToInt32(cmd.Parameters["@거래처번호"].Value);
                                    RID = Convert.ToInt32(cmd.Parameters["@예약자번호"].Value);
                                    Quantity = Convert.ToInt32(cmd.Parameters["@인원수"].Value);
                                }
                            }

                            adp.Dispose();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 460, OID, 0).ToErrors;
            }

            try
            {
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.Load(mc.XmlFullPath("SupplementaryServiceList"));

                XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

                XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");

                BookingInfo.SelectSingleNode("modeBookingNo").Attributes.GetNamedItem("siteNo").InnerText = BookingSiteNo.ToString();
                BookingInfo.SelectSingleNode("modeBookingNo").Attributes.GetNamedItem("agnetNo").InnerText = BookingAgentNo.ToString();
                BookingInfo.SelectSingleNode("modeBookingNo").Attributes.GetNamedItem("creationDate").InnerText = "";
                BookingInfo.SelectSingleNode("modeBookingNo").Attributes.GetNamedItem("rqt").InnerText = "";
                BookingInfo.SelectSingleNode("modeBookingNo").Attributes.GetNamedItem("cancel").InnerText = "";
                BookingInfo.SelectSingleNode("modeBookingNo").InnerText = OID.ToString();
                BookingInfo.SelectSingleNode("bookingAirline").Attributes.GetNamedItem("code").InnerText = "";
                BookingInfo.SelectSingleNode("bookingRtg").Attributes.GetNamedItem("type").InnerText = "";
                BookingInfo.SelectSingleNode("bookingRtg").Attributes.GetNamedItem("departureAirport").InnerText = "";
                BookingInfo.SelectSingleNode("bookingRtg").Attributes.GetNamedItem("departureDate").InnerText = "";

                XmlNode SupplementaryService = XmlDoc.SelectSingleNode("ResponseDetails/supplementaryService");
                XmlNode Service = SupplementaryService.SelectSingleNode("service");
                XmlNode NewService = null;

                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        double Cost = Convert.ToDouble(dr["금액"]);
                        double EventDiscountPrice = Cost; //CRS는 무조건 무료
                        string SServiceCode = dr["부가서비스번호"].ToString();

                        //서비스 추가
                        NewService = SupplementaryService.AppendChild(Service.CloneNode(true));
                        NewService.Attributes.GetNamedItem("code").InnerText = SServiceCode;
                        NewService.SelectSingleNode("name").InnerText = dr["서비스명"].ToString();
                        NewService.SelectSingleNode("summary").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(dr["서비스설명"].ToString()));
                        NewService.SelectSingleNode("description").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(dr["비고사항"].ToString()));

                        //프로모션 금액 설정
                        NewService.SelectSingleNode("price").Attributes.GetNamedItem("amount").InnerText = Convert.ToString(Cost - EventDiscountPrice);
                        NewService.SelectSingleNode("price").Attributes.GetNamedItem("cost").InnerText = Cost.ToString();
                        NewService.SelectSingleNode("price").Attributes.GetNamedItem("discount").InnerText = EventDiscountPrice.ToString();
                        NewService.SelectSingleNode("price").Attributes.GetNamedItem("quantity").InnerText = Quantity.ToString();
                        NewService.SelectSingleNode("price").Attributes.GetNamedItem("sellingPrice").InnerText = ((Cost - EventDiscountPrice) * Quantity).ToString();
                        NewService.SelectSingleNode("price/eventTitle").InnerText = "CRS 프로모션 적용";
                        NewService.SelectSingleNode("price").RemoveChild(NewService.SelectSingleNode("price/eventMessage"));

                        if (String.IsNullOrWhiteSpace(RPC))
                            RPC = dr["대표자휴대폰"].ToString();
                    }
                }

                SupplementaryService.RemoveChild(Service);

                if (SupplementaryService.HasChildNodes)
                    return AddBookingSupplementaryServiceDB(OID, RID, SupplementaryService.OuterXml, RPC, RQT, RQU, RIP);
                else
                    throw new Exception("신청할 수 있는 부가서비스가 없습니다.");
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 460, OID, 0).ToErrors;
            }
        }

        /// <summary>
        /// 부가서비스 단품 예약(CRS용)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="SSCD">부가서비스 코드</param>
        /// <param name="RPC">대표자 연락처(휴대폰번호)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="RQU">요청URL</param>
        /// <param name="RIP">요청자IP</param>
        /// <returns></returns>
        [WebMethod(Description = "부가서비스 단품 예약(CRS용)")]
        public XmlElement AddBookingSupplementaryServiceRequestItem(int SNM, int OID, int SSCD, string RPC, string RQT, string RQU, string RIP)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청5", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 461;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = SSCD;
                sqlParam[11].Value = RPC;
                sqlParam[12].Value = RQU;
                sqlParam[13].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            DataSet ds = null;
            int BookingSiteNo = 0;      //사이트번호
            int BookingAgentNo = 0;     //거래처번호
            int Quantity = 0;           //신청수량
            int RID = 0;                //예약자번호

            try
            {
                using (ds = new DataSet())
                {
                    using (SqlCommand cmd = new SqlCommand())
                    {
                        using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
                        {
                            SqlDataAdapter adp = new SqlDataAdapter(cmd);

                            cmd.Connection = conn;
                            cmd.CommandTimeout = 60;
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.CommandText = "DBO.WSV_S_아이템예약_부가서비스_단품요청";

                            cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@부가서비스번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@사이트번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@거래처번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@예약자번호", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@인원수", SqlDbType.Int, 0);
                            cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                            cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                            cmd.Parameters["@주문번호"].Value = OID;
                            cmd.Parameters["@부가서비스번호"].Value = SSCD;
                            cmd.Parameters["@사이트번호"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@거래처번호"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@예약자번호"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@인원수"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                            cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                            adp.Fill(ds);

                            if (cmd.Parameters["@결과"].Value.ToString().Equals("F"))
                                throw new Exception(cmd.Parameters["@에러메시지"].Value.ToString());
                            else
                            {
                                if (!String.IsNullOrWhiteSpace(cmd.Parameters["@사이트번호"].Value.ToString()))
                                {
                                    BookingSiteNo = Convert.ToInt32(cmd.Parameters["@사이트번호"].Value);
                                    BookingAgentNo = Convert.ToInt32(cmd.Parameters["@거래처번호"].Value);
                                    RID = Convert.ToInt32(cmd.Parameters["@예약자번호"].Value);
                                    Quantity = Convert.ToInt32(cmd.Parameters["@인원수"].Value);
                                }
                            }

                            adp.Dispose();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 461, OID, 0).ToErrors;
            }

            try
            {
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.Load(mc.XmlFullPath("SupplementaryServiceList"));

                XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

                XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");

                BookingInfo.SelectSingleNode("modeBookingNo").Attributes.GetNamedItem("siteNo").InnerText = BookingSiteNo.ToString();
                BookingInfo.SelectSingleNode("modeBookingNo").Attributes.GetNamedItem("agnetNo").InnerText = BookingAgentNo.ToString();
                BookingInfo.SelectSingleNode("modeBookingNo").Attributes.GetNamedItem("creationDate").InnerText = "";
                BookingInfo.SelectSingleNode("modeBookingNo").Attributes.GetNamedItem("rqt").InnerText = "";
                BookingInfo.SelectSingleNode("modeBookingNo").Attributes.GetNamedItem("cancel").InnerText = "";
                BookingInfo.SelectSingleNode("modeBookingNo").InnerText = OID.ToString();
                BookingInfo.SelectSingleNode("bookingAirline").Attributes.GetNamedItem("code").InnerText = "";
                BookingInfo.SelectSingleNode("bookingRtg").Attributes.GetNamedItem("type").InnerText = "";
                BookingInfo.SelectSingleNode("bookingRtg").Attributes.GetNamedItem("departureAirport").InnerText = "";
                BookingInfo.SelectSingleNode("bookingRtg").Attributes.GetNamedItem("departureDate").InnerText = "";

                XmlNode SupplementaryService = XmlDoc.SelectSingleNode("ResponseDetails/supplementaryService");
                XmlNode Service = SupplementaryService.SelectSingleNode("service");
                XmlNode NewService = null;

                if (ds.Tables.Count > 0)
                {
                    foreach (DataRow dr in ds.Tables[0].Rows)
                    {
                        double Cost = Convert.ToDouble(dr["금액"]);
                        double EventDiscountPrice = Cost; //CRS는 무조건 무료
                        string SServiceCode = dr["부가서비스번호"].ToString();

                        //서비스 추가
                        NewService = SupplementaryService.AppendChild(Service.CloneNode(true));
                        NewService.Attributes.GetNamedItem("code").InnerText = SServiceCode;
                        NewService.SelectSingleNode("name").InnerText = dr["서비스명"].ToString();
                        NewService.SelectSingleNode("summary").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(dr["서비스설명"].ToString()));
                        NewService.SelectSingleNode("description").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(dr["비고사항"].ToString()));

                        //프로모션 금액 설정
                        NewService.SelectSingleNode("price").Attributes.GetNamedItem("amount").InnerText = Convert.ToString(Cost - EventDiscountPrice);
                        NewService.SelectSingleNode("price").Attributes.GetNamedItem("cost").InnerText = Cost.ToString();
                        NewService.SelectSingleNode("price").Attributes.GetNamedItem("discount").InnerText = EventDiscountPrice.ToString();
                        NewService.SelectSingleNode("price").Attributes.GetNamedItem("quantity").InnerText = Quantity.ToString();
                        NewService.SelectSingleNode("price").Attributes.GetNamedItem("sellingPrice").InnerText = ((Cost - EventDiscountPrice) * Quantity).ToString();
                        NewService.SelectSingleNode("price/eventTitle").InnerText = "CRS 프로모션 적용";
                        NewService.SelectSingleNode("price").RemoveChild(NewService.SelectSingleNode("price/eventMessage"));
                    }
                }

                SupplementaryService.RemoveChild(Service);

                if (SupplementaryService.HasChildNodes)
                    return AddBookingSupplementaryServiceDB(OID, RID, SupplementaryService.OuterXml, RPC, RQT, RQU, RIP);
                else
                    throw new Exception("신청할 수 있는 부가서비스가 없습니다.");
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 461, OID, 0).ToErrors;
            }
        }

        /// <summary>
        /// 부가서비스 저장
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="RID">예약자 PTID</param>
        /// <param name="SXL">선택한 서비스를 <supplementaryService>~<supplementaryService>노드에 삽입한 XML</param>
        /// <param name="RPC">대표자 휴대폰번호</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="RQU">요청URL</param>
        /// <param name="RIP">요청자IP</param>
        /// <returns></returns>
        public XmlElement AddBookingSupplementaryServiceDB(int OID, int RID, string SXL, string RPC, string RQT, string RQU, string RIP)
        {
            try
            {
                try
                {
                    using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
                    {
                        SqlCommand cmd = new SqlCommand
                        {
                            Connection = conn,
                            CommandTimeout = 60,
                            CommandType = CommandType.StoredProcedure,
                            CommandText = "DBO.WSV_T_아이템예약_해외항공_부가서비스"
                        };

                        cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                        cmd.Parameters.Add("@예약자번호", SqlDbType.Int, 0);
                        cmd.Parameters.Add("@부가서비스", SqlDbType.Xml, -1);
                        cmd.Parameters.Add("@대표자휴대폰", SqlDbType.VarChar, 20);
                        cmd.Parameters.Add("@요청단말기", SqlDbType.VarChar, 20);
                        cmd.Parameters.Add("@요청URL", SqlDbType.VarChar, 1000);
                        cmd.Parameters.Add("@요청자IP", SqlDbType.VarChar, 30);
                        cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                        cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                        cmd.Parameters["@주문번호"].Value = OID;
                        cmd.Parameters["@예약자번호"].Value = RID;
                        cmd.Parameters["@부가서비스"].Value = SXL;
                        cmd.Parameters["@대표자휴대폰"].Value = String.IsNullOrWhiteSpace(RPC) ? Convert.DBNull : RPC;
                        cmd.Parameters["@요청단말기"].Value = RQT;
                        cmd.Parameters["@요청URL"].Value = RQU;
                        cmd.Parameters["@요청자IP"].Value = RIP;
                        cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                        cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                        try
                        {
                            conn.Open();
                            cmd.ExecuteNonQuery();

                            if (!cmd.Parameters["@결과"].Value.ToString().Equals("S"))
                                throw new Exception(cmd.Parameters["@에러메시지"].Value.ToString());
                        }
                        catch (Exception ex)
                        {
                            throw new Exception(ex.Message);
                        }
                        finally
                        {
                            conn.Close();
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception(ex.Message);
                }

                //통합구조
                XmlDocument XmlBook = new XmlDocument();
                XmlBook.Load(mc.XmlFullPath("AddBookingSupplementaryService"));

                XmlBook.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

                XmlNode BookInfo = XmlBook.SelectSingleNode("ResponseDetails/bookingInfo");

                BookInfo.SelectSingleNode("bookingNo").InnerText = OID.ToString();
                BookInfo.SelectSingleNode("reserveByNo").InnerText = RID.ToString();
                BookInfo.SelectSingleNode("bookingCreationDate").InnerText = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss");

                return XmlBook.DocumentElement;
            }
            catch (Exception ex)
            {
                return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, 0).ToErrors;
            }
        }

        #endregion "부가서비스 예약"

        #region "부가서비스 취소"

        /// <summary>
        /// 부가서비스 예약취소
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="IBN">주문아이템번호</param>
		/// <param name="PID">예약자번호(PTID)</param>
        /// <param name="CID">취소자번호(PTID)</param>
        /// <param name="CRN">취소사유</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="RIP">요청자IP</param>
		/// <returns></returns>
        [WebMethod(Description = "부가서비스 예약취소")]
        public XmlElement CancelBookingSupplementaryService(int SNM, int IBN, int PID, int CID, string CRN, string RQT, string RIP)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 472;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = RQT;
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = IBN;
                sqlParam[8].Value = PID;
                sqlParam[9].Value = CID;
                sqlParam[10].Value = CRN;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
            {
                try
                {
                    using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
                    {
                        SqlCommand cmd = new SqlCommand
                        {
                            Connection = conn,
                            CommandTimeout = 60,
                            CommandType = CommandType.StoredProcedure,
                            CommandText = "DBO.WSV_T_아이템예약_해외항공_부가서비스_취소"
                        };

                        cmd.Parameters.Add("@주문아이템번호", SqlDbType.Int, 0);
                        cmd.Parameters.Add("@예약자", SqlDbType.Int, 0);
                        cmd.Parameters.Add("@취소자", SqlDbType.Int, 0);
                        cmd.Parameters.Add("@취소사유", SqlDbType.Char, 2);
                        cmd.Parameters.Add("@요청단말기", SqlDbType.VarChar, 20);
                        cmd.Parameters.Add("@요청URL", SqlDbType.VarChar, 1000);
                        cmd.Parameters.Add("@요청자IP", SqlDbType.VarChar, 30);
                        cmd.Parameters.Add("@SMS발송여부", SqlDbType.Char, 1);
                        cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                        cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                        cmd.Parameters["@주문아이템번호"].Value = IBN;
                        cmd.Parameters["@예약자"].Value = PID;
                        cmd.Parameters["@취소자"].Value = CID;
                        cmd.Parameters["@취소사유"].Value = String.IsNullOrWhiteSpace(CRN) ? "00" : CRN;
                        cmd.Parameters["@요청단말기"].Value = RQT;
                        cmd.Parameters["@요청URL"].Value = Convert.DBNull;
                        cmd.Parameters["@요청자IP"].Value = RIP;
                        cmd.Parameters["@SMS발송여부"].Value = "Y";
                        cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                        cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                        try
                        {
                            conn.Open();
                            cmd.ExecuteNonQuery();

                            if (!cmd.Parameters["@결과"].Value.ToString().Equals("S"))
                                throw new Exception(cmd.Parameters["@에러메시지"].Value.ToString());
                        }
                        catch (Exception ex)
                        {
                            throw new Exception(ex.Message);
                        }
                        finally
                        {
                            conn.Close();
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw new Exception(ex.Message);
                }

                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.Load(mc.XmlFullPath("CancelBookingSupplementaryService"));

                XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

                XmlNode BookingInfo = XmlDoc.SelectSingleNode("ResponseDetails/bookingInfo");
                BookingInfo.SelectSingleNode("modeBookingNo").InnerText = "";
                BookingInfo.SelectSingleNode("modeBookingNo").Attributes.GetNamedItem("ibn").InnerText = IBN.ToString();
                BookingInfo.SelectSingleNode("bookingStatus").Attributes.GetNamedItem("code").InnerText = "XX";

                return XmlDoc.DocumentElement;
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 472, 0, IBN).ToErrors;
            }
        }

        #endregion "부가서비스 취소"

        #endregion "부가서비스"

        #region "할인쿠폰(미개발)"

        /// <summary>
        /// 할인쿠폰 발급
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="RID">예약자 PTID</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        public XmlElement DiscountCouponIssuedDB(int SNM, int OID, int RID, string RQT)
        {
            try
            {
                try
                {
                    using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
                    {
                        SqlCommand cmd = new SqlCommand
                        {
                            Connection = conn,
                            CommandTimeout = 30,
                            CommandType = CommandType.StoredProcedure,
                            CommandText = "DBO.WSV_T_할인쿠폰_발급"
                        };

                        cmd.Parameters.Add("@대분류", SqlDbType.Char, 1);
                        cmd.Parameters.Add("@소분류", SqlDbType.Char, 1);
                        cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                        cmd.Parameters.Add("@발급자", SqlDbType.Int, 0);
                        cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                        cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                        cmd.Parameters["@대분류"].Value = "M" ;
                        cmd.Parameters["@소분류"].Value = "A";
                        cmd.Parameters["@주문번호"].Value = OID;
                        cmd.Parameters["@발급자"].Value = RID;
                        cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                        cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                        try
                        {
                            conn.Open();
                            cmd.ExecuteNonQuery();

                            if (!cmd.Parameters["@결과"].Value.ToString().Equals("S"))
                                throw new Exception(cmd.Parameters["@에러메시지"].Value.ToString());
                        }
                        catch (Exception ex)
                        {
                            throw new Exception(ex.Message);
                        }
                        finally
                        {
                            conn.Close();
                        }
                    }
                }
                catch (Exception ex)
                {
                    return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, 0).ToErrors;
                }

                //통합구조
                XmlDocument XmlBook = new XmlDocument();
                XmlBook.Load(mc.XmlFullPath("AddBookingSupplementaryService"));

                XmlBook.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

                XmlNode BookInfo = XmlBook.SelectSingleNode("ResponseDetails/bookingInfo");

                BookInfo.SelectSingleNode("bookingNo").InnerText = OID.ToString();
                BookInfo.SelectSingleNode("reserveByNo").InnerText = RID.ToString();
                BookInfo.SelectSingleNode("bookingCreationDate").InnerText = DateTime.Now.ToString("yyyy-MM-dd hh:mm:ss");

                return XmlBook.DocumentElement;
            }
            catch (Exception ex)
            {
                return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, OID, 0).ToErrors;
            }
        }

        #endregion "할인쿠폰"

        #region "모두톡 발송"

        /// <summary>
        /// 모두톡 발송
        /// </summary>
        /// <param name="Message">메세지내용</param>
        /// <param name="Receive">수신자</param>
        /// <returns></returns>
        public bool SendModeTalk(string Message, string Receive)
        {
            bool Result = false;
            
            try
            {
                using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
                {
                    SqlCommand cmd = new SqlCommand();

                    cmd.Connection = conn;
                    cmd.CommandTimeout = 10;
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.CommandText = "DBO.USP_T_모두톡발송예약";

                    cmd.Parameters.Add("@메세지타입", SqlDbType.VarChar, 2);
                    cmd.Parameters.Add("@메세지종류", SqlDbType.VarChar, 2);
                    cmd.Parameters.Add("@메세지내용", SqlDbType.VarChar, -1);
                    cmd.Parameters.Add("@발송타입", SqlDbType.VarChar, 2);
                    cmd.Parameters.Add("@등록자", SqlDbType.Int, 0);
                    cmd.Parameters.Add("@수신자", SqlDbType.VarChar, -1);
                    cmd.Parameters.Add("@수신타입", SqlDbType.VarChar, 2);
                    cmd.Parameters.Add("@예약발송일시", SqlDbType.DateTime, 0);
                    cmd.Parameters.Add("@예약발송여부", SqlDbType.Char, 1);
                    cmd.Parameters.Add("@모두톡메세지번호", SqlDbType.Int, 0);

                    cmd.Parameters["@메세지타입"].Value = "01";
                    cmd.Parameters["@메세지종류"].Value = "FA";
                    cmd.Parameters["@메세지내용"].Value = Message;
                    cmd.Parameters["@발송타입"].Value = "50";
                    cmd.Parameters["@등록자"].Value = "1743";
                    cmd.Parameters["@수신자"].Value = Receive;
                    cmd.Parameters["@수신타입"].Value = "01";
                    cmd.Parameters["@예약발송일시"].Value = Convert.DBNull;
                    cmd.Parameters["@예약발송여부"].Value = "N";
                    cmd.Parameters["@모두톡메세지번호"].Direction = ParameterDirection.Output;
                    
                    try
                    {
                        conn.Open();
                        cmd.ExecuteNonQuery();
                        
                        Result = !String.IsNullOrWhiteSpace(cmd.Parameters["@모두톡메세지번호"].Value.ToString()) ? true : false;
                    }
                    catch (Exception ex)
                    {
                        throw new Exception(ex.ToString());
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
            }
            catch (Exception ex)
            {
                new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0);
            }

            return Result;
        }

        #endregion "모두톡 발송"

        #region "파일 저장(로그기록)"

        /// <summary>
        /// 파일저장(로그기록)
        /// </summary>
        /// <param name="OID">주문번호</param>
        /// <param name="Item">아이템(BookingEmail/ETicket)</param>
        /// <param name="URL">URL</param>
        /// <returns></returns>
        [WebMethod(Description = "파일저장(로그기록)")]
		public string AAAAAAAAAAAAAASaveContents(int OID, string Item, string URL)
        {
            string LogGUID = cm.GetGUID;
            
            try
            {
                OID = 0;
                Item = "BookingEmail";
                URL = "http://172.30.52.110:8202/AirService.asmx/SearchBookingRS?ULC=&SNM=3915&OID=40117997&PID=4658812&RQT=MODEMANAGER&RIP=";

                System.Net.HttpWebRequest req = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(URL);
                req.ReadWriteTimeout = 300000;
                req.Timeout = 300000;

                using (System.Net.HttpWebResponse res = (System.Net.HttpWebResponse)req.GetResponse())
                {
                    return cm.StringFileSave(new System.IO.StreamReader(res.GetResponseStream(), System.Text.Encoding.GetEncoding("UTF-8")).ReadToEnd(), Item, OID.ToString(), LogGUID);
                }
            }
            catch (Exception ex)
            {
                return ex.ToString();
            }
        }

        #endregion "파일 저장(로그기록)"

        #region "세이버 전용"

        #region "SearchRule(세이버)"

        /// <summary>
        /// 운임규정 조회(세이버)
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="PMID">프로모션 번호</param>
        /// <param name="AirCode">항공사코드</param>
        /// <param name="AddRule">추가규정 정보(규정명:내용^규정명:내용..)</param>
        /// <param name="FareRuleUrl">운임규정 파리미터 정보</param>
        /// <returns></returns>
        [WebMethod(Description = "운임규정 조회(세이버)")]
        public XmlElement SearchRuleSabreRS(int SNM, string PMID, string AirCode, string AddRule, string FareRuleUrl)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 546;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = PMID;
                sqlParam[8].Value = AirCode;
                sqlParam[9].Value = AddRule;
                sqlParam[10].Value = FareRuleUrl;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.Load(mc.XmlFullPath("SearchRuleRS"));

                XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

                XmlNode ResponseDetails = XmlDoc.SelectSingleNode("ResponseDetails");
                XmlNode Rule = ResponseDetails.SelectSingleNode("rule");
                XmlNode Item = Rule.SelectSingleNode("item");
                XmlNode FareInfos = ResponseDetails.SelectSingleNode("fareInfos");
                XmlNode FareInfo = FareInfos.SelectSingleNode("fareInfo");
                XmlNode NewRule;
                XmlNode NewItem;
                XmlNode NewFareInfo;
                int RuleRef = 1;
                int ItemRef = 1;

                //세이버 규정
                XmlElement RuleXml = sas.FareRuleRS(FareRuleUrl, LogGUID);
                
                //오류체크
                if (RuleXml.SelectSingleNode("error_no").InnerText != "0")
                    throw new Exception(RuleXml.SelectSingleNode("error_desc").InnerText);

                //항공사
                AirCode = String.IsNullOrWhiteSpace(AirCode) ? RuleXml.SelectSingleNode("reply_if_t/tkt_car").InnerText : AirCode;

                //무료수하물 정보
                string StrBaggageRule = String.Empty;
                XmlElement BaggageRuleXml = sas.SearchBaggageRS(AirCode);

                if (BaggageRuleXml.SelectNodes("rule").Count > 0)
                {
                    StrBaggageRule = String.Concat(
                                            (BaggageRuleXml.SelectNodes("rule/ACB_BAGGAGE_DESC").Count > 0) ? String.Format("{0}<BR><BR>", BaggageRuleXml.SelectSingleNode("rule/ACB_BAGGAGE_DESC").InnerText) : "",
                                            (BaggageRuleXml.SelectNodes("rule/ACB_BAGGAGE_URL").Count > 0) ? String.Format("{0}<BR>", BaggageRuleXml.SelectSingleNode("rule/ACB_BAGGAGE_URL").InnerText) : "",
                                            (BaggageRuleXml.SelectNodes("rule/ACB_HOMEPAGE_URL").Count > 0) ? BaggageRuleXml.SelectSingleNode("rule/ACB_HOMEPAGE_URL").InnerText : "");
                }
                
                foreach (XmlNode RuleInfo in RuleXml.SelectNodes("reply_fare_rule_t"))
                {
                    NewRule = ResponseDetails.InsertBefore(Rule.CloneNode(false), FareInfos);
                    NewRule.Attributes.GetNamedItem("ref").InnerText = (RuleRef++).ToString();

                    ItemRef = 1;

                    if (!String.IsNullOrWhiteSpace(AddRule))
                    {
                        foreach (string AddRules in AddRule.Split('^'))
                        {
                            if (!String.IsNullOrWhiteSpace(AddRules))
                            {
                                string[] AddRuleText = AddRules.Split(':');

                                NewItem = NewRule.AppendChild(Item.CloneNode(true));
                                NewItem.Attributes.GetNamedItem("ref").InnerText = (ItemRef++).ToString();
                                NewItem.SelectSingleNode("name").InnerText = AddRuleText[0];
                                NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(AddRuleText[1]));
                            }
                        }
                    }

                    foreach (XmlNode FareRules in RuleInfo.SelectNodes("fare_rule_type_t"))
                    {
                        string RuleMessage = string.Empty;

                        foreach (XmlNode RuleMessages in FareRules.SelectNodes("fare_rule_code_t"))
                        {
                            if (!String.IsNullOrWhiteSpace(RuleMessage))
                                RuleMessage += "<BR>";
                            
                            RuleMessage += Server.HtmlDecode(RuleMessages.SelectSingleNode("frc_desc").InnerText);
                        }
                        
                        NewItem = NewRule.AppendChild(Item.CloneNode(true));
                        NewItem.Attributes.GetNamedItem("ref").InnerText = (ItemRef++).ToString();
                        NewItem.SelectSingleNode("name").InnerText = FareRules.SelectSingleNode("frt_desc").InnerText;
                        NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(RuleMessage));
                    }

                    if (!String.IsNullOrWhiteSpace(StrBaggageRule))
                    {
                        NewItem = NewRule.AppendChild(Item.CloneNode(true));
                        NewItem.Attributes.GetNamedItem("ref").InnerText = (ItemRef++).ToString();
                        NewItem.SelectSingleNode("name").InnerText = "무료수하물";
                        NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(StrBaggageRule));
                    }
                }

                ResponseDetails.RemoveChild(Rule);

                FareInfos.Attributes.GetNamedItem("gds").InnerText = "Sabre";
                FareInfos.Attributes.GetNamedItem("ulc").InnerText = "EN";
                RuleRef = 1;

                foreach (XmlNode RuleFareInfo in RuleXml.SelectNodes("reply_if_t/reply_itin_t"))
                {
                    NewFareInfo = FareInfos.AppendChild(FareInfo.CloneNode(true));
                    NewFareInfo.Attributes.GetNamedItem("ref").InnerText = (RuleRef++).ToString();

                    NewFareInfo.SelectSingleNode("item[@name='Origin']").InnerText = RuleFareInfo.SelectSingleNode("dep").InnerText;
                    NewFareInfo.SelectSingleNode("item[@name='Destination']").InnerText = RuleFareInfo.SelectSingleNode("arr").InnerText;
                    NewFareInfo.SelectSingleNode("item[@name='FareCategory']").InnerText = RuleFareInfo.SelectSingleNode("fare_group_id").InnerText;
                    NewFareInfo.SelectSingleNode("item[@name='FareClass']").InnerText = RuleFareInfo.SelectSingleNode("fare_basis").InnerText;
                    NewFareInfo.SelectSingleNode("item[@name='AdvanceAfter']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='AdvanceBefore']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='MinStay']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='MaxStay']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='FareType']").InnerText = RuleFareInfo.SelectSingleNode("algf_group_code").InnerText;
                    NewFareInfo.SelectSingleNode("item[@name='BookingClass']").InnerText = RuleFareInfo.SelectSingleNode("booking_cls").InnerText;
                    NewFareInfo.SelectSingleNode("item[@name='RuleNumber']").InnerText = RuleFareInfo.SelectSingleNode("aff_id").InnerText;
                    NewFareInfo.SelectSingleNode("item[@name='TariffId']").InnerText = RuleFareInfo.SelectSingleNode("afs_id").InnerText;
                }

                FareInfos.RemoveChild(FareInfo);

                //### 추가 운임규정 #####
                XmlElement XmlMode = UpdateRuleInfo(SNM, "Sabre", ((RuleXml.SelectNodes("reply_if_t/igc_code").Count > 0) ? RuleXml.SelectSingleNode("reply_if_t/igc_code").InnerText : RuleXml.SelectSingleNode("reply_if_t/igc_code_desc").InnerText), RuleXml.SelectSingleNode("FirstDep").InnerText, RuleXml.SelectSingleNode("FirstArr").InnerText, RuleXml.SelectSingleNode("reply_if_t/tkt_car").InnerText, XmlDoc.DocumentElement);

                //### 프로모션 #####
                if (cm.RequestInt(PMID) > 0 && XmlMode.SelectNodes("rule").Count > 0)
                    XmlMode = UpdatePromotionInfo(cm.RequestInt(PMID), XmlMode);

                cm.XmlFileSave(XmlMode, mc.Name, "SearchRuleSabreRS", "N", LogGUID);

                return XmlDoc.DocumentElement;
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 546, 0, 0).ToErrors;
            }
        }

        #endregion "SearchRule(세이버)"

        #region "세이버 자동발권"

        //[WebMethod(Description = "세이버 자동발권")]
        public XmlElement AAAAAAAAAAAAATicketIssuingSemiAutoSabreRS()
        {
            int SNM = 2;
            int OID = 39898532;
            int PID = 1849;
            string PNR = "WBLWQV";
            string PVC = "OZ";
            XmlElement FP = null;
            int RQR = 1743;
            string RQT = "WEBSERVICE";
            string RIP = "";
            string GUID = cm.GetGUID;
            
            return TicketIssuingSemiAutoSabreRS(SNM, OID, PID, PNR, PVC, FP, RQR, RQT, RIP, GUID);
        }

        [WebMethod(Description = "세이버 자동발권")]
        public XmlElement AAAAAAAAAAAAATicketIssuingSemiAutoSabreCardRS()
        {
            string CardNo = "5433-3305-5183-6817";
            string CardExt = "0523";
            string CardType = "CA";
            int InstMonth = 0;
            string AirCode = "OZ";
            int Amount = 1000;
            string GUID = cm.GetGUID;

            //return sas.CardApprovalRQ("TK",CardNo, CardExt, CardType, InstMonth, AirCode, Amount);
            return sas.CardApprovalRS(CardNo, CardExt, CardType, InstMonth, AirCode, Amount, GUID);
        }

        [WebMethod(Description = "세이버 자동발권")]
        public XmlElement AAAAAAAAAAAAATicketIssuingSemiAutoSabreCardCancelRS()
        {
            string CardNo = "5433-3305-5183-6817";
            string CardExt = "0523";
            string CardType = "CA";
            int InstMonth = 0;
            string AirCode = "OZ";
            int Amount = 1000;
            int ApprNo = 63121861;
            string GUID = cm.GetGUID;

            //return sas.CardApprovalCancelRQ("TK", CardNo, CardExt, CardType, InstMonth, AirCode, Amount, ApprNo);
            return sas.CardApprovalCancelRS(CardNo, CardExt, CardType, InstMonth, AirCode, Amount, ApprNo, GUID);
        }

        /// <summary>
        /// 세이버 자동발권
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="PNR">PNR</param>
        /// <param name="PVC">발권항공사</param>
        /// <param name="FP">결제요청정보</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="RIP">요청자IP</param>
        /// <param name="GUID">고유번호</param>
        /// <returns></returns>
        //[WebMethod(Description = "세이버 자동발권")]
        public XmlElement TicketIssuingSemiAutoSabreRS(int SNM, int OID, int PID, string PNR, string PVC, XmlElement FP, int RQR, string RQT, string RIP, string GUID)
        {
            string CID = String.Empty;
            string STK = String.Empty;

            try
            {
                //결과
                XmlElement ResXml;

                //네임스페이스
                XmlNamespaceManager xnMgr;

                //### 01.세션생성 #####
                XmlElement Session = aas.SessionCreate();
                CID = Session.ChildNodes[0].InnerText;
                STK = Session.ChildNodes[1].InnerText;

                //### 02.PNR조회(PNR_Retrieve) #####
                ResXml = aas.GetReservationRS(CID, STK, PNR, String.Concat(GUID, "-02"));

                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("stl19", AbacusConfig.NamespaceURL("GetReservation_stl19"));
                xnMgr.AddNamespace("or114", AbacusConfig.NamespaceURL("GetReservation_or114"));

                //오류 결과일 경우 예외 처리
                if (ResXml.SelectNodes("stl19:Errors", xnMgr).Count > 0)
                    throw new Exception(ResXml.SelectSingleNode("stl19:Errors/stl19:Error/stl19:Message", xnMgr).InnerText);

                //### 03.운임Pricing(AbacusAirPriceRS) #####
                ResXml = aas.AbacusAirPriceRS(CID, STK, String.Concat(GUID, "-03"), PVC);

                xnMgr = new XmlNamespaceManager(ResXml.OwnerDocument.NameTable);
                xnMgr.AddNamespace("m", AbacusConfig.NamespaceURL("OTA_AirPriceLLS"));
                xnMgr.AddNamespace("stl", "http://services.sabre.com/STL/v01");

                //오류 결과일 경우 예외 처리
                if (ResXml.SelectNodes("stl:ApplicationResults/stl:Error", xnMgr).Count > 0)
                    throw new Exception(ResXml.SelectSingleNode("stl:ApplicationResults/stl:Error/stl:SystemSpecificResults/stl:Message", xnMgr).InnerText);
                
                //### 04.프린터지정(DesignatePrinterLLS) #####
                ResXml = aas.DesignatePrinterHardcopyRS(CID, STK, String.Concat(GUID, "-04_1"), "");
                ResXml = aas.DesignatePrinterInvoiceItineraryRS(CID, STK, String.Concat(GUID, "-04_2"), "");
                ResXml = aas.DesignatePrinterTicketRS(CID, STK, String.Concat(GUID, "-04_3"), "KR");

                //### 05.발권(AirTicketLLS) #####
                string FOPType = "CC";
                //string[] CardCode = new String[2] { "", "CA" };
                //string[] CardNumber = new String[2] { "", "5433-3305-5183-6817" };
                //string[] CardExpireDate = new String[2] { "", "2023-05" };
                //string[] CardExtendedPayment = new String[2] { "", "0" };
                //string[] Price = new String[2] { "7800", "" };
                //string[] NameNumber = new String[2] { "01.01", "02.01" };
                string[] CardCode = new String[2] { "CA", "" };
                string[] CardNumber = new String[2] { "5433-3305-5183-6817", "" };
                string[] CardExpireDate = new String[2] { "2023-05", "" };
                string[] CardExtendedPayment = new String[2] { "0", "" };
                string[] Price = new String[2] { "429200", "" };
                string[] NameNumber = new String[2] { "01.01", "02.01" };
                
                //ResXml = aas.AirTicketLLSRQ(PVC, FOPType, CardCode, CardNumber, CardExpireDate, CardExtendedPayment, Price, NameNumber);
                ResXml = aas.AirTicketLLSRS(CID, STK, String.Concat(GUID, "-05"), PVC, FOPType, CardCode, CardNumber, CardExpireDate, CardExtendedPayment, Price, NameNumber);



                //### 99.세션종료 #####
                aas.SessionClose(CID, STK);
                CID = "";
                STK = "";


                return ResXml;
            }
            catch (Exception ex)
            {
                //### 세션종료 #####
                if (!String.IsNullOrWhiteSpace(CID))
                    aas.SessionClose(CID, STK);

                return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0).ToErrors;
            }
        }

        #endregion "세이버 자동발권"

        #endregion "세이버 전용"

        #region "갈릴레오 전용"

        #region "갈릴레오 동시조회 결과 통합형으로 변경(네이버 랜딩페이지용)"

        //[WebMethod(Description = "갈릴레오")]
        public XmlElement AAAAAAAAAAAToModeReservationProcessGalileoTEST()
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("_RetrieveGalileoRS"));

            return ToModeReservationProcessGalileo(4638, XmlDoc.DocumentElement, "407419");
        }

        public XmlElement ToModeReservationProcessGalileo(int SNM, XmlElement ResXml, string PMID)
        {
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchFareAvailRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            //갈릴레오
            XmlNode FareInfo = ResXml.SelectSingleNode("FareInfo");
            string[] PTC = new String[3] { "ADT", "CHD", "INF" };
            int[] NOP = new Int32[3] { Convert.ToInt32(ResXml.SelectSingleNode("PaxInfo/AdtCnt").InnerText), Convert.ToInt32(ResXml.SelectSingleNode("PaxInfo/ChdCnt").InnerText), Convert.ToInt32(ResXml.SelectSingleNode("PaxInfo/InfCnt").InnerText) };

            //네이버랜딩페이지 항공상세정보 출력을 위한 속성 추가(Seg별 비행시간, 기착지 지상 대기시간)
            XmlNode AddAttrSeg = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo/flightIndex/segGroup/seg");
            AddAttrSeg.Attributes.Append((XmlAttribute)XmlDoc.CreateAttribute("eft"));
            AddAttrSeg.Attributes.Append((XmlAttribute)XmlDoc.CreateAttribute("gwt"));
            AddAttrSeg.SelectSingleNode("seg").Attributes.Append((XmlAttribute)XmlDoc.CreateAttribute("eft"));
            AddAttrSeg.SelectSingleNode("seg").Attributes.Append((XmlAttribute)XmlDoc.CreateAttribute("gwt"));

            //여정정보
            XmlNode FlightInfo = XmlDoc.SelectSingleNode("ResponseDetails/flightInfo");
            XmlNode FlightIndex = FlightInfo.SelectSingleNode("flightIndex");
            XmlNode SegmentGroup = FlightIndex.SelectSingleNode("segGroup");
            XmlNode Segment = SegmentGroup.SelectSingleNode("seg");
            XmlNode StopSegment = Segment.SelectSingleNode("seg");

            XmlNode NewFlightIndex;
            XmlNode NewSegmentGroup;

            string CCD = FareInfo.SelectSingleNode("SeatGrade").InnerText;
            int CCDRef = Common.RefOverride("Galileo", CCD);
            int PriceRef = 1;
            string SegGroupNo = string.Empty;
            
            //발권항공사
            string ValidatingCarrier = FareInfo.SelectSingleNode("MainAirV").InnerText.ToUpper();
            
            //한국출발여부
            bool DepartureFromKorea = Common.KoreaOfAirport(ResXml.SelectSingleNode("AirSegDetail[1]/StartAirp").InnerText);

            FlightInfo.Attributes.GetNamedItem("ptc").InnerText = PTC[0];

            if (ResXml.SelectNodes("AirSegDetail/GroupNo").Count > 0)
            {
                foreach (XmlNode AirSegDetail in ResXml.SelectNodes("AirSegDetail[not(GroupNo=preceding-sibling::AirSegDetail/GroupNo)]"))
                {
                    int RefNo = Convert.ToInt32(AirSegDetail.SelectSingleNode("GroupNo").InnerText);

                    NewFlightIndex = FlightInfo.AppendChild(FlightIndex.CloneNode(false));
                    NewFlightIndex.Attributes.GetNamedItem("ref").InnerText = (RefNo + 1).ToString();

                    NewSegmentGroup = NewFlightIndex.AppendChild(ToModeSegGroupGalileo(CCD, SegmentGroup.CloneNode(true), ResXml.SelectNodes(String.Format("AirSegDetail[GroupNo='{0}']", RefNo))));
                }
            }
            else
            {
                foreach (XmlNode AirSegDetail in ResXml.SelectNodes("AirSegDetail[not(SegGroupNo=preceding-sibling::AirSegDetail/SegGroupNo)]"))
                {
                    int RefNo = Convert.ToInt32(AirSegDetail.SelectSingleNode("SegGroupNo").InnerText);

                    NewFlightIndex = FlightInfo.AppendChild(FlightIndex.CloneNode(false));
                    NewFlightIndex.Attributes.GetNamedItem("ref").InnerText = (RefNo + 1).ToString();

                    NewSegmentGroup = NewFlightIndex.AppendChild(ToModeSegGroupGalileo(CCD, SegmentGroup.CloneNode(true), ResXml.SelectNodes(String.Format("AirSegDetail[SegGroupNo='{0}']", RefNo))));
                }
            }

            FlightInfo.RemoveChild(FlightIndex);

            //운임정보
            XmlNode PriceInfo = XmlDoc.SelectSingleNode("ResponseDetails/priceInfo");
            XmlNode PriceIndex = PriceInfo.SelectSingleNode("priceIndex");
            XmlNode Seg = PriceIndex.SelectSingleNode("segGroup/seg");
            XmlNode SegRef = Seg.SelectSingleNode("ref");
            XmlNode PaxFareGroup = PriceIndex.SelectSingleNode("paxFareGroup");
            XmlNode PaxFare = PaxFareGroup.SelectSingleNode("paxFare");
            XmlNode SegFareGroup;
            XmlNode SegFare;
            XmlNode Fare;
            XmlNode Traveler;
            XmlNode TravelerRef;

            XmlNode NewSegRef;
            XmlNode NewPaxFare;
            XmlNode NewSegFare;
            XmlNode NewFare;
            XmlNode NewTravelerRef;

            string FareNodeName = string.Empty;
            string DisFareNodeName = string.Empty;
            string TaxNodeName = string.Empty;
            string FscNodeName = string.Empty;
            double TotalFare = 0;
            double TotalDisFare = 0;
            double TotalTax = 0;
            double TotalFsc = 0;
            double TotalMTasf = 0;
            double TotalATasf = 0;
            double AdtTasf = Convert.ToDouble(FareInfo.SelectSingleNode("AdtTasfAmount").InnerText);
            double ChdTasf = Convert.ToDouble(FareInfo.SelectSingleNode("ChdTasfAmount").InnerText);
            double InfTasf = Convert.ToDouble(FareInfo.SelectSingleNode("InfTasfAmount").InnerText);
            bool UseTASF = Common.ApplyTASF(SNM, ValidatingCarrier);
            double TASF = 0;

            string Status = "HK";
            int SegStep = 0;

            PriceIndex.Attributes.GetNamedItem("gds").InnerText = "Galileo";
            PriceIndex.Attributes.GetNamedItem("ptc").InnerText = PTC[0];
            PriceIndex.Attributes.GetNamedItem("ref").InnerText = PriceRef.ToString();

            foreach (XmlNode TmpFlightIndex in FlightInfo.SelectNodes("flightIndex"))
            {
                NewSegRef = Seg.AppendChild(SegRef.Clone());
                NewSegRef.Attributes.GetNamedItem("fiRef").InnerText = TmpFlightIndex.Attributes.GetNamedItem("ref").InnerText;
                NewSegRef.Attributes.GetNamedItem("nosp").InnerText = TmpFlightIndex.SelectSingleNode("segGroup").Attributes.GetNamedItem("nosp").InnerText;
                NewSegRef.InnerText = TmpFlightIndex.SelectSingleNode("segGroup").Attributes.GetNamedItem("ref").InnerText;
            }

            Seg.RemoveChild(SegRef);

            for (int i = 0; i < PTC.Length; i++)
            {
                if (NOP[i] > 0)
                {
                    NewPaxFare = PaxFareGroup.AppendChild(PaxFare.Clone());
                    NewPaxFare.Attributes.GetNamedItem("ptc").InnerText = PTC[i];

                    SegFareGroup = NewPaxFare.SelectSingleNode("segFareGroup");
                    SegFare = SegFareGroup.SelectSingleNode("segFare");
                    Fare = SegFare.SelectSingleNode("fare");
                    SegStep = 0;

                    FareNodeName = PTC[i].Equals("CHD") ? "ChdNormalFare" : (PTC[i].Equals("INF") ? "InfNormalFare" : "AdtNormalFare");
                    DisFareNodeName = PTC[i].Equals("CHD") ? "ChdSaleFare" : (PTC[i].Equals("INF") ? "InfSaleFare" : "AdtSaleFare");
                    TaxNodeName = PTC[i].Equals("CHD") ? "ChdTax" : (PTC[i].Equals("INF") ? "InfTax" : "AdtTax");
                    FscNodeName = PTC[i].Equals("CHD") ? "ChdQ" : (PTC[i].Equals("INF") ? "InfQ" : "AdtQ");
                    TASF = UseTASF ? Common.GetTASF(SNM, PTC[i], ValidatingCarrier, DepartureFromKorea) : 0;

                    NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText = FareInfo.SelectSingleNode(FareNodeName).InnerText;
                    NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("disFare").InnerText = FareInfo.SelectSingleNode(DisFareNodeName).InnerText;
                    NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tax").InnerText = FareInfo.SelectSingleNode(TaxNodeName).InnerText;
                    NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fsc").InnerText = FareInfo.SelectSingleNode(FscNodeName).InnerText;
                    NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("disPartner").InnerText = "0";
                    NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tasf").InnerText = ((PTC[i].Equals("CHD") ? ChdTasf : (PTC[i].Equals("INF") ? InfTasf : AdtTasf)) + TASF).ToString();
                    NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("mTasf").InnerText = TASF.ToString();
                    NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("aTasf").InnerText = (PTC[i].Equals("CHD") ? ChdTasf : (PTC[i].Equals("INF") ? InfTasf : AdtTasf)).ToString();
                    
                    foreach (XmlNode TmpFlightIndex in FlightInfo.SelectNodes("flightIndex"))
                    {
                        NewSegFare = SegFareGroup.AppendChild(SegFare.CloneNode(false));
                        NewSegFare.Attributes.GetNamedItem("ref").InnerText = TmpFlightIndex.Attributes.GetNamedItem("ref").InnerText;

                        foreach (XmlNode TmpSeg in TmpFlightIndex.SelectNodes("segGroup/seg"))
                        {
                            NewFare = NewSegFare.AppendChild(Fare.Clone());
                            NewFare.Attributes.GetNamedItem("bpt").InnerText = "";
                            NewFare.Attributes.GetNamedItem("mas").InnerText = "";
                            NewFare.SelectSingleNode("cabin").Attributes.GetNamedItem("rbd").InnerText = ResXml.SelectNodes("AirSegDetail")[SegStep].SelectSingleNode("BkClass").InnerText;
                            NewFare.SelectSingleNode("cabin").Attributes.GetNamedItem("cabin").InnerText = ResXml.SelectNodes("AirSegDetail")[SegStep].SelectSingleNode("SeatGrade").InnerText;
                            NewFare.SelectSingleNode("cabin").Attributes.GetNamedItem("avl").InnerText = ResXml.SelectNodes("AirSegDetail")[SegStep].SelectSingleNode("Seat").InnerText;
                            NewFare.SelectSingleNode("fare").Attributes.GetNamedItem("basis").InnerText = "";
                            NewFare.SelectSingleNode("fare").Attributes.GetNamedItem("ptc").InnerText = FareInfo.SelectSingleNode("FareTypeCode").InnerText;
                            NewFare.SelectSingleNode("fare").Attributes.GetNamedItem("tkd").InnerText = "";
                            NewFare.SelectSingleNode("fare/fareType").InnerText = "MSP";
                            NewFare.RemoveChild(NewFare.SelectSingleNode("corporateId"));

                            if (NOP[i] > Convert.ToInt32(NewFare.SelectSingleNode("cabin").Attributes.GetNamedItem("avl").InnerText))
                                Status = "HL";
                            
                            SegStep++;
                        }
                    }

                    SegFareGroup.RemoveChild(SegFare);

                    Traveler = NewPaxFare.SelectSingleNode("traveler");
                    TravelerRef = Traveler.SelectSingleNode("ref");

                    for (int n = 1; n <= NOP[i]; n++)
                    {
                        NewTravelerRef = Traveler.AppendChild(TravelerRef.Clone());
                        NewTravelerRef.InnerText = n.ToString();
                        NewTravelerRef.Attributes.RemoveAll();
                    }

                    TotalFare += Convert.ToDouble(NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText) * NOP[i];
                    TotalDisFare += Convert.ToDouble(NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("disFare").InnerText) * NOP[i];
                    TotalTax += Convert.ToDouble(NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("tax").InnerText) * NOP[i];
                    TotalFsc += Convert.ToDouble(NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("fsc").InnerText) * NOP[i];
                    TotalMTasf += Convert.ToDouble(NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("mTasf").InnerText) * NOP[i];
                    TotalATasf += Convert.ToDouble(NewPaxFare.SelectSingleNode("amount").Attributes.GetNamedItem("aTasf").InnerText) * NOP[i];

                    Traveler.RemoveChild(TravelerRef);
                }
            }

            PaxFareGroup.RemoveChild(PaxFare);

            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("price").InnerText = (TotalDisFare + TotalTax + TotalFsc).ToString();
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("fare").InnerText = TotalFare.ToString();
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("disFare").InnerText = TotalDisFare.ToString();
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("tax").InnerText = TotalTax.ToString();
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("fsc").InnerText = TotalFsc.ToString();
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("disPartner").InnerText = "0";
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("tasf").InnerText = (TotalMTasf + TotalATasf).ToString();
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("mTasf").InnerText = TotalMTasf.ToString();
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("aTasf").InnerText = TotalATasf.ToString();
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("pvc").InnerText = ValidatingCarrier;
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("mas").InnerText = FareInfo.SelectSingleNode("ValidateMax").InnerText;
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("ttl").InnerText = String.IsNullOrWhiteSpace(FareInfo.SelectSingleNode("TktLimitDate").InnerText) ? DateTime.Now.AddDays(10).ToString("yyyy-MM-dd") : cm.ConvertToDateTime(FareInfo.SelectSingleNode("TktLimitDate").InnerText);
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("ucf").InnerText = "N";
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("ntf").InnerText = "N";
            PriceIndex.SelectSingleNode("summary").Attributes.GetNamedItem("sutf").InnerText = Common.SelectUserTASF(SNM, ValidatingCarrier);

            //상태
            XmlAttribute AttrStatus = XmlDoc.CreateAttribute("status");
            AttrStatus.InnerText = Status;

            PriceIndex.SelectSingleNode("summary").Attributes.Append(AttrStatus);

            //프로모션 정보
            if (!String.IsNullOrWhiteSpace(PMID))
            {
                XmlDocument PromXmDoc = new XmlDocument();
                XmlElement PromXml = null;
                XmlElement ModePromXml = SearchPromotionDetail(cm.RequestInt(PMID));

                //갈릴레오에서 넘어온 프로모션 정보로 셋팅
                if (FareInfo.SelectNodes("EventDetails").Count > 0)
                {
                    string StrPromXml = String.Concat("<promotionInfo>",
                                                            "<item>",
                                                            "<promotionId>", PMID, "</promotionId>",
                                                            "<siteNum>", SNM, "</siteNum>",
                                                            "<airCode>", FareInfo.SelectSingleNode("EventDetails/AirV").InnerText, "</airCode>",
                                                            "<fareType></fareType>",
                                                            "<fareBasis></fareBasis>",
                                                            "<cabinClass>", FareInfo.SelectSingleNode("EventDetails/SeatGrade").InnerText, "</cabinClass>",
                                                            "<bookingClass>", FareInfo.SelectSingleNode("EventDetails/BookingClass").InnerText, "</bookingClass>",
                                                            "<bookingClassExc>", FareInfo.SelectSingleNode("EventDetails/BookingClassExc").InnerText, "</bookingClassExc>",
                                                            "<paxType>", FareInfo.SelectSingleNode("EventDetails/FareTypeCode").InnerText, "</paxType>",
                                                            "<discount>", FareInfo.SelectSingleNode("EventDetails/Discount1").InnerText, "</discount>",
                                                            "<commission>", FareInfo.SelectSingleNode("EventDetails/Discount2").InnerText, "</commission>",
                                                            "<fareDiscount>", FareInfo.SelectSingleNode("EventDetails/Discount3").InnerText, "</fareDiscount>",
                                                            "<incentive>", FareInfo.SelectSingleNode("EventDetails/Discount4").InnerText, "</incentive>",
                                                            "<incentiveCode></incentiveCode>",
                                                            "<incentiveName></incentiveName>",
                                                            "<fareTarget></fareTarget>",
                                                            "<childDiscountYN>", FareInfo.SelectSingleNode("EventDetails/AirV").InnerText, "</childDiscountYN>",
                                                            "<promotionTL></promotionTL>",
                                                            "<NaverEventTypeCode>", FareInfo.SelectSingleNode("EventDetails/NaverEventTypeCode").InnerText, "</NaverEventTypeCode>",
                                                            "</item>",
                                                        "</promotionInfo>");

                    PromXmDoc.LoadXml(StrPromXml);
                    PromXml = PromXmDoc.DocumentElement;
                }
                else
                    PromXml = ModePromXml;

                if (PromXml.SelectNodes("item").Count > 0)
                {
                    if (PromXml.SelectNodes("item/cardRule").Count > 0)
                        PromXml.SelectSingleNode("item").RemoveChild(PromXml.SelectSingleNode("item/cardRule"));
                    
                    XmlNode TmpPromotions = PromXml.OwnerDocument.CreateElement("promotions");
                    XmlNode TmpPromotion = PromXml.OwnerDocument.CreateElement("promotion");
                    XmlAttribute TmpPromotionId = PromXml.OwnerDocument.CreateAttribute("promotionId");
                    XmlAttribute TmpIncentiveCode = PromXml.OwnerDocument.CreateAttribute("incentiveCode");
                    XmlAttribute TmpIncentiveName = PromXml.OwnerDocument.CreateAttribute("incentiveName");
                    XmlAttribute TmpFareTarget = PromXml.OwnerDocument.CreateAttribute("fareTarget");
                    XmlAttribute TmpPromotionTL = PromXml.OwnerDocument.CreateAttribute("promotionTL");

                    if (ModePromXml.SelectNodes("item").Count > 0)
                    {
                        TmpPromotionId.InnerText = ModePromXml.SelectSingleNode("item/promotionId").InnerText;
                        TmpIncentiveCode.InnerText = ModePromXml.SelectSingleNode("item/incentiveCode").InnerText;
                        TmpIncentiveName.InnerText = ModePromXml.SelectSingleNode("item/incentiveName").InnerText;
                        TmpFareTarget.InnerText = ModePromXml.SelectSingleNode("item/fareTarget").InnerText;
                        TmpPromotionTL.InnerText = ModePromXml.SelectSingleNode("item/promotionTL").InnerText;
                    }
                    else
                        TmpPromotionId.InnerText = PMID;

                    TmpPromotion.Attributes.Append(TmpPromotionId);
                    TmpPromotion.Attributes.Append(TmpIncentiveCode);
                    TmpPromotion.Attributes.Append(TmpIncentiveName);
                    TmpPromotion.Attributes.Append(TmpFareTarget);
                    TmpPromotion.Attributes.Append(TmpPromotionTL);

                    TmpPromotions.AppendChild(TmpPromotion);
                    PromXml.SelectSingleNode("item").AppendChild(TmpPromotions);

                    //기본선택값 셋팅
                    PromXml.SelectSingleNode("item/incentiveCode").InnerText = TmpIncentiveCode.InnerText;
                    PromXml.SelectSingleNode("item/incentiveName").InnerText = TmpIncentiveName.InnerText;
                    PromXml.SelectSingleNode("item/fareTarget").InnerText = TmpFareTarget.InnerText;
                    PromXml.SelectSingleNode("item/promotionTL").InnerText = TmpPromotionTL.InnerText;

                    PriceIndex.SelectSingleNode("promotionInfo").AppendChild(XmlDoc.ImportNode(PromXml.SelectSingleNode("item"), true));
                }
                else
                    PriceIndex.RemoveChild(PriceIndex.SelectSingleNode("promotionInfo"));
            }
            else
                PriceIndex.RemoveChild(PriceIndex.SelectSingleNode("promotionInfo"));

            return XmlDoc.DocumentElement;
        }

        public XmlNode ToModeSegGroupGalileo(string CCD, XmlNode SegmentGroup, XmlNodeList AirSegDetails)
        {
            XmlNode Segment = SegmentGroup.SelectSingleNode("seg");
            XmlNode StopSegment = Segment.SelectSingleNode("seg");

            XmlNode NewSegment;
            XmlNode NewStopSegment;

            string CDS = "N";
            int CCDRef = Common.RefOverride("Galileo", CCD);
            int RefNo = 1;

            SegmentGroup.Attributes.GetNamedItem("ref").InnerText = Common.RefSum(RefNo, CCDRef).ToString();
            SegmentGroup.Attributes.GetNamedItem("eft").InnerText = cm.TotalTimeofGalileo(AirSegDetails, "TotalJrnyTm");
            SegmentGroup.Attributes.GetNamedItem("ewt").InnerText = cm.TotalTimeofGalileo(AirSegDetails, "ConTm");
            SegmentGroup.Attributes.GetNamedItem("mjc").InnerText = AirSegDetails[0].SelectSingleNode("AirV").InnerText;
            SegmentGroup.Attributes.GetNamedItem("nosp").InnerText = AirSegDetails.Count.ToString();

            foreach (XmlNode AirSegDetail in AirSegDetails)
            {
                NewSegment = SegmentGroup.AppendChild(Segment.CloneNode(false));
                NewSegment.Attributes.GetNamedItem("dlc").InnerText = AirSegDetail.SelectSingleNode("StartAirp").InnerText;
                NewSegment.Attributes.GetNamedItem("alc").InnerText = AirSegDetail.SelectSingleNode("EndAirp").InnerText;
                NewSegment.Attributes.GetNamedItem("ddt").InnerText = cm.ConvertToDateTime(AirSegDetail.SelectSingleNode("StartDtTm").InnerText);
                NewSegment.Attributes.GetNamedItem("ardt").InnerText = cm.ConvertToDateTime(AirSegDetail.SelectSingleNode("EndDtTm").InnerText);
                NewSegment.Attributes.GetNamedItem("mcc").InnerText = AirSegDetail.SelectSingleNode("AirV").InnerText;
                NewSegment.Attributes.GetNamedItem("occ").InnerText = String.IsNullOrWhiteSpace(AirSegDetail.SelectSingleNode("OpAirV").InnerText) ? "" : AirSegDetail.SelectSingleNode("OpAirV").InnerText;
                NewSegment.Attributes.GetNamedItem("fln").InnerText = AirSegDetail.SelectSingleNode("FltNum").InnerText;
                NewSegment.Attributes.GetNamedItem("eqt").InnerText = "";
                NewSegment.Attributes.GetNamedItem("stn").InnerText = cm.RequestInt(AirSegDetail.SelectSingleNode("StopCnt").InnerText).ToString();
                NewSegment.Attributes.GetNamedItem("etc").InnerText = "Y";
                NewSegment.Attributes.GetNamedItem("eft").InnerText = AirSegDetail.SelectSingleNode("FltTm").InnerText;
                NewSegment.Attributes.GetNamedItem("gwt").InnerText = AirSegDetail.SelectNodes("StopCity1Tm").Count > 0 ? AirSegDetail.SelectSingleNode("StopCity1Tm").InnerText : "";

                if (NewSegment.Attributes.GetNamedItem("stn").InnerText.Equals("1"))
                {
                    //갈릴레오는 기착지에 대한 상세 스케쥴 정보를 주지 않아 아마데우스 비행편 정보로 출력
                    XmlElement FlightInfoXml = FlightInfoRS(2, NewSegment.Attributes.GetNamedItem("ddt").InnerText, "", NewSegment.Attributes.GetNamedItem("dlc").InnerText, NewSegment.Attributes.GetNamedItem("alc").InnerText, NewSegment.Attributes.GetNamedItem("mcc").InnerText, NewSegment.Attributes.GetNamedItem("occ").InnerText, NewSegment.Attributes.GetNamedItem("fln").InnerText);

                    if (FlightInfoXml.SelectNodes("flightInfo").Count > 0)
                    {
                        NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                        NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[1]").Attributes.GetNamedItem("dlc").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("alc").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[1]").Attributes.GetNamedItem("alc").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[1]").Attributes.GetNamedItem("ddt").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[1]").Attributes.GetNamedItem("ardt").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("eft").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[1]").Attributes.GetNamedItem("eft").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[1]").Attributes.GetNamedItem("gwt").InnerText;

                        NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                        NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[2]").Attributes.GetNamedItem("dlc").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("alc").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[2]").Attributes.GetNamedItem("alc").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[2]").Attributes.GetNamedItem("ddt").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[2]").Attributes.GetNamedItem("ardt").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("eft").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[2]").Attributes.GetNamedItem("eft").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = FlightInfoXml.SelectSingleNode("flightInfo/flightIndex/segGroup/seg[2]").Attributes.GetNamedItem("gwt").InnerText;
                    }
                    else
                    {
                        NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                        NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = NewSegment.Attributes.GetNamedItem("dlc").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("alc").InnerText = AirSegDetail.SelectSingleNode("StopCity1").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = NewSegment.Attributes.GetNamedItem("ddt").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = "";
                        NewStopSegment.Attributes.GetNamedItem("eft").InnerText = "";
                        NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = "";

                        NewStopSegment = NewSegment.AppendChild(StopSegment.CloneNode(false));
                        NewStopSegment.Attributes.GetNamedItem("dlc").InnerText = AirSegDetail.SelectSingleNode("StopCity1").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("alc").InnerText = NewSegment.Attributes.GetNamedItem("alc").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("ddt").InnerText = "";
                        NewStopSegment.Attributes.GetNamedItem("ardt").InnerText = NewSegment.Attributes.GetNamedItem("ardt").InnerText;
                        NewStopSegment.Attributes.GetNamedItem("eft").InnerText = "";
                        NewStopSegment.Attributes.GetNamedItem("gwt").InnerText = "";
                    }
                }

                //공동운항 여부
                if (CDS.Equals("N") && (NewSegment.Attributes.GetNamedItem("mcc").InnerText != NewSegment.Attributes.GetNamedItem("occ").InnerText))
                    CDS = "Y";
            }

            SegmentGroup.Attributes.GetNamedItem("cds").InnerText = CDS;

            SegmentGroup.RemoveChild(Segment);

            return SegmentGroup;
        }

        #endregion "갈릴레오 동시조회 결과 통합형으로 변경(네이버 랜딩페이지용)"

        #region "SearchRule(갈릴레오)"

        //[WebMethod(Description = "운임규정 조회(갈릴레오)")]
        public XmlElement SearchRuleGalileoRSTEST(string FareRuleUrl)
        {
            int SNM = 4638;
            
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.Load(mc.XmlFullPath("SearchRuleRS"));

            XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

            XmlNode ResponseDetails = XmlDoc.SelectSingleNode("ResponseDetails");
            XmlNode Rule = ResponseDetails.SelectSingleNode("rule");
            XmlNode Item = Rule.SelectSingleNode("item");
            XmlNode FareInfos = ResponseDetails.SelectSingleNode("fareInfos");
            XmlNode FareInfo = FareInfos.SelectSingleNode("fareInfo");
            XmlNode NewRule;
            XmlNode NewItem;
            XmlNode NewFareInfo;
            int RuleRef = 1;
            int ItemRef = 1;

            //갈릴레오 규정
            XmlDocument XmlRule = new XmlDocument();
            XmlRule.Load(mc.XmlFullPath("_GalileoRule"));

            XmlElement RuleXml = XmlRule.DocumentElement;

            NewRule = ResponseDetails.InsertBefore(Rule.CloneNode(false), FareInfos);
            NewRule.Attributes.GetNamedItem("ref").InnerText = (RuleRef++).ToString();

            ItemRef = 1;

            foreach (XmlNode FareRules in RuleXml.SelectNodes("RuleInfo/FareRules"))
            {
                NewItem = NewRule.AppendChild(Item.CloneNode(true));
                NewItem.Attributes.GetNamedItem("ref").InnerText = (ItemRef++).ToString();
                NewItem.SelectSingleNode("name").InnerText = FareRules.SelectSingleNode("FareRuleTitle").InnerText;
                NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(FareRules.SelectSingleNode("FareRuleContents").InnerText.Replace(Environment.NewLine, "<BR>")));
            }

            ResponseDetails.RemoveChild(Rule);

            FareInfos.Attributes.GetNamedItem("gds").InnerText = "Galileo";
            FareInfos.Attributes.GetNamedItem("ulc").InnerText = "EN";
            RuleRef = 1;

            foreach (XmlNode RuleFareInfo in RuleXml.SelectNodes("FareInfo"))
            {
                NewFareInfo = FareInfos.AppendChild(FareInfo.CloneNode(true));
                NewFareInfo.Attributes.GetNamedItem("ref").InnerText = (RuleRef++).ToString();

                NewFareInfo.SelectSingleNode("item[@name='Origin']").InnerText = "";
                NewFareInfo.SelectSingleNode("item[@name='Destination']").InnerText = "";
                NewFareInfo.SelectSingleNode("item[@name='FareCategory']").InnerText = "";
                NewFareInfo.SelectSingleNode("item[@name='FareClass']").InnerText = "";
                NewFareInfo.SelectSingleNode("item[@name='AdvanceAfter']").InnerText = "";
                NewFareInfo.SelectSingleNode("item[@name='AdvanceBefore']").InnerText = "";
                NewFareInfo.SelectSingleNode("item[@name='MinStay']").InnerText = cm.ChangeTerm(cm.Right(RuleFareInfo.SelectSingleNode("ValidateMin").InnerText, 1), cm.ExtractNumber(RuleFareInfo.SelectSingleNode("ValidateMin").InnerText).ToString());
                NewFareInfo.SelectSingleNode("item[@name='MaxStay']").InnerText = cm.ChangeTerm(cm.Right(RuleFareInfo.SelectSingleNode("ValidateMax").InnerText, 1), cm.ExtractNumber(RuleFareInfo.SelectSingleNode("ValidateMax").InnerText).ToString());
                NewFareInfo.SelectSingleNode("item[@name='FareType']").InnerText = RuleFareInfo.SelectSingleNode("FareTypeCode").InnerText;
                NewFareInfo.SelectSingleNode("item[@name='BookingClass']").InnerText = RuleFareInfo.SelectSingleNode("SeatGrade").InnerText;
                NewFareInfo.SelectSingleNode("item[@name='RuleNumber']").InnerText = RuleFareInfo.SelectSingleNode("MainGoodCode").InnerText;
                NewFareInfo.SelectSingleNode("item[@name='TariffId']").InnerText = RuleFareInfo.SelectSingleNode("SubGoodCode").InnerText;
            }

            FareInfos.RemoveChild(FareInfo);

            //### 프로모션코드 및 출발지 #####
            string[] ArrFareRuleUrl = FareRuleUrl.Split('^');
            string PMID = String.Empty;
            string DLC = String.Empty;
            string ALC = String.Empty;

            foreach (string Params in ArrFareRuleUrl)
            {
                string[] Param = Params.Split('=');

                if (Param[0].Equals("PMID"))
                    PMID = Param[1];
                else if (Param[0].Equals("StrRoutine"))
                {
                    string[] StrRoutine = Param[1].Split('/');

                    DLC = Param[1].Substring(0, 3);
                    ALC = StrRoutine[StrRoutine.Length - 1].Substring(0, 3);
                }
            }

            //### 추가 운임규정 #####
            XmlElement XmlMode = UpdateRuleInfo(SNM, "Galileo", RuleXml.SelectSingleNode("FareInfo/FareTypeCode").InnerText, DLC, ALC, RuleXml.SelectSingleNode("FareInfo/MainAirV").InnerText, XmlDoc.DocumentElement);

            //### 프로모션 #####
            if (cm.RequestInt(PMID) > 0 && XmlMode.SelectNodes("rule").Count > 0)
                XmlMode = UpdatePromotionInfo(cm.RequestInt(PMID), XmlMode);

            return XmlDoc.DocumentElement;
        }

        /// <summary>
        /// 운임규정 조회(갈릴레오)
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="FareRuleUrl">운임규정 파리미터 정보</param>
        /// <returns></returns>
        [WebMethod(Description = "운임규정 조회(갈릴레오)")]
        public XmlElement SearchRuleGalileoRS(int SNM, string FareRuleUrl)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 462;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = FareRuleUrl;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.Load(mc.XmlFullPath("SearchRuleRS"));

                XmlDoc.SelectSingleNode("ResponseDetails").Attributes.GetNamedItem("timeStamp").InnerText = cm.TimeStamp;

                XmlNode ResponseDetails = XmlDoc.SelectSingleNode("ResponseDetails");
                XmlNode Rule = ResponseDetails.SelectSingleNode("rule");
                XmlNode Item = Rule.SelectSingleNode("item");
                XmlNode FareInfos = ResponseDetails.SelectSingleNode("fareInfos");
                XmlNode FareInfo = FareInfos.SelectSingleNode("fareInfo");
                XmlNode NewRule;
                XmlNode NewItem;
                XmlNode NewFareInfo;
                int RuleRef = 1;
                int ItemRef = 1;

                //갈릴레오 규정
                XmlElement RuleXml = gas.FareRuleRS(FareRuleUrl, LogGUID);

                NewRule = ResponseDetails.InsertBefore(Rule.CloneNode(false), FareInfos);
                NewRule.Attributes.GetNamedItem("ref").InnerText = (RuleRef++).ToString();

                ItemRef = 1;

                foreach (XmlNode FareRules in RuleXml.SelectNodes("RuleInfo/FareRules"))
                {
                    NewItem = NewRule.AppendChild(Item.CloneNode(true));
                    NewItem.Attributes.GetNamedItem("ref").InnerText = (ItemRef++).ToString();
                    NewItem.SelectSingleNode("name").InnerText = FareRules.SelectSingleNode("FareRuleTitle").InnerText;
                    NewItem.SelectSingleNode("message").AppendChild((XmlCDataSection)XmlDoc.CreateCDataSection(FareRules.SelectSingleNode("FareRuleContents").InnerText.Replace(Environment.NewLine, "<BR>")));
                }

                ResponseDetails.RemoveChild(Rule);

                FareInfos.Attributes.GetNamedItem("gds").InnerText = "Galileo";
                FareInfos.Attributes.GetNamedItem("ulc").InnerText = "EN";
                RuleRef = 1;

                foreach (XmlNode RuleFareInfo in RuleXml.SelectNodes("FareInfo"))
                {
                    NewFareInfo = FareInfos.AppendChild(FareInfo.CloneNode(true));
                    NewFareInfo.Attributes.GetNamedItem("ref").InnerText = (RuleRef++).ToString();

                    NewFareInfo.SelectSingleNode("item[@name='Origin']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='Destination']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='FareCategory']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='FareClass']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='AdvanceAfter']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='AdvanceBefore']").InnerText = "";
                    NewFareInfo.SelectSingleNode("item[@name='MinStay']").InnerText = cm.ChangeTerm(cm.Right(RuleFareInfo.SelectSingleNode("ValidateMin").InnerText, 1), cm.ExtractNumber(RuleFareInfo.SelectSingleNode("ValidateMin").InnerText).ToString());
                    NewFareInfo.SelectSingleNode("item[@name='MaxStay']").InnerText = cm.ChangeTerm(cm.Right(RuleFareInfo.SelectSingleNode("ValidateMax").InnerText, 1), cm.ExtractNumber(RuleFareInfo.SelectSingleNode("ValidateMax").InnerText).ToString());
                    NewFareInfo.SelectSingleNode("item[@name='FareType']").InnerText = RuleFareInfo.SelectSingleNode("FareTypeCode").InnerText;
                    NewFareInfo.SelectSingleNode("item[@name='BookingClass']").InnerText = RuleFareInfo.SelectSingleNode("SeatGrade").InnerText;
                    NewFareInfo.SelectSingleNode("item[@name='RuleNumber']").InnerText = RuleFareInfo.SelectSingleNode("MainGoodCode").InnerText;
                    NewFareInfo.SelectSingleNode("item[@name='TariffId']").InnerText = RuleFareInfo.SelectSingleNode("SubGoodCode").InnerText;
                }

                FareInfos.RemoveChild(FareInfo);

                //### 프로모션코드 및 출발지 #####
                string[] ArrFareRuleUrl = FareRuleUrl.Split('^');
                string PMID = String.Empty;
                string DLC = String.Empty;
                string ALC = String.Empty;

                foreach (string Params in ArrFareRuleUrl)
                {
                    string[] Param = Params.Split('=');

                    if (Param[0].Equals("PMID"))
                        PMID = Param[1];
                    else if (Param[0].Equals("StrRoutine"))
                    {
                        string[] StrRoutine = Param[1].Split('/');
                        
                        DLC = Param[1].Substring(0, 3);
                        ALC = StrRoutine[StrRoutine.Length - 1].Substring(0, 3);
                    }
                }

                //### 추가 운임규정 #####
                XmlElement XmlMode = UpdateRuleInfo(SNM, "Galileo", RuleXml.SelectSingleNode("FareInfo/FareTypeCode").InnerText, DLC, ALC, RuleXml.SelectSingleNode("FareInfo/MainAirV").InnerText, XmlDoc.DocumentElement);

                //### 프로모션 #####
                if (cm.RequestInt(PMID) > 0 && XmlMode.SelectNodes("rule").Count > 0)
                    XmlMode = UpdatePromotionInfo(cm.RequestInt(PMID), XmlMode);

                cm.XmlFileSave(XmlMode, mc.Name, "SearchRuleGalileoRS", "N", LogGUID);

                return XmlDoc.DocumentElement;
            }
            catch (Exception ex)
            {
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 462, 0, 0).ToErrors;
            }
        }

        #endregion "SearchRule(갈릴레오)"

        #region "갈릴레오 OZ PNR 생성(GKPNR)"

        /// <summary>
        /// 갈릴레오 OZ PNR 생성(GKPNR)
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="RIP">요청자IP</param>
        /// <returns></returns>
        [WebMethod(Description = "갈릴레오 OZ PNR 생성(GKPNR)")]
        public XmlElement GKPnrCreate(int SNM, int OID, int PID, int RQR, string RQT, string RIP)
        {
            string LogGUID = cm.GetGUID;
            string GUID = LogGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 463;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RQR;
                sqlParam[12].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, RIP);

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    if (XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText.Equals("Galileo"))
                    {
                        if (XmlDBBooking.SelectSingleNode("item3/마케팅항공사").InnerText.Equals("OZ"))
                        {
                            string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
                            string PNR = XmlDBBooking.SelectSingleNode("item3/GDS주문번호").InnerText;
                            string ApisInfo = string.Empty;

                            XmlElement XmlBook = SearchBookingPNR(SNM, GDS, PNR, GUID);

                            foreach (XmlNode PaxInfo in XmlBook.SelectNodes("PaxFareInfo"))
                            {
                                XmlNode ItemNode = XmlDBBooking.SelectSingleNode(String.Format("item4[영문성='{0}' and 영문이름='{1}']", PaxInfo.SelectSingleNode("PaxLastName").InnerText, PaxInfo.SelectSingleNode("PaxFirstName").InnerText));

                                if (!String.IsNullOrWhiteSpace(ApisInfo))
                                    ApisInfo += ",";

                                ApisInfo += String.Format("{0}^{1}^{2}^{3}^{4}^{5}^{6}^{7}^{8}^{9}^{10}^{11}^{12}^{13}^{14}^{15}",
                                            ItemNode.SelectSingleNode("판매명세번호").InnerText,
                                            PaxInfo.SelectSingleNode("AbsNameNum").InnerText,
                                            ItemNode.SelectSingleNode("영문성명").InnerText,
                                            ItemNode.SelectSingleNode("구분").InnerText,
                                            "0",
                                            (String.IsNullOrWhiteSpace(ItemNode.SelectSingleNode("여권번호").InnerText) ? "" : ItemNode.SelectSingleNode("여권번호").InnerText),
                                            (String.IsNullOrWhiteSpace(ItemNode.SelectSingleNode("여권만료일").InnerText) ? "" : ItemNode.SelectSingleNode("여권만료일").InnerText),
                                            Common.ConvertToOnlyNumber(ItemNode.SelectSingleNode("생년월일").InnerText),
                                            (String.IsNullOrWhiteSpace(ItemNode.SelectSingleNode("여권발행국코드").InnerText) ? "" : ItemNode.SelectSingleNode("여권발행국코드").InnerText),
                                            (String.IsNullOrWhiteSpace(ItemNode.SelectSingleNode("여권국적코드").InnerText) ? "" : ItemNode.SelectSingleNode("여권국적코드").InnerText),
                                            ItemNode.SelectSingleNode("성별").InnerText,
                                            "",
                                            "",
                                            "",
                                            "",
                                            "");
                            }

                            XmlElement ResXml = gas.GKPnrRS(OID.ToString(), PNR, "G", RQR.ToString(), XmlBook.SelectNodes("PaxFareInfo").Count, ApisInfo, GUID);

                            if (ResXml.SelectSingleNode("ResultErrorNo").InnerText.Equals("0"))
                            {
                                string ResultMsg = GKPNRUpdateDB(OID, ResXml.SelectSingleNode("NewPNR").InnerText, RQR, RQT);

                                if (!String.IsNullOrWhiteSpace(ResultMsg))
                                    throw new Exception(ResultMsg);
                                else
                                {
                                    gas.RemarksAddRS(OID.ToString(), PNR, RQR.ToString(), String.Format("GKPNR: {0}", ResXml.SelectSingleNode("NewPNR").InnerText), GUID);
                                    return ResXml;
                                }
                            }
                            else
                                throw new Exception(ResXml.SelectSingleNode("ResultMsg").InnerText);
                        }
                        else
                            throw new Exception("서비스가 지원되지 않는 항공사입니다.");
                    }
                    else
                        throw new Exception("서비스가 지원되지 않는 GDS입니다.");
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("RQR", PID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 463, OID, 0).ToErrors;
            }
        }

        /// <summary>
        /// GKPNR 등록
        /// </summary>
        /// <param name="OID">모두투어 주문번호</param>
        /// <param name="GKPNR">GKPNR</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        //[WebMethod(Description = "GKPNR 등록")]
        protected string GKPNRUpdateDB(int OID, string GKPNR, int RQR, string RQT)
        {
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
            {
                SqlCommand cmd = new SqlCommand
                {
                    Connection = conn,
                    CommandTimeout = 60,
                    CommandType = CommandType.StoredProcedure,
                    CommandText = "DBO.WSV_T_아이템예약_해외항공_GKPNR"
                };

                cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);
                cmd.Parameters.Add("@GKPNR", SqlDbType.VarChar, 10);
                cmd.Parameters.Add("@요청자번호", SqlDbType.Int, 0);
                cmd.Parameters.Add("@요청단말기", SqlDbType.VarChar, 20);
                cmd.Parameters.Add("@요청URL", SqlDbType.VarChar, 1000);
                cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
                cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                cmd.Parameters["@주문번호"].Value = OID;
                cmd.Parameters["@GKPNR"].Value = GKPNR;
                cmd.Parameters["@요청자번호"].Value = RQR;
                cmd.Parameters["@요청단말기"].Value = RQT;
                cmd.Parameters["@요청URL"].Value = Convert.DBNull;
                cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                try
                {
                    conn.Open();
                    cmd.ExecuteNonQuery();

                    return cmd.Parameters["@에러메시지"].Value.ToString();
                }
                catch (Exception ex)
                {
                    throw new Exception(ex.Message);
                }
                finally
                {
                    conn.Close();
                }
            }
        }

        #endregion "갈릴레오 OZ PNR 생성(GKPNR)"

        #region "GKPNR 티켓번호 갈릴레오 전송"

        /// <summary>
        /// GKPNR 티켓번호 갈릴레오 전송
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "GKPNR 티켓번호 갈릴레오 전송")]
        public XmlElement GKTicketNumberUpdate(int SNM, int OID, int PID, int RQR, string RQT)
        {
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 464;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RQR;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    if (XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText.Equals("Galileo"))
                    {
                        if (!String.IsNullOrWhiteSpace(XmlDBBooking.SelectSingleNode("item3/GKPNR").InnerText))
                        {
                            string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
                            string PNR = XmlDBBooking.SelectSingleNode("item3/GDS주문번호").InnerText;
                            string GKPNR = XmlDBBooking.SelectSingleNode("item3/GKPNR").InnerText;

                            XmlElement ResXml = gas.GKTicketNumUpdateRS(OID.ToString(), PNR, "G", RQR.ToString(), XmlDBBooking.SelectNodes("item4").Count, GKPNR, "B", LogGUID);

                            if (ResXml.SelectSingleNode("ResultErrorNo").InnerText.Equals("0"))
                                return ResXml;
                            else
                                throw new Exception(ResXml.SelectSingleNode("ResultMsg").InnerText);
                        }
                        else
                            throw new Exception("GKPNR이 존재하지 않습니다.");
                    }
                    else
                        throw new Exception("서비스가 지원되지 않는 GDS입니다.");
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("RQR", PID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 464, OID, 0).ToErrors;
            }
        }

        #endregion "GKPNR 티켓번호 갈릴레오 전송"

        #region "갈릴레오 예상 텍스 조회"

        /// <summary>
        /// 갈릴레오 예상 텍스 조회
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <returns></returns>
        [WebMethod(Description = "갈릴레오 예상 텍스 조회")]
        public XmlElement SearchAirQuoteTaxGalileoRS(int SNM, int OID, int PID, int RQR, string RQT)
        {
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 470;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RQR;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");
                
                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    if (XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText.Equals("Galileo"))
                    {
                        //요금정보
                        XmlDocument XmlFare = new XmlDocument();
                        XmlFare.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                        string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
                        string PNR = XmlDBBooking.SelectSingleNode("item3/GDS주문번호").InnerText;
                        string GoodCode = XmlFare.SelectSingleNode("priceIndex/fareMessage/fareKey").InnerText.Replace("*", "/");
                        string EventCode = (XmlFare.SelectNodes("priceIndex/promotionInfo").Count > 0) ? XmlFare.SelectSingleNode("priceIndex/promotionInfo/item/promotionId").InnerText : "";
                        string FareLocation = XmlDBBooking.SelectSingleNode("item3/운임종류").InnerText;
                        int PaxCnt = XmlDBBooking.SelectNodes("item4").Count;
                        string PaxAmountInfo = string.Empty;

                        foreach (XmlNode PaxInfo in SearchBookingPNR(SNM, GDS, PNR, LogGUID).SelectNodes("PaxFareInfo"))
                        {
                            XmlNode ItemNode = XmlDBBooking.SelectSingleNode(String.Format("item4[영문성='{0}' and 영문이름='{1}']", PaxInfo.SelectSingleNode("PaxLastName").InnerText, PaxInfo.SelectSingleNode("PaxFirstName").InnerText));
                            XmlNode FareNode = XmlFare.SelectSingleNode(String.Format("priceIndex/paxFareGroup/paxFare[@ptc='{0}']", ItemNode.SelectSingleNode("구분").InnerText));
                            
                            if (!String.IsNullOrWhiteSpace(PaxAmountInfo))
                                PaxAmountInfo += ",";

                            PaxAmountInfo += String.Format("{0}^{1}^{2}^{3}^{4}^{5}^{6}^{7}^{8}^{9}^{10}^{11}^{12}^{13}^{14}^{15}^{16}^{17}^{18}^{19}^{20}^{21}^{22}^{23}^{24}^{25}^{26}^{27}^{28}^{29}",
                                                ItemNode.SelectSingleNode("판매명세번호").InnerText,
                                                PaxInfo.SelectSingleNode("AbsNameNum").InnerText,
                                                ItemNode.SelectSingleNode("영문성명").InnerText,
                                                ItemNode.SelectSingleNode("구분").InnerText,
                                                FareNode.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText,
                                                ItemNode.SelectSingleNode("항공료").InnerText,
                                                ItemNode.SelectSingleNode("TAX").InnerText,
                                                ItemNode.SelectSingleNode("유류할증료").InnerText,
                                                "0",
                                                "0",
                                                "0",
                                                "0",
                                                "",
                                                "",
                                                "",
                                                "",
                                                "",
                                                "",
                                                "",
                                                "",
                                                "",
                                                "",
                                                "",
                                                "",
                                                "",
                                                "",
                                                "",
                                                "",
                                                PaxInfo.SelectSingleNode("PaxTitle").InnerText,
                                                FareLocation);
                        }

                        XmlElement ResXml = gas.SearchTaxRS(OID.ToString(), PNR, GoodCode, RQR.ToString(), PaxCnt, PaxAmountInfo, "", "FQ", "N", "Y", "Y", EventCode, FareLocation, LogGUID);
                        
                        if (ResXml.SelectSingleNode("ResultErrorNo").InnerText.Equals("0"))
                        {
                            XmlNode PaxDetails = ResXml.SelectSingleNode("PaxDetails");
                            XmlNode NewPaxDetails = PaxDetails.CloneNode(false);
                            XmlNode PaxDetail = null;
                            XmlAttribute PTC = null;

                            foreach (XmlNode TmpNode in PaxDetails.ChildNodes)
                            {
                                if (TmpNode.Name.Equals("PaxIdx"))
                                {
                                    if (PaxDetail != null && PaxDetail.HasChildNodes)
                                    {
                                        NewPaxDetails.AppendChild(PaxDetail);
                                        PaxDetail = null;
                                    }

                                    PaxDetail = ResXml.OwnerDocument.CreateElement("PaxDetail");

                                    PTC = ResXml.OwnerDocument.CreateAttribute("ptc");
                                    PTC.InnerText = XmlDBBooking.SelectSingleNode(String.Format("item4[판매명세번호='{0}']", TmpNode.InnerText)).SelectSingleNode("구분").InnerText;
                                    PaxDetail.Attributes.Append(PTC);
                                }

                                PaxDetail.AppendChild(TmpNode.CloneNode(true));
                            }

                            if (PaxDetail != null)
                            {
                                NewPaxDetails.AppendChild(PaxDetail);
                                PaxDetail = null;
                            }

                            ResXml.RemoveChild(PaxDetails);
                            ResXml.AppendChild(NewPaxDetails);
                        }
                        else
                            throw new Exception(ResXml.SelectSingleNode("ResultMsg").InnerText);

                        return ResXml;
                    }
                    else
                        throw new Exception("서비스가 지원되지 않는 GDS입니다.");
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("RQR", PID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 470, OID, 0).ToErrors;
            }
        }

        #endregion "갈릴레오 예상 텍스 조회"

        #region "갈릴레오 관리자 발권 페이지용 파라미터 구하기"

        /// <summary>
        /// 갈릴레오 관리자 발권 페이지용 파라미터 구하기
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="RIP">요청자IP</param>
        /// <returns></returns>
        [WebMethod(Description = "갈릴레오 관리자 발권 페이지용 파라미터 구하기")]
        public string AutoTicketAdminParameter(int SNM, int OID, int PID, int RQR, string RQT, string RIP)
        {
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 466;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RQR;
                sqlParam[12].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            string Param = string.Empty;

            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, RIP);
                
                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    if (XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText.Equals("Galileo"))
                    {
                        //요금정보
                        XmlDocument XmlFare = new XmlDocument();
				        XmlFare.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);
                        
                        //예약정보
                        XmlDocument XmlGalileoBook = new XmlDocument();
				        XmlGalileoBook.LoadXml(XmlDBBooking.SelectSingleNode("item3/예약XML").InnerText);

                        string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
                        string PNR = XmlDBBooking.SelectSingleNode("item3/GDS주문번호").InnerText;
                        string GoodCode = XmlFare.SelectSingleNode("priceIndex/fareMessage/fareKey").InnerText.Replace("*", "/");
                        string FareLocation = XmlDBBooking.SelectSingleNode("item3/운임종류").InnerText;
                        string PaxCnt = XmlDBBooking.SelectNodes("item4").Count.ToString();
                        string PaxAmountInfo = string.Empty;

                        foreach (XmlNode PaxInfo in SearchBookingPNR(SNM, GDS, PNR, LogGUID).SelectNodes("PaxFareInfo"))
                        {
                            XmlNode ItemNode = XmlDBBooking.SelectSingleNode(String.Format("item4[영문성='{0}' and 영문이름='{1}']", PaxInfo.SelectSingleNode("PaxLastName").InnerText, PaxInfo.SelectSingleNode("PaxFirstName").InnerText));
                            XmlNode FareNode = XmlFare.SelectSingleNode(String.Format("priceIndex/paxFareGroup/paxFare[@ptc='{0}']", ItemNode.SelectSingleNode("구분").InnerText));
                            XmlNode PaxFareInfo = XmlGalileoBook.SelectSingleNode(String.Format("*/PaxFareInfo[PaxLastName='{0}' and PaxFirstName='{1}']", PaxInfo.SelectSingleNode("PaxLastName").InnerText, PaxInfo.SelectSingleNode("PaxFirstName").InnerText));

                            string Payment = string.Empty;
                            string CardGubun = string.Empty;
                            string CardNumber = string.Empty;
                            string CardThru = string.Empty;
                            string CardInstallment = string.Empty;
                            string CardAmount = string.Empty;
                            string CashAmount = string.Empty;
                            string TaxInfo = string.Empty;

                            if (XmlDBBooking.SelectNodes("item10").Count > 0)
                            {
                                XmlNode PaymentNode = XmlDBBooking.SelectNodes("item10")[(XmlDBBooking.SelectNodes("item10").Count - 1)];

                                Payment = (PaymentNode.SelectSingleNode("카드결제여부").InnerText.Equals("Y") && PaymentNode.SelectSingleNode("계좌이체여부").InnerText.Equals("Y")) ? "CS" : (PaymentNode.SelectSingleNode("계좌이체여부").InnerText.Equals("Y") ? "S" : "C");
                                CardGubun = PaymentNode.SelectSingleNode("카드코드").InnerText;
                                CardNumber = Common.ConvertToOnlyNumber(PaymentNode.SelectSingleNode("카드번호").InnerText);
                                CardThru = PaymentNode.SelectSingleNode("유효기간").InnerText;
                                CardInstallment = PaymentNode.SelectSingleNode("할부기간").InnerText;
                                CardAmount = Payment.Equals("S") ? "0" : ItemNode.SelectSingleNode("총요금2").InnerText;
                                CashAmount = Payment.Equals("S") ? ItemNode.SelectSingleNode("총요금2").InnerText : "0";
                            }

                            foreach (XmlNode TaxDetails in PaxFareInfo.SelectNodes("TaxDetails"))
                            {
                                if (!String.IsNullOrWhiteSpace(TaxInfo))
                                    TaxInfo += "/";

                                TaxInfo += String.Concat(TaxDetails.SelectSingleNode("TaxAmt").InnerText, TaxDetails.SelectSingleNode("TaxCode").InnerText);
                            }

                            if (!String.IsNullOrWhiteSpace(PaxAmountInfo))
                                PaxAmountInfo += ",";

                            PaxAmountInfo += String.Format("{0}^{1}^{2}^{3}^{4}^{5}^{6}^{7}^{8}^{9}^{10}^{11}^{12}^{13}^{14}^{15}^{16}^{17}^{18}^{19}^{20}^{21}^{22}^{23}^{24}^{25}^{26}^{27}^{28}^{29}",
                                                ItemNode.SelectSingleNode("판매명세번호").InnerText,
                                                PaxInfo.SelectSingleNode("AbsNameNum").InnerText,
                                                ItemNode.SelectSingleNode("영문성명").InnerText,
                                                ItemNode.SelectSingleNode("구분").InnerText,
                                                FareNode.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText,
                                                ItemNode.SelectSingleNode("항공료").InnerText,
                                                ItemNode.SelectSingleNode("TAX").InnerText,
                                                ItemNode.SelectSingleNode("유류할증료").InnerText,
                                                "0",
                                                "0",
                                                "0",
                                                "0",
                                                ItemNode.SelectSingleNode("생년월일").InnerText,
                                                ItemNode.SelectSingleNode("여권번호").InnerText,
                                                ItemNode.SelectSingleNode("여권발행국코드").InnerText,
                                                ItemNode.SelectSingleNode("여권국적코드").InnerText,
                                                "",
                                                "",
                                                "",
                                                Payment,
                                                CardGubun,
                                                CardNumber,
                                                (!String.IsNullOrWhiteSpace(CardThru) ? CardThru.Substring(0, 4) : ""),
                                                (!String.IsNullOrWhiteSpace(CardThru) ? CardThru.Substring(4, 2) : ""),
                                                CardInstallment,
                                                CardAmount,
                                                CashAmount,
                                                TaxInfo,
                                                PaxInfo.SelectSingleNode("PaxTitle").InnerText,
                                                FareLocation);
                        }

                        Param += String.Format("ReservationCode={0}&PNR={1}&GoodCode={2}&ReqID={3}&PaxCnt={4}&PaxAmountInfo={5}&AgentCode=KKI", OID.ToString(), PNR, GoodCode, RQR.ToString(), PaxCnt, PaxAmountInfo);
                    }
                    else
                        throw new Exception("서비스가 지원되지 않는 GDS입니다.");
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("RQR", PID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 466, OID, 0).ToString;
            }

            return Param;
        }

        #endregion "갈릴레오 관리자 발권 페이지용 파라미터 구하기"

        #region "갈릴레오 APIS(여권/체류지) 입력"

        /// <summary>
        /// 갈릴레오 APIS(여권/체류지) 입력
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="RIP">요청자IP</param>
        /// <returns></returns>
        [WebMethod(Description = "갈릴레오 APIS(여권/체류지) 입력")]
        public XmlElement APISUpdateGalileo(int SNM, int OID, int PID, int RQR, string RQT, string RIP)
        {
            string LogGUID = cm.GetGUID;
            
            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청4", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 467;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = OID;
                sqlParam[10].Value = PID;
                sqlParam[11].Value = RQR;
                sqlParam[12].Value = RIP;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, RIP);
                
                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    if (XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText.Equals("Galileo"))
                    {
                        string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
                        string PNR = XmlDBBooking.SelectSingleNode("item3/GDS주문번호").InnerText;
                        int PaxCnt = XmlDBBooking.SelectNodes("item4").Count;
                        string ApisInfo = string.Empty;

                        foreach (XmlNode PaxInfo in SearchBookingPNR(SNM, GDS, PNR, LogGUID).SelectNodes("PaxFareInfo"))
                        {
                            XmlNode ItemNode = XmlDBBooking.SelectSingleNode(String.Format("item4[영문성='{0}' and 영문이름='{1}']", PaxInfo.SelectSingleNode("PaxLastName").InnerText, PaxInfo.SelectSingleNode("PaxFirstName").InnerText));
                            
                            if (!String.IsNullOrWhiteSpace(ApisInfo))
                                ApisInfo += ",";

                            ApisInfo += String.Format("{0}^{1}^{2}^{3}^{4}^{5}^{6}^{7}^{8}^{9}^{10}^{11}^{12}^{13}^{14}^{15}",
                                                ItemNode.SelectSingleNode("판매명세번호").InnerText,
                                                PaxInfo.SelectSingleNode("AbsNameNum").InnerText,
                                                ItemNode.SelectSingleNode("영문성명").InnerText,
                                                ItemNode.SelectSingleNode("구분").InnerText,
                                                "0",
                                                ItemNode.SelectSingleNode("여권번호").InnerText,
                                                Common.ConvertToOnlyNumber(ItemNode.SelectSingleNode("여권만료일").InnerText),
                                                Common.ConvertToOnlyNumber(ItemNode.SelectSingleNode("생년월일").InnerText),
                                                ItemNode.SelectSingleNode("여권발행국코드").InnerText,
                                                ItemNode.SelectSingleNode("여권국적코드").InnerText,
                                                ItemNode.SelectSingleNode("성별").InnerText,
                                                "",
                                                "",
                                                "",
                                                "",
                                                "");
                        }

                        XmlElement ResXml = gas.ApisRS(OID.ToString(), PNR, "G", RQR.ToString(), PaxCnt, "DOCS", ApisInfo, LogGUID);

                        return ResXml;
                    }
                    else
                        throw new Exception("서비스가 지원되지 않는 GDS입니다.");
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("RQR", PID);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 467, OID, 0).ToErrors;
            }
        }

        #endregion "갈릴레오 APIS(여권/체류지) 입력"

        #region "갈릴레오 ResInfoCreate 호출"

        //[WebMethod(Description = "스케쥴 정보로만 갈릴레오 예약시 사용")]
        public XmlElement AddBookingResInfoCreateRS(string ROT, string OPN, string[]PTC, XmlElement FXL, XmlElement SXL, string GUID)
        {
            try
            {
                string FareType = FXL.SelectSingleNode("paxFareGroup/paxFare/segFareGroup/segFare/fare/cabin").Attributes.GetNamedItem("cabin").InnerText;
                string StayLength = OPN.Equals("Y") ? FXL.SelectSingleNode("summary").Attributes.GetNamedItem("mas").InnerText : "";
                int ADC = 0;
                int CHC = 0;
                int IFC = 0;

                string[] SCity = new String[7] { "", "", "", "", "", "", "" };
                string[] ECity = new String[7] { "", "", "", "", "", "", "" };
                string[] SDate = new String[7] { "", "", "", "", "", "", "" };
                string[] Itinerary = new String[3] { "", "", "" };

                for (int i = 0; i < SXL.SelectNodes("segGroup").Count; i++)
                {
                    XmlNode SegGroup = SXL.SelectNodes("segGroup")[i];

                    SCity[i] = SegGroup.SelectSingleNode("seg[1]").Attributes.GetNamedItem("dlc").InnerText;
                    ECity[i] = SegGroup.SelectSingleNode("seg[last()]").Attributes.GetNamedItem("alc").InnerText;
                    SDate[i] = Common.ConvertToOnlyNumber(SegGroup.SelectSingleNode("seg[1]").Attributes.GetNamedItem("ddt").InnerText.Substring(0, 10));

                    foreach (XmlNode Seg in SegGroup.SelectNodes("seg"))
                    {
                        if (!String.IsNullOrWhiteSpace(Itinerary[i]))
                            Itinerary[i] += ",";

                        Itinerary[i] += String.Format("{0}^{1}^^^{2}^{3}^{4}^{5}^^^{6}^{7}^{8}^^{9}^{10}^{11}^{12}^^",
                                                        Seg.Attributes.GetNamedItem("dlc").InnerText,
                                                        Seg.Attributes.GetNamedItem("alc").InnerText,
                                                        Common.ConvertToOnlyNumber(Seg.Attributes.GetNamedItem("ddt").InnerText.Substring(0, 10)),
                                                        Common.ConvertToOnlyNumber(Seg.Attributes.GetNamedItem("ardt").InnerText.Substring(0, 10)),
                                                        (Seg.Attributes.GetNamedItem("ddt").InnerText.Length > 10) ? Seg.Attributes.GetNamedItem("ddt").InnerText.Substring(11, 5).Replace(":", "") : "",
                                                        (Seg.Attributes.GetNamedItem("ardt").InnerText.Length > 10) ? Seg.Attributes.GetNamedItem("ardt").InnerText.Substring(11, 5).Replace(":", "") : "",
                                                        Seg.Attributes.GetNamedItem("mcc").InnerText,
                                                        Seg.Attributes.GetNamedItem("fln").InnerText,
                                                        Seg.Attributes.GetNamedItem("rbd").InnerText,
                                                        Seg.Attributes.GetNamedItem("nos").InnerText,
                                                        (Seg.Attributes.GetNamedItem("ddt").InnerText.Substring(0, 10) != Seg.Attributes.GetNamedItem("ardt").InnerText.Substring(0, 10)) ? "Y" : "",
                                                        Seg.SelectNodes("seg").Count.Equals(0) ? "" : "1",
                                                        Seg.Attributes.GetNamedItem("occ").InnerText);
                    }

                    Itinerary[i] += ",^^";
                }

                foreach (string TmpPTC in PTC)
                {
                    if (TmpPTC.Trim().Equals("CHD"))
                        CHC++;
                    else if (TmpPTC.Trim().Equals("INF"))
                        IFC++;
                    else
                        ADC++;
                }

                return gas.ResInfoCreateRS(SCity[0], ECity[0], SCity[1], ECity[1], SCity[2], ECity[2], SCity[3], ECity[3], SCity[4], ECity[4], SCity[5], ECity[5], SCity[6], ECity[6], SDate[0], SDate[1], SDate[2], SDate[3], SDate[4], SDate[5], SDate[6], ROT, ((FareType.Equals("M") || FareType.Equals("W")) ? "Y" : FareType), StayLength, ADC, CHC, IFC, Itinerary[0], Itinerary[1], Itinerary[2], "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Y", "", "", "", "", "", "", "", "", GUID);
            }
            catch (Exception ex)
            {
                return new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0).ToErrors;
            }
        }

        #endregion "갈릴레오 ResInfoCreate 호출"

        #region "갈릴레오 자동발권"

        //[WebMethod(Description = "갈릴레오 자동발권")]
        public XmlElement TicketIssuingSemiAutoGalileoRSTEST()
        {
            XmlDocument XmlFP = new XmlDocument();
            XmlFP.Load(mc.XmlFullPath("_FPGalileo"));

            return TicketIssuingSemiAutoGalileoRS(4638, 34465740, 1743, XmlFP.DocumentElement, 1743, "WEBSERVICE", "", cm.GetGUID);
        }

        /// <summary>
        /// 갈릴레오 자동발권
        /// </summary>
        /// <param name="SNM">사이트번호</param>
        /// <param name="OID">주문번호</param>
        /// <param name="PID">예약자번호(PTID)</param>
        /// <param name="FP">결제요청정보</param>
        /// <param name="RQR">요청자번호(PTID)</param>
        /// <param name="RQT">요청단말기(WEB/MOBILEWEB/MOBILEAPP/CRS/MODEWARE)</param>
        /// <param name="RIP">요청자IP</param>
        /// <param name="GUID">고유번호</param>
        /// <returns></returns>
        [WebMethod(Description = "갈릴레오 자동발권")]
        public XmlElement TicketIssuingSemiAutoGalileoRS(int SNM, int OID, int PID, XmlElement FP, int RQR, string RQT, string RIP, string GUID)
        {
            string LogGUID = GUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문번호", SqlDbType.Int, 0),
                        new SqlParameter("@주문아이템번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청3", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청41", SqlDbType.VarChar, -1)
                    };

                sqlParam[0].Value = 631;
                sqlParam[1].Value = SNM;
                sqlParam[2].Value = OID;
                sqlParam[3].Value = 0;
                sqlParam[4].Value = RQT;
                sqlParam[5].Value = Environment.MachineName;
                sqlParam[6].Value = hcc.Request.HttpMethod;
                sqlParam[7].Value = hcc.Request.UserHostAddress;
                sqlParam[8].Value = LogGUID;
                sqlParam[9].Value = PID;
                sqlParam[10].Value = RQR;
                sqlParam[11].Value = RIP;
                sqlParam[12].Value = FP.OuterXml;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
            {
                //DB에 저장된 예약정보
                XmlElement XmlDBBooking = SearchBookingDB(OID, PID, "");

                if (XmlDBBooking.HasChildNodes && XmlDBBooking.SelectNodes("item3").Count > 0)
                {
                    if (XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText.Equals("Galileo"))
                    {
                        if (FP.SelectNodes("paxAmount").Count > 0)
                        {
                            //요금정보
                            XmlDocument XmlFare = new XmlDocument();
                            XmlFare.LoadXml(XmlDBBooking.SelectSingleNode("item3/요금XML").InnerText);

                            //예약정보
                            XmlDocument XmlGalileoBook = new XmlDocument();
                            XmlGalileoBook.LoadXml(XmlDBBooking.SelectSingleNode("item3/예약XML").InnerText);

                            string GDS = XmlDBBooking.SelectSingleNode("item3/GDS코드").InnerText;
                            string PNR = XmlDBBooking.SelectSingleNode("item3/GDS주문번호").InnerText;
                            string GKPNR = XmlDBBooking.SelectSingleNode("item3/GKPNR").InnerText;
                            string GoodCode = XmlFare.SelectSingleNode("priceIndex/fareMessage/fareKey").InnerText.Replace("*", "/");
                            string FareLocation = XmlDBBooking.SelectSingleNode("item3/운임종류").InnerText;
                            string Tel = XmlDBBooking.SelectSingleNode("item1/휴대폰").InnerText;
                            int PaxCnt = XmlDBBooking.SelectNodes("item4").Count;
                            string PaxAmountInfo = string.Empty;

                            foreach (XmlNode PaxInfo in SearchBookingPNR(SNM, GDS, PNR, String.Concat(GUID, "-01")).SelectNodes("PaxFareInfo"))
                            {
                                string PaxLastName = PaxInfo.SelectSingleNode("PaxLastName").InnerText;
                                string PaxFirstName = PaxInfo.SelectSingleNode("PaxFirstName").InnerText;
                                string PaxTitle = PaxInfo.SelectSingleNode("PaxTitle").InnerText;
                                
                                XmlNode ItemNode = XmlDBBooking.SelectSingleNode(String.Format("item4[영문성='{0}' and 영문이름='{1}']", PaxLastName, PaxFirstName));
                                XmlNode FareNode = XmlFare.SelectSingleNode(String.Format("priceIndex/paxFareGroup/paxFare[@ptc='{0}']", ItemNode.SelectSingleNode("구분").InnerText));
                                XmlNode PaxFareInfo = XmlGalileoBook.SelectSingleNode(String.Format("*/PaxFareInfo[PaxLastName='{0}' and PaxFirstName='{1}']", PaxLastName, PaxFirstName));
                                XmlNode FPNode = FP.SelectSingleNode(String.Format("paxAmount/pax[@name='{0}/{1}{2}']", PaxLastName, PaxFirstName, PaxTitle));

                                double TASF = ((XmlAttribute)FPNode.SelectSingleNode("fare").Attributes.GetNamedItem("tasf") != null) ? cm.RequestDouble(FPNode.SelectSingleNode("fare").Attributes.GetNamedItem("tasf").InnerText) : 0;
                                double PrimeFare = Convert.ToInt32(PaxFareInfo.SelectSingleNode("NormalFare").InnerText);
                                string Payment = (FPNode.SelectNodes("item[@gubun='CARD']").Count > 0 && FPNode.SelectNodes("item[@gubun='CASH']").Count > 0) ? "CS" : ((FPNode.SelectNodes("item[@gubun='CARD']").Count > 0) ? "C" : "S");
                                string CardGubun = string.Empty;
                                string CardNumber = string.Empty;
                                string CardThruY = string.Empty;
                                string CardThruM = string.Empty;
                                string CardInstallment = string.Empty;
                                double CardAmount = 0;
                                double CashAmount = 0;
                                string TaxInfo = string.Empty;

                                if (Payment.Equals("CS") || Payment.Equals("C"))
                                {
                                    XmlNode CardNode = FPNode.SelectSingleNode("item[@gubun='CARD']");

                                    CardGubun = CardNode.Attributes.GetNamedItem("kind").InnerText;
                                    CardNumber = Common.ConvertToOnlyNumber(CardNode.Attributes.GetNamedItem("number").InnerText);
                                    CardThruY = CardNode.Attributes.GetNamedItem("validThru").InnerText.Substring(0, 4);
                                    CardThruM = CardNode.Attributes.GetNamedItem("validThru").InnerText.Substring(4, 2);
                                    CardInstallment = CardNode.Attributes.GetNamedItem("installment").InnerText;
                                    CardAmount = (cm.RequestDouble(CardNode.Attributes.GetNamedItem("amount").InnerText) - TASF);
                                }
                                else
                                {
                                    CashAmount = (FPNode.SelectNodes("item[@gubun='CASH']").Count > 0) ? (cm.RequestDouble(FPNode.SelectSingleNode("item[@gubun='CASH']").Attributes.GetNamedItem("amount").InnerText) - TASF) : 0;
                                }

                                //항공 원가 차액만큼 캐시로 추가
                                CashAmount += (PrimeFare - (CardAmount + CashAmount));

                                foreach (XmlNode TaxDetails in PaxFareInfo.SelectNodes("TaxDetails"))
                                {
                                    if (!String.IsNullOrWhiteSpace(TaxInfo))
                                        TaxInfo += "/";

                                    TaxInfo += String.Concat(TaxDetails.SelectSingleNode("TaxAmt").InnerText, TaxDetails.SelectSingleNode("TaxCode").InnerText);
                                }

                                if (!String.IsNullOrWhiteSpace(PaxAmountInfo))
                                    PaxAmountInfo += ",";

                                PaxAmountInfo += String.Format("{0}^{1}^{2}^{3}^{4}^{5}^{6}^{7}^{8}^{9}^{10}^{11}^{12}^{13}^{14}^{15}^{16}^{17}^{18}^{19}^{20}^{21}^{22}^{23}^{24}^{25}^{26}^{27}^{28}^{29}",
                                                    ItemNode.SelectSingleNode("판매명세번호").InnerText,
                                                    PaxInfo.SelectSingleNode("AbsNameNum").InnerText,
                                                    ItemNode.SelectSingleNode("영문성명").InnerText,
                                                    ItemNode.SelectSingleNode("구분").InnerText,
                                                    FareNode.SelectSingleNode("amount").Attributes.GetNamedItem("fare").InnerText,
                                                    ItemNode.SelectSingleNode("항공료").InnerText,
                                                    ItemNode.SelectSingleNode("TAX").InnerText,
                                                    ItemNode.SelectSingleNode("유류할증료").InnerText,
                                                    "0",
                                                    "0",
                                                    "0",
                                                    "0",
                                                    ItemNode.SelectSingleNode("생년월일").InnerText,
                                                    ItemNode.SelectSingleNode("여권번호").InnerText,
                                                    ItemNode.SelectSingleNode("여권발행국코드").InnerText,
                                                    ItemNode.SelectSingleNode("여권국적코드").InnerText,
                                                    "",//항공사마일리지번호(항공사2코드 + 마일리지번호)
                                                    Tel,//연락처
                                                    "",//할인율
                                                    Payment,//지불수단(S:현금, C:카드, CS:카드+현금)
                                                    CardGubun,//카드구분(국내전용인 경우 2코드)
                                                    CardNumber,//카드번호
                                                    CardThruY,//유효기간(YY)
                                                    CardThruM,//유효기간(M)
                                                    CardInstallment,//할부
                                                    CardAmount,//카드금액
                                                    CashAmount,//현금
                                                    TaxInfo,//TAX내역
                                                    PaxInfo.SelectSingleNode("PaxTitle").InnerText,
                                                    FareLocation);
                            }

                            XmlElement ResXml = gas.TicketIssuingRS(OID.ToString(), PNR, GoodCode, RQR.ToString(), PaxCnt, PaxAmountInfo, "Y", "FQ", "G", GKPNR, (!String.IsNullOrWhiteSpace(GKPNR) ? "B" : "G"), String.Concat(GUID, "-02_FQ"));

                            if (ResXml.SelectSingleNode("ResultErrorNo").InnerText.Equals("0"))
                            {
                                ResXml = gas.TicketIssuingRS(OID.ToString(), PNR, GoodCode, RQR.ToString(), PaxCnt, PaxAmountInfo, "Y", "TK", "G", GKPNR, (!String.IsNullOrWhiteSpace(GKPNR) ? "B" : "G"), String.Concat(GUID, "-03_TK"));
                            }
                            else
                                throw new Exception(ResXml.SelectSingleNode("ResultMsg").InnerText);

                            return ResXml;
                        }
                        else
                            throw new Exception("발권요청 정보가 존재하지 않습니다.");
                    }
                    else
                        throw new Exception("서비스가 지원되지 않는 GDS입니다.");
                }
                else
                    throw new Exception("예약 정보가 존재하지 않습니다.");
            }
            catch (Exception ex)
            {
                ex.Data.Clear();
                ex.Data.Add("SNM", SNM);
                ex.Data.Add("OID", OID);
                ex.Data.Add("PID", PID);
                ex.Data.Add("RQR", RQR);
                ex.Data.Add("RQT", RQT);
                ex.Data.Add("RIP", RIP);

                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 631, OID, 0).ToErrors;
            }
        }

        #endregion "갈릴레오 자동발권"

        #endregion "갈릴레오 전용"

        #region "함수"

        /// <summary>
		/// 출발 가능한 최초 날짜 구하기
		/// </summary>
		/// <param name="SNM">사이트번호</param>
		/// <returns></returns>
		public string StartDate(int SNM)
		{
			string ReStartDate = string.Empty;

            try
			{
				using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["NEWEAGLE"].ConnectionString))
				{
					using (SqlCommand cmd = new SqlCommand
					{
						Connection = conn,
						CommandTimeout = 60,
						CommandType = CommandType.StoredProcedure,
						CommandText = "DBO.WSV_S_아이템예약_해외항공_예약가능일"
					})
					{
						cmd.Parameters.Add("@사이트번호", SqlDbType.Int, 0);
                        cmd.Parameters.Add("@기준날짜", SqlDbType.DateTime, 0);
                        cmd.Parameters.Add("@예약가능일", SqlDbType.Char, 10);
						cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
						cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

						cmd.Parameters["@사이트번호"].Value = SNM;
                        cmd.Parameters["@기준날짜"].Value = Convert.DBNull;
                        cmd.Parameters["@예약가능일"].Direction = ParameterDirection.Output;
						cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
						cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

						try
						{
							conn.Open();
							cmd.ExecuteNonQuery();

                            if (cmd.Parameters["@결과"].Value.ToString().Equals("S"))
							    ReStartDate = cmd.Parameters["@예약가능일"].Value.ToString();
                            else
                                throw new Exception(cmd.Parameters["@에러메시지"].Value.ToString());
						}
						catch (Exception ex)
						{
                            throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0);
						}
						finally
						{
							conn.Close();
						}
					}
				}
			}
			catch (Exception ex)
			{
                throw new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0);
			}

            return ReStartDate;
		}

        /// <summary>
        /// 모두투어 커미션
        /// </summary>
        /// <param name="SNM">사이트 번호</param>
        /// <param name="SAC">항공사 코드</param>
        /// <param name="DLC">출발지 공항 코드</param>
        /// <param name="ALC">도착지 공항 코드</param>
        /// <param name="RoutingCity">여정 정보(공항)</param>
        /// <param name="RoutingOA">여정 정보(운항항공사)</param>
        /// <param name="RoutingMA">여정 정보(마케팅항공사)</param>
        /// <param name="RoutingCls">여정 정보(부킹클래스)</param>
        /// <param name="DTD">출발일(YYYY-MM-DD)</param>
        /// <param name="OJT">OJT여부</param>
        /// <returns></returns>
        public string[] ModeCommission(int SNM, string SAC, string DLC, string ALC, string RoutingCity, string RoutingOA, string RoutingMA, string RoutingCls, string DTD, bool OJT)
        {
            string[] CommissionInfo = new String[5] { "F", "", "", "", "" };

            try
            {
                using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
                {
                    using (SqlCommand cmd = new SqlCommand
                    {
                        Connection = conn,
                        CommandTimeout = 60,
                        CommandType = CommandType.StoredProcedure,
                        CommandText = "DBO.WSV_S_아이템예약_항공_자동발권COMM"
                    })
                    {
                        cmd.Parameters.Add("@사이트번호", SqlDbType.Int, 0);
	                    cmd.Parameters.Add("@항공사", SqlDbType.Char, 2);
	                    cmd.Parameters.Add("@출발지", SqlDbType.Char, 3);
	                    cmd.Parameters.Add("@목적지", SqlDbType.Char, 3);
	                    cmd.Parameters.Add("@여정", SqlDbType.VarChar, 100);
	                    cmd.Parameters.Add("@운항항공사", SqlDbType.VarChar, 100);
	                    cmd.Parameters.Add("@마케팅항공사", SqlDbType.VarChar, 100);
	                    cmd.Parameters.Add("@부킹클래스", SqlDbType.VarChar, 100);
	                    cmd.Parameters.Add("@출발일", SqlDbType.VarChar, 10);
	                    cmd.Parameters.Add("@소아적용", SqlDbType.Char, 1);
	                    cmd.Parameters.Add("@커미션", SqlDbType.Int, 0);
	                    cmd.Parameters.Add("@투어코드", SqlDbType.VarChar, 30);
                        cmd.Parameters.Add("@OJT적용", SqlDbType.Char, 1);
                        cmd.Parameters.Add("@결과", SqlDbType.Char, 1);
	                    cmd.Parameters.Add("@에러메시지", SqlDbType.NVarChar, 1000);

                        cmd.Parameters["@사이트번호"].Value = SNM;
                        cmd.Parameters["@항공사"].Value = SAC;
                        cmd.Parameters["@출발지"].Value = DLC;
                        cmd.Parameters["@목적지"].Value = ALC;
                        cmd.Parameters["@여정"].Value = RoutingCity;
                        cmd.Parameters["@운항항공사"].Value = RoutingOA;
                        cmd.Parameters["@마케팅항공사"].Value = RoutingMA;
                        cmd.Parameters["@부킹클래스"].Value = RoutingCls;
                        cmd.Parameters["@출발일"].Value = DTD;
                        cmd.Parameters["@소아적용"].Direction = ParameterDirection.Output;
                        cmd.Parameters["@커미션"].Direction = ParameterDirection.Output;
                        cmd.Parameters["@투어코드"].Direction = ParameterDirection.Output;
                        cmd.Parameters["@OJT적용"].Direction = ParameterDirection.Output;
                        cmd.Parameters["@결과"].Direction = ParameterDirection.Output;
                        cmd.Parameters["@에러메시지"].Direction = ParameterDirection.Output;

                        try
                        {
                            conn.Open();
                            cmd.ExecuteNonQuery();

                            CommissionInfo[0] = cmd.Parameters["@결과"].Value.ToString();

                            if (CommissionInfo[0].Equals("S"))
                            {
                                if (OJT && cmd.Parameters["@OJT적용"].Value.ToString() != "Y")
                                {
                                    CommissionInfo[0] = "F";
                                    CommissionInfo[1] = "OJT 적용 가능한 커미션 정보가 없습니다.";
                                }
                                else
                                {
                                    CommissionInfo[1] = cmd.Parameters["@커미션"].Value.ToString();
                                    CommissionInfo[2] = cmd.Parameters["@소아적용"].Value.ToString();
                                    CommissionInfo[3] = cmd.Parameters["@투어코드"].Value.ToString();
                                    CommissionInfo[4] = cmd.Parameters["@OJT적용"].Value.ToString();
                                }
                            }
                            else
                                CommissionInfo[1] = cmd.Parameters["@에러메시지"].Value.ToString();
                        }
                        catch (Exception ex)
                        {
                            new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0);
                            CommissionInfo[0] = "F";
                            CommissionInfo[1] = ex.ToString();
                        }
                        finally
                        {
                            conn.Close();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                new MWSException(ex, hcc, mc.Name, MethodBase.GetCurrentMethod().Name, 0, 0);
                CommissionInfo[0] = "F";
                CommissionInfo[1] = ex.ToString();
            }

            return CommissionInfo;
        }

        /// <summary>
        /// 항공예약상태 수정
        /// </summary>
        /// <param name="OID">모두투어 주문번호</param>
        /// <param name="STA">예약상태 코드</param>
        /// <returns></returns>
        public void BookingStatusDB(int OID, string STA)
        {
            using (SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["MODEWARE"].ConnectionString))
            {
                using (SqlCommand cmd = new SqlCommand
                {
                    Connection = conn,
                    CommandType = CommandType.StoredProcedure,
                    CommandText = "DBO.WSV_T_아이템예약_해외항공_상태수정"
                })
                {
                    cmd.Parameters.Add("@예약상태", SqlDbType.Char, 2);
                    cmd.Parameters.Add("@주문번호", SqlDbType.Int, 0);

                    cmd.Parameters["@예약상태"].Value = STA;
                    cmd.Parameters["@주문번호"].Value = OID;

                    try
                    {
                        conn.Open();
                        cmd.ExecuteNonQuery();
                    }
                    finally
                    {
                        conn.Close();
                    }
                }
            }
        }

		/// <summary>
		/// 출력용 TL
		/// </summary>
		/// <param name="SNM">웹사이트 번호</param>
        /// <param name="TL">항공사 TL</param>
        /// <param name="AirCode">항공사코드</param>
		/// <returns></returns>
        public string TTL(int SNM, string TL, string AirCode)
		{
			//항공사 실제 TL이 모두투어 TL보다 빠른 경우 항공사 TL 출력
			//항공사 TL을 알 수 없는 경우 모두투어 TL 출력

            DateTime ModeTL = cm.ModeTL(SNM, AirCode);

			if (!String.IsNullOrEmpty(TL))
			{
                TL = (TL.Length.Equals(10)) ? cm.RequestDateTime(String.Concat(TL, cm.TLBasicTime(SNM, AirCode, TL)), "yyyy-MM-dd HH:mm") : cm.RequestDateTime(TL, "yyyy-MM-dd HH:mm");

				if (cm.IsDateTime(TL))
				{
					DateTime TmpTL = Convert.ToDateTime(TL);

					if (cm.DateDiff("d", TmpTL, ModeTL) > 0)
						ModeTL = TmpTL;
				}
			}

			return ModeTL.ToString("yyyy-MM-dd HH:mm");
		}

        /// <summary>
        /// 여정 상태코드
        /// </summary>
        /// <param name="ItineraryInfo">여정 XML</param>
        /// <param name="xnMgr">네임스페이스</param>
        /// <returns></returns>
        public string ItineraryStatus(XmlNode ItineraryInfo, XmlNamespaceManager xnMgr)
        {
            string RSC = "";
            
            try
            {
                if (ItineraryInfo.SelectNodes("m:relatedProduct", xnMgr).Count > 0 && ItineraryInfo.SelectNodes("m:relatedProduct/m:status", xnMgr).Count > 0)
                {
                    if (ItineraryInfo.SelectNodes("m:itineraryReservationInfo", xnMgr).Count > 0 && !String.IsNullOrWhiteSpace(ItineraryInfo.SelectSingleNode("m:itineraryReservationInfo/m:reservation/m:controlNumber", xnMgr).InnerText))
                        RSC = ItineraryInfo.SelectSingleNode("m:relatedProduct/m:status", xnMgr).InnerText;
                    else
                        RSC = "HL";
                }
                else
                {
                    RSC = ItineraryInfo.SelectSingleNode("m:travelProduct/m:productDetails/m:identification", xnMgr).InnerText.Equals("OPEN") ? "QQ" : "HL";
                }
            }
            catch (Exception)
            {
                RSC = "";
            }

            return RSC;
        }

		/// <summary>
		/// 통합 상태코드
		/// </summary>
		/// <param name="FlightInfo">여정 XML</param>
		/// <returns></returns>
		public string BookingStatus(XmlNode FlightInfo)
		{
			string STA = "HL";
			int HK = 0;
			int HL = 0;
			int TK = 0;
			int UC = 0;
			int XX = 0;

			try
			{
                if (FlightInfo != null && FlightInfo.HasChildNodes)
                {
                    if (FlightInfo.SelectNodes("*/seg[@rsc!='QQ']").Count > 0)
                    {
                        foreach (XmlNode Seg in FlightInfo.SelectNodes("*/seg[@rsc!='QQ']"))
                        {
                            switch (Seg.Attributes.GetNamedItem("rsc").InnerText)
                            {
                                case "HK": HK++; break;
                                case "HL": HL++; break;
                                case "TK": TK++; break;
                                case "UC": UC++; break;
                                case "XX": XX++; break;
                                default: HL++; break;
                            }
                        }

                        if (UC > 0)
                            STA = "UC";
                        else if (TK > 0)
                            STA = "TK";
                        else if (HK > 0 && HL.Equals(0) && XX.Equals(0))
                            STA = "HK";
                        else if (XX > 0 && HK.Equals(0) && HL.Equals(0))
                            STA = "XX";
                        else
                            STA = "HL";
                    }
                    else
                    {
                        //여정이 없을 경우에는 취소로 처리
                        STA = "XX";
                    }
                }
                else
                {
                    //여정이 없을 경우에는 취소로 처리
                    STA = "XX";
                }
			}
			catch (Exception)
			{
				STA = "HL";
			}
			
			return STA;
		}

		/// <summary>
		/// 실행시간 체크
		/// </summary>
		/// <param name="RunTimeNode">XMLNode</param>
		/// <param name="sw">Stopwatch</param>
		/// <param name="ServiceName">서비스명</param>
		protected void CheckRunTimeEnd(XmlNode RunTimeNode, Stopwatch sw, string ServiceName)
		{
			sw.Stop();
			
			XmlNode NewRunTimeService = RunTimeNode.AppendChild(RunTimeService.CloneNode(true));

			NewRunTimeService.Attributes.GetNamedItem("name").InnerText = ServiceName;
			NewRunTimeService.Attributes.GetNamedItem("time").InnerText = String.Format("{0:#00}.{1:00}", sw.Elapsed.TotalSeconds, (sw.Elapsed.Milliseconds / 10));
		}

		#endregion "함수"

		#region "메서드 설명"

		/// <summary>
		/// WebMethod의 입력 파라미터 및 출력값에 대한 설명
		/// </summary>
		/// <param name="WebMethodName">웹메서드명</param>
		/// <returns></returns>
		[WebMethod(Description = "WebMethod의 입력 파라미터 및 출력값에 대한 설명")]
		public XmlElement Help(string WebMethodName)
		{
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 15;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = WebMethodName;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }
            
            try
			{
				WebMethodName = WebMethodName.Trim();

                switch (WebMethodName)
                {
                    case "TicketIssuingSemiAutoStringRS":
                    case "TicketIssuingSemiAutoCombineStringRS":
                    case "TicketIssuingSemiAutoCombineRS": WebMethodName = "TicketIssuingSemiAutoRS"; break;
                }
			
				XmlDocument XmlHelp = new XmlDocument();

				if (cm.FileExists(mc.HelpXmlFullPath(WebMethodName)))
					XmlHelp.Load(mc.HelpXmlFullPath(WebMethodName));
				else
					XmlHelp.LoadXml(String.Format("<HelpXml><Errors><WebMethodName>{0}</WebMethodName><Error><![CDATA[요청하신 웹메서드에 대한 설명은 제공되지 않습니다.]]></Error></Errors></HelpXml>", WebMethodName));

				return XmlHelp.DocumentElement;
			}
			catch (Exception ex)
			{
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 15, 0, 0).ToErrors;
			}
		}

		/// <summary>
		/// WebMethod의 Request 또는 Resonse XML에 대한 설명
		/// </summary>
		/// <param name="WebMethodName">웹메서드명</param>
		/// <param name="Gubun">구분(RQ:Request XML, RS:Response XML)</param>
		/// <returns></returns>
		[WebMethod(Description = "WebMethod의 Request 또는 Resonse XML에 대한 설명")]
		public XmlElement HelpXml(string WebMethodName, string Gubun)
		{
            string LogGUID = cm.GetGUID;

            //파라미터 로그 기록
            try
            {
                SqlParameter[] sqlParam = new SqlParameter[] {
                        new SqlParameter("@서비스번호", SqlDbType.Int, 0),
                        new SqlParameter("@사이트번호", SqlDbType.Int, 0),
                        new SqlParameter("@요청단말기", SqlDbType.VarChar, 30),
                        new SqlParameter("@서버명", SqlDbType.VarChar, 20),
                        new SqlParameter("@메서드", SqlDbType.VarChar, 10),
                        new SqlParameter("@사용자IP", SqlDbType.VarChar, 30),
                        new SqlParameter("@GUID", SqlDbType.VarChar, 50),
                        new SqlParameter("@요청1", SqlDbType.VarChar, 3000),
                        new SqlParameter("@요청2", SqlDbType.VarChar, 3000)
                    };

                sqlParam[0].Value = 16;
                sqlParam[1].Value = 0;
                sqlParam[2].Value = "";
                sqlParam[3].Value = Environment.MachineName;
                sqlParam[4].Value = hcc.Request.HttpMethod;
                sqlParam[5].Value = hcc.Request.UserHostAddress;
                sqlParam[6].Value = LogGUID;
                sqlParam[7].Value = WebMethodName;
                sqlParam[8].Value = Gubun;

                log.LogDBSave(sqlParam);
            }
            catch (Exception) { }
            finally { }

            try
			{
				Gubun = Gubun.Trim().ToUpper();
				WebMethodName = WebMethodName.Trim();

                switch (WebMethodName)
                {
                    case "SearchFareInfoRS": WebMethodName = "SearchBookingPriceRS"; break;
                    case "SearchBookingRS":
                    case "SearchBooking2RS": WebMethodName = "SearchBookingRS"; break;
                    case "TicketIssuingSemiAutoStringRS":
                    case "TicketIssuingSemiAutoCombineStringRS":
                    case "TicketIssuingSemiAutoCombineRS": WebMethodName = "TicketIssuingSemiAutoRS"; break;
                }

				XmlDocument XmlHelp = new XmlDocument();
				string HelpXmlFileName = string.Empty;

				if (String.IsNullOrEmpty(Gubun))
					HelpXmlFileName = WebMethodName;
				else
				{
					if (cm.Right(WebMethodName, 2).Equals("RQ") || cm.Right(WebMethodName, 2).Equals("RS"))
						HelpXmlFileName = String.Format("{0}{1}", WebMethodName.Substring(0, WebMethodName.Length - 2), Gubun.ToUpper());
				}

				if (cm.FileExists(mc.RqRsXmlFullPath(HelpXmlFileName)))
					XmlHelp.Load(mc.RqRsXmlFullPath(HelpXmlFileName));
				else
					XmlHelp.LoadXml(String.Format("<HelpXml><Errors><WebMethodName>{0}</WebMethodName><Gubun>{1}</Gubun><Error><![CDATA[요청하신 XML 파일은 제공되지 않습니다.]]></Error></Errors></HelpXml>", WebMethodName, Gubun));

				return XmlHelp.DocumentElement;
			}
			catch (Exception ex)
			{
                return new MWSExceptionMode(ex, hcc, LogGUID, "AirService", MethodBase.GetCurrentMethod().Name, 16, 0, 0).ToErrors;
			}
		}

		#endregion "메서드 설명"
    }
}