//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//     런타임 버전:4.0.30319.42000
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 이 소스 코드가 Microsoft.VSDesigner, 버전 4.0.30319.42000에서 자동으로 생성되었습니다.
// 
#pragma warning disable 1591

namespace AirWebService.ModeWebService.MailService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MailServiceSoap", Namespace="http://mailservice.modetour.com/")]
    public partial class MailService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback EMailSendOnly1OperationCompleted;
        
        private System.Threading.SendOrPostCallback EMailSendOnly2OperationCompleted;
        
        private System.Threading.SendOrPostCallback EMailSendOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MailService() {
            this.Url = global::AirWebService.Properties.Settings.Default.AirWebService_com_modetour_mailservice_MailService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event EMailSendOnly1CompletedEventHandler EMailSendOnly1Completed;
        
        /// <remarks/>
        public event EMailSendOnly2CompletedEventHandler EMailSendOnly2Completed;
        
        /// <remarks/>
        public event EMailSendCompletedEventHandler EMailSendCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mailservice.modetour.com/EMailSendOnly1", RequestNamespace="http://mailservice.modetour.com/", ResponseNamespace="http://mailservice.modetour.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlElement EMailSendOnly1(string MIC, string CPN, string ToAddr, string ToName, string Subject, string BodyText, string BodyHtml, string BodyUrl) {
            object[] results = this.Invoke("EMailSendOnly1", new object[] {
                        MIC,
                        CPN,
                        ToAddr,
                        ToName,
                        Subject,
                        BodyText,
                        BodyHtml,
                        BodyUrl});
            return ((System.Xml.XmlElement)(results[0]));
        }
        
        /// <remarks/>
        public void EMailSendOnly1Async(string MIC, string CPN, string ToAddr, string ToName, string Subject, string BodyText, string BodyHtml, string BodyUrl) {
            this.EMailSendOnly1Async(MIC, CPN, ToAddr, ToName, Subject, BodyText, BodyHtml, BodyUrl, null);
        }
        
        /// <remarks/>
        public void EMailSendOnly1Async(string MIC, string CPN, string ToAddr, string ToName, string Subject, string BodyText, string BodyHtml, string BodyUrl, object userState) {
            if ((this.EMailSendOnly1OperationCompleted == null)) {
                this.EMailSendOnly1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnEMailSendOnly1OperationCompleted);
            }
            this.InvokeAsync("EMailSendOnly1", new object[] {
                        MIC,
                        CPN,
                        ToAddr,
                        ToName,
                        Subject,
                        BodyText,
                        BodyHtml,
                        BodyUrl}, this.EMailSendOnly1OperationCompleted, userState);
        }
        
        private void OnEMailSendOnly1OperationCompleted(object arg) {
            if ((this.EMailSendOnly1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EMailSendOnly1Completed(this, new EMailSendOnly1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mailservice.modetour.com/EMailSendOnly2", RequestNamespace="http://mailservice.modetour.com/", ResponseNamespace="http://mailservice.modetour.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlElement EMailSendOnly2(string MIC, string CPN, System.Xml.XmlElement ToInfo, string Subject, string BodyText, string BodyHtml, string BodyUrl) {
            object[] results = this.Invoke("EMailSendOnly2", new object[] {
                        MIC,
                        CPN,
                        ToInfo,
                        Subject,
                        BodyText,
                        BodyHtml,
                        BodyUrl});
            return ((System.Xml.XmlElement)(results[0]));
        }
        
        /// <remarks/>
        public void EMailSendOnly2Async(string MIC, string CPN, System.Xml.XmlElement ToInfo, string Subject, string BodyText, string BodyHtml, string BodyUrl) {
            this.EMailSendOnly2Async(MIC, CPN, ToInfo, Subject, BodyText, BodyHtml, BodyUrl, null);
        }
        
        /// <remarks/>
        public void EMailSendOnly2Async(string MIC, string CPN, System.Xml.XmlElement ToInfo, string Subject, string BodyText, string BodyHtml, string BodyUrl, object userState) {
            if ((this.EMailSendOnly2OperationCompleted == null)) {
                this.EMailSendOnly2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnEMailSendOnly2OperationCompleted);
            }
            this.InvokeAsync("EMailSendOnly2", new object[] {
                        MIC,
                        CPN,
                        ToInfo,
                        Subject,
                        BodyText,
                        BodyHtml,
                        BodyUrl}, this.EMailSendOnly2OperationCompleted, userState);
        }
        
        private void OnEMailSendOnly2OperationCompleted(object arg) {
            if ((this.EMailSendOnly2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EMailSendOnly2Completed(this, new EMailSendOnly2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://mailservice.modetour.com/EMailSend", RequestNamespace="http://mailservice.modetour.com/", ResponseNamespace="http://mailservice.modetour.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlElement EMailSend(string MIC, string CPN, string FromAddr, string FromName, string ToAddr, string ToName, string Subject, string BodyText, string BodyHtml, string BodyUrl) {
            object[] results = this.Invoke("EMailSend", new object[] {
                        MIC,
                        CPN,
                        FromAddr,
                        FromName,
                        ToAddr,
                        ToName,
                        Subject,
                        BodyText,
                        BodyHtml,
                        BodyUrl});
            return ((System.Xml.XmlElement)(results[0]));
        }
        
        /// <remarks/>
        public void EMailSendAsync(string MIC, string CPN, string FromAddr, string FromName, string ToAddr, string ToName, string Subject, string BodyText, string BodyHtml, string BodyUrl) {
            this.EMailSendAsync(MIC, CPN, FromAddr, FromName, ToAddr, ToName, Subject, BodyText, BodyHtml, BodyUrl, null);
        }
        
        /// <remarks/>
        public void EMailSendAsync(string MIC, string CPN, string FromAddr, string FromName, string ToAddr, string ToName, string Subject, string BodyText, string BodyHtml, string BodyUrl, object userState) {
            if ((this.EMailSendOperationCompleted == null)) {
                this.EMailSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEMailSendOperationCompleted);
            }
            this.InvokeAsync("EMailSend", new object[] {
                        MIC,
                        CPN,
                        FromAddr,
                        FromName,
                        ToAddr,
                        ToName,
                        Subject,
                        BodyText,
                        BodyHtml,
                        BodyUrl}, this.EMailSendOperationCompleted, userState);
        }
        
        private void OnEMailSendOperationCompleted(object arg) {
            if ((this.EMailSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EMailSendCompleted(this, new EMailSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void EMailSendOnly1CompletedEventHandler(object sender, EMailSendOnly1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EMailSendOnly1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EMailSendOnly1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlElement Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlElement)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void EMailSendOnly2CompletedEventHandler(object sender, EMailSendOnly2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EMailSendOnly2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EMailSendOnly2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlElement Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlElement)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    public delegate void EMailSendCompletedEventHandler(object sender, EMailSendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1087.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EMailSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EMailSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlElement Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlElement)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591